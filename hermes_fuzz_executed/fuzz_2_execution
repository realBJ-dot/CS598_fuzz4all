'use strict';

function test() {
    function sum(a, b) {
        return a + b;
    }
    class MyClass {
        constructor() {
            console.log("constructor");
            super(5);
        }
        static sum(a, b) {
            return a + b;
        }
    }
    const a = MyClass.sum(2, 3);
    const callResult = sum(2, 3);
    Promise.resolve().then(function () {
        MyClass.sum(2, 3).then((a) => { console.log("method", a); });
    });
    console.log("Main module", a, callResult, sum(2, 3));
    console.log("Object.keys in class", Object.keys(MyClass));
}
test();
(function (exports) {
    'use strict';
    var _extends = Object.assign || function (target) {
        for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                    target[key] = source[key];
                }
            }
        }
        return target;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var promise1 = require("./utils/promise");
    var utils1 = require("./utils/utils");
    var class1 = require("./class");
     
     
    function promiseWithPromise() {
        promises.push(new promise1.Promise(fulfilled));
        return new promise1.Promise(pending);
    }
    exports.promiseWithPromise = promiseWithPromise;
    var Promise = promise1.Promise;
     
    exports.PromiseObject = Promise.extend({
        constructor: function (callback) {
            constructor.apply(this, arguments);
        }
    });
    function constructor() {
        var self = this;
        var index = -1;
        function fulfilled(value) {
            self[index] = value;
            index++;
            if (index < promises.length) {
                var promise = promises[index];
                promise.resolve(promise.promise);
            }
        }
        function pending(reason) {
            self[index] = reason;
            index++;
            if (index < promises.length) {
                var promise = promises[index];
                promise.reject(promise.promise);
            }
        }
        return new Promise(pending);
    }
    var promises = [];
     
    function addPolyfill() {
        Promise.prototype.finally = function () {
            for (var _i = 0; _i < arguments.length; _i++) {
                var value = arguments[_i];
                this.then(_bind(function (p) {

Execution Output ------------------:
test.js:83:47: error: '}' expected at end of block
                this.then(_bind(function (p) {
                                             ~^
