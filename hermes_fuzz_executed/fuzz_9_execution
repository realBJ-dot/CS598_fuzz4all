'use strict';

class MyClass {
  testMethod() {
    return 'testMethod()';
  }
  
   
  constructor() {
     
    this.constructor = testConstructors;  
  }
  
  testConstructors() {  
    if(this.constructor === testConstructors) {
      return 'testConstructors()';
    }
    return 'constructor';
  }
}
 
var testConstructors = function MyClassConstructor() {
  if(this.constructor === testConstructors) {
    return 'testConstructors()';
  }
  throw new Error('this.constructor === MyClassConstructor()');
}
function testCode() {
  var c1 = new testConstructors();  
  var f = new MyClass();  
  console.log(c1.testConstructors());  
  console.log(f.testConstructors());  
  if(f.constructor === testConstructors && c1.constructor === testConstructors) {
    return 'tests pass on basic constructors';  
  }
  return 'tests fail on basic constructors';
}
console.log(testCode());
```

# Documentation / Reference

[Hermes Documentation & Reference] (https: 

[Hermes Demo](https: 

[Hermes Features Spec] (https: 

[Hermes React Native](https: 


# License

MIT


Execution Output ------------------:
test.js:55:1: error: non-terminated template literal

^
test.js:39:3: note: template literal started here
```
  ^
test.js:55:1: error: invalid expression

^
