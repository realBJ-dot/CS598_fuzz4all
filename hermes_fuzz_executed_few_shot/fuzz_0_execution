'use strict';


let a, b = '1', c = '2';
b += 2;
c++;
var fn = x => x;
fn(fn);
fn(() => fn(fn));
const obj = {
  constructor: 'Object'
};
const name = new String('value');
var value = {
  toString: () =>'string',
  valueOf: () => 42,
  slice: () =>'string',
  concat: () =>'string',
  trim: () =>'string' 
};
const array = [1];
const other = {};
var instanceof = Object.prototype.toString;
var arraylength = 0;
var arraylength2 = 0;
 
arraylength = 0;
array.toString();
array.concat();
array.hasOwnProperty('slice');
array.hasOwnProperty('hasOwnProperty');
array.hasOwnProperty();
 
var prop = Object.getOwnPropertyNames(array)[0];
var prop2 = array.constructor.x = {};
 
array.shift();
array.push();
 
var iterator = array[Symbol.iterator]();
for(let index = 0; index < arraylength; index = index + 1) {
  iterator.next(); 
}

 
 
 
'use strict';

class Promise
{
  constructor() {}
  static get resolver () {}
}
'use strict';

const isFunction = x => typeof x === 'function';
const isString = x => typeof x ==='string';
const isArray = x => isFunction(x) && x.toString() === '[object Array]';
const isArrayLike = x if isArray: x else false;
const isSymbol = x => (typeof x ==='symbol') || (typeof x === 'function') && typeof x.description ==='string'
const isPromise = x => (typeof x === 'function') && isFunction(x.then)
const isNativePromise = x => is

Execution Output ------------------:
test.js:23:5: error: 'identifier' expected in declaration
var instanceof = Object.prototype.toString;
~~~~^
