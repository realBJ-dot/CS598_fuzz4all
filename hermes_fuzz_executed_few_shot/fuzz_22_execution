'use strict';


 

 

 

 
'use strict'

class A {
    constructor(a) {
        if (new.target!= A) {
            throw new TypeError('A\'s constructor may only be called with `new`.');
        }
        this.a = a;
    }
}

new A();

new class A {
    constructor() {
        throw new Error('Should throw');
    }
}();

new this.class();

var instance = new this.class();
instance instanceof this.class;
instance instanceof A;

instance instanceof () => {
    class Instance {
        constructor() {}
    }

    return Instance;
}();

new this.class() instanceof (() => {
    class Instance {
        constructor() {}
    }

    return Instance;
}());


Execution Output ------------------:
test.js:36:1: error: invalid arrow function parameter list
instance instanceof () => {
^~~~~~~~~~~~~~~~~~~~~~
