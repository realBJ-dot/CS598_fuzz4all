'use strict';


function callMe() { console.log('Hello from ES6 and Hermes') }
function callMeWithES6Params($) { console.log(arguments) }

 
(function(globalScope){
	function test1($){ console.log(6)}

	class MyError extends TypeError {
		constructor(){
			super('test')
			Error.captureStackTrace(this, MyError);
		}
	}
	const MyErrorClass = new MyError()

	function test2(){
		throw new MyErrorClass()
	}

	function test3(){
		let boo2 = () => {
			let s1, s2, s3;
			throw new MyErrorClass()
			s1 = '1';
			s2 = '2';
			s3 = '3';
		}
	}
	test3()
	function test4(){
		let boo2 = () => {
			let s1, s2, s3;

			s1 = '1';
			let s2 = '2';
			s3 = '3';

			catch (e) {return true}
			return false;
		}
	}
	test4()
})(global)

function test5(){
	let $ = new SyntaxError();
	$.lastIndex = 3;
	console.log($.lastIndex)
}
print('done')

Execution Output ------------------:
test.js:41:4: error: invalid expression
                        catch (e) {return true}
                        ^
