'use strict';
let bar2 = 'foo';
foo2;
foo2 = bar2;
foo2;
 
 
'use strict';
var Promise = require('babel-runtime/core-js/promise');
let bar2 = 'foo';
foo2;
foo2 = bar2;
foo2;
var MyClass = (function() {
    function MyClass() {}
    return MyClass;
}());
var foo1 = {
    method1: function() {
        if (foo2 === 'bar2') {
            return new Promise(function(resolve, reject) {
                reject('Test is failed');
            });
        }
    },
    method2: function() {
        if (foo2 === 'bar2') {
            bar2 = 'change';
        }
    }
};
var classInstance = new MyClass();
foo1.method1().then(function() { var _foo1$method2; }).then(function() { var _foo1$method1; });
foo1.method2();
foo1.method1 && foo1.method1();
foo1.method2 && foo1.method2();
foo1.method1 && Promise.resolve(foo1.method1());
classInstance.method2();
foo3;
var MyClass = (function() {
    function MyClass() {}
    MyClass.prototype.method1 = function() {
        return new Promise(function(resolve, reject) {
            reject('Test is failed');
        });
    };
    MyClass.prototype.method2 = function() {
        this.bar2 = 'change';
    };
    return MyClass;
}());
var classInstance = new MyClass();
foo1.method1() && Promise.resolve(foo1.method1()).then(function() {});
foo1.method2() && Promise.resolve(foo1.method2()).then(function() { }).catch(function(err) { return console.log(err.message); });
foo1.method1 && Promise.resolve(foo1.method1()).then(function() {}).catch(function(); )
foo1.method2 && Promise.resolve(foo1.method2()).then(function() { }).catch(function(err, message) { return console.log(err.message +'' + message); });
classInstance.method2() && Promise.resolve(class

Execution Output ------------------:
test.js:55:85: error: '{' expected in function expression
foo1.method1 && Promise.resolve(foo1.method1()).then(function() {}).catch(function(); )
                                                                          ~~~~~~~~~~^
