'use strict';



const {
	JSCompiler: {createVM, JSModuleLoaderContext},
	Executor,
	HermesRuntime
} = require('react-native-hermes-engine');
const fs = require('fs');
const {
	parse,
	generate: serialize
} = require('react-native-hermes-compiler');
const {
	generate,
	deserialize,
	serialize as deserialization
} = require('react-native-hermes-parser');
const {
	generate as generateHermesAST
} = require('hermes-ast');
const {
	generate as generateJSParserAST
} = require('react-native-hermes-parser/ast');
const {
	transform
} = require('react-native-hermes-transform');
const assert = require('assert');
const os = require('os');
const getConsolePath = require('react-native-fs').existsAsync(os.platform() === 'darwin'? '/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/lib/libjsiConsole.dylib' : '/Users/hannal/homebrew/Cellar/node/10.15.1/lib/node_modules/react-native/scripts/node-helper.js');
fs.stat(os.platform() === 'darwin'? '/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/lib/libjsiConsole.dylib' : '/Users/hannal/homebrew/Cellar/node/10.15.1/lib/node_modules/react-native/scripts/node-helper.js', (err) => {
	if (err && err.code === 'ENOENT') {
		console.error('\nPlease install the JavaScript debugger by:\n', os.platform === 'darwin'? 'brew install webstorm@latest' : 'npm install --global node-inspector@latest')
		process.exit(1);
	}
	console.error();
});

const getConsole = async () => {
	const consolePath = await getConsolePath();
	return eval(await fs.readFileAsync(consolePath, 'UTF-8'));
};

const createJSCompiler = async (config) => {
	const {
		compilerOptions: compilerOptions,
		inputFile,
		target,
		platform,
		modulePath,
		transformOptions
	} = config;
	const {compilerHost} = await createVM(inputFile);
	compilerHost.createConsole = getConsole;
	compilerHost.fileSystem = {
		readFile: (filePath, encoding) => fs.readFile(modulePath + '/' + filePath, encoding),
		writeFile: async (filePath, text, encoding) => fs.writeFile(modulePath + '/' + filePath, text, 'utf8'),
		stat: async (filePath)

Execution Output ------------------:
test.js:18:12: error: '}' expected at end of object binding pattern '{...'
        serialize as deserialization
                  ^
test.js:15:7: note: location of '{'
const {
      ^
