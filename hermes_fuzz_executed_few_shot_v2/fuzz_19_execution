'use strict';

 
'use strict';
class X extends Promise {
    constructor(value) {
        super();
        this.setValue(value);
        this.status = 'fulfilled';
    }
    set value(value) {
        this._value = value;
    }
    get value() {
        if (this.status === 'fulfilled') {
            return this.value;
        }
    }
    setValue(value) {
        if (!this.status && value instanceof X) return this.status = 'pending';
        if (value && (typeof value === 'function' || typeof value === 'object' && typeof value.then === 'function')) {
            value.then((res) => this.setValue(res), () => this.setValue(value));
        }
        else {
            this.value = value;
            this.status = 'fulfilled';
        }
        return Promise.resolve();  
    }
    static resolve(value) {
        return Promise.resolve(value);
    }
    static reject(value) {
        return Promise.reject(value);
    }
    resolve(value) {
        return X.resolve(value);
    }
    reject(value) {
        return X.reject(value);
    }
}
<fim_middle>
}
const x = Promise.resolve('hermes promise ok');
x.then((res) => console.log(res));  
 
let value = 3;
value = 4;  
 
 
const _default = require('babel-runtime/core-js/function/bind');
require('babel-runtime/core-js/promise/set-immediate');
 
 
const m = require('./es6-module-syntax.module');
const X = (function () {
     
     
    'use strict';
    let x = 'default';
    _default = _default(_default);  
    return function () {};
})();
 
X.apply(X, []);  
 

Execution Output ------------------:
test.js:43:1: error: invalid expression (possible JSX: pass -parse-jsx to parse)
<fim_middle>
^
