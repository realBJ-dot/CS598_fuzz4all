'use strict';
const myFunction = {
  [Symbol.species]: 'function() : Promise<void>'
    '{\n'
    'let p = Promise.resolve();\n'
    '(() => {\n'
    'p.then(() => {\n'
    'console.log("Resolved ");\n'
    '}, (error) => {\n'
    'console.log("Reject " + error);\n'
    '}).then(() => {\n'
    'let p2 = Promise.resolve("Done");\n'
    'p2.then ((result) => {\n'
    'console.log("Done " + result);\n'
    '}).catch ((error) => {\n'
    'console.log("Reject " + error);\n'
    '});\n'
    '}).catch ((error) => {\n'
    'console.log("Reject " + error);\n'
    '});\n'
    '});\n'
    '});\n'
    '};\n',
  foo2: 'function() : Promise<void>'
    '{\n'
    'let p = Promise.resolve();\n'
    '(() => {\n'
    'p.then(() => {\n'
    'console.log("Resolved ");\n'
    '}, (error) => {\n'
    'console.log("Reject " + error);\n'
    '}).then(() => {\n'
    'let p2 = Promise.resolve("Done");\n'
    'p2.then ((result) => {\n'
    'console.log("Done " + result);\n'
    '}).catch ((error) => {\n'
    'console.log("Reject " + error);\n'
    '});\n'
    '}).catch ((error) => {\n'
    'console.log("Reject " + error);\n'
    '});\n'
    '});\n'
    '});\n';
}

const p = myFunction[Symbol.species]();

console.log("MyFunction");
console.log(p.then);
console.log(myFunction[Symbol.species].toString());
console.log(myFunction[Symbol.species]().then);
console.log(myFunction.foo2.toString());
console.log(myFunction.foo2().then);


Execution Output ------------------:
test.js:4:5: error: '}' expected at end of object literal '{...'
    '{
'
    ^
test.js:2:20: note: location of '{'
const myFunction = {
                   ^
