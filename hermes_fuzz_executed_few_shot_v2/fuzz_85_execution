'use strict';
var _a, _b, _c;
f(1, ((_a = (_b = (_c = [], _c[Symbol.iterator] = function () { return ({
            next: function next() { return ({ value: 1, done: false }); }
        });
    return (_b = (_a = Object()).entries).call.bind.apply.call(_a, [_b].concat(["0"])));
})(), _b).done()).next()).value, (_d = 0), (_e = function () {
    var d = (_d = d + 200).toString(), e = 0;
    try {
        return (_f = (_b = (_c = [], _c[Symbol.iterator] = function () { return ({
            next: function next() { return ({ value: 2, done: false }); }
        });
    }
    catch (_a) {
        try {
            throw (_f = (_e.apply(this, [_b].concat(["_" + (++_d)]))).value).toString();
        }
        finally {
            e = +(_f.name);
        }
    }
    return (_b = (_a = Object()).entries).call.bind.apply.call(_a, [_b].concat(["1"])));
})(), _b).next()).value, (_e = e + c).toString());
}
f(1, ((_b = (_c = [], _c[Symbol.iterator] = function () { return ({
    next: function next() { return ({ value: 1, done: false }); }
});
return (_b = (_a = Object()).entries).call.bind.apply.call(_a, [_b].concat(["0"])));
})(), _b).done()).next()).value, (_d = 0), (_e = function () {
    var _g;
    try {
        if ((_g = (_b = (_c = [], _c[Symbol.iterator] = function () { return ({
            next: function next() { return ({ value: 2, done: false }); }
        });
    }
    catch (_a) {
        return (_f = (_g = 21 + c).toString()).toString();
    }
    return (_b = (_a = Object()).entries).call.bind.apply(_a, [_b].concat(["2"])));
})(), _b).next()).value, (_e = _g.toString());
    }
    catch (_a) {
        if (_a; return (_e = (_b = (_c = [], _c[Symbol.iterator] = function () { return ({
            next: function next() {

Execution Output ------------------:
test.js:6:87: error: ';' expected
    return (_b = (_a = Object()).entries).call.bind.apply.call(_a, [_b].concat(["0"])));
                                                                                      ^
