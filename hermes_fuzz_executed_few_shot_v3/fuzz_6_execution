'use strict';


function get(a, b) {
	return `${a}:${b}`;
}

let obj1 = {prop: "value"};
let obj2 = [];
let obj3 = {
	prop1: "value1", 
	prop2: 2
};
let obj4 = [...obj1];
let obj5 = {...obj3};
let obj6 = {prop3: 3};
let obj7 = {
	prop4: function() {
		return a + b;
	},
	obj5
};

let obj8 = {prop: 123};
let obj9 = {prop: 'abc'};
let obj10 = {prop: null};
let obj11 = {prop: true};
let obj12 = {prop: false};
let obj13 = {prop: NaN};
let obj14 = {prop: 'true'};
let obj15 = {prop: 'false'};
let obj16 = {prop: '0'};
let obj17 = {prop: '1'};
let obj18 = {prop: 'abc' + 'efg'};
let obj19 = {prop: 67e-5};
let obj20 = {prop: undefined};
let obj21 = {prop:'some string'};
let obj22 = { prop: 27n };
let obj23 = { prop: /abc/u };
let obj24 = { prop: Symbol('abc') };

let _obj1 = /abc/y;
let _obj2 = /a/x;
let _obj3 = /./s;
let _obj4 = /a/g;

let p1 = '/abc/x';
let p2 = /ab/y;
let p3 = /abc/m;
let p4 = /bcd/ygi;
let p5 = /ab/gi;
let p6 = /ab*a/;
let p7 = /ab/y/u;
let p8 = /ab+/gmiy;
let p9 = /ab*ab+/gmiy;
let p10 = 'abc' + 'def';
let p11 = 'abc' + 'efg';
let p12 = 'abc' +'s';
let p13 = 'abc' +'s';
let p14 = 'abc' + 'efg' + 'def';
let p15 = 'abc' + 'efg' +'s';
let p16 = 'abc' + 'def' +'s';
let p17 = parseInt('abc', 10);
let p18 = parseFloat('abc', 10);
let p19 = parseInt('abc', 10);
let p20 = parseFloat('abc', 10);
let p21 = -0;
let p22 = +'abc';
let p23 = parseInt('abc', 10);
let p24 = -1;
let p25 = +'abc';
let p26 = -1;
let p27 = +'abc';

function add(a, b) {
	return a+b;
}

function sub(a, b) {
	return a-b;
}
let m1 = Map([['a', 1], ['b', 2]]);
let m2 = Map([['a', 1], ['b', 2]].reverse());
let m3 = Map([[1.5, 'abc']]);
let m4 = Map([[[[[[11]]]]]];
let m5 = Map

Execution Output ------------------:
test.js:85:28: error: ')' expected at end of function call
let m4 = Map([[[[[[11]]]]]];
            ~~~~~~~~~~~~~~~^
