const fs = require('fs');


 
const ES6Promise = require('es6-promise').Promise;

 
Promise.all([
        fs.readFileAsync( __dirname + '/test.js' ),
        fs.readFileAsync( __dirname + '/test2.js' )
    ]).then( files => {
        const [ script1, script2 ] = files;

         
         
    })
  .catch( error => console.error( error ) );
```

If your application does not meet the expectations for the browser support and your program is small enough (<1000 lines), try running the sample below that has minimal features so far.

Note: to improve the memory consumption of Hermes, you may want to run your app in a debugger with breakpoints set to inspect objects created by React Native.

```javascript
<Provider store={Store}>
  <AppNavigator />
</Provider>
```

And then run the same program to see the memory usage on the browser console.

```shell
npx react-native run-android
```

