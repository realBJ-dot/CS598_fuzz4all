const fs = require('fs');


function readFile(file, callback) {
  const { code, type, } = fs.readFileSync(
      file,
      'utf-8',
  );
  const source = `const test = ${JSON.stringify("asdf");}`;
  const parseResult = Babel.parseScript(source, {
    sourceType: 'unambiguous',
    plugins: [
      'es6', 
    ],
     
    ast: {
      type: type, 
      start: [ 0, 0 ], 
      end: [ code.length, code.length ],
    },
  });
  if ( parseResult.errors[0] ) return;
  callback(
    code,
    parseResult.code,
    parseResult.ast,
    parseResult.ast.program,
  );
}

readFile('example.js', async (code, source, parsed, program) => {
   
   
  await AsyncFunction.compile(source, 'a.js');
  await AsyncFunction.compile(source, 'b.js');
  await AsyncFunction.compileSync(source, 'c.js');
  console.log(
    AsyncFunction.run(
      "a.js", 
      null, null, 'a', 'a', null,
      null, 'a', AsyncFunction.eval("console.log(this);")
    ),
  );
  console.log(
    AsyncFunction.compile(source).run(
      null, 'a', AsyncFunction.eval("console.log(this);")
    ),
  );
  try {
    await AsyncFunction.eval("2 + 2");
  } catch(e) {
    console.log(`An error was thrown: ${e}`);
    await AsyncFunction.compile("2 + 2"));
    console.log(
      AsyncFunction.run(
        "c.js", 
        null, null, 'a', 'a', null, 
        new Object(), 'a', AsyncFunction.eval("2 + 2;")
      )
    );
  }
}, "a.js");
`
);
