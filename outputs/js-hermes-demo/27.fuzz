const fs = require('fs');

const vm = require('vm');
const asyncFn = (x, f) => {
  function g() { }
  g.prototype = f.apply(this, arguments);
  return new g();
};

const arr = [1, 2, 3, [...new Int8Array(10).values()]];
const asyncGetters = [ asyncFn(...arr), [...new Uint8Array(10).values()]];  
const vmStr = `
async function testAsync(str) {
  return str.length;
}
var strLengthArray = [testAsync(...arr), testAsync(...[...new Uint8Array(10).values()])];  
${JSON.stringify(asyncGetters)}
`;
const compiledCode = eval(vm.Script(vmStr));
const asyncTest = 'testAsync(...strLengthArray)';
var a;
var b;
var n; 
a = eval(asyncTest);  
a = eval(asyncTest +'(7)');  
a = eval(asyncTest.replace(/(.*)1(.*)/, `$18$2`));  
n = eval(compiledCode);  

for(const [i, j] of arr.entries()) {  
  a = eval(`(${i}_${j})`);  
}
console.log(n, eval(`(${a}_${b})`));
 

const newArr = [...new Uint8Array([...new Uint8Array([...new Uint8Array([...new Int16Array(10).values()])]).values()]);
for(const [i, j] of newArr.entries()) {
  try {
    b = eval(`(${i}_${j})`);
  } catch(e) {
    console.log('test error');
  }
  console.log([i, j, b]);
}
 

 