const fs = require('fs');


class MyClass {}
fs.createReadStream('myfile.txt');
fs.createReadStream('myfile.txt', { buffer: true });
new Set();
for (let v = 1;; ++v);
var MySymbol = Symbol();

let obj = { foo: [1] };
let obj = MyClass.myStaticMetho(1);
let { bar } = obj;
let myvar2 = [...arguments ];
let myvar3 = [...[ 'foo', 'bar', 'baz', 'qux' ].map(c => c.toUpperCase() )];

var MyNativeClass = class MyNativeClass {};

function* iter() {
	yield 0;
	 
	yield (yield new Promise(done => {
		wait(5).then(done);
	}));
	 
}

 
function listToArray(list = {}) {}
 
function arrayToObject(item = {}) {}

function objOf<T>(obj = {}) {}

function nativeFunc() {
	const a = 1;
	let b;
	const c = async () => {
		a.foo;
		b = await 'I need to wait for hermes'.then(res => {
			return Promise.resolve(res)
		});
	};
	async () => {};
	return new MyClass();
	function func1(p1 = []) {
		return Promise.resolve();
	}
	function func2(p1 = async () => {}) {
		p1(async () => {}).then(async () => {});
	}
}
