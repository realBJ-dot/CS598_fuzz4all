const fs = require('fs');


function getFooBar() {
  return 'foo bar';
}

const arr = [1,2,3]
const obj = {bar : 'bar'};
const arrFooBar = [1,2,arr,obj]

function testHermes() {
	console.log(getFooBar());
  console.log(arrFooBar);

}

 

const path = require('path');
if (!fs.existsSync(path.resolve(__dirname, 'example.js'))) {
  console.error('file not found at:', path.resolve(__dirname, 'example.js'));
  process.exit(1);
}

const file = fs.readFileSync(path.resolve(__dirname, 'example.js'));

try {
  const code = 'function testHermes() { console.log(' + JSON.stringify(getFooBar()) + ');}\n' + JSON.stringify(file);

   
  const compiled = babel.transform(code, {presets: ['es2016']}).code;

  

  const engine = require("@babel/runtime");
  require("./example.js");


} catch(err) {
  console.error(err.stack);
  process.exit(1);
}
```

More example's are also available in examples folder.<commit_msg>add Hermes usage in readme<commit_after># Hermes

Hermes is a [JavaScript engine](https: 
- [Async/await](https: 
- [for..of](https: 
- [for..in](https: 
- [object rest/spread parameter](https: 
- [let/const](https: 
- [Classes](https: 
- [Optional chaining with nullish coalescing](