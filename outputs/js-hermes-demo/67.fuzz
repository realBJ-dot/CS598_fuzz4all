const fs = require('fs');

const express = require('express');
const { createClass, getClassName, isHermes, isHermesInstance, isHermesScript } = require('hermes-engine');
const {
  functionToString,
  promiseResolve,
  promiseReject,
} = require('hermes-bridge');

class SampleModel {
  constructor(name) {
    this.name = name;
  }

  printName() {
    const name = this.name; 
    console.log("This is SampleModel::printName() from a browser, on a regular RN app");
     
     
    console.log(name);
  }

  printNameWithMessage() {
    this.name.setProperties({
      userMessage: 'This is a custom message by SampleModel::printNameWithMessage()',
    });
    console.log("This is SampleModel::printNameWithMessage() from a browser, on a regular RN app", this.name.userMessage);
  }

  printNameWithNull() {
    const name = null;
    if (name) {
      console.log("SampleModel::printNameWithNull() from a browser, on a regular RN app");
      console.log(name);
    }
  }
}

var appRoot;
const modelName = "MyString";
if (isHermesScript()) {
  modelName;
  appRoot;
  fs;

  console.log("Using Hermes runtime");
  let {
    createScriptNode,
    eval,
    newSource,
  } = require('hermes-engine');

  var script = fs.readFileSync("index.hermes", "utf-8");

  var engine = createScriptNode(script);
  console.log(engine.printClass('ScriptNode'));

  var source = `${modelName}: "${script.slice(0, script.indexOf(":"))}";`;
  console.log(engine.printMethodDefinition('eval', `function ${modelName}_eval(source) {return new ${engine.typeNameForSource(modelName)};}`));
  console.log(engine.newValue(source));
  console.log(engine.newRuntimeValue(`{ name: "${modelName}", value: "${modelName}_eval" }`));
  source = newSource(source, 0);
  console.log(engine.eval(source).callValue(source));
} else if (isHermes()) {
  var { Class } = require('hermes-engine-common');

  createClass('SampleModel', function SampleModel(super_class) {
    if (!super_class) {
      super_class = [SampleModel]
    }

    super_class.constructor = SampleModel;

    this.super_class = super_class;

    this.super_class.forEach(function(superClass) {
      this.className = getClassFromName(superClass.className);
    }.bind(this));

    SampleModel.prototype.className = getClassFromName(