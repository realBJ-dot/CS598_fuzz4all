const fs = require('fs');

const execSync = require('child_process').execSync;
const path = require('path');
const { buildNativeApplication } = require('hermes-engine');

function addCodeToSource(source, code) {
  source.push(code.match(/"[^"]*?"/g));
  source.push(source.length);
  return source;
}

async function main() {
  await buildNativeApplication({
    entryPoint:'src/index.js',
    output: 'lib/main.js',
    bundleResourceNames: ['lib/main.js'],
    modulePathOverrides: [
       
      (module) => {
        if (module.moduleName.match(/.*\/src\/.*\.native\..*/)) {
          return path.dirname(module.moduleName);
        }
        return module.moduleName;
      }
    ],
    source: await Promise.all([
      Promise.resolve({
        contents:
          '#ifdef __APPLE__\n#if defined(__ANDROID__) || defined(__QNXNTO__) || __ENVIRONMENT_IPHONE_OS_VERSION >= 90000\n#include <objc/runtime.h>\n#elif defined(__QNXNTO__) || defined(__QNX__)\n#include <sys/queue.h>\n#endif\n#endif\n',
        isNative: false
      }),
      fs.readFileSync('./src/index.js', { encoding: 'utf8' }),
      addCodeToSource([], {
        code: `
    var a = new Array(1);
    var b = new Set([1]);
    var c = new Map();
    c.set('a', 1);
    var aa = [];
    aa.push('ab');
    aa.push(aa);
    var f = function () { return {} };
    var g = new Promise(() => { throw 1 });
    var h = undefined;
    try {} catch(err) { var g = new Promise(() => {}) }
    for (let i = 0; i < 5; i++)
      new Promise(() => {});
    
     
    return new Promise((resolve) => { resolve(); });
    class C {}
    try {} finally {}
     
    a = 'abc'.split(/./);
    b = 'ab'.match(/./);
    try {} catch {}
    try {} finally {}
     
    a = 3.141592;
    b = 3.141592.toFixed();
     
    a = BigInt(16);
    b = BigInt(16).toString();
     
    a = new Date(1599999);
    b = a.toISOString();
     
    const a = 2n;
    const b = 2n.toLocaleString({ style:'short', minimumFractionDigits: 1 });
     