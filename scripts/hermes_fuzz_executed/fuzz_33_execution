'use strict';
'';
let str = `
var obj = {a : 4};
${'function add(a,b){return'+ 'a'+ '+' +'b' +'};
add(1,'' + obj);
return obj;}'`;
eval(str);
 
'use strict';
'';
let obj = {a: 5, add: function (a, b) {return a + b;}};
let add = Function.prototype.apply.bind(obj);
add(2, 3.21);
 
'use strict';
'';
let a = 10;
let b = 5;
let add = function () {
   
  let g = function (x) {
    return x * x;
  };
  let f = function (p) {
    return p * add(p, g(p));
  };

   
   
  console.log(f(a));

   
   
  console.log(f.reduce(function(acc, val) {
  return acc * val;
}, 1));
};
 
'use strict';
'';
let fibSum = function (x) {
   
  if (x < 2) {
    return x;
  }

  fibSum.bind(fibSum).call(fibSum, x - 1) +
    fibSum.bind(fibSum).call(fibSum, x - 2);
};
 
console.log(fibSum(1000));
console.timeEnd('test-loop');
 
 
'use strict';
'';
let x = 10;
let n = 1;
do {
  if (n < 10) {
    n = (n * 3) + 1;
  }
} while ((--x));


Execution Output ------------------:
test.js:5:49: error: non-terminated string
${'function add(a,b){return'+ 'a'+ '+' +'b' +'};
                                                ^
test.js:5:46: note: string started here
${'function add(a,b){return'+ 'a'+ '+' +'b' +'};
                                             ^
test.js:6:1: error: '}' expected at end of substition in template literal
add(1,'' + obj);
^
test.js:3:11: note: start of substitution
let str = `
          ^
