'use strict';
let res = 42;
'';
{const x = (a: () => void) => {return ++a;}; let f = 0;
'';
{let f = () => {return ++1;}; f;
'';
{let f = () => {return Math.sqrt(1);}; f;
'';
{let f = () => {return ++0;}; f;
'';
{let f = () => {return -0;}; f;
'';
{let f = () => {return 0 / 0;}; f;
'';
{let f = () => ++undefined; f;
'';
{let f = eval('(() => {return ++"b";})'); f;
'';
{let f = eval('(() => 1)'); f;
'';
{let f = eval('Math.sqrt(1)'); f;
'';
{let f = +(obj.a); f;
'';
{let f = +(obj.a = false); f;
'';
{let f = -(obj.a); f;
'';
[Symbol.iterator].toString = undefined;
'';
[Symbol.iterator][[Symbol.toStringTag]] = 'asdf';
'';
Array.prototype[Symbol.apply].toString = undefined;
'';
[Symbol.iterator][Symbol.iterator].toString = undefined;
'';
[Symbol.iterator][Symbol.iterator][Symbol.toStringTag] = 'asdf';
'';
let x = Symbol();
'';
x.toString();
'';
x.toString = function;
'';
x.toString() + 1;
'';
x.toString() / 1 + 1;
'';
x.toString() > 1;
'';
x.toString() === 'asdf';
'';
x.toString().split('') === '';
'';
x!= 1;
'';
x >= 1;
'';
x!== 1;
'';
x > 1;
'';
x <= 1;
'';
x << 1;
'';
x >> 1;
'';
x >>> 1;
'';
x < 1;
'';
x <= 1;
'';
x > 0;
'';
x >= 0;
'';
x = x.toString();
'';
x = +x;
'';
x = +x >> 0;
'';
x = -x;
'';
x = -x >> 0;
'';
x = +-x;
'';
x = +x >> 0;
'';
x = -x >> -1;
'';
x = +-x >> -1;
'';
x += x;
'';
x += x >> 0;
'';
x -= x;
'';
x -= x >> 0;
'';
x *= x;
'';
x *= x >> 0;
'';
x /= x;
'';
x /= x >> 0;
'';
x %= x;
'';
x %= x >> 0;
'';
x <<= x;
'';
x <<= x >> 0;
'';
x >>= x;
'';
x >>= x >> 0;
'';
x >>>= x

Execution Output ------------------:
test.js:4:14: error: ')' expected at end of parenthesized expression
{const x = (a: () => void) => {return ++a;}; let f = 0;
           ~~^
