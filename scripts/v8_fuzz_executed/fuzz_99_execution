'use strict';
'use v8';
let z = {...new Array(2)};
let f = z.__proto__ = {...new Array(2)};  
f.prototype.constructor = 'My_class_constructor';
z.constructor = 'My_object_constructor';
console.log(badReuseBreak());
console.log(z instanceof My_class_constructor);
console.log(Object.isExtensible(z));
 
 
 
 

 
'use strict';
'use v8';
class My_class_constructor {
    #myProp1 = 'My_instance_prop1';
    #myProp2 ='my_second_property';
    constructor() {
        console.log(`My_instance_constructor was called`);
        Object.assign(this, new Object());
    }
    
    func1() {
        return this.#myProp1;
    }
    
    func2() {
        return this.#myProp2;
    }
    
    func3() {
        return this.#myProp1 + this.#myProp2;
    }
};
 
const obj = new My_class_constructor();

 
const instance = {...obj };

 
instance.myProp2 = 'My_modifying_property';

 
console.log(obj.func1());
console.log(obj.func3());
console.log(obj);
 
console.log(Object.isExtensible(obj));
 
 
 

'use v8';
 
class My_class_constructor {
    #myProp1 = 'My_instance_prop1';

    constructor(name="My_instance_constructor") {
        console.log(`My_instance_constructor was called`);
        Object.assign(this, new Object());
        this.name = name;
    }
    
    func1() {
        return this.#myProp1;
    }
    
    func2() {
        return [ this.#myProp1, this.name ];
    }
    
    func3() {
        return this.#myProp1 + this.name;
    }
};
 
let obj = new My_class_constructor('My_instance_reference');

 
let instance = obj;

 
instance.name = 'My_instance_reference_modifying';

 
console.log(instance.func1());
console.log(instance.func2());
console.log(instance.func3());
console.log(obj);

console.log(JSON.stringify(obj));
```

## Next
[Object.prototype.toString](_object_prototype_tostring_.md)

[Table of Contents](../README.md)

Execution Output ------------------:
check_v8_output.sh: 27: /home/v8/v8/output/x64.debug/d8: not found
