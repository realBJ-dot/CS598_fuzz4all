USE sampleDB;
 
DROP TABLE users; 
DROP TABLE posts; 
DROP TABLE comments;

-- Use ALTER and INSERT commands to modify table contents. There's also a command to "ADD" information to a database. 
-- Be sure to use ENGINE=InnoDB.

USE sampleDB;

CREATE TABLE users (id INT NOT NULL PRIMARY KEY, name VARCHAR(32) NOT NULL, password VARCHAR(128), role VARCHAR(32), create_time DATETIME NOT NULL, delete_time DATETIME) ENGINE=InnoDB;

INSERT INTO users VALUES (1, "jennice","admin","ADMIN","2000-04-01 01:15:33","2000-04-01 01:15:33");

SELECT * FROM users;

SELECT * FROM tablelist;

SELECT id,name from users;

INSERT INTO users VALUES (0, "chen","<PASSWORD>");

SELECT * FROM users;

UPDATE users SET role="member" WHERE id=0;

SELECT * FROM users;

/* As we know, one might consider the whole database as a source of unpredictable and unintended data. For example, our server-side program can read user data from any table, including the data for our comments table, and add or delete records in the users table. To avoid such situations, MySQL will prevent unauthorized access to the server and give an error message. */

/* Be sure to use ENGINE=InnoDB. You can use DELETE and UPDATE to make modifications to tables */
SELECT * FROM users WHERE id = 0 AND role="Member";

DELETE FROM users WHERE id = 0;

SELECT * FROM users;

UPDATE users SET role="ADMIN" WHERE id = 0;

SELECT * FROM users;

/* MySQL creates indexes automatically for unindexed tables. Indexes keep a record of the most recent data that may have been retrieved and can't be deleted. Indexes also help speed up operations by making the database efficient. It's a best practice though. 
MySQL does not create indexes for foreign-key constraints, such as those found in many relational database management systems. */
