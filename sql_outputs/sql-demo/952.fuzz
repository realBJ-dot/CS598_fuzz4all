CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
UPDATE user_db_skills
SET label = 'Perl'
WHERE label = 'PHP';
SELECT * FROM user_db_skills;
-- There are lots of operators in SQL to filter/modify rows. You can also do JOIN queries and perform an INNER JOIN to get all the row related entries in a data set, for example:
SELECT user_name as 'Username', company as 'Company'
FROM database_user
INNER JOIN database_user_skills AS dus ON
    user_id = dus.user_id;
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS user_name (id INT, name VARCHAR(250), PRIMARY KEY (id));
CREATE TABLE IF NOT EXISTS database_user (id INT PRIMARY KEY, password VARCHAR(45));
CREATE TABLE IF NOT EXISTS database_user_skills (user_id INT NOT NULL, skill_id INT NOT NULL, PRIMARY KEY (user_id,skill_id));
INSERT INTO user_name (id, name) values (1, 'Peter');
INSERT INTO database_user (id, password) values (1, '<PASSWORD>');
INSERT INTO database_user_skills (user_id, skill_id) values  (1, 3);
	
 
	BEGIN;
	DROP TABLE IF EXISTS `user_name`;
	CREATE TABLE `user_name`
	(
		`id` INT UNSIGNED AUTO_INCREMENT,
		`name` VARCHAR(255) NOT NULL,
		PRIMARY KEY (`id`)
	);
	DROP TABLE IF EXISTS `user`;
	CREATE TABLE `user`
	(
	   `id` INT UNSIGNED Auto_INCREMENT,
	   `name` VARCHAR(100) not null,
	   `company` VARCHAR(255) not null,
	   `email` VARCHAR(30),
	   UNIQUE (`email`)
	);
	DROP TABLE IF EXISTS `skills`;
	CREATE TABLE `skills`
	(
	   `id` INT UNSIGNED Auto_INCREMENT,
	   `name` VARCHAR(255) UNIQUE NOT NULL,
	   `description` TEXT,
	   PRIMARY KEY (`id`)
	);
	DROP TABLE IF EXISTS `database_user`;
	CREATE TABLE `database_user`
	(
	   `id` INT UNSIGNED Auto_INCREMENT,
		`password`