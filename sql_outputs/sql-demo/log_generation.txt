[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
 -- Note: Create a sample table to test database functionality and drop it if not needed.
 
 
INSERT INTO sampleData VALUES (1, "First row", 2000, 1), (2, "Second row", 3000, 1), (3, "Third row", 4000, 1), (4, "Forth row", 5000, 1), (5, "Fifth row", 6000, 1), (6, "Sixth row", 7000, 1);

SELECT * FROM sampleData; -- Verify that the sample table exists
DROP TABLE IF EXISTS sampleData; -- Drop sample table once the database is not used

TERMINATE CONNECTION;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

CREATE TABLE IF NOT EXISTS Users (Name  VARCHAR(30), User_id INTEGER AUTO_INCREMENT PRIMARY KEY NOT NULL UNIQUE);











[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;


CREATE TABLE Employee(emp_no INTEGER PRIMARY KEY NOT NULL, first_name TEXT, last_name TEXT, addr_line TEXT);

CREATE TABLE Department(dept_no INTEGER PRIMARY KEY NOT NULL, dept_name TEXT);

CREATE TABLE Position(pos_no INTEGER PRIMARY KEY NOT NULL, title TEXT, salary INTEGER, dept_no INTEGER, FOREIGN KEY(dept_no) REFERENCES Department(dept_no));
 

CREATE TABLE Employee_Position(emp_no INTEGER, dept_no INTEGER, pos_no INTEGER, FOREIGN KEY(emp_no) REFERENCES Employee(emp_no), FOREIGN KEY(dept_no) REFERENCES Department(dept_no), FOREIGN KEY(pos_no) REFERENCES Position(pos_no));

 
SELECT emp_no, first_name, last_name FROM Employee;
SELECT emp_no, title FROM Position WHERE dept_no = 10;
SELECT * FROM Employee_Position WHERE emp_no = 22 AND pos_no = 20;

 
DROP TABLE Employee;
DROP TABLE Position;
DROP TABLE Employee_Position;
DROP TABLE Department;
DROP DATABASE sampleDB;

select *
from emp;

select *
from employee;

SELECT * FROM user

-- MySQL's native support for Unicode is based on the popular MySQL-server library libclient/libclient_mysql.so. See the MySQL database documentation (which you should read too) for details on the library.
-- You cannot change any data in MySQL and you cannot query it. If you want to change your MySQL data you need to move or copy the data to a new database (that stores your data). 

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

-- Create a new table in sampleDB called employees and make sure it is in the form id, fname, lname, roleid and sal.
CREATE TABLE employees ( id int(11) NOT NULL AUTO_INCREMENT, fname varchar(20) NOT NULL, lname varchar(30) NOT NULL, roleid int(11) NOT NULL, sal decimal(10,2) NOT NULL, departmentid int(11), PRIMARY KEY (id) ) ENGINE=InnoDB;
-- Update the table employees to add a roleid column based on roleid. If the value of the column is not set in the query, then insert it with the roleid of 10.
ALTER TABLE employees ADD roleid int(11);
INSERT INTO employees ( id, fname, lname, roleid, sal, departmentid) VALUES (10, 'Bruno', 'Fonseca', 10, 25000.00,null);    INSERT INTO employees ( id, fname, lname, roleid, sal, departmentid) VALUES (200, 'Tamara', 'Baker', 1, 700.00,10);    INSERT INTO employees ( id, fname, lname, roleid, sal, departmentid) VALUES (300, 'Andrea', 'Tutti', 1, 5000.00,10);
-- Add an index over the column roleid, which will be used for performing a join, and set it to descending order.
ALTER TABLE employees ADD PRIMARY KEY (roleid);
DROP INDEX roleid;    ALTER TABLE employees MODIFY roleid INT NOT NULL AFTER PRIMARY KEY;    ALTER TABLE employees ADD INDEX departmentid (departmentid);
CREATE TABLE departments ( id int(11) NOT NULL AUTO_INCREMENT, dept_name varchar(50) NOT NULL, PRIMARY KEY (id) ) ENGINE=InnoDB;   -- Assign the employees to their roles from the employees table.
INSERT INTO employees (id,fname,lname,departmentid,roleid) VALUES (20, 'Jamie', 'Kimberly', NULL, 6);    INSERT INTO employees (id,fname,lname,departmentid,roleid) VALUES (40, 'Nathan', 'Travis', NULL, 1);    INSERT INTO employees (id,fname,lname,departmentid,roleid) VALUES (30, 'Carla', 'Rose', NULL, 1);    INSERT INTO employees (id,fname,lname,departmentid,roleid) VALUES (22, 'Steven', 'King', 1, 3);   INSERT INTO employees (id,fname,lname,departmentid,roleid) VALUES (300, 'Andrea', 'Tutti', 2, 2);
-- Find all employees that do not have a manager set from the employees table.
SELECT id, fname, lname
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;


 
CREATE TABLE IF NOT EXISTS employee (
id int(11) AUTO_INCREMENT,
firstname varchar(255) NOT NULL,
lastname varchar(255) NOT NULL,
gender varchar(20) NOT NULL,
salary decimal(10,2) NOT NULL,
primary key (id));

CREATE TABLE IF NOT EXISTS city (
id int(11) AUTO_INCREMENT,
name varchar(255) NOT NULL,
primary key (id));

INSERT INTO employee (firstname, lastname, gender, salary)VALUES ('Joe', 'Smith', 'M', '80400');
INSERT INTO employee (firstname, lastname, gender, salary)VALUES ('John', 'Jones', 'M', '82500');
INSERT INTO employee (firstname, lastname, gender, salary)VALUES ('Bill', 'Clark', 'M', '87000');
INSERT INTO employee (firstname, lastname, gender, salary)VALUES ('David', 'Johnson', 'M', '86700');
INSERT INTO city (name)VALUES ('London');
INSERT INTO city (name)VALUES ('Paris');
INSERT INTO city (name)VALUES ('New york');
DROP TABLE employee;
DROP TABLE city;
USE $DATABASE_NAME;  

FLUSH TABLE employee;
FLUSH TABLE city;
DROP TABLE employee; DROPS TABLE city;
USE $DATABASE_NAME;  

/* If all of the required steps are followed but your query gives errors, report the cause of the error. Here are some tips:
- If you have issues with creating tables, make sure your table does not have any missing primary keys. You can use the following statement to check for missing keys:
SHOW CREATE TABLE $TABLE_NAME;
- You might have misspelled the table name. Make sure you are using $DATABASE_NAME + "." + $TABLE_NAME. Make sure to remove the quotes.
- Make sure you can access the table you created. You can do this by using the following statements:
SHOW TABLES LIKE $TABLE_NAME;
- Make sure your keys are NOT NULL. Be sure to remove the NOT NULL from the primary keys. Also remove the NULLS keyword from each of your column's constraints so MySQL does not set null values into your tables.
- Make sure you are using a unique key so we can easily identify rows that you need to update or drop them.
- Make sure you are able to truncate the table by running the following command:
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS Users (Name  VARCHAR(30), User_id INTEGER AUTO_INCREMENT PRIMARY KEY NOT NULL UNIQUE);
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

 
INSERT INTO Users (Name) VALUE ('Bob');
INSERT INTO Users (Name) VALUE ('James');
INSERT INTO Users (Name) VALUE ('Tom');
INSERT INTO Users (Name) VALUE ('Chris');
INSERT INTO Users (Name) VALUE ('Ashley');
INSERT INTO Users (Name) VALUE ('Jordan');

 
SELECT * FROM Users;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
ALTER TABLE Users MODIFY Name VARCHAR(100) NOT NULL;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO Users (Name, User_id) VALUES ("<NAME>",1);

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
ALTER TABLE Users DROP PRIMARY KEY, ADD CONSTRAINT PK_Users PRIMARY KEY(User_id);
COMMIT;

 
<-- SELECT User_id,Name,IFNULL((
SELECT 1
FROM Users WHERE Name = 'Bruce';
SELECT 10
FROM Users WHERE Name = 'Bruce';
SELECT 100
FROM Users WHERE Name = 'Bruce';
SELECT 1000
FROM Users WHERE Name = 'Bruce';
SELECT 10000
FROM Users WHERE Name = 'Bruce';
SELECT 90000
FROM Users WHERE Name = 'Bruce';
),0) FROM Users WHERE User_id > 10;");
COMMIT;

 
DROP TABLE IF EXISTS Users;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS Users (New_Name INTEGER AUTO_INCREMENT PRIMARY KEY NOT NULL UNIQUE);
INSERT INTO Users(Name, User_id) VALUES('Sneha', 12345);
UPDATE Users SET User_id= 1337 WHERE Name ='Sneha';
DELETE FROM Users WHERE Name ='Sneha';

INSERT INTO Users(Name, User_id) VALUES('Hemant', 54321);
UPDATE Users SET User_id= 2345 WHERE Name ='Hemant';
DELETE FROM Users WHERE Name ='Hemant';


[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS Users (New_Name INTEGER AUTO_INCREMENT PRIMARY KEY NOT NULL UNIQUE);
INSERT INTO Users(Name, User_id) VALUES('Sneha', 12345);
UPDATE Users SET User_id= 1337 WHERE Name ='Sneha';
DELETE FROM Users WHERE Name ='Sneha';
INSERT INTO Users(Name, User_id) VALUES('Hemant', 54321);
UPDATE Users SET User_id= 2345 WHERE Name ='Hemant';
DELETE FROM Users WHERE Name ='Hemant';
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS Users (New_Name INTEGER AUTO_INCREMENT PRIMARY KEY NOT NULL UNIQUE);
INSERT INTO Users(Name, User_id) VALUES('Sneha', 12345);
UPDATE Users SET User_id= 2345 WHERE Name ='Sneha';
DELETE FROM Users WHERE Name ='Sneha';

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS Users (New_Name INTEGER AUTO_INCREMENT PRIMARY KEY UNIQUE NOT NULL);
INSERT INTO Users(ID, Name, User_id) VALUES(1,'Hemant', 1337);
UPDATE Users SET User_id= 3345 WHERE ID = 1;
DELETE FROM Users WHERE ID = 1;
INSERT INTO Users(ID, Name, User_id) VALUES(2,'Sneha', 2345);
UPDATE Users SET User_id = 4354 WHERE ID = 2;
DELETE FROM Users WHERE ID = 2;
-- Here create an update where the existing table is updated to add a new column called User_id. The only difference is the UPDATE clause.
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS Users (ID INTEGER AUTO_INCREMENT PRIMARY KEY, Name TEXT, User_id INTEGER);
INSERT INTO Users(Name, User_id) VALUES('<NAME>', 666);
UPDATE Users SET User_id = 1 WHERE ID=1;
UPDATE Users SET User_id = 2 WHERE ID=2;
UPDATE Users SET User_id = 3 WHERE ID=3;
UPDATE Users SET User_id = 5 WHERE ID=4;
-- Here drop the users table by using the RENAME command. If the user had created an auto increment col in the user table which had this value at the creation, then you are required to use this id to update the user name.
DROP SEQUENCE IF EXISTS Users_ID_seq;
DROP TABLE IF EXISTS Users CASCADE;
-- Please write a query to select the total records of every table in the database called sampleDB. You can ignore the tables you created.
SELECT COUNT(*) FROM information_schema.tables;
-- Please write a program to select all the rows where emailId!= (SELECT EmailId FROM Employees WHERE EmployeeID=(SELECT EmployeeID FROM Employees))
SELECT * FROM Employees AS e, Employees AS e_new
WHERE e.EmailId!= (SELECT EmailId FROM Employees WHERE e_new.ID = e.EmployeeID);


[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
UPDATE Users SET New_Name = (SELECT User_id FROM Users WHERE Name='Sneha') WHERE Name = 'Hemant';
SELECT * FROM Users;
 
#select users.* from users, sampleDB.users where users.id=sampleDB.Users.User_id
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE Users;
DROP DATABASE IF EXISTS sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
 
CREATE TABLE Users (
        Student_Id     INTEGER    NOT NULL AUTO_INCREMENT,
        Parent_Id      INTEGER    NOT NULL,
        Email_id       INTEGER    NOT NULL,
        Gender         ENUM('M', 'F') DEFAULT 'M',
        Mobile_no      VARCHAR(20) DEFAULT '0412345678',
        User_name      VARCHAR(10) DEFAULT 'Sneha',
        Password       VARCHAR(12),
        School_Id      INTEGER    DEFAULT '0',
        Student_Name   VARCHAR(30) DEFAULT 'Sneha',
        Address        VARCHAR(50) DEFAULT 'Chittaurgaon',   
        Father_Name    VARCHAR(40) DEFAULT 'Sneha',
        Mother_Name    VARCHAR(50) DEFAULT 'Sneha',
        Birth_date     DATE DEFAULT '1980-02-28',
        Father_Mobile  INTEGER DEFAULT '0',               
        Blood_group    ENUM('A+','B+','AB+','O+','A-') DEFAULT 'A+',
        Marital_Status ENUM('Civil', 'Maried', 'Dual', 'Divorced') DEFAULT 'Maried',
        Father_Address VARCHAR(255),
        PRIMARY KEY(Student_Id)
)ENGINE=INNODB;
INSERT INTO Users(Name, Email_id) VALUES ('Sneha', 12345);
INSERT INTO Users(Name, User_id) VALUES ('Hemant', 1337);
 
SELECT Email_id, USER_ID FROM Users

UNION

 
SELECT Student_Id, Mobile_no FROM Users

-- Below is your comments for your queries
1. We can select any data with query below to check 
```mysql
SELECT Email_Id, USER_ID FROM Users

UNION ALL

SELECT Student_
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE Users;
DROP DATABASE IF EXISTS sampleDB;
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE Users;
DROP DATABASE IF EXISTS sampleDB;



[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE Users;
DROP TABLE Users1;
END TRY;
BEGIN CATCH;
ROLLBACK;
PRINT 'Failed';
END CATCH;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE Users;
DROP DATABASE IF EXISTS sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users (
userid INT(5) UNSIGNED AUTO_INCREMENT PRIMARY KEY,
firstname TEXT NOT NULL,
lastname TEXT NOT NULL,
phone NUMBER NOT NULL,
address TEXT NOT NULL
);
INSERT INTO Users (userid, firstname, lastname, phone, address) VALUES
(0, 'Vadim', 'Grigorescu', 9374321, 'Berlin, Germany.'),
(1, 'Anna', 'Marian', 1937459, 'Beijing, CN.'),
(2, 'Miles', 'Briand', 9946587, 'Berlin, Germany.'),
(3, 'Emma', 'M', 9265135, 'Croatia'),
(4, 'Amara', 'Luc', 9099876, 'Istanbul, Turkey.');
DROP TABLE Users;

CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE Users;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE Users;
DROP DATABASE IF EXISTS sampleDB; 
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE Users;
DROP DATABASE IF EXISTS sampleDB;
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE Users;
DROP DATABASE IF EXISTS sampleDB;


[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users (Username CHAR(12) NOT NULL, Country CHAR(2), Email VARCHAR(50));
INSERT INTO Users VALUES ("Rahul","India","<EMAIL>"),("Dany","India","<EMAIL>"),("Sandeep","India","<EMAIL>");
DROP TABLE Users;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE Users;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE Users;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE Users;
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE Users;
DROP DATABASE IF EXISTS sampleDB;
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IfExistsAndCreateDrop;
DROP TABLE IF EXISTS `IfExistsAndCreateDrop`;
CREATE TABLE IfExistsAndCreateDrop (`ID` INT(11) UNSIGNEDZ PRIMARY KEY AUTO_INCREMENT);
CREATE TABLE IF NOT EXISTS `IfExistsAndCreateDrop`;
 

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE Users;
DROP DATABASE IF EXISTS sampleDB;
 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE Users;
DROP TABLE Messages;
DROP TABLE Messages1;
DROP TABLE Messages2;
DROP TABLE MessagesTemp;
DROP TABLE MessagesTemp1;
DROP TABLE MessagesTemp2;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE Users;
DROP TABLE Test;
DROP TABLE Users2;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE Users;
DROP DATABASE IF EXISTS sampleDB;
select * from usertbl;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE Users;
DROP DATABASE IF EXISTS sampleDB;
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE Users;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE Users;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE Users;
DROP DATABASE IF EXISTS sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE Users;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE Users;
DROP TABLE Users;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE Users;
DROP DATABASE IF EXISTS sampleDB;
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users (ID INT AUTO_INCREMENT PRIMARY KEY, UserName VARCHAR(250), Password VARCHAR(250));
CREATE TABLE Users2(ID INT PRIMARY KEY AUTO_INCREMENT, UserName VARCHAR(250), Password VARCHAR(250));
CREATE TABLE Users3 (ID INT, UserName VARCHAR(250), Password VARCHAR(250));
CREATE TABLE Users4 (ID INT AUTO_INCREMENT, UserName VARCHAR(250), Password VARCHAR(250));
INSERT INTO Users VALUES(1, 'user1', 'user1');
INSERT INTO Users VALUES(2, 'user2', 'user2');
INSERT INTO Users VALUES(3, 'user3', 'user3');
INSERT INTO Users VALUES(4, 'user4', 'user4');
INSERT INTO Users VALUES(5, 'user5', 'user5');
INSERT INTO Users VALUES(6, 'user6', 'user6');
INSERT INTO Users VALUES(7, 'user7', 'user7');
INSERT INTO Users VALUES(8, 'user8', 'user8');
INSERT INTO Users VALUES(9, 'user9', 'user9');
INSERT INTO Users2 VALUES(99, 'user99', 'user99');

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE Users;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE Users;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SET NAMES utf8;
SET COLLATION utf8_general_ci;
CREATE TABLE Users
(
    uid INTEGER NOT NULL AUTO_INCREMENT,
    firstName VARCHAR(80),
    lastName VARCHAR(40),
    username VARCHAR(20),
    email VARCHAR(100),
    passhash varchar(250) NOT NULL,
    passsalt varchar(250),
    salt INT NOT NULL,
    gender VARCHAR(10) DEFAULT NULL,
    phone VARCHAR(20) DEFAULT NULL,
    createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    PRIMARY KEY (uid)
);
CREATE TABLE Post
(
    id INTEGER NOT NULL AUTO_INCREMENT,
    uid INT NOT NULL,
    content TEXT,
    title VARCHAR(100) DEFAULT NULL,
    body TEXT,
    likes INT DEFAULT NULL,
    commentCount INT DEFAULT '0',
    createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updateAt TIMESTAMP,
    PRIMARY KEY  (id),
    FOREIGN KEY(uid) REFERENCES Users(uid) ON UPDATE CASCADE ON DELETE CASCADE
);
INSERT INTO Users
VALUES (1, 'James', 'Brown', 'james', '<EMAIL>', '<PASSWORD>', '7y41m9', 'u14', NULL, '2019-12-16 18:36:26', '2019-12-16 22:36:26');
INSERT INTO Post
VALUES (1, 1, 'Hello my name is James, and today is 16/12, 14:36 pm', 'hello my name is James', 'welcome to my web page', 1, 2, '2019-12-16 22:36:26', NULL);
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE Users;
DROP DATABASE IF EXISTS sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE Users;
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30)) ENGINE=InnoDB;
INSERT INTO Users(username,Firstname) VALUES('Test','Test'),('Admin','Admin'),('Guest','Guest'),('Super','Super');
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE Users;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TEMPORARY TABLE IF EXISTS empTable_tmp;

DROP TABLE IF EXISTS employee;  

 
CREATE TABLE employee( id INT AUTO_INCREMENT NOT NULL AUTO_INCREMENT, name VARCHAR(30), salary DOUBLE(6,2), designation VARCHAR(30));

 
INSERT INTO employee(id, name, salary, designation) VALUES(1, 'Ajit', 12.00, 'Manager');
INSERT INTO employee(id, name, salary, designation) VALUES(2, 'Ajay', 25.64, 'Manager');
INSERT INTO employee(id, name, salary, designation) VALUES(3, 'Devi', 20, 'Developer');
INSERT INTO employee(id, name, salary, designation) VALUES(4, 'Bhavi', 17.67, 'Developer');
INSERT INTO employee(id, name, salary, designation) VALUES(5, 'Anibali', 19.90, 'Developer');
INSERT INTO employee(id, name, salary, designation) VALUES(6, 'Gaurav', 16.00, 'Developer');
INSERT INTO employee(id, name, salary, designation) VALUES(7, 'Sanjay', 15.13, 'Developer');
INSERT INTO employee(id, name, salary, designation) VALUES(8, 'Sandeep', 19.82, 'Developer');
INSERT INTO employee(id, name, salary, designation) VALUES(9, 'Bharti', 18.57, 'Developer');

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE Users;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE Users;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30)) ENGINE=InnoDB;
INSERT INTO Users(username,Firstname) VALUES('Test','Test'),('Admin','Admin'),('Guest','Guest'),('Super','Super');
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30)) ENGINE=InnoDB;
INSERT INTO Users(username,Firstname) VALUES('Test','Test'),('Admin','Admin'),('Guest','Guest'),('Super','Super');
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username varchar(30) NOT NULL, Firstname VARCHAR(30)) ENGINE=InnoDB;
INSERT INTO Users(username,Firstname) VALUES('Test','Test'),('Admin','Admin'),('Guest','Guest'),('Super','Super');

 
SELECT * FROM sampleDB.Users; 
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30)) ENGINE=InnoDB;
INSERT INTO Users(username,Firstname) VALUES('Test','Test');
<commit_msg>[FIX] mysql sample<commit_after>---
layout: default
title: MySQL
parent: Apache
nav_order: 3
permalink: install/apache/mysql/
last_modified_date:
---

# INSTALL

## 1) Download MySQL Server

MySQL community edition is supported on most operating systems but may be installed using software packages for your operating system.

**Ubuntu 20.04**

    wget -P /var/www/html https: 
    tar xfz mysql-community-release-2004-19.tar.gz
  ./mysql_install_db --user=mysql --basedir=/var/www/html --silent
    service mysql restart
  
## 2) Setup MySQL Database

Now you can connect to MySQL with your new MySQL user account, simply with your default password and you can see the `sampleDB`/`Users` databases.

To make sure everything is working you can use the `mysql` client command.

    mysql -u root -p

After that you can create you first database by typing the `CREATE DATABASE` command and create tables in a database by using the `CREATE TABLE` command. Here is a very simple test table that creates a users table and inserts a new user data.

    CREATE DATABASE sampleDB; USE sampleDB;
    CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30)) ENGINE=InnoDB;
    INSERT INTO Users(username,Firstname) VALUES('Test','Test'),('Admin','Admin'),('Guest','Guest'),('Super','Super');

## 3) Update MySQL Configuration

MySQL uses a configuration file to define system and database permissions and options. MySQL server uses the configuration files located in the `/etc/mysql/*` and `/usr/lib/mysql/mysql.conf.d/` directories. The configuration files are used by the MySQL daemon, which is running as the `root` user by default. If you change MySQL server configuration you need to re-authenticate your
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30)) ENGINE=InnoDB;
INSERT INTO Users(username,Firstname) VALUES('Test','Test'),('Admin','Admin'),('Guest','Guest'),('Super','Super');
SELECT username,username FROM Users ORDER BY username;
SELECT username,Sum(amount) FROM Orders Where payment_type='Credit Card' GROUP BY username;


[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20), FirstName VARCHAR(30)) ENGINE=InnoDB;
INSERT INTO Users(username,Firstname) VALUES('Test','Test'),('Admin','Admin'),('Guest','Guest'),('Super','Super');

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30)) ENGINE=InnoDB;
INSERT INTO Users(username,Firstname) VALUES('Test','Test'),('Admin','Admin'),('Guest','Guest'),('Super','Super');
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30)) ENGINE=InnoDB;
INSERT INTO Users(username,Firstname) VALUES('Test','Test'),('Admin','Admin'),('Guest','Guest'),('Super','Super');
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30)) ENGINE=InnoDB;
INSERT INTO Users(username,Firstname) VALUES('Test','Test'),('Admin','Admin'),('Guest','Guest'),('Super','Super');

 
SELECT * from Users;

 
UPDATE Users set username='T%d' where Firstname like 'T+%s%';

 
SELECT COUNT(*) + 1 as cnt FROM Users WHERE Firstname LIKE 'T+%s%';
-- MySQL Error 1057 (42000): Illegal mix of mix of non_const_cast<type1, type2>::const_reference (left) and non_const_cast<type1, type2>::result (right).
-- Possible errors: 42000

 
UPDATE Users set username='A%u',phone='T%0a',email='<EMAIL>' where Firstname LIKE 'A%+s%'; -- This statement is good in the real world.

 
SELECT MAX(phone), username FROM Users GROUP BY username ORDER BY MAX(phone) ASC LIMIT 1;

 
SELECT COUNT(*) from Users where Firstname LIKE 'B%+s%'; -- This statement is good in the real world.

 
SELECT COUNT(*) FROM Users  WHERE LENGTH(username)>3;

/* Find out the phone number of the most popular user, and their first name, in descending order by the number
of the user in ascending order by
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, Firstname VARCHAR(30)) ENGINE=MYISAM;
INSERT INTO Users(username,FirstName) VALUES('Test','Test'),('Admin','Admin'),('Guest','Guest'),('Super','Super');
 
CREATE TABLE Users(username char(20) PRIMARY KEY, Firstname VARCHAR(30)) ENGINE=MEMORY;
 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20), Firstname VARCHAR(30)) ENGINE=INNODB SLAVE=master;
INSERT INTO Users(username,FirstName) VALUES('Dev','Dev');
 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20), Firstname VARCHAR(30)) ENGINE=INNODB SLAVE=slave;
 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20), Firstname VARCHAR(30)) ENGINE=INNODB SLAVE1=master;
INSERT INTO Users(username,FirstName) VALUES('Dev1','Dev
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30)) ENGINE=InnoDB;
INSERT INTO Users(username,Firstname) VALUES('Test','Test'),('Admin','Admin'),('Guest','Guest'),('Super','Super');
 
 
DROP TABLE Users; CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30)); 
INSERT INTO Users(username,FirstName) VALUES('super', 'Super'),('test', 'Test'),('admin', 'Admin');
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30));
INSERT INTO Users(username, FirstName) VALUES('Brahmini','Brahmini'),('Yumba','Yumba');

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30));
CREATE TABLE Roles(username char(20),password varbinary(64), role varchar(10) NOT NULL, FirstName VARCHAR(30) NOT NULL);
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO Users(username,password, role) VALUES('Guest','<PASSWORD>', 'Guest');
CREATE TABLE Roles(username char(20),password varbinary(64), role varchar(10) NOT NULL, FirstName VARCHAR(30) NOT NULL);
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO Roles(role,username,password) VALUES('User','User','d<PASSWORD>27<PASSWORD>99954704938823a1d87195'),('Super','Super','688e50c4d49bd6625db658b29d<PASSWORD>87195'),('User','Guest','39e31b3468231329a3d1d0b72ebab185f7799954704938823a1d87195');
 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20),password varbinary(64), role varchar(10) NOT NULL);
CREATE TABLE Roles(username char(20),password varbinary(64), role varchar(10) NOT NULL);
CREATE DATABASE IF NOT EXISTS sampleDB; 
INSERT INTO Users(username,password, role) VALUES('Admin','<PASSWORD>0e2e4a6b0267b3b67d73109096335d5a84e
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30)) ENGINE=InnoDB;
INSERT INTO Users(username,Firstname) VALUES('Test','Test'),('Admin','Admin'),('Guest','Guest'),('Super','Super');
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30)) ENGINE=InnoDB;
INSERT INTO Users(username,Firstname) VALUES('Test','Test'),('Admin','Admin'),('Guest','Guest'),('Super','Super');

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30)) ENGINE=InnoDB;
INSERT INTO Users(username,Firstname) VALUES('Test','Test'),('Admin','Admin'),('Guest','Guest'),('Super','Super');

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30)) ENGINE=InnoDB;
INSERT INTO Users(username,Firstname) VALUES('Test','Test'),('Admin','Admin'),('Guest','Guest'),('Super','Super');
 
DELETE FROM Users WHERE username='Test';
 
DELETE FROM Users;
DROP DATABASE sampleDB;
USE sampleDB;
 
DESCRIBE USERS;
 
UPDATE Users SET Firstname='Admin' WHERE username='Admin';
 
SELECT * FROM Users;
 
INSERT INTO Users VALUES('Test','Test'),('Admin','Admin'),('Admin','Admin'),('Admin','Admin'),('Guest','Guest'),('Super','Super');
DELETE FROM Users;
ROLLBACK;
 
ROLLBACK;
 
TRUNCATE TABLE Users;
 
DESCRIBE USERS;
 
ROLLBACK;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30))  ENGINE=MyISAM DEFAULT CHARSET=utf8; 

 -- 1st Query --
-- Use the above provided statement and execute it. Do not use any SELECT query.
Select Count(*) From Users;

-- 2nd Query--
-- Use the above provided statement and execute it. Do not use any SELECT query.
Select username From users;

-- 3rd Query--
-- Use the above provided statement and execute it. Do not use any SELECT query.
Select * From users Where FirstName like '%st1%';


-- We will need to have a look at the resultset of these two queries.
-- SELECT COUNT(*) FROM users AND we can see that both query did not 
-- return any data. Let us execute a complex query instead of SELECT Count(*) 
-- In this case, the resultset would contain all three records. From this, we also know 
-- that where and like are also supported. 
-- So that, let us execute a complex query to count only the records where there is no 
-- match to 'St'. 
-- Execute the statement below.
Select username From users Where FirstName like '%St%'; 
or
Select * From users Where FirstName like '%St%';
or
Select count(*) From users Where FirstName like '%St%';

-- This will print an array of data that looks very similar to below.

['Test','Admin','Guest','Super']  

-- So, the above statement is the same as the following one:

Select username From users Where FirstName like '%St1%';

-- We can run queries using the SQL query editor of our choice.
-- If we need to modify the resultset of the previous SELECT query, we can do
-- that by simply editing the resultset.
-- For example, if we need to change the value of the username column to 'Test',
-- we can do this by executing following statement.
-- UPDATE Users SET username='Test'  WHERE username='Test2';
-- This will print a resultset like,

update results set username='Test';
or
update results set username='Test2';

-- This same statement can also be written as,

UPDATE Users SET username='Test';
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30)) ENGINE=InnoDB;
INSERT INTO Users(username,Firstname) VALUES('Test','Test'),('Admin','Admin'),('Guest','Guest'),('Super','Super');

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30)) ENGINE=InnoDB;
INSERT INTO Users(username,Firstname) VALUES('Test','Test'),('Admin','Admin'),('Guest','Guest'),('Super','Super');
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30)) ENGINE=MyISAM;
INSERT INTO Users(username,Firstname) VALUES('Test','Test'),('Admin','Admin'),('Guest','Guest'),('Super','Super');

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30)) ENGINE=InnoDB; -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.<fim_middle>
Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.*/
<commit_msg>Update sample query<commit_after>
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30)) ENGINE=InnoDB;
INSERT INTO Users(username, FirstName) VALUES ('Super', 'Super'), ('Test', 'Test'), ('Admin', 'Admin'), ('Guest', 'Guest');
-- Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. 

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30)) ENGINE=InnoDB;
INSERT INTO Users(username,Firstname) VALUES('Test','Test'),('Admin','Admin'),('Guest','Guest'),('Super','Super');
-- This is for reference
CREATE DATABASE IF NOT EXISTS mysqlexample; USE mysqlexample;

-- The below is to illustrate how to create tables and insert and query data.
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30)) ENGINE=InnoDB;
INSERT INTO Users(username,Firstname) VALUES('Test','Test'),('Admin','Admin'),('Guest','Guest'),('Super','Super');

-- Drop the tables
DROP TABLE Users;
DROP DATABASE IF EXISTS mysqlexample;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30)) ENGINE=InnoDB;
INSERT INTO Users(username,Firstname) VALUES('Test','Test'),('Admin','Admin'),('Guest','Guest'),('Super','Super');
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30)) ENGINE=InnoDB;
INSERT INTO Users(username,Firstname) VALUES('Test','Test'),('Admin','Admin'),('Guest','Guest'),('Super','Super');
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username varchar(25), Firstname VARCHAR(30)) ENGINE=InnoDB;
INSERT INTO Users(username,Firstname) VALUES('Test','1'),('Admin','2'),('Guest','3'),('Super','4');

-- Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created.
 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username varchar(25), Firstname VARCHAR(30)) ENGINE=InnoDB;
INSERT INTO Users(username,Firstname) VALUES('Admin','Admin'), ('Guest','Guest'), ('Super','Super');
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) NOT NULL, Password char(100) NOT NULL, Firstname VARCHAR(30) NOT NULL) ENGINE=InnoDB;
INSERT INTO Users(username,Password,Firstname) VALUES('Administrator','Pass', 'Administrator'), ('Guest','1234', 'Guest'), ('Super','0123', 'Super');
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(10), Firstname VARCHAR(30), Address VARCHAR(30) NOT NULL) ENGINE=InnoDB;
INSERT INTO Users(username,Firstname,Address) VALUES('Administrator','Administrator','Prairie View'), ('Guest','Guest','Chicago'), ('Super','Super','Riverside');
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE User(username char(10), Password char(100), Firstname VARCHAR(30));
INSERT INTO User(username,Password,Firstname) VALUES('Administrator', 'Password','Administrator'), ('Guest', '1234', 'Guest'), ('Guest2', '1234', 'Guest');
CREATE TABLE IF NOT EXISTS Users(Firstname CHAR(20), Lastname CHAR(20), Username CHAR(20) NOT NULL, Password CHAR(100) NOT NULL);
INSERT INTO Users(Firstname,Lastname,Username,
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
 
INSERT INTO Users(username,FirstName,LastName,Gender,City) VALUES('Mohd','Mohama','Ullah',20,'Dhaka'),('Luck','Mohammad','Ullah',30,'Dhaka'),('Milad','Sujan','Ullah',10,'Dhaka'),('Naveed','Lam',NULL,94,'Dhaka'),('Uddin','Muthuram',NULL,50,'Dhaka');

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30)) ENGINE=InnoDB;
INSERT INTO Users(username,Firstname) VALUES('Test','Test'),('Admin','Admin'),('Guest','Guest'),('Super','Super');

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30)) ENGINE=MyISAM;
INSERT INTO Users(username,Firstname) VALUES('Test','Test'),('Admin','Admin'),('Guest','Guest'),('Super','Super');

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30)) ENGINE=InnoDB;
INSERT INTO Users(username,Firstname) VALUES('Test','Test'),('Admin','Admin'),('Guest','Guest'),('Super','Super');
 

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30)) ENGINE=InnoDB;
INSERT INTO Users(username,Firstname) VALUES('Test','Test'),('Admin','Admin'),('Guest','Guest'),('Super','Super');
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30)) ENGINE=InnoDB;
INSERT INTO Users(username,Firstname) VALUES('Test','Test'),('Admin','Admin'),('Guest','Guest'),('Super','Super');


```

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users (username bigint PRIMARY KEY, FirstName varchar(30), Lastname varchar(30), Phone int(10));
INSERT INTO Users (username, Firstname, Lastname, Phone) VALUES (1800,"Mark","Lee",12345), (53458,"Steve","King",98765), (45, "Amit","Sharma", 84625), (69079231,"Arjun","Tiwari", 666655);
-- A query to select each of the columns in the Users table
select * from Users;
INSERT INTO users (username,firstname,lastname,phone) values (101,'Mary','Simpson',145);

 
DROP DATABASE IF EXISTS sampleDB;
 ;
INSERT INTO users (username,Firstname,Lastname) VALUES (100,'John','Doe'),(102,'Mike','Dunlap'),(104,'Adam','Jones');
 ;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30)) ENGINE=InnoDB;
INSERT INTO Users(username,Firstname) VALUES('Test','Test'),('Admin','Admin'),('Guest','Guest');


[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30)) ENGINE=InnoDB;
INSERT INTO Users(username,Firstname) VALUES('Test','Test'),('Admin','Admin'),('Guest','Guest'),('Super','Super');

-- Insert 3 rows of data into users table.
Insert into Orders insert row 2016, 100, 2000, 'test', '15185', 12.5012;
Insert into Orders insert row 2016, 100, 2000, 'test', '15186', 12.5012;
Insert into Orders insert row 2016, 100, 2000, 'test', '15187', 12.5012;

-- Perform insert-into on first 5 records of Users table.
Delete from Users
From Orders
Limit 5;

-- Perform SQL queries.
mysql> select * from Users where FirstName=firstname order by FirstName;
+-----------+----------+-------+
|        | username | FirstName|
+-----------+----------+-------+
| Test | Test | Test |
| admin | Admin | Admin |
| Guest | Guest | Guest |
| Super | Super | Super |
+-----------+----------+-------+

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users (id INT, username char(20) PRIMARY KEY, FirstName VARCHAR(30));
INSERT INTO Users (id,username,firstname) VALUES(NULL,'Test','Test'), (NULL,'Admin','Admin'), (NULL,'Guest','Guest');

CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users_Table (id INT, username char(20) PRIMARY KEY, FirstName VARCHAR(30));
INSERT INTO Users_Table (id,username,firstname) VALUES(NULL,'Test','Test'), (NULL,'Admin','Admin'), (NULL,'Guest','Guest'), (NULL,'Super','Super');

CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users (id INT, username char(20) PRIMARY KEY, FirstName VARCHAR(30)) default NULL, LastName VARCHAR(20), Email VARCHAR(45)	default NULL;
INSERT INTO Users (id,username,firstname,lastname,email) VALUES(NULL,'Test','Test','Test','<EMAIL>'), (NULL,'Admin','Admin','Admin','<EMAIL>'), (NULL,'Guest','Guest','Guest','<EMAIL>');

CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users (id INT AUTO_INCREMENT, username varchar(20) primary key, firstname varchar(30), lastname varchar(30), email varchar(45), password char(90) default NULL);
insert into users (username, firstname, lastname, email, password) values ('admin', 'admin', 'admin', '<PASSWORD>', 'admin');

CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB; 
CREATE TABLE users(id INT, nickname char(5), city char(20), salary REAL default 20000, createddate TIMESTAMP default CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP, updatets TIMESTAMP default NULL, PRIMARY KEY (id));

CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) UNIQUE, password char(20), firstname char(30), lastname char(30), gender char(1));
INSERT INTO Users(username,password,firstname,lastname,gender) VALUES('Super','<PASSWORD>',NULL,NULL,'male'),('Test1','<PASSWORD>',NULL,NULL,'male'),('
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30)) ENGINE=InnoDB;
INSERT INTO Users(username,Firstname) VALUES('Test','Test'),('Admin','Admin'),('Guest','Guest'),('Super','Super');
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username CHAR(20) PRIMARY KEY, FirstName VARCHAR(30)) ENGINE=InnoDB;
INSERT INTO Users VALUES('Test','Test'),('Admin','Admin'),('Guest','Guest'),('Super','Super');

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30)) ENGINE=InnoDB;
INSERT INTO Users(username,Firstname) VALUES('Test','Test'),('Admin','Admin'),('Guest','Guest'),('Super','Super'),('User','User');

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30)) ENGINE=InnoDB;
INSERT INTO Users(username,Firstname) VALUES('Test','Test');

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30)) ENGINE=InnoDB;
INSERT INTO Users(username,Firstname) VALUES('Test','Test'),('Admin','Admin'),('Guest','Guest'),('Super','Super');

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30)) ENGINE=InnoDB;
INSERT INTO Users(username,Firstname) VALUES('Test','Test'),('Admin','Admin'),('Guest','Guest'),('Super','Super');

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30)) ENGINE=InnoDB;
INSERT INTO Users(username,Firstname) VALUES('Test','Test'),('Admin','Admin'),('Guest','Guest'),('Super','Super');
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, first_name VARCHAR(30) NOT NULL) ENGINE=InnoDB;


[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30)) ENGINE=InnoDB;
INSERT INTO Users(username,Firstname) VALUES('Test','Test'),('Admin','Admin'),('Guest','Guest'),('Super','Super');

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30)) ENGINE=InnoDB;



[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(5) PRIMARY KEY, FirstName VARCHAR(20)) ENGINE=InnoDB;
INSERT INTO Users(username,Firstname) VALUES('SuperTest','Test Firstname'),('SuperTest2','Test Secondname');
 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
ALTER TABLE Users ADD usernameN char(5);
INSERT INTO Users VALUES ('Super_Test_1', 'New');
INSERT INTO Users VALUES ('Super_Test_2', 'Secondname');
SELECT * FROM Users;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30)) ENGINE=InnoDB;
INSERT INTO Users(username,Firstname) VALUES('Test','Test'),('Admin','Admin'),('Guest','Guest'),('Super','Super');

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30)) ENGINE=InnoDB;
INSERT INTO Users(username,Firstname) VALUES('Test','Test'),('Admin','Admin'),('Guest','Guest'),('Super','Super');
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30), Surname VARCHAR(30)) ENGINE=InnoDB;
INSERT INTO Users(username,Firstname,Surname) VALUES('Test','Test','Test'),('Admin','Admin','Admin'),('Guest','Guest','Guest'),('Super','Super','Super');

-- Create the second database and the tables therein.
CREATE DATABASE IF NOT EXISTS secondDB; USE secondDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30), Surname VARCHAR(30)) ENGINE=InnoDB; -- add unique on username column
INSERT INTO Users(username,Firstname,Surname) VALUES('Test','Test','Test'),('Admin','Admin','Admin'),('Guest','Guest','Guest'),('Super','Super','Super');
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30)) ENGINE=InnoDB;
SELECT username,FirstName from Users;

<h2><h2>Example SQL Query:</h2>

<pre><code>UPDATE Users SET Firstname='Jhon' WHERE username='<username>';
</code></pre>
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30)) ENGINE=InnoDB;
INSERT INTO Users(username,Firstname) VALUES('Test','Test'),('Admin','Admin'),('Guest','Guest'),('Super','Super');

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30)) ENGINE=InnoDB;
INSERT INTO Users(username,Firstname) VALUES('Test','Test'),('Admin','Admin'),('Guest','Guest'),('Super','Super');
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20), Firstname VARCHAR(30), Lastname CHAR) ENGINE=InnoDB DEFAULT CHARSET=UTF8;
INSERT INTO Users(username, Firstname, Lastname) VALUES('Teste','teste','test'),('Admin','Teste','tesn'),('Guest','Teste','tesn'),('Super','Teste','tesn');
 
 


[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30)) ENGINE=InnoDB;
INSERT INTO Users(username,Firstname) VALUES('Test','Test'),('Admin','Admin'),('Guest','Guest'),('Super','Super');
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20), FirstName VARCHAR(30)) ENGINE=InnoDB;
INSERT INTO Users(username,Firstname) VALUES('Test','Test'),('Admin','Admin'),('Guest','Guest'),('Super','Super');
 
 
    SELECT Users FROM Users WHERE FirstName='Test';
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20), FirstName VARCHAR(30)) ENGINE=InnoDB;
INSERT INTO Users(username,Firstname) VALUES('Test','Test'),('Admin','Admin'),('Guest','Guest'),('Super','Super');
 
    CREATE TABLE `Users` (
    `username` char(20),
    PRIMARY KEY (`username`)
    ) ENGINE=InnoDB;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30)) ENGINE=InnoDB;
INSERT INTO Users(username,Firstname) VALUES('Test','Test'),('Admin','Admin'),('Guest','Guest'),('Super','Super');

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30)) ENGINE=InnoDB;
INSERT INTO Users(username,Firstname) VALUES('Test','Test'),('Admin','Admin'),('Guest','Guest'),('Super','Super');

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30)) ENGINE=InnoDB;
INSERT INTO Users(username,Firstname) VALUES('Test','Test'),('Admin','Admin');

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30)) ENGINE=InnoDB;
INSERT INTO Users(username,Firstname) VALUES('Test','Test'),('Admin','Admin'),('Guest','Guest'),('Super','Super');

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30)) ENGINE=InnoDB;
INSERT INTO Users(username,Firstname) VALUES('Test','Test'),('Admin','Admin'),('Guest','Guest'),('Super','Super');
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30))ENGINE=InnoDB;
INSERT INTO Users(username,Firstname) VALUES('Test','Test'),('Admin','Admin'),('Guest','Guest'),('Super','Super');
 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30))ENGINE=InnoDB;
INSERT INTO Users(username,Firstname) VALUES('Test','Test'),('Admin','Admin'),('Guest','Guest'),('Super','Super');
DROP TABLE Users.


[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char (20) PRIMARY KEY, FirstName VARCHAR(30),Lastname CHAR(20)) ENGINE=InnoDB;
INSERT INTO Users(username,Firstname,lastname) VALUES('Test','Test','Doe'),('Admin', 'Administrator', 'Admin'),('Guest', 'GUEST', 'doers'),('Super','Superman','Neo'),('Cerian','Muriel','Woodie');



INSERT INTO Users(username,Firstname,lastname) VALUES('Cerian', 'Muriel', 'Woodie');

INSERT INTO Users(username,Firstname) VALUES('Super','Superman');

CREATE TABLE Users(username char (20) PRIMARY KEY, FirstName VARCHAR(30),Lastname CHAR(20)) ENGINE=InnoDB;




select username,firstname,lastname
from Users
where firstname like '%t%';




select username,firstname,lastname
from Users
group by Firstname asc,Firstname desc;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30)) ENGINE=InnoDB;
INSERT INTO Users(username,firstname) VALUES('Test','Test'),('Admin','Admin'),('Guest','Guest'),('Super','Super');

SELECT * FROM Users;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(6) PRIMARY KEY, FirstName VARCHAR(20)) ENGINE=InnoDB;
INSERT INTO Users(username,Firstname) VALUES('Test','Test'),('Admin','Admin'),('Guest','Guest');

--MySQL and PHP work perfectly well together
1. MySQL server start
2.... create a database
3.... create a table within a database
4.... add data to the table
5.... retrieve data from the table
6.... drop the table
7.... drop the database

mysql>select * from Users
+------+---------+----------------+
| username  | Firstname |
+------+---------+----------------+
| Guest  | Guest |
| Admin  | Admin |
| Test  | Test |
+------+---------+----------------+
5 rows in set (0.00 sec)

mysql>show tables
+-----------+
| Tables_in_info  |
+-----------+
| Information_schema  |
| Users  |
| Users_Temp  |
| adbusers  |
+-----------+
7 rows in set (0.00 sec)
 
mysql>create table Users (username int,Firstname varchar(30)) ENGINE=InnoDB ;
Query OK, 0 rows affected (0.03 sec)
Records: 0  Duplicates: 0  Warnings: 0

-- phpMyAdmin SQL Dump
-- version 4.8.0.1
-- https: 
--
-- Host: 127.0.0.1
-- Generation Time: Aug 19, 2018 at 05:46 AM
-- Server version: 10.1.32-MariaDB
-- PHP Version: 7.1.8

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET AUTOCOMMIT = 0;
START TRANSACTION;
SET time_zone = "+00:00";


 ;
 ;
 ;
/*!40101
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30)) ENGINE=innodb;
INSERT INTO Users(username,Firstname) VALUES('Test','Test'),('Admin','Admin'),('Guest','Guest'),('Super','Super');

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30)) ENGINE=InnoDB;
INSERT INTO Users(username,Firstname) VALUES('Test','Test'),('Admin','Admin'),('Guest','Guest'),('Super','Super');
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30)) ENGINE=InnoDB; 
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30)) ENGINE=InnoDB;
INSERT INTO Users(username,Firstname) VALUES('Test','Test'),('Admin','Admin'),('Guest','Guest'),('Super','Super');

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30)) ENGINE=InnoDB;
INSERT INTO Users(username,Firstname) VALUES('Test','Test'),('Admin','Admin'),('Guest','Guest'),('Super','Super');

SHOW CREATE DATABASE sampleDB;

SHOW FULL FIELDS FROM Users;
SHOW SCHEMAS;
DESC Users;

 
SHOW CREATE DATABASE sampleDB;
SHOW FULL FIELDS FROM Users;
SHOW SCHEMAS;
DESC Users;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30)) ENGINE=InnoDB;
INSERT INTO Users(username,Firstname) VALUES('Test','Test'),('Admin','Admin'),('Guest','Guest'),('Super','Super');
 
SELECT * from Users;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30)) ENGINE=InnoDB;
INSERT INTO Users(username,Firstname) VALUES('Test','Test'),('Admin','Admin'),('Guest','Guest'),('Super','Super');
 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30)) ENGINE=InnoDB;
INSERT INTO Users(username,Firstname) VALUES('Test','Test'),('Admin','Admin');
DROP DATABASE sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30)) ENGINE=InnoDB;
INSERT INTO Users(username,Firstname) VALUES('Test','Test'),('Admin','Admin'),('Guest','Guest'),('Super','Super');
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30)) ENGINE=InnoDB;
INSERT INTO Users(username,Firstname) VALUES('Test','Test'),('Admin','Admin'),('Guest','Guest'),('Super','Super');
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30)) ENGINE=InnoDB;
INSERT INTO Users(username,Firstname) VALUES('Test2','Test'),('Admin2','Admin'),('Guest2','Guest'),('Super2','Super');

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30), MiddleName VARCHAR(30), LastName VARCHAR(20)) ENGINE=InnoDB;
INSERT INTO Users(username,Firstname,MiddleName,lastname) VALUES('Test','Test','Test1234','Gurgaon'),('Admin','Admin','Admin','Admin'),('System','System','System','System'),('Super','Super','Super2847','Doklam'),('User','User','User','Doklam'),('SuperUser','SuperUser','SuperUser','Doklam');
CREATE DATABASE IF NOT EXISTS sampleDB
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20), password char(8)) ENGINE=InnoDB DEFAULT CHARSET=utf8;
INSERT INTO Users VALUES('Super', '<PASSWORD>');

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30)) ENGINE=InnoDB;
INSERT INTO Users(username,Firstname) VALUES('Test','Test'),('Admin','Admin'),('Guest','Guest'),('Super','Super');

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30)) ENGINE=InnoDB;
INSERT INTO Users(username,Firstname) VALUES('Test','Test'),('Admin','Admin'),('Guest','Guest'),('Super','Super');
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20), password <PASSWORD>(20), FirstName VARCHAR(30)) ENGINE = INNODB;
INSERT INTO Users(username,password, FirstName) VALUES('Test','<PASSWORD>', 'Test'),('Admin','<PASSWORD>', 'Admin'),('Guest','<PASSWORD>f3065d0a238a17405bb6', 'Guest'),('Super','<PASSWORD>', 'Super');
 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20), password <PASSWORD>(20), FirstName VARCHAR(30)) ENGINE = INNODB;
INSERT INTO Users(username,password, FirstName) VALUES('<PASSWORD>','<PASSWORD>', 'Test'),('Admin','d<PASSWORD>8a17405bb6', 'Admin'),('Guest','83c56919475bc47fdce9a930a237110', 'Guest'),('Super','7ee52990fe58a4a6bb68d8f8814ea59', 'Super');

ALTER TABLE users DROP FOREIGN KEY;
ALTER TABLE Users ADD CONSTRAINT `users_fk_password` FOREIGN KEY(`username`) REFERENCES `Users`(username) ON DELETE NO ACTION ON UPDATE CASCADE;


[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30)) ENGINE=InnoDB;
INSERT INTO Users(username,Firstname) VALUES('Test','Test'),('Admin','Admin'),('Guest','Guest'),('Super','Super');

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30)) ENGINE=InnoDB;
INSERT INTO Users(username,Firstname) VALUES('Test','Test'),('Admin','Admin'),('Guest','Guest'),('Super','Super');

-- This example can be used to create a unique column using the KEY clause
CREATE TABLE Albums(id INT UNSIGNED UNIQUE, album_name VARCHAR(50), PRIMARY KEY (id));
INSERT INTO Albums VALUES (1, 'A'), (1, 'B'), (2, 'K');

CREATE TABLE Users(username char(20), FirstName CHAR(15), Age CHAR);
INSERT INTO Users VALUES('Test','Test', '29'),('Admin','Admin', '37');

CREATE TABLE Albums(id INT UNSIGNED PRIMARY KEY AUTO_INCREMENT, album_name VARCHAR(50));
INSERT INTO Albums VALUES (1, 'A'), (2, 'B'), (3, 'K');

-- This example shows how to select users whose names start with A

SELECT * FROM Users WHERE 
Username like 'A%;' 
ORDER BY Username;

-- This example shows how to select users whose names start with A that do not have 20 as their suffix, as in the previous example

SELECT * FROM Users WHERE
Username like 'A%' 
AND FirstName <> '20'
ORDER BY Username;

-- This example displays the user's details, including both their first name and last name.
SELECT Users.username, Users.FirstName 
FROM Users 
INNER JOIN Albums 
ON Users.username=Albums.username;


[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY,Firstname VARCHAR(30));
INSERT INTO Users(username,Firstname) VALUES('Test','Test'),('Admin','Admin'),('Guest','Guest'),('Super','Super');
 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30));
INSERT INTO Users(username, FirstName) VALUES('Test', 'Test');
DROP TABLE Users;

-- Drop the database if already exists
# mysql > use sampleDB;

-- Drop the tables we just saw
# mysql > drop table Users;

-- We can delete a database, and all the tables within that database will be too
# mysql > drop database sampleDB;

# mysql> show databases;
Empty list.
```


## 8. 主从数据库（主从）同步

主从数据库同步有两种方式：

- 主从数据库之间同步
- 从而同步到主数据库

## 8.1:主从库之间同步


[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20), FirstName VARCHAR(30), LastName VARCHAR(30), MiddleName CHAR(2)) ENGINE=InnoDB;
INSERT INTO Users(username,Firstname,LastName,MiddleName) VALUES('Test','Test','Test','Test'),('Test1','Test1','Test','Test'),('Admin','','Admin',NULL),('Bruce','Bruce','Wayne',NULL),('Super','','Super',NULL);

```

---

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30)) ENGINE=InnoDB;
INSERT INTO Users(username,Firstname) VALUES('Test','Test'),('Admin','Admin'),('Guest','Guest'),('Super','Super');
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30)) ENGINE=InnoDB;
INSERT INTO Users(username,Firstname) VALUES('Test','Test'),('Admin','Admin'),('Guest','Guest'),('Super','Super');


-- For a more detailed explanation follow:https: 
-- 2 - Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created.

CREATE TABLE IF NOT EXISTS Users(
    username char(20) PRIMARY KEY, 
    FirstName VARCHAR(30), 
    LastName VARCHAR(50),
    DOB date,
    gender enum('Male','Female'),
    DOBEnum date,
    GenderInt int);
    

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30)) ENGINE=MyISAM;
INSERT INTO Users(username,Firstname) VALUES('Test','Test'),('Admin','Admin'),('Guest','Guest'),('Super','Super');

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30)) ENGINE=InnoDB;
INSERT INTO Users(username,Firstname) VALUES('Test','Test'),('Admin','Admin'),('Guest','Guest'),('Super','Super');
DROP TABLE Users;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30)) ENGINE=InnoDB;
INSERT INTO Users(username,Firstname) VALUES('Test','Test'),('Admin','Admin'),('Guest','Guest'),('Super','Super');
 
USE sampleDB;
CREATE TABLE Users (username varchar(20), Firstname varchar(30) PRIMARY KEY);
#
# We want to insert an entry into sampleDB table and make note of its
# ID, for which we use the AUTO_INCREMENT column flag. You can query
# this by issuing these commands using MySQL or another RDBMS,
# depending on your specific demand.
# #
insert into sampleDB.Users
Values ('Test','Test'), ('Admin','Admin'), ('Guest','Guest'), ('Super','Super');

--
-- The next command will list all the columns defined in the Users table.
--
Select * from sampleDB.Users;

-- 2nd solution

-- Step 1 - Install php
# 3- On the server, go to the mysql folder.
$ php -v
PHP 7.4.9

# 2nd PHP installation
$ sudo apt update
#
# Now add our PFS_PHP variable to the server. This will setup PHP path and other configuration flags for our php.ini file.
add_iit_php
#
# We also need a package for PHP. A lot of PHP is already install on our system, but not necessarily what we would want for our PHP files. So we install PHP-FPM package and install a module for Apache that runs php-fpm.
$ sudo apt install php7.4-fpm php7.4-cli php7.4-pgsql php7.4-mysql

# 3- Download and install apache
$ sudo apt install apache2
$ sudo apt install apache2-utils

# 4 - Install mysql php module
$ sudo a2enmod php7.4
$ sudo a2enmod rewrite

# 5 - Add php in the server
$ sudo service apache2 restart

# 6- Now you know how to install php with mysql and apache. Next, lets setup nginx to forward to php via port.

$ sudo apt install nginx

#
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30)) ENGINE=InnoDB;
INSERT INTO Users(username,Firstname) VALUES('Test','Test'),('Admin','Admin'),('Guest','Guest'),('Super','Super');

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30)) ENGINE=InnoDB;
INSERT INTO Users(username,Firstname) VALUES('Test','Test'),('Admin','Admin'),('Guest','Guest'),('Super','Super');
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30)) ENGINE=InnoDB;
INSERT INTO Users(username,Firstname) VALUES('Test','Test'),('Admin','Admin'),('Guest','Guest'),('Super','Super');

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30)) ENGINE=InnoDB;
INSERT INTO Users(username,Firstname) VALUES('Test','Test'),('Admin','Admin'),('Guest','Guest'),('Super','Super');
</pre></p>
<p>The script will be stored in a file called createDatabase.sql. </p>
</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p class="navigation">← <a title="Back to how to execute the sample script in MySQL Studio Community" href="howToUseExecuteSampleScriptForMySQLStudioCommunity.html">Back to how to execute the sample script in MySQL Studio Community</a> | <a title="Back to step 5 of 5" href="installingAndConfiguringMySQLStudioCommunity.html">Next step</a> → </p>
<p>&nbsp;</p>
<hr />
<p>&nbsp;</p>
<p class="copyright" align="center">Copyright © 2018-2021 MySQL, Inc. Proudly powered by MySQL, Inc. Community&nbsp;edition: <a href="https://blog.mysql.com/2021/10/mysql-community-edition-mysql-studio-community-now-free/" rel="nofollow">mysql.com</a></p>
<p>&nbsp;</p>
</body>
</html>
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30)) ENGINE=MyISAM;
INSERT INTO Users(username,Firstname) VALUES('Test','Test'),('Admin','Admin'),('Guest','Guest'),('Super','Super');
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
Create TABLE User(
    id INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    username VARCHAR(6),
    password VARCHAR(10));
    */
    DROP DATABASE sampleDB;  
    ALTER DATABASE UserEngine change username Username char(10);

DROP DATABASE sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30)) ENGINE=InnoDb;
INSERT INTO Users(username,Firstname) VALUES('Test','Test'),('Admin','Admin'),('Guest','Guest'),('Super','Super');

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30)) ENGINE=InnoDB;
INSERT INTO Users(username,Firstname) VALUES('Test','Test'),('Admin','Admin'),('Guest','Guest'),('Super','Super');
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30)) ENGINE=InnoDB;
INSERT INTO Users(username,Firstname) VALUES('Test','Test'),('Admin','Admin'),('Guest','Guest'),('Super','Super');
```


# [PHP5](https: 

PHP is a server-side scripting language, meaning it is interpreted from the request information. PHP runs on most modern web servers and is part of an important set of tools to boost Internet service-oriented applications, from the worlds of Java, ASP, Ruby on Rails and MySQL. PHP is open-source software under the GNU General Public License.


# [Python](https: 

Python is a programming language developed by the British machine language programmer <NAME>. Originally developed in 1989 with an emphasis on numerical computing, Python has become one of the most popular programming languages in the world. In 1991, it was announced by the international organization Forerunner. Python is the second most popular programming language under the GNU General Public License. Python has become one of the fastest-growing programming languages, and used in a wide variety of application domains and is now used in many large-scale software projects. In 2003 Python became the base of nearly every project running in the world


# [SQL](https: 

SQL (Structured Query Language) is a language designed for accessing data relational databases within an application using structured queries. Data is retrieved from these databases or accessed using procedures or functions. SQL can be used for any kind of applications where data is stored in a database, as well as in database applications designed to access or store data. Since data needs to be managed, a relational database is the basic unit used to build a database. To create databases and tables, relational databases need a schema. A **schema** is an organized collection of tables which store a collection of related data entities that are all identified by an **IDENTITY constraint**.

> Schema = data entity collection - constraints - relationships that identify data entity collection

Once the schema has been created, **INSERT**, **DELETE**, **UPDATE** and **SELECT** commands are used
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30));
INSERT INTO Users(username,Firstname) VALUES('Test','Test'),('Admin','Admin'),('Guest','Guest'),('Super','Super');

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username int PRIMARY KEY AUTO_INCREMENT, FirstName VARCHAR(30)) ENGINE=InnoDB;
INSERT INTO Users(username,Firstname) VALUES(NULL,'Test'),(NULL,'Admin'),(NULL,'Guest'),(NULL,'Super');

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30)) ENGINE=InnoDB;<fim_middle>INSERT INTO Users(username,Firstname) VALUES('Test','Test'),('Admin','Admin'),('Guest','Guest'),('Super','Super');<commit_msg>added mysql notes to readme<commit_after># MySQL

## MySQL Overview

The MySQL database management system (short for **mySQL**), or MySQL for short, is the world's most popular relational database management system (RDBMS). MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder <NAME>' daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server.

For more details on MySQL features check [https: 
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30)) ENGINE=InnoDB;
INSERT INTO Users(username,Firstname) VALUES('Test','Test'),('Admin','Admin'),('Guest','Guest'),('Super','Super');

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30)) ENGINE=InnoDB;
INSERT INTO Users(username,Firstname) VALUES('Test','Test'),('Admin','Admin'),('Guest','Guest'),('Super','Super');
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30)) ENGINE=InnoDB;
INSERT INTO Users(username,Firstname) VALUES('Test','Test'),('Admin','Admin'),('Guest','Guest'),('Super','Super');
 


[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users (
    username char(20) PRIMARY KEY, 
    FirstName VARCHAR(30)
);
INSERT INTO Users (username, FirstName) VALUES ('Test', 'Test'), 
('Admin', 'Admin'), ('Guest', 'Guest'), ('Super', 'Super');

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS Users CASCADE;
 
CREATE VIEW view_usersAsOne AS SELECT u.username FROM sampleDB.Users AS u;
 
CREATE DATABASE IF NOT EXISTS  sampleDB; USE sampleDB;
DROP TABLE IF EXISTS Users CASCADE;
 
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30), Id INT(5) AUTO_INCREMENT,Phone VARCHAR(15));
 
CREATE TABLE Users(id INT, username char(20) PRIMARY KEY, FirstName VARCHAR(30), Phone VARCHAR(15));
CREATE TABLE Users_contact(username char(20) PRIMARY KEY, FirstName VARCHAR(30));
CREATE TABLE Users_contact(user_id INT, username char(20) ),
CREATE TABLE Users_contact(user_id INT, username char(20) );
ALTER TABLE Users ADD CONSTRAINT primary FOREIGN KEY(username) REFERENCES Users (username);
ALTER TABLE Users ADD CONSTRAINT foreign FOREIGN KEY(user_id) REFERENCES Users_contact(user_id);
/* MySQL - Create table with default value feature. You should only use sampleDB as the database and assume no other table exist. In the end
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users_2(username char(20) PRIMARY KEY, FirstName VARCHAR(30)) ENGINE=InnoDB;
 ;
 ;
DROP TABLE IF EXISTS Users_2;
 ;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30)) ENGINE=InnoDB;
INSERT INTO Users(username,Firstname) VALUES('Test','Test'),('Admin','Admin'),('Guest','Guest'),('Super','Super');


[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users_2(username char(20) PRIMARY KEY, FirstName VARCHAR(30)) ENGINE=InnoDB;
 ;
 ;
DROP TABLE IF EXISTS Users_2;
 ;
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE User2(username char(20) PRIMARY KEY, FirstName VARCHAR(30)) ENGINE=ISAM;
INSERT INTO User2(username, FirstName)
VALUES("a","a"),("b","b");
SELECT Username,FirstName
FROM User2;
 
USE sampleDB; USE User2;
INSERT INTO Users_2(username, FirstName) VALUES('a1', 'a1');

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- 
-- 2-2 Creating a New Table
--
CREATE TABLE Names_Table(Id_Number INT, First_Name VARCHAR(20), Last_Name VARCHAR(20), Occupation VARCHAR(50), Department VARCHAR(10), City VARCHAR(20), Country VARCHAR(50));
-- 
-- 2-3 Inserting Data
--
INSERT INTO Names_Table (Id_Number, First_Name, Last_Name, Occupation, Department, City, Country) VALUES (113, 'Alexander', 'Bezmeyer', 'Owner', 'IT', 'Paris', 'France');
INSERT INTO Names_Table (Id_Number, First_Name, Last_Name, Occupation, Department, City, Country) VALUES (3, 'Robert', 'Holtz', 'Vice President', 'Sales', 'Kiev', 'Ukraine');
INSERT INTO Names_Table (Id_Number, First_Name, Last_Name, Occupation, Department, City, Country) VALUES (8, 'Steven', 'Auer', 'Marketing Manager', 'Marketing', 'Stuttgart', 'Germany');
INSERT INTO Names_Table (Id_Number, First_Name, Last_Name, Occupation, Department, City, Country) VALUES (43, 'Nicole', 'Alzheimer', 'Owner', 'IT', 'Mannheim', 'Germany');
INSERT INTO Names_Table (Id_Number, First_Name, Last_Name, Occupation, Department, City, Country) VALUES (46, 'Greta', 'Reinhardt', 'Owner', 'IT', 'Wolfsburg', 'Germany');
INSERT INTO Names_Table (Id_Number, First_Name, Last_Name, Occupation, Department, City, Country) VALUES (50, 'Oliver', 'Watts', 'Owner', 'IT', 'New York', 'United States');
INSERT INTO Names_Table (Id_Number, First_Name, Last_Name, Occupation, Department, City, Country) VALUES (35, 'Charles', 'Rice', 'Manager', 'Sales', 'Paris', 'France');
SELECT * FROM Names_Table;

<HR>
<H4 ALIGN=LEFT>MySQL Commands used: </H4>

<UL>
<LI>SHOW DATABASES</LI>
<LI>SHOW TABLE STATUS</LI>
<LI>DESCRIBE TABLE</LI>
<LI>SELECT table_name FROM
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users_2(username char(20) PRIMARY KEY, FirstName VARCHAR(30)) ENGINE=InnoDB;
 ;
 -- Please create a statement which uses the SELECT statement
 # In this type of statement, "AS" keyword must be present between column selection and "FROM" keyword and will select result column as a new variable.
SELECT * FROM Users_2;
# Create a simple structure which has a PRIMARY KEY and has a unique constraint on its columns, and then add a foreign key relationship between two tables using the use of the ALTER statement

CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
ALTER TABLE Users_2 ADD CONSTRAINT FK_Users_2 FOREIGN KEY(username) REFERENCES Users(username);
 ;
 -- Please create a simple structure using the MODIFY statement that only modifies the table so far
-- Now, to delete, you only need 1 line of code
DELETE FROM Users_2 WHERE FirstName = 'Tom';
 ;
 -- Please create a simple select statement using the UNION ALL statement
-- Create a simple SELECT statement which uses UNION
 -- You just need to create a new table which will contain the results of multiple UNION statements (with the UNION ALL keyword). You can use a SELECT statement as one of its parts
 -- There, results of UNION statements must not be stored in the same table by their type. Therefore, the SELECT statement must use the UNION keyword to form a unioned value set.
 -- In the end, you need to drop the temporary table created in the previous step (the first one) and the newly created table created during UNION
 ;
 ;
 ;
 ;
 DROP TABLE IF EXISTS Users_2;
 ;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users_2(username char(20) PRIMARY KEY, FirstName VARCHAR(30));
DROP TABLE Users_2


[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
 --
CREATE TABLE Users_2(username char(20) PRIMARY KEY, FirstName VARCHAR(30));
SET @var=1,@var=
0;
END;

--
mysql> SET @var=1,@var=0; SELECT
--
 SELECT @var:= IFNULL(

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users_2(username char(20) PRIMARY KEY, FirstName VARCHAR(30));
DROP TABLE Users_2
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO users_2 VALUES("John","Joe");
SELECT username, FirstName
FROM users_2
UNION ALL
DELETE from users_2;
select username, FirstName
from users_2
where username="Braad";
DROP DATABASE sampleDB
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users_2(username char(20) PRIMARY KEY, FirstName VARCHAR(30));
UPDATE Users_2
DELETE FROM Users_2
DROP TABLE Users_2
-- How many users do you expect from a query using InnoDB engine?
CREATE DATABASE IF NOT EXISTS sampleDB_20; USE sampleDB_20;
CREATE TABLE Users_2(username char(20) PRIMARY KEY, FirstName VARCHAR(30));
SELECT COUNT(username)
FROM Users_2
DROP TABLE Users_2

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users_2 (username varchar(20), FirstName  varchar(30));
INSERT INTO Users(username, FirstName) VALUE('<NAME>', 'Joseph');
UPDATE Users set FirstName = 'Marie' where username='<NAME>';
DROP TABLE Users_2
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users_1 (LastName VARCHAR(30) PRIMARY KEY);
INSERT INTO Users_1 (LastName) VALUE('Lo')
INSERT INTO Users_1 (LastName) VALUE('Bezuszka')
UPDATE Users_1 set LastName = 'Biezen' where LastName = 'Bia';
DROP TABLE Users_2
insert into Users (username, FirstName) values ('<NAME>', 'Alexander')
insert into Users (username, FirstName) values ('<NAME>', 'Catarina')
insert into Users (username, FirstName) values ('<NAME>', 'Angela')
insert into Users (username, FirstName) values ('<NAME>', 'Hans')
insert into Users (username, FirstName) values ('<NAME>', 'Jayla')
insert into Users (username, FirstName) values ('<NAME>', 'Cara')
insert into Users (username, FirstName) values ('<NAME>', 'Tomasz')
insert into Users (username, FirstName) values ('<NAME>', 'Leonarda')
insert into Users (username, FirstName) values ('<NAME>', 'Adrian')
insert into Users (username, FirstName) values ('<NAME>', 'Apollo')
insert into Users (username, FirstName) values ('<NAME>', 'Ravana')
insert into Users (username, FirstName) values ('<NAME>', 'Peter')
select * from Users order by FirstName
 
INSERT INTO Users (USERNAME, FIRSTNAME, MIDDLENAME, LASTNAME)
SELECT User, LEFT(Firstname,1) as Firstname, SUBSTRING(Firstname,1,1) as Middlefirst, Lastname
FROM Users
ORDER BY User

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO Users_2 values('1','Hans'),(
'maria','Maria')
-- Please drop the old database
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users_1(username char(20) PRIMARY KEY, FirstName VARCHAR(30));
DROP TABLE Users_1
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
 
DROP DATABASE sampleDB


</pre>
				</div>
			</body>
		</html>

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users_2(username char(20) PRIMARY KEY, FirstName VARCHAR(30));
DROP TABLE Users_2
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users_2(username char(20) PRIMARY KEY, FirstName VARCHAR(30));
UPDATE Users_2 SET FirstName='Danny';
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO Users_2(username, firstname) VALUES("User1", "Jerome");
SELECT * FROM Users_2 where username = "User1";
UPDATE Users_2 SET username = "newusername1" WHERE username = "User1";
INSERT INTO Users_2(username, firstname) VALUES("User2", "Eric");
SELECT * FROM Users_2 where username = "User2";
DROP TABLE Users_2
-- Try to modify only the firstname column here
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO Users_2(username, firstname) VALUES("User3", "Kev");
SELECT * FROM Users_2 where username = "User3";
UPDATE Users_2 SET firstname = "newfirstname3" WHERE username = "User3";
INSERT INTO Users_2(username, firstname) VALUES("User4", "Pauline");
SELECT * FROM Users_2 where username = "User4";
DROP TABLE Users_2
-- Now drop the users_2 database
DROP DATABASE sampleDB


[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE Users_2;
-- Please create a mutated program that creates a new table in DB
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users_3 (email varchar(50) PRIMARY KEY);
-- Please create a mutated program that performs a bulk insert on DB
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO Users_3(email) VALUES ('<EMAIL>'),('<EMAIL>'),('<EMAIL>'),('<EMAIL>');

-- Your code goes here:
SELECT * FROM Users_3;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO Users_2 VALUES ('John','John'),('Smith','Smith');
INSERT INTO Users_2 VALUES ('Jane','Jane'),('Walter','Walter'),('Jim','Jim');
DO
	DELETE FROM Users_2 where User_id <4;
COMMIT;
SELECT * FROM Users_2;
SELECT * FROM Users_2 order by User_id desc;
SELECT * FROM Users_2 order by User_id ASC;
SELECT * FROM Users_2 order by User_id desc limit 2;
SELECT * FROM Users_2 order by User_id ASC limit 2;
CREATE TABLE Users_3
(Username char(30) PRIMARY KEY,FirstName varchar(30),LastName varchar(30));
CREATE TABLE Users_3_2
(
Username char(30) PRIMARY KEY,
FirstName varchar(30),
LastName varchar(30),
Age int(11),
Gender enum ('M','F','NULL'),
Salary money(10,2));
CREATE TABLE Users_4
(Username char(30),FirstName char(30),LastName char(30));
CREATE TABLE Users_5
(Username char(30) PRIMARY KEY,FirstName varchar(30) UNIQUE,LastName varchar(30),Age int(11));
use sampleDB;
SELECT * FROM Users_3;
INSERT INTO Users_3 VALUES ('Jane','Smith','Jack'),('John','Smith','Jones'),('Jim','Smith','Jimothy'),('Jane','Walter','Walter'),('Jane','Smith','Jack'),('Jim','Smith','Jimothy');
SELECT * FROM Users_3 where User_id <2;
SELECT * FROM Users_3 order by Username ;
SELECT * FROM Users_3 order by User_id desc;
SELECT * FROM Users_3 where Salary > 5000;
SELECT * FROM Users_3 where Age between 20 and 29;
SELECT * FROM Users_3 where ( Age > 18 ) and ( ( Salary < 5000 ) or ( Salary > 5000)) and (Username in ('Jim','Jimothy'));
SELECT * FROM Users_3 where City in ('NY','NJ');
SELECT * FROM Users_3 where Salary >= 5000;
update users_3 set username = 'New_User', username_1 = 'New_User_1';
rollback;

DROP DATABASE IF EXISTS sampleDB;
--
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
UPDATE Users_2 SET FirstName = 'Gabriel'
SHOW SQL
-- Please create a sample table that contains information on all of the countries by their names.
CREATE TABLE Countries(id SERIAL PRIMARY KEY, name VARCHAR(30));
INSERT INTO Countries VALUES(1,'Italy'), (2, 'Japan'), (3, 'China');
SELECT * FROM Countries ORDER BY Name
SELECT COALESCE(name, 'Unknown') FROM Countries WHERE id IN(1, 2, 3);
SELECT UPPER(name) FROM Countries WHERE 1 IN (1, 2, 3, 4)
-- Please create a new table that will list all user names who have more than 3 distinct characters in the first name. Print this table in reverse order.
CREATE TABLE AllDifferentCharacters(first_character CHAR (1), username CHAR (20), count INT);
SELECT COUNT(*) FROM AllDifferentCharacters WHERE first_character=(SELECT DISTINCT CHAR(1) FROM Users_2) ORDER BY username DESC;



[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users_2(username char(20) PRIMARY KEY, FirstName VARCHAR(30));
DROP TABLE Users_2
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
create table Users_2 (username char(20) PRIMARY KEY, FirstName VARCHAR(30));
Insert into Users_2 values ('Bob', 'Robert',  '<EMAIL>', '333', '123', '456','789');
UPDATE Users_2 set is_admin = 100 where username = 'Alice';
-- Please write a query to retrieve the first name of every User that is an Administrator.
 
CREATE table Users(username char(20) PRIMARY KEY, password char(20), FirstName VARCHAR(30), Admin char(20));
INSERT INTO Users(username, password, FirstName, Admin) VALUES ('Bob', 'Bob', 'Bob', '0');
INSERT INTO Users(username, password, FirstName, Admin) VALUES ('Alice', 'Alice', 'Mike', '1');
SELECT * from Users where Admin = '1';

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users (UserName, FirstName, LastName);
INSERT INTO Users VALUES('john', 'John', 'Smith');
INSERT INTO Users VALUES('jane', 'Jane', 'Doe');
INSERT INTO Users VALUES('jill', 'Jill', 'White');
SELECT * from Users;
-- Please modify the second table to show the data
ALTER TABLE Users
-- Modify the User to show the firstName values
UPDATE Users SET FirstName = 'Dave'
-- Update the User to show the FirstName values
UPDATE Users, Users2
  SET Users.FirstName = Users2.FirstName
  WHERE Users.UserName = Users2.UserName
-- Create a table where the data is a combination of the data in the two tables
CREATE TABLE Users(UserName varchar(10), FirstName varchar(30));
INSERT INTO Users VALUES('john', 'John');
INSERT INTO Users VALUES('jane', 'Jane');
INSERT INTO Users VALUES('jill', 'Jill');
CREATE TABLE Users2(UserName varchar(10), FirstName varchar(30));
INSERT INTO Users2 VALUES('john', 'Michael');
INSERT INTO Users2 VALUES('jane','Bill');
INSERT INTO Users2 VALUES('jill', 'Amy');
-- Create a table where the data is a combination of the data in the two tables and where the result of the expression  is the concatentation
-- and the other expression is the concatentation of the two substrings
CREATE TABLE users(
UserName1 text,
UserName2 text,
FirstName1 text,
FirstName2 text,
LastName text
);

-- Create a table where the data is like this
-- https: 
CREATE TABLE users (
user_name varchar(20) NOT NULL,
first_name  varchar(30) NOT NULL,
last_name text
);
insert into users values

insert into users values
(first_name,'Sudheendra',last_name),(firstname,'Krit',last_name),(firstname,'Vaghas',last_name);
-- https: 
-- For each 2 values compare the result
select username
from users
where   first_name='smith' and last_name='johnson' or ( first_name = 'Sudheendra' and last_name is 'Johsnot'),
-- https: 
-- For each row compare the results
select first_name
from users
where  first_
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO Users_2 SELECT Username, 'Jon' FROM Users_2;
UPDATE Users_2 SET FirstName = 'Jonny' WHERE Username = 'Jack';
-- Please create a program which creates a schema and creates tables for
-- you
DROP SCHEMA IF EXISTS `schema1`
CREATE SCHEMA IF NOT EXISTS schema1;
CREATE TABLE IF NOT EXISTS schema1.users
(
  id INT(2) AUTO_INCREMENT,
  username varchar(20) UNIQUE NOT NULL,
  PRIMARY KEY (id),
  UNIQUE  (`username`)
);
DROP TABLE sampleDB.USERS_1
CREATE TABLE sampleDB.USERS_1(username char(20), firstname varchar(30));
UPDATE sampleDB.USERS SET firstname = 'Jonny' where username = 'Jack';
DROP TABLE sampleDB.USERS
CREATE TABLE sampleDB.USERS(username char(20), firstname varchar(30));
DROP SCHEMA IF EXISTS `schema1`
DROP TABLE IF EXISTS sampleDB.USERS_1
DROP TABLE IF EXISTS sampleDB.USERS_2
exit;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP VIEW IF EXISTS new;

-- Please create a SQL query which calculates the sum of salary on all employees leaving Paris
select id, id * salary from Employees where location='Paris' group by id
-- Please create a SQL query which displays the number of employees in each department
select dname, count(*) as Employee
from Employees, Departments
where Employees.department = Departments.department
group by dname
-- Create a SQL query which returns only the last name of employees without the first name
select distinct last_name from Employees;
-- Please create a query which finds all the employees whose first name contains 'M' in their last name
select * from Employees where last_name like 'M%'; 
-- Please create a query that finds all the employees the manager of any employee is the boss of. (Hint: Make sure the last_name column contains the manager's last name).
-- Select the manager's last name from Employees as the manager from the query above

-- Write an SQL query that retrieves all departments except 'Sales'.
-- Select the name of each department from the Departments table
SELECT DISTINCT Department, CONCAT('d-', Department) 
FROM Departments 
WHERE Department NOT IN ('Sales');
-- In addition, you are required to write a query which returns all departments where 'Sales' is in the last_name of all employees.
-- SELECT DISTINCT Department, CONCAT('d-', Department) FROM Departments 
-- WHERE (SELECT CONCAT('*', LastName, '*') FROM Employees WHERE (
-- LastName=CONCAT(FirstName, 'd-', LastName))) = Department;
-- Please modify the provided SQL query to check if all employees in a department have a last_name starting with 'R'. The output of the query should be 'First name = R and Last name = Rao', 'First name = Rao and Last name = R'. Please create and use a small sample database.
SELECT * FROM Employees 
WHERE (SELECT CONCAT('*', LastName, '*') FROM Employees WHERE (
LastName=CONCAT(FirstName, 'd-', LastName)) IN 
SELECT CONCAT('d-', Department) FROM Departments)) = Department;
-- In the query above, firstname should contain 'M' and lastname should not. If they contain other letters, you may ignore them.
-- Please modify the provided SQL query to check if all employees in a department have a last_name ending with 'io'. The output of the query should be 'First name = Moufikio-Habir and Last name = <EMAIL>', 'First name = <EMAIL>io-Habir and Last name = Mouf
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
ALTER TABLE Users_2 MODIFY username char(30);
ALTER TABLE Users_2 MODIFY FirstName VARCHAR(15);
DROP TABLE Users_2;

CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users_2(username char(20));
INSERT INTO Users_2 (username) VALUES ("Joe");
SELECT username FROM Users_2;
UPDATE Users_2 SET FirstName = "John" WHERE username = "Joe";
SELECT username, FirstName FROM Users_2;
DROP TABLE Users_2;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users_2(username char(20) PRIMARY KEY, FirstName VARCHAR(30));
DROP TABLE Users_2
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users_2(username char(20) PRIMARY KEY, FirstName VARCHAR(30));
UPDATE Users_2 SET username = 'john' WHERE username = 'johny'
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users_2(username char(20) PRIMARY KEY, FirstName VARCHAR(30));
UPDATE Users_2 SET FirstName=''; 
-- How to get all tables belong to same user? 
SELECT DISTINCT username
FROM Users_2
-- How long last user logged into this computer? 
SELECT MAX(LoginTime)
FROM Users_2
-- How many times user is registered?
SELECT COUNT(*)
FROM Users_2
-- Delete all entries of a specific username
DELETE
FROM Users_2
WHERE username='admin'
-- Delete all entries of a specific username
SELECT *
FROM Users_2
WHERE username='admin'
-- Delete all entries of a specific username
UPDATE Users_2
SET LoginTime=GETDATE()
WHERE Username!='admin' 
-- Select all entries of a specific username
SELECT *
FROM Users_2
WHERE Username!='admin' 
-- Select all entries of a specific username
DELETE
FROM Users_2
WHERE Username='admin'  
-- Select all entries of a specific username
SELECT *
FROM Users_2
WHERE Username!='admin'
-- Please create and execute a simple query
SELECT  SUM(amount)
FROM Users_2
ORDER BY amount
-- Select table names
SELECT DISTINCT TABLE_NAME
FROM INFORMATION_SCHEMA.TABLES
-- Please create new database with different name
SELECT * FROM INFORMATION_SCHEMA.TABLES
# All tables belong to same author
SELECT DISTINCT username
FROM Users_2
-- Number of registered users
SELECT COUNT(*)
FROM Users_2
-- Number of users
SELECT COUNT(*)
FROM Information_Schema.USERS
-- Print all information of users
SELECT *
FROM Users_2 
# All tables belong to same author
SELECT DISTINCT username
FROM Users_2
-- Number of registered users
SELECT COUNT(*)
FROM Users_2
-- Number of users
SELECT COUNT(*)
FROM Information_Schema.USERS
-- Print all information of users
SELECT *
FROM Users_2 
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
 INSERT INTO Users_2 SELECT * FROM Users_2;
 SELECT CONCAT('firstname: ', Users_2.User firstname FROM Users_2);

  
exit

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users_3(username char(20) PRIMARY KEY, FirstName VARCHAR(30));
INSERT INTO Users_3
VALUES('rupal', 'Rupal');
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30));
INSERT INTO Users(username, FirstName)
VALUES('rupal', 'Rupal');
INSERT INTO Users(username, FirstName)
VALUES('kantipul', 'Manji');
DROP TABLE Users; DROP DATABASE sampleDB; DROP USER 'kantipul'

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
update Users_2 set username = "Hulk" where username = "Joker";
DROP TABLE Users_2;
EXIT

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users_2(username char(20) PRIMARY KEY, FirstName VARCHAR(30));
DROP TABLE Users_2
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

-- Now remove the table from sampleDB.
INSERT INTO Users_2(username, FirstName) VALUES('nacharles22', 'Hans');
DROP TABLE Users_2
DROP DATABASE IF EXISTS sampleDB;

-- <NAME>.
--
-- MySQL, a free, open source, commercial relational database management system and free software licensed under the GPL v2. Copyright (C) 2000 MySQL AB and other contributors
-- MySQL is a registered trademark of the MySQL AB Company.

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users_2(username char(20) PRIMARY KEY, FirstName VARCHAR(30));
UPDATE Users_2 SET FirstName = ‘Jerry’ WHERE username = ‘jerry’
DROP TABLE Users_2-- Please create a mutation test using the previous mutation program. You need to write some tests using the same data. */

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE Users_2;
ALTER TABLE Users_2 ADD achar char(5);
ALTER TABLE Users_2 ADD achar2 char(10);
ALTER TABLE Users_2 MODIFY achar char(100);
USE sampleDB;
DROP TABLE sampleTable;
 
CREATE TABLE sampleTable(user_id INT, name CHAR(10), dept CHAR(6));
ALTER TABLE sampleTable ADD COLUMN userdate DATE;
INSERT INTO sampleTable values(1,'<NAME>', 'Research and Development');
INSERT INTO sampleTable values(2,'<NAME>', 'Research and Development');
INSERT INTO sampleTable values(3,'<NAME>', 'Research and Development');
ALTER TABLE sampleTable MODIFY COLUMN userdate DATE;
-- Drop column usecase
ALTER TABLE sampleTable MODIFY COLUMN user_id VARCHAR(10) NOT NULL;
DROP TABLE sampleTable;
ALTER TABLE sampleTable ADD CONTEXT username_context;
CREATE TABLE Users_SQL(username char(20) PRIMARY KEY, FirstName VARCHAR(30));
DROP TABLE Users_SQL;
ALTER TABLE Users_SQL ADD achar char(5);
ALTER TABLE Users_SQL ADD achar2 char(10);
ALTER TABLE Users_SQL MODIFY achar char(100);
USE sampleDB;
CREATE TABLE Users_XML(User_id INT PRIMARY KEY, Firstname VARCHAR(30), Lastname VARCHAR(30));
SELECT user_id, FirstName, Lastname from Users_XML;
SELECT User_id, Firstname, Lastname FROM Users_XML;
DROP TABLE Users_XML;
ALTER TABLE Users_SQL ADD CONSTRAINT user_constraint FOREIGN KEY (username) REFERENCES Users_SQL(username);
ALTER TABLE Users_SQL ADD CONSTRAINT admin_constraint FOREIGN KEY (username) REFERENCES Users_SQL(username);


GRANT ALL PRIVILEGES ON DB_NAME.* TO 'usernmae'@'address';
DROP Database sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users_1(username char(20) PRIMARY KEY, FirstName VARCHAR(30));
ALTER TABLE Users_2
-- Please modify the query to change it to select username from Users_1. Create a mutated version of the program

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO Users_2 (username,FirstName) VALUES ('john','Vijay')

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users_2(username char(20) PRIMARY KEY, FirstName VARCHAR(30));
DROP TABLE Users_2
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users_1(username char(20) PRIMARY KEY, FirstName VARCHAR(30));
DELETE FROM Users_1 WHERE Users_1.username="User3";
DROP TABLE Users_1
 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30), address VARCHAR(30), phone CHAR(20), username2 char(20), username3 char(20));
DROP TABLE Users
-- Please use the following SQL to create new table with a single character primary key. Insert the following values: name,age,salary; value1,25,10000. Insert the following values: name,age,salary; value1,25,10000. Insert the following values; value1,21,9950.
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE table1(id1 char(10) primary key, id2 char(10), id3 char(10));
INSERT INTO table1 VALUES ('id1', 'id 1', 'id 1');
INSERT INTO table1 VALUES ('id2', 'id 2', 'id 2');
INSERT INTO table1 VALUES ('id3', 'id 3', 'id 3');
DROP TABLE table1
-- Use the following query to create three tables. The tables should have same number of rows. Name them sample1, sample2, and sample3
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS sample1(id char(10), name char(10), salary INT, date DATE, time VARCHAR(10));
CREATE TABLE IF NOT EXISTS sample2(id1 char(10), id2 char(10));
CREATE TABLE IF NOT EXISTS sample3(id1 char(10), id2 char(10), id3 char(10));
DROP TABLE sample1;
DROP TABLE sample2;
DROP TABLE sample3
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE Users_1
-- Please create and populate a new database with no records.
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SELECT * from Accounts

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users_3(username char(20) PRIMARY KEY, FirstName VARCHAR(30));

CREATE TABLE Users_7(username char(20) PRIMARY KEY, FirstName VARCHAR(30));
ALTER TABLE Users_7
    ADD (Country CHAR(30));
CREATE TABLE Users_7(username char(20) PRIMARY KEY, FirstName VARCHAR(30), Country CHAR(30));

CREATE TABLE Users_8(username char(20) PRIMARY KEY, FirstName VARCHAR(30), Country CHAR(30), Company_Name VARCHAR(50), Phone CHAR(15));
ALTER TABLE Users_8
   ADD FULLTEXT (Country Name);
CREATE TABLE Users_8(username char(20) PRIMARY KEY, FirstName VARCHAR(30), Country CHAR(30), Company_Name varchar(50), Phone char(15), Text1 Text, Text2 Text, Text3 Text, Text4 Text);
ALTER TABLE Users_8
   ADD FULLTEXT (Text1 Text, Text2 Text, Text3 Text, Text4 Text);
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users_2(username char(20) PRIMARY KEY, FirstName VARCHAR(30));
DROP TABLE Users_2 ;
-- Please modify the code to create two tables. Each table will have four columns, and each column will have a different data type. The following is the template code, which needs modification.
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30), LastName VARCHAR(30));
DROP TABLE Users;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30), LastName VARCHAR(30), 
BirthDate DATETIME, address VARCHAR(30), email VARCHAR(100), phone BIGINT, UNIQUE(email));
DROP TABLE Users;
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30), LastName VARCHAR(30), 
BirthDate DATETIME, address VARCHAR(30), email VARCHAR(100) NOT NULL, phone BIGINT, UNIQUE(email));
DROP TABLE Users;
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30), LastName VARCHAR(30), 
BirthDate DATETIME, address VARCHAR(30), email VARCHAR(100), phone BIGINT, UNIQUE(email,phone));
DROP TABLE Users;
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(username char(20) PRIMARY KEY, FirstName VARCHAR(30), LastName VARCHAR(30), 
BirthDate DATETIME, address VARCHAR(30), email VARCHAR(100), phone BIGINT, UNIQUE(email));
DROP TABLE Users;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- Please comment out all the other statements above
CREATE TABLE Users_2(username char(20) PRIMARY KEY, FirstName VARCHAR(30));
ALTER TABLE Users_2 ADD password VARCHAR(255);
-- Please explain the following and use the comments for the reasoning
DELETE FROM Users_2
DELETE FROM Users_2 WHERE password IS 0
DELETE FROM Users_2 WHERE FirstName = ''
DELETE FROM Users_2 WHERE FirstName='Raghu'


Create table in MySQL

CREATE TABLE `UserAccounts` (
  `id` INT(11) NOT NULL,
  `UserId` INT(11) NOT NULL,
  `Password` VARCHAR(32) NOT NULL,
  `AccountActivationKey` INT(11) DEFAULT '0',
  `AccountType` VARCHAR(17) DEFAULT '0',
  `LockedUntil` TIMESTAMP NULL DEFAULT NULL,
  `LastLogin` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `UserGroupName` VARCHAR(19) NOT NULL,
  `UserFullName` VARCHAR(50) DEFAULT NULL,
  `UserName` VARCHAR(19) NOT NULL,
  `Avatar` VARCHAR(25) DEFAULT NULL,
  `Bio` TEXT DEFAULT NULL,
  `LastIpAddress` VARCHAR(45) DEFAULT NULL,
  `LastActivityDate` DATETIME DEFAULT NULL,
  `DateJoined` TIMESTAMP NULL NOT NULL DEFAULT CURRENT_TIMESTAMP,
  KEY `id` (`id`),
  KEY `UserId` (`UserId`)
)

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users_2(username char(20) PRIMARY KEY, FirstName VARCHAR(30));
DROP TABLE Users_2
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users_3(ID int PRIMARY KEY, email varchar(64));
DROP TABLE Users_3
-- Please create a query using all table types. (Just one table, you're welcome.) You should be able to sort the results in the same manner as in sampleDB. It should produce an output similar to this:
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users_5(firstname varchar(30), lastname varchar(60), email varchar(80), PRIMARY KEY(ID, firstname, lastname));-- The firstname and lastname are from the users.CSV file.
SELECT * FROM Users_5
select firstname, lastname, email from users_5
select * from users_5
select * from users_5;
COMMIT TRANSACTION;
DROP DATABASE IF EXISTS sampleDB;
ALTER DATABASE `sampleDB` CHARACTER SET UTF8mb4 COLLATE UTC_R;
-- This is how to import csv file:
-- CREATE DATABASE `sampleDB`
-- CHARACTER SET utf8mb4
-- COLLATE utf8_unicode_ci
-- DEFAULT CHARACTER SET = utf8mb4;



[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

CREATE TABLE Users(username char(5) PRIMARY KEY, FirstName VARCHAR(30));
INSERT INTO Users (username,Firstname) VALUES ('a','aa');
INSERT INTO Users (username,Firstname) VALUES ('k','kkk');
TRUNCATE TABLE Users;
DELETE FROM Users WHERE username='a'


create database test; 
create table users(id int, name char10, status char(10), PRIMARY KEY(id) ); 
insert into users values (2,'john','active'); 
insert into users values (3,'john','active'); 
insert into users values (4,'john','active'); 
delete from users where id in (2,4);
select  * from users;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE Users_2;
CREATE TABLE Users(
username varchar(20),
firstname char(30),
lastname char(30),
primary key (username)

)ENGINE=InnoDB DEFAULT CHARSET=utf8;
update Users set firstname='test',lastname='lastname' where firstname='test';
select * from Users where firstname='test';
DROP TABLE Users;


-- 

-- MySQL - Tutorial Part 2 & 3
-- https: 

-- Use MySQL commands to create and drop databases.
--   CREATE USER 'exampleUser'@'%' IDENTIFIED BY '<PASSWORD>!';
--   GRANT ALL PRIVILEGES ON DATABASE_NAME.* TO 'exampleUser'@'%' IDENTIFIED BY 'examplePassword'!
--   FLUSH PRIVILEGES;
-- 
-- Create a database called employee, with the "ALL PRIVILEGES" grant option, so that the "exampleUser" user can create tables with these privileges, and then drop that database.
--
SET NAMES utf8;
CREATE DATABASE employee CHARACTER SET utf8 COLLATE utf8_general_ci;
GRANT ALL PRIVILEGES ON employee.* TO 'employee'@'%' IDENTIFIED by 'examplePassword'!
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
ALTER TABLE Users_2
    UPDATE UserName='James';
DROP DATABASE sampleDB;

echo;echo "-------------------------------------------------------";echo;echo;
echo "-------------------------------------------------------";echo;echo;
echo "------------------------------------------------------------------";echo;echo;
echo "------------------------------------------------------------------";echo;echo;
echo "---------------------------------------------------------------------";echo;echo;
echo "---------------------------------------------------------------------";echo;echo;
?>
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users_2 (username char(20) PRIMARY KEY, FirstName VARCHAR(30), LastName VARCHAR(30));
DROP TABLE Users_2

--
-- Please update the table design and the queries using the design and the queries which should be updated/updated using the design.
--
UPDATE Users_2 SET FirstName = "Gabriela";
UPDATE Users_2 SET LastName = "Jamesdavis" WHERE username = "Gabriela";
UPDATE Users_2 SET FirstName = "George" WHERE username = "Gabriela"
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users_2(username char(20) PRIMARY KEY, FirstName VARCHAR(30));
DROP TABLE Users_2
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SET @myvar := 'Some text';
SET @myvar := 'Some other text';
SELECT @myvar;
SELECT CONCAT(@myvar, @myvar);
SET NAMES 'utf8';
SET CHARACTER_SET_CLIENT = 'latin1';
SHOW VARIABLES WHERE Variable_name = 'character_set_database' or Variable_name = 'collation_database';
SHOW VARIABLES WHERE Variable_name = 'character_set_connection' or Variable_set_name = 'collation_connection';
SHOW VARIABLES WHERE Variable_name = 'character_set_results' or Variable_set.name = 'collation_results';
SHOW VARIABLES WHERE Variable_name = 'collation_connection' or Variable_set.name = 'collation';
SHOW VARIABLES WHERE Variable_set_name = 'encoding';
 
SELECT username FROM Users_2 WHERE username LIKE 'Test' AND username LIKE 'Tset_%'
-- Please use the following syntax in your query, replace the username as appropriate.
SELECT username FROM Users_2 WHERE username LIKE 'Test%' AND username LIKE 'Tset';
 
DROP DATABASE IF EXISTS testDB;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE  Users_2(username char(20) PRIMARY KEY,
FirstName VARCHAR(30),
email char(32));
INSERT INTO Users_2 VALUES('Joe','John','<EMAIL>');

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO Users_2 (usernamename, FirstName) VALUES ('Joe', 'John');
DROP TABLE Users_2

create user 'test1';
grant all privileges on sampleDB.* to 'test1'@'%' identified by 'test1';
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE Users_2

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users (username char(20) PRIMARY KEY, FirstName VARCHAR(30));

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE Users_2
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE Users_2

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users_2(User_Id INT, User_Name VARCHAR(20)) ENGINE=InnoDB;
INSERT INTO Users_2(User_Id, User_Name) VALUES (1, "Ab");
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE users_2

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;


DROP TABLE Users

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE Users_3

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE Users_3
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SET character_set_connection = 'utf8'; CREATE TABLE IF NOT EXISTS Users (id INT NOT NULL AUTO_INCREMENT, Name VARCHAR(20), Age INT, PRIMARY KEY(id), UNIQUE(Name)) DEFAULT CHARSET=utf8mb4;
CREATE TABLE IF NOT EXISTS Users (id INT NOT NULL AUTO_INCREMENT, Name VARCHAR(20), Age INT, PRIMARY KEY(id), UNIQUE(Name)) DEFAULT CHARSET=utf8mb4;

DROP TABLE Users_3
CREATE TABLE Users_2 (id INT NOT NULL AUTO_INCREMENT, Name VARCHAR(20), Age INT, Primary Key(id), UNIQUE(Name)) DEFAULT CHARSET=utf8mb4;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
UPDATE Users_3 SET City = \"<NAME>\" WHERE Id = 4;
DROP TABLE Users_3;

-- The following query is only valid in current MySQL version
# SELECT Id, Email FROM Users_new;
# # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # #
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
GRANT ALL PRIVILEGES ON sampleDB.* to'veryhighuser'@'localhost' identified by'secret';
FLUSH PRIVILEGES;
-- Remember to drop the database after every single query!
DROP DATABASE IF EXISTS sampleDB;

-- I am now logged in as veryhighuser
SELECT user, host;
GRANT SELECT, INSERT, UPDATE, DELETE ON sampleDB.* to'veryhighuser'@'localhost' identified by'secret';
FLUSH PRIVILEGES;\q

-- Now you are able to test that your changes are working
SELECT id, name FROM Users WHERE groupname='veryhighuser';
DELIMITER ;;
CREATE FUNCTION addfive
	(
		p_username varchar(100),
		p_password varchar(100)
	)
BEGIN
	set @password=<PASSWORD>;</p>
</div>
</code>
</div>
<script src="https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js"></script>
```
---
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

-- Use one of the following:

-- INSERT
INSERT INTO Users_3 VALUES ("Viviane","<EMAIL>","Passwort","Bahn");

-- UPDATE
UPDATE Users_3
SET Users_3.email = "<EMAIL>", Users_3.password = "<PASSWORD>"
WHERE Users_3.user_id = 1 AND Users_3.password = "<PASSWORD>";

-- DELETE
DELETE FROM Users_3
WHERE Users_3.user_id = 1;

CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE Users_3;
CREATE TABLE Users_3 (user_id INT,name VARCHAR (10)) ENGINE=MYISAM;
DROP TABLE Customers_2;
CREATE TABLE Customers_2 (customer_id INT,name VARCHAR (15) NOT NULL UNIQUE,email VARCHAR (255),address1 VARCHAR (200),address2 VARCHAR (50),city VARCHAR (50),state VARCHAR (2),zipcode INT,phone VARCHAR (15),rating INT,date DATETIME,created_at DATETIME DEFAULT NOW());
DROP TABLE Customers_3;
CREATE TABLE Customers_3 (customer_id INT,name VARCHAR (15) NOT NULL UNIQUE,email VARCHAR (255),address1 VARCHAR (200),address2 VARCHAR (50),city VARCHAR (50),state VARCHAR (2),zipcode INT,phone VARCHAR (15),rating INT,date DATETIME,created_at DATETIME DEFAULT NOW()) ENGINE=MYISAM;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE Users_3
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
ALTER TABLE Users RENAME TO Users_2
-- Please create a short query having no more than two distinct subqueries
SELECT * FROM (SELECT User_id FROM Users WHERE User_id NOT IN (SELECT User_id FROM Users)) AS x
AND (SELECT User_id FROM Users WHERE User_id NOT IN (SELECT User_id FROM Users)) AS y
AND x.User_id <> y.User_id
-- Please create a SQL query which returns three distinct integers (0,1,2). The query should be executed against the user table.
SELECT RAND()
AND RAND()
AND RAND()
-- Please create a query which returns true or false. The query should be executed against the user table. 
SELECT User_id FROM Users_3 WHERE User_id in (1, 2, 3, 5) AND User_id IN (28, 29)
-- Please create a query which executes only if 'users' table is empty.
SELECT COUNT(*) FROM Users
-- You know which of the following is true? (Select only true) 
-- (a)  (b)  (c)  (d)  
SELECT User_id FROM Users WHERE User_id NOT IN (SELECT User_id FROM Users WHERE first_name = 'user1')
-- The following query returns false if two or more 'users' table records are equal. It also returns true if the user with user_id = 28 has more than two connections to it.
SELECT User_id IN (SELECT User_id FROM Users WHERE  User_id NOT IN (SELECT User_id FROM Users WHERE first_name = 'user2'))
-- Please create a query which would return true only on records where country is 'Germany'.
SELECT User_id FROM Users WHERE country = 'Germany'
-- Please create a mutated query in MySQL
UPDATE users SET last_login = '2009-04-13' WHERE Country = 'UK' and Last_login IS NULL 
-- Please create a query which executes only when a table with the column'size_on_disk' exists. The size_on_disk column is stored in the 'user_diskspace' table
SELECT User_id FROM Users WHERE size_on_disk > 1000
-- Please create a mutated query that updates the 'users' table with all countries that have a population value greater than 140 million.
UPDATE Users SET country = 'India' WHERE population_in_millions > 14000 * 1000
-- Please create a query which returns any records with 3 or more columns having a certain value.
SELECT * FROM users
WHERE (length(first_name) == 3) AND (length(last
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
ALTER TABLE Users_3 ADD INDEX user_first_name (first_name);
ALTER TABLE Users_3 ADD INDEX user_last_name (last_name);

CREATE TABLE IF NOT EXISTS Invoices (
    user_id INT,
    user_name TEXT,
    invoice_id INT NOT NULL,
    date_requested TIMESTAMP NOT NULL,
    amount INT NOT NULL,
    PRIMARY KEY user_id
);

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE Users_3;

GRANT ALL PRIVILEGES ON sampleDB.Users_3 TO 'MySQL'@'localhost' IDENTIFIED BY 'your secret password';
FLUSH PRIVILEGES;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users
(
ID INT(5) AUTO_INCREMENT,
UserID INT(11) NOT NULL UNIQUE,
Password VARCHAR(50) NOT NULL,
Age INT(5) NOT NULL,
Phone INT(5) NOT NULL
);
-- Please create a very basic program. The query results should be displayed to the screen.
CREATE DATABASE IF NOT EXISTS sampleDB;
USE sampleDB;
SELECT * FROM Users WHERE AGE=20;
USE sampleDB;
DROP TABLE Users
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE Users
create table Users(UserFirstName VARCHAR(30), UserLastName VARCHAR(30))
-- We can also use the INSERT statement to generate some test data into our table Users
insert into Users values('John','Doe');
insert into Users values('Mary','Smith');

SELECT * FROM Users;
-- Use SELECT to extract all records from table Users.
SELECT UserFirstName, UserLastName FROM Users;
 
select Users.UserFirstName, Users.UserLastName, Cars.ModelYear as ModelYear from Users inner join Cars on Users.UserFirstName = Cars.UserFirstName
insert into Users values('Rick', 'Moran');
insert into Users values('Rose', 'Jones');
insert into Users values('Joshua','Hansen');
insert into Users values('David', 'Schneider');
insert into Users values('Emma', 'Lewis');
insert into Users values('Sarah', 'Kelley');

SELECT * FROM Users;
SELECT * FROM Cars
SELECT * FROM Users INNER JOIN Cars USING(UserFirstName)
SELECT Users.UserFirstName, Users.UserLastName FROM Users INNER JOIN Cars USING (UserFirstName)

SELECT * FROM Users LEFT JOIN Cars ON Users.UserFirstName = Cars.UserFirstName

SELECT * FROM Users INNER JOIN Cars USING (UserFirstName) LEFT JOIN Users INNER JOIN Cars ON Users.UserFirstName = Cars.UserFirstName
-- Please create a 3rd mutated query which extracts all the records from the Users table that have the UserFirstName 'R'. */
SELECT * FROM Users WHERE UserFirstName = 'R'
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE Users_3
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE Users_3;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE Users_3;
DROP DATABASE IF EXISTS sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE Users_3

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

CREATE TABLE IF NOT EXISTS Users_3 (
    UserID int(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    Password varchar(50) NOT NULL,
    Created_At timestamp default CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS Admin_Users (
    ID int(11) PRIMARY KEY,
    UserName varchar(25) UNIQUE
);

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE Users_4
-- Please create a mutated program that demonstrates the usage of LIKE conditions.
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE Users_5
-- Please create a mutated program that implements a transaction
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE Users_6

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS Users_3 (
    UserID int(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    Password varchar(50) NOT NULL,
    Created_At timestamp default CURRENT_TIMESTAMP
);
CREATE TABLE IF NOT EXISTS Admin_Users (
    ID int(11) PRIMARY KEY,
    UserName varchar(25) UNIQUE
);
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS "Users_3" (
    UserID int(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    Password varchar(50) NOT NULL DEFAULT 0,
    Created_At timestamp default CURRENT_TIMESTAMP
);
CREATE TABLE IF NOT EXISTS Admin_Users (
    ID int(11) PRIMARY KEY,
    UserName varchar(25) UNIQUE
);
 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS Users (
    ID int(11) not null primary key auto_increment,
    Password varchar(100) default NULL,
    Created_At TIMESTAMP default current_timestamp,
    Last_Login TIMESTAMP,
    FirstName varchar(100) default NULL,
    LastName varchar(100) default NULL,
    Title varchar(100) default NULL,
    Organization varchar(100) default NULL
);
CREATE TABLE IF NOT EXISTS Users_2(
    UserID int(11) not null primary key auto_increment,
    Name varchar(100) default NULL,
    User_Type enum('Admin','User','Trainee') default NULL
);

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- Please create your second database named sampleDB2. You need to have create your sampleDB2 database as the parent to sampleDB.
CREATE DATABASE IF NOT EXISTS sampleDB2; USE sampleDB2;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

CREATE TABLE IF NOT EXISTS Users (
    ID int(11) PRIMARY KEY AUTO_INCREMENT,
    FirstName varchar(20) NOT NULL,
    LastName varchar(30) NOT NULL
);
UPDATE Users
SET LastName='Smith'
WHERE ID = 1;
UPDATE Users
SET FirstName='Graham'
WHERE ID = 2;
UPDATE Users
SET FirstName='John'
WHERE ID = 3;
SELECT SQL_CALC_FOUND_ROWS CONCAT(FirstName,'',LastName,' is a very','exciting','guy!');
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

CREATE TABLE IF NOT EXISTS Users
(
    ID int(11) PRIMARY KEY AUTO_INCREMENT,
    FirstName varchar(20) NOT NULL,
    LastName varchar(30) NOT NULL
);
UPDATE Users
SET FirstName='Graham', LastName='Smith'
WHERE ID = 1;
UPDATE Users
SET FirstName='John', LastName='Smith'
WHERE ID = 2;
UPDATE Users
SET LastName='Smith'
WHERE ID = 3;
UPDATE Users
SET FirstName='John', LastName='Smith', Address='Somewhere'
WHERE ID = 4;
SELECT SQL_CALC_FOUND_ROWS CONCAT(FirstName,'',LastName,' is a very','exciting','guy!');
 
SELECT UserID from (SELECT UserID FROM Users);
-- Please create a basic script in a text editor, convert this into a MySQL database, run it and then
-- create a SQL script that does the exact same thing (but using stored procedures and stored
-- functions)
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP PROCEDURE IF EXISTS GetEmployees_3;
CREATE PROCEDURE GetEmployees_3()
    BEGIN
    SELECT FirstName, LastName,
        IF(Role = 'Administrator', 'Administrator/Manager', NULL)
        FROM Users
        WHERE UserID <> 1;
    END;
-- Call
USE sampleDB;
CALL GetEmployees_3();
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
USE sampleDB;
DROP PROCEDURE IF EXISTS GetEmployees_3;
CREATE PROCEDURE GetEmployees_3 ()
BEGIN
SELECT FirstName, LastName
FROM Users
WHERE UserID <> 1
UNION
SELECT Manager
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS Users (
    ID int(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    User_name varchar(25),
    User_age int(11),
    Address varchar(100)
);
SELECT * FROM Users
 

INSERT INTO Users (User_name, User_age, Address)
VALUES ("Amy", 13, "Boston, MA")
 

SELECT User_age FROM Users WHERE User_age > 18

UPDATE Users SET User_name = "Alex" WHERE User_name = "Amy"
 

DELETE FROM Users WHERE User_name = "Amy"

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- Please create your second database named sampleDB2. You need to have create your sampleDB2 database as the parent to sampleDB.
CREATE DATABASE IF NOT EXISTS sampleDB2; USE sampleDB2;
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
USE sampleDB2;
DROP TABLE IF EXISTS table10931;
CREATE TABLE table10931 (col1 INT(10));
insert into table10931 values (1);
insert into table10931 values (2);
 
USE sampleDB;
SHOW DATABASES;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP DATABASE IF EXISTS sampleDB2; USE sampleDB;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP DATABASE sampleDB,sampleDB2;

 

DROP DATABASE IF EXISTS sampleDB2;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

-- Please drop all tables
DROP TABLE IF EXISTS sampleTable1; DROP TABLE IF EXISTS sampleTable2;
-- Please drop all records
DELETE FROM sampleTable1; DELETE FROM sampleTable2;

DROP DATABASE IF EXISTS sampleDB; DROP DATABASE IF EXISTS sampleDB2;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP DATABASE sampleDB2; EXIT
-- Please re-use the code to create the third and last database as sampleDB3 and sampleDB3a, respectively. Please fill in sampleDB3a with SQL that: creates a table t1 with 20 rows and does a join on t1 and t2 with an auto-increment id number that is updated every 15 rows.
CREATE DATABASE IF NOT EXISTS sampleDB3; USE sampleDB3;
CREATE DATABASE IF NOT EXISTS sampleDB3A; USE sampleDB3A;
CREATE TABLE t1 (ID INT);
INSERT INTO t1 VALUES(1); INSERT INTO t1 VALUES(2); INSERT INTO t1 VALUES(3); INSERT INTO t1 VALUES(4);
CREATE TABLE t1b(ID INT);

SET GLOBAL local_infile=TRUE; SET GLOBAL local_infile=FALSE;
-- Please create a SQL statement that updates the auto-increment ID field of table t1 by 50. Create a table t2 that has an integer field id. Then, create a SQL statement to update the field with an auto-increment value by 0, 1, 2,... 50 using your updated SQL statement on table t1. You should use a subquery for t2.
CREATE DATABASE IF NOT EXISTS sampleDB3B; USE sampleDB3B;
CREATE TABLE t2 (ID INT);
INSERT INTO t2 VALUES(54);
CREATE TABLE t3 (ID INT);
CREATE TABLE t3b (ID INT);
CREATE TABLE t4 (ID INT);
INSERT INTO t4 VALUES(5);
CREATE TABLE t4b (ID INT);



SHOW DATABASES;
SHOW TABLES;
-- Please create the following two tables in the sampleDB. You need a table t1 that has 4 columns and integer types t1.id, the integer type of the last column and 1 integer column named numRows.
CREATE DATABASE IF NOT EXISTS sampleDB4a; USE sampleDB4a;
CREATE TABLE IF NOT EXISTS t1 (id INT PRIMARY KEY, numRows INT);


 
CREATE DATABASE IF NOT EXISTS sampleDB5; USE sampleDB5;
DROP PROCEDURE IF EXISTS getNameById;
DELIMITER $$
CREATE PROCEDURE `getNameById`(IN `personid` INT)

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP DATABASE IF EXISTS sampleDB2; USE sampleDB;
DROP DATABASE IF EXISTS sampleDB;
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS user
( username varchar(50) NOT NULL PRIMARY KEY,

firstname varchar(50) NOT NULL,
lastname varchar(50) NOT NULL
);

INSERT INTO user VALUES ('admin','Ada','Lovelace');
INSERT INTO user VALUES ('alice','Alice','Jobs');
INSERT INTO user VALUES ('bob','Bob','Allen');<commit_msg>Updated MySQL.sql.<commit_after>---
permalink: /
title: "Hello, World"
excerpt: "About me"
author_profile: true
redirect_from: 
  - /about/
  - /about.html
---

## Hi, I'm Adrian. I'm a second-year graduate student in the Computer Science department at [University of Kansas](http: 

## Contact

* [LinkedIn](https: 
* [GitHub](http: 
* [E-mail: <EMAIL>](<EMAIL>)
* [Github: @adrianliu20](https: 

## Research

* Evolutionary Algorithms
	* [Learning the Neural Network for Deep Learning Using Genetic Algorithms](http: 
* [An overview of the Evolutionary Algorithm](http: 

## Publications

* [Learning Convolutional Neural Networks
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO people DEFAULT VALUES;
DUMMY TABLE;
DROP DATABASE IF EXISTS sample;
GRANT ALL PRIVILEGES ON mysql.* TO 'user'@'%' IDENTIFIED BY '<PASSWORD>';
GRANT ALL PRIVILEGES ON `sample2`.* TO `user`@'%' IDENTIFIED BY '<PASSWORD>';
DROP DATABASE IF EXISTS `my-db`;

GRANT ALL PRIVILEGES ON mysql.user TO 'root'@'%';
FLUSH PRIVILEGES
DROP DATABASE IF EXISTS `my_db`;

DROP DATABASE IF EXISTS `mysql`

SHOW DATABASES;

CREATE DATABASE `mysql`; USE `mysql`; SHOW tables; SHOW tables FROM user; SHOW processlist;
 
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP DATABASE IF EXISTS sampleDB2; USE sampleDB;
DROP DATABASE IF EXISTS sampleDB;
DROP TABLE IF EXISTS t1;
-- Your answer here

</script>

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

 

SELECT * FROM mytable LIMIT 100;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

 
 
CREATE TABLE tb2 (

FOREIGN KEY (FOREIGN_INDEX) REFERENCES tb1(id)

);

 

INSERT INTO tb2 (FOREIGN_INDEX) VALUES(1);
INSERT INTO tb2 (FOREIGN_INDEX) VALUES(2);
INSERT INTO tb2 (FOREIGN_INDEX) VALUES(3);
INSERT INTO tb2 (FOREIGN_INDEX) VALUES(5);
INSERT INTO tb2 (FOREIGN_INDEX) VALUES(5);
INSERT INTO tb2 (FOREIGN_INDEX) VALUES(2);
INSERT INTO tb2 (FOREIGN_INDEX) VALUES(9);
INSERT INTO tb2 (FOREIGN_INDEX) VALUES(7);
INSERT INTO tb2 (FOREIGN_INDEX) VALUES(4);
INSERT INTO tb2 (FOREIGN_INDEX) VALUES(0);
INSERT INTO tb2 (FOREIGN_INDEX) VALUES(8);

 
INSERT INTO tb2 (FOREIGN_INDEX) VALUES(NULL);

 
CREATE INDEX Idx_fk ON tb2 (FOREIGN_INDEX);
CREATE UNIQUE INDEX Idx_u ON tb2 (FOREIGN_INDEX);
CREATE FOREIGN KEY fk_tb2_tb1_ID FOREIGN KEY (FOREIGN_INDEX) REFERENCES tb1(id);

 

INSERT INTO tb2 (FOREIGN_INDEX) VALUES(NULL);

select *
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP DATABASE IF EXISTS sampleDB2; USE sampleDB;
DROP DATABASE IF EXISTS sampleDB;
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS person; USE sampleDB;
DROP TABLE IF EXISTS student; USE sampleDB;
DROP TABLE IF EXISTS teacher; USE sampleDB;
CREATE TABLE IF NOT EXISTS person(
id INTEGER(11) AUTO_INCREMENT,
name VARCHAR(50) NOT NULL,
age INTEGER(2) NOT NULL,
position VARCHAR(50) NOT NULL,
PRIMARY KEY(id)
);
CREATE TABLE IF NOT EXISTS student(
class_year VARCHAR(20) NOT NULL,
id INTEGER(11),
name VARCHAR(50) NOT NULL,
salary INTEGER(11) NOT NULL,
PRIMARY KEY(id)
);
 CREATE TABLE IF NOT EXISTS teacher(
class_year VARCHAR(20) NOT NULL,
id INTEGER(11),
name VARCHAR(50) NOT NULL,
salary INTEGER(11) NOT NULL,
PRIMARY KEY(id)
);
 INSERT INTO person (name,age,position) VALUES ("Rachit",20,"Engineer");
 INSERT INTO person (name,age,position) VALUES ("Tirthankatri",21,"Teacher");   
 INSERT INTO person (name,age,position) VALUES ("Vatsiya",20,"Student");
 INSERT INTO student (class_year,id,name,salary) VALUES ("2012/2013",1,"Rachit",1000);
 INSERT INTO student (class_year,id,name,salary) VALUES ("2015/2016",2,"Vatsiya",3000);
 INSERT INTO student (class_year,id,name,salary) VALUES ("2016/2017",3,"Tirthankatri",3500);
 INSERT INTO teacher (class_year,id,name,salary) VALUES ("2010/2011",1,"Rachit",1500);
 INSERT INTO teacher (class_year,id,name,salary) VALUES ("2013/2014",2,"Vatsiya",2000);
 INSERT INTO teacher (class_year,id,name,salary) VALUES ("2012/2018",3,"Tirthankatri",1700);
 USE sampleDB; SELECT * FROM person;
 SELECT * FROM student;
 SELECT * FROM teacher;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
GRANT ALL PRIVILEGES ON sampleDB2.* TO 'root'@'localhost' IDENTIFIED BY 'root';
SET GLOBAL  max_allowed_packet=512M;
 
DROP SCHEMA IF EXISTS sampleDB;
CREATE USER 'root'@'localhost' IDENTIFIED BY 'root';
DROP DATABASE IF EXISTS sampleDB2;
 
DROP TABLE IF EXISTS sampleDB2.persons;
CREATE TABLE IF NOT EXISTS `sampleDB2`.`persons` (
`personsID`  INT UNSIGNED  NOT NULL AUTO_INCREMENT,
`firstName` CHAR(50),
`lastName` CHAR(50),
`birthdate` DATETIME,
PRIMARY KEY (`personsID`)
);

ALTER TABLE `sampleDB2`.`persons` ADD INDEX `firstPersonsID` ON `sampleDB2`.`persons`(`personsID`);
ALTER TABLE `sampleDB2`.`persons` ADD INDEX `lastPersonsID` ON `sampleDB2`.`persons`(`personsID`);
ALTER TABLE `sampleDB2`.`persons` ADD INDEX `birthdatePersonsID` ON `sampleDB2`.`persons`(`personsID`);
 
DROP TABLE IF EXISTS sampleDB2.countries;
CREATE TABLE IF NOT EXISTS `sampleDB2`.`countries` (
`countriesID`  INT UNSIGNED  NOT NULL AUTO_INCREMENT,
`name` CHAR(50),
PRIMARY KEY (`countriesID`)
);
ALTER TABLE `sampleDB2`.`countries` ADD INDEX `countryID` ON `sampleDB2`.`countries`(`countriesID`);
 
ALTER TABLE `sampleDB2`.`countries`
ADD PRIMARY KEY(`name`);
 
DROP TABLE IF EXISTS sampleDB2.persons;
DROP TABLE IF EXISTS sampleDB2.countries;

-- Please write the query needed for the sample project.
-- Please drop all tables which are present in this schema. 

#-------------------------------------------------------
--MySQL sample database created
#-------------------------------------------------------

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS sampletable;
CREATE TABLE IF NOT EXISTS sampletable(id INT NOT NULL PRIMARY KEY, field1 VARCHAR(25), field2 VARCHAR(25)); 
INSERT INTO sampletable(id, field1, field2) VALUES(1, 'Hello', 'Golavia');
INSERT INTO sampletable(id, field1, field2) VALUES(2, 'World', 'Golavia');
SELECT * FROM sampletable;
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS sampletable;
CREATE TABLE IF NOT EXISTS sampletable(id INT NOT NULL PRIMARY KEY, field1 VARCHAR(25), field2 VARCHAR(50)); 
INSERT INTO sampletable(id, field1, field2) VALUES(1, 'Hello', 'Golavia');
INSERT INTO sampletable(id, field1, field2) VALUES(2, 'World', 'Golavia');
SELECT * FROM sampletable;
-- Create a view on sampletable
CREATE VIEW sampleview AS 
  SELECT s.field1 as 'SampleviewField1', s.field2 as 'SampleviewField'
  FROM sampletable t JOIN sampletable s ON t.field1 = s.field2
  WHERE t.id = 1;

SELECT * FROM sampleview;
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS test;
CREATE TABLE IF NOT EXISTS test(id INT NOT NULL, field1 VARCHAR(25)); 
INSERT INTO test(id, field1) VALUES(1, 'Hello');
INSERT INTO test(id, field1) VALUES(2, 'World');
INSERT INTO test (id, field1) VALUES(2,'Goodbye');
SELECT * FROM test;
-- Drop the views and test table
DROP VIEW IF EXISTS sampleview;
DROP TABLE IF EXISTS test;
-- Create a complex nested query that demonstrates the use of the JSON format for storing complex information and the use of CASE constructs.
CREATE DATABASE IF NOT EXISTS sampleDB;
USE sampleDB;
DROP TABLE IF EXISTS test;
CREATE TABLE IF NOT EXISTS test(id INT NOT NULL, name varchar(25), value1 TEXT, value2 INT); 
INSERT INTO test(id, name, value1, value2) VALUES(1, 'John', '{1,2,3}', 2);
INSERT INTO test(id, name, value1, value2) VALUES(2, 'Suzana', '{1,2,3}', 4);
INSERT INTO test(id, name, value1, value2) VALUES(3, 'Sukrit', '{1,2,3}', 5);
INSERT INTO test(id, name
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP DATABASE IF EXISTS sampleDB2; USE sampleDB;
DROP DATABASE IF EXISTS sampleDB2; USE sampleDB;
DROP DATABASE IF EXISTS sampleDB3; USE sampleDB;
CREATE TABLE T01 (t01_id INTEGER PRIMARY KEY, v01_text TEXT);
INSERT INTO T01 VALUES (1,'Hello World!');
INSERT INTO T01 VALUES (2,'Hello Rocks!');
INSERT INTO T01 VALUES (3,'Hello World!');
DROP TABLE T01;
CREATE TABLE T02 (t02_id INTEGER PRIMARY KEY, v02_text TEXT);
INSERT INTO T02 VALUES (4,'How to code in Python! You won\'t understand this in a few hours!');
INSERT INTO T02 VALUES (5,'I need to do some research');
INSERT INTO T02 VALUES (7,'Hello World!');
DROP TABLE T02;
USE sampleDB;
-- Please write a query that uses two tables stored in separate databases and performs an update/delete of the rows to the correct database.
SELECT t01_text FROM T01;
SELECT t01_text FROM T02;
USE sampleDB;
update T01 set t01_text = CONCAT('update ',v01_text) where t01_id=3;
select t01_text from T01;
use sampleDB2;
delete from T02;
select t01_text from T02;
USE sampleDB;
select t01_text from T01;
 
CREATE TABLE T01 (t01_id INTEGER PRIMARY KEY, v01_text TEXT, INDEX(v01_text));
SELECT t01_text, COUNT(*) FROM T01 GROUP BY t01_text;
SELECT v01_text, COUNT(*) FROM sampleDB_T01 GROUP BY v01_text;
DROP TABLE T01;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `customer`; USE sampleDB;
-- Please create an equivalent of the above query after completing the previous task in C
CREATE DATABASE IF NOT EXISTS sampleDB; SELECT * FROM information_schema.TABLES WHERE table_schema='sampleDB' and TABLE_NAME IN ('customer', 'city');
UPDATE customer SET city='Kolkowska' WHERE id=2; COMMIT;
INSERT INTO customer (first_name, last_name, city) VALUES ('Jordan', 'Friedman', 'Kolkowska'); COMMIT;
CREATE DATABASE IF NOT EXISTS sampleDB; SELECT * FROM information_schema.TABLES WHERE table_schema='sampleDB' and TABLE_NAME IN ('customer', 'city');
CREATE DATABASE IF NOT EXISTS sampleDB; SELECT * FROM information_schema.TABLES WHERE table_schema='sampleDB' and table_name='customer';
-- Please create an equivalent of the following query which uses the MySQL database sampleDB. Be sure to use ENGINE=InnoDB in table creation.
CREATE DATABASE IF NOT EXISTS sampleDB; CREATE TABLE IF NOT EXISTS customer (id INT, first_name VARCHAR(255)); CREATE TABLE IF NOT EXISTS city (id INT, name VARCHAR(255)); INSERT INTO city VALUES (default, 'Westfield'); INSERT INTO customer VALUES (1, 'Johnny', 'Chang'); INSERT INTO city VALUES (2, 'New York City'); COMMIT;
-- Please create a way to use MySQL stored procedures in a way similar to Java programs
DELIMITER  
CREATE PROCEDURE add (i INT)
BEGIN
INSERT INTO customer VALUES(id(1), i, 'Downtown');
END 
DELIMITER ;
CREATE PROCEDURE get (i INT)
BEGIN
SELECT first_name, last_name, city FROM customer WHERE id = id(i);
END 
DELIMITER ;
CALL add(1); CALL add(2); CALL add(3); DELIMITER ;
SELECT * FROM customer;
CALL get(2);
DELIMITER 
-- Please try to complete the following SQL query. Be sure to run the script 20 times, starting from a clean database.
CREATE DATABASE IF NOT EXISTS sampleDB1; USE sampleDB1;
CREATE DATABASE IF NOT EXISTS sampleDB2; USE sampleDB2;
DROP PROCEDURE IF EXISTS sp1; CREATE PROCEDURE sp1(out i INT)
BEGIN
  IF EXISTS(SELECT 1 FROM customer WHERE id > ALL (SELECT id FROM customer)) THEN
     
    SET i = ALL(SELECT id FROM customer);
    ALTER TABLE customer DROP CONSTRAINT customer_id_uniq;
  ELSE
    SET i = 0;
  END IF;
  COMMIT;
  SELECT * from customer
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP DATABASE IF EXISTS sampleDB2; USE sampleDB;
DROP DATABASE IF EXISTS sampleDB;
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `sample`;
DROP TABLE IF EXISTS `sample2`;
DROP TABLE IF EXISTS `sample3`;
DROP TABLE IF EXISTS `sample4`;
DROP TABLE IF EXISTS `sample5`;
DROP TABLE IF EXISTS `sample6`;
DROP TABLE IF EXISTS `sample7`;
DROP TABLE IF EXISTS `sample8`;
DROP TABLE IF EXISTS `sample9`;
DROP TABLE IF EXISTS `sample10`;
DROP TABLE IF EXISTS `sample11`;

CREATE TABLE IF NOT EXISTS `sample` (
`id` INT,
`sample_name` TEXT,
`create_time` TIMESTAMP DEFAULT NULL 
);

INSERT INTO `sample` VALUE (503, 'hello', '2014-04-24 19:07:06');

CREATE TABLE IF NOT EXISTS `sample2` (
`sample1_id` INT,
`sample2_id` INT,
`sample3_id` INT,
`sample_name` TEXT,
`create_time` TIMESTAMP DEFAULT NULL 
,primary key(`sample1_id`,`sample2_id`,`sample3_id`));

-- Create new table
CREATE TABLE IF NOT EXISTS `sample3` (
`sample3_id` INT,
`sample4_id` INT,
`sample5_id` INT,
`sample6_id` INT,
`sample_name` TEXT,
`create_time` TIMESTAMP DEFAULT NULL 
);

INSERT INTO `sample3` VALUE (1);
INSERT INTO `sample3` VALUE (2);
INSERT INTO `sample3` VALUE (3);
INSERT INTO `sample3` VALUE (4);
INSERT INTO `sample3` VALUE (5);
INSERT INTO `sample3` VALUE (6);
INSERT INTO `sample3` VALUE (7);
INSERT INTO `sample3` VALUE (8);
INSERT INTO `sample3` VALUE (9);
INSERT INTO `sample3` VALUE (10);
INSERT INTO `sample3` VALUE (11);



CREATE TABLE IF NOT EXISTS `sample4` (
`sample4_id` INT,
`sample5_id` INT,
`sample6_id` INT
, `sample7_id` INT
, `sample8_id` INT
, `sample9_id` INT
, `sample10_id` INT
, `sample11_id` INT
, `sample_name` TEXT
,`create_time` TIMESTAMP DEFAULT NULL 
);

INSERT INTO `sample4` VALUE (1);
INSERT INTO `sample4` VALUE (2);
INSERT INTO `sample4` VALUE (3);

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS posts(
   postid         INT AUTO_INCREMENT NOT NULL,
   postauthor     VARCHAR(20)     NOT NULL,
   posttime       DATETIME       NOT NULL,
   postcontent    VARCHAR(2000)    NOT NULL,
   PRIMARY KEY ( postid )
) ENGINE=InnoDB DEFAULT CHARSET=utf8;  -- Use this to recreate the database file

CREATE INDEX IF NOT EXISTS posttime ON posts( posttime );

INSERT INTO posts VALUES
   (1,'Anthony',   '2019-08-27 07:00:20 PM',  'This is my first post.'),
   (2,'Anthony',   '2019-08-27 07:00:25 PM',  'This is the third entry.'),
   (3,'Robert',     '2019-08-28 12:00:56 AM',   'It is hard to believe the Internet\'s survival rate. But I am sure you realize that no single Internet company can produce unprecedented success. In the end, the Internet cannot create itself.')
GO
SELECT * FROM posts;

SELECT COUNT(*) FROM posts;

DROP TABLE IF EXISTS posts;

CREATE DATABASE IF NOT EXISTS sampleDB;

CREATE TABLE IF NOT EXISTS users(
   userid         INT AUTO_INCREMENT NOT NULL,
   username     VARCHAR(20)     NOT NULL,
   email        VARCHAR(30),
   password     VARCHAR(30)     NOT NULL,
   gender       INT,
   birthday     DATETIME,
   nationality  VARCHAR(20),
   PRIMARY KEY ( userid )
) ENGINE=InnoDB;

INSERT INTO users VALUES
   (1, 'roberto',  '<EMAIL>',        '<PASSWORD>',   1, '1980-10-01', 'European',   'It was a pleasure working with Alessandro and I.'),
   (2,'matilda',   '<EMAIL>',         '28a1cb626232fd303b859e37c3b267e5987f64b0',   2, '1970-8-14', 'United States', 'For my dear Alessandro.'),
   (3, 'roberto',  '<EMAIL>',        '<PASSWORD>',   2, '2022-12-10', 'Japan',      'It is a wonderful day.')
GO
SELECT * FROM users;

SELECT COUNT(*) FROM users;

DROP TABLE IF EXISTS users;

CREATE DATABASE IF NOT EXISTS sampleDB;


[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employee;
DROP TABLE IF EXISTS department;
DROP TABLE IF EXISTS employee_salary;
DROP TABLE IF EXISTS employee_department;
-- Please create two tables employee and department of this structure
DROP TABLE IF EXISTS employee; DROP TABLE IF EXISTS employee_salary;
DELIMITER $$
CREATE TRIGGER on_create_employee
  BEFORE INSERT ON employee
  FOR EACH ROW
  INSERT INTO 
  employees (
    first_name,
    last_name,
    gender,
    birth_date,
    employee_id,
    department_no 
  ) 
  VALUES 
  ( 
    NEW.first_name,
    NEW.last_name,
    NEW.gender,
    NEW.birth_date,
    NEW.employee_id,
    NEW.department_no
  );

CREATE TRIGGER on_create_employee_salary
  AFTER INSERT ON employee
  FOR EACH ROW
  INSERT INTO 
  employee_salary (
    employee_id,
    bonus_rate,
    salary
  ) 
  VALUES
  ( 
    NEW.employee_id,
    NEW.bonus_rate*NEW.salary,
    NEW.salary
  );

DELIMITER ;
-- Please create an index employee_salary on employee_salary
-- This is not an optimal solution, you should optimize this index.
ALTER TABLE employee_salary ENGINE=InnoDB;
CREATE TABLE IF NOT EXISTS employee_salary (
  employee_id INTEGER NOT NULL,
  bonus_rate TINYINT NOT NULL,
  salary TINYINT
);
CREATE UNIQUE INDEX employee_salary_PRIMARY on employee_salary (employee_id, bonus_rate);
 
CREATE TABLE IF NOT EXISTS employee_department (
  department_no INTEGER NOT NULL,
  employee_id INTEGER
);

CREATE UNIQUE INDEX employee_department_PRIMARY on employee_department (department_no, employee_id);
-- Please insert new data in table employee
INSERT INTO employee (
  first_name,
  last_name,
  gender,
  birth_date,
  employee_id,
  department_no
) 
VALUES (
  'John',
  'Doe',
  0,
  '1990-04-11',
  1,
  3
);

INSERT INTO employee (
  first_name,
  last_name,
  gender,
  birth_date,
  employee_id,
  department_no
) 
VALUES (
  'Paul',
  'Doe',
  0,
  '1996-03-13',
  2,
  3
);

INSERT INTO employee (
  first_name,
  last_name,
  gender,
  birth_date
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS Employees;

CREATE TABLE IF NOT EXISTS Employees (
EmployeeID INT(5) PRIMARY KEY,
FirstName CHAR(4) NOT NULL,
LastName CHAR(8),
Manager INT(5)

CREATE TABLE IF NOT EXISTS HumanResources (
EmployeeID INT(5) NOT NULL,
Manager INT(5),
JobTitle CHAR(8)

SET FOREIGN_KEY_CHECKS = 1

-- Please create a simple query which uses the previously created tables to build a logical query using
-- the queries/logical query form.
SELECT  EmployeeID,
       FirstName,
       LastName,
       Manager 
FROM  Employees,
         HumanResources
WHERE  EmployeeID > 2 AND EmployeeID < 11;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS example (col1 int, col2 text, col3 varchar(200));
CREATE TABLE testTable3(col1 int, col2 int);
 
DROP TABLE IF EXISTS testTable3; USE sampleDB;
-- In our sample program, you will need a new table for the result
CREATE TABLE resultTable3(col1 int, col2 int);
CREATE TABLE IF NOT EXISTS resultTable4(col1 int, col2 text, col3 int, col4 text, col5 int, col6 int);
 
SELECT DATABASE() as DATABASE, USER() as USER FROM information_schema.tables WHERE table_schema='sampleDB' AND table_name='example';
SELECT sampleDB.example.col1, sampleDB.example.col2, sampleDB.example.col3 FROM sampleDB.example LEFT JOIN sampleDB.testTable3 ON sampleDB.example.col1 = sampleDB.testTable3.col1 LEFT JOIN sampleDB.resultTable3 ON sampleDB.example.col1 = sampleDB.resultTable3.col1;
SELECT sampleDB.testTable3.col1, sampleDB.testTable3.col2 FROM sampleDB.testTable3 LEFT JOIN sampleDB.resultTable3 ON sampleDB.testTable3.col1 = sampleDB.resultTable3.col1;
SELECT sampleDB.testTable3.col1, sampleDB.testTable3.col2, sampleDB.resultTable4.col5, sampleDB.resultTable4.col1, sampleDB.resultTable4.col3, sampleDB.resultTable4.col4 FROM sampleDB.testTable3 LEFT JOIN sampleDB.resultTable3 ON sampleDB.testTable3.col1 = sampleDB.resultTable3.col1 LEFT JOIN sampleDB.resultTable4 ON sampleDB.testTable3.col1 = sampleDB.resultTable4.col6;
DROP TABLE IF EXISTS sampleDB.example, IF EXISTS sampleDB.testTable3, IF EXISTS sampleDB.resultTable3, IF EXISTS sampleDB2.testTable3, IF EXISTS sampleDB2.resultTable3, IF EXISTS sampleDB2.example;
CREATE DATABASE sampleDB2; USE sampleDB2;
CREATE TABLE IF NOT EXISTS example2 (col1 int, col2 text, col3
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP DATABASE IF EXISTS sampleDB2; USE sampleDB;
DROP DATABASE IF EXISTS sampleDB;
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `person`;
DROP TABLE IF EXISTS `course`;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP DATABASE IF EXISTS sampleDB2; USE sampleDB;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
ALTER DATABASE sampleDB2 RENAME TO sampleDB;
 
CREATE TABLE IF NOT EXISTS SampleTbl1 ( id INT NOT NULL AUTO_INCREMENT, FirstName CHAR(50), LastName CHAR(50) PRIMARY KEY, Email CHAR(150)unique );

CREATE TABLE IF NOT EXISTS SampleTbl2 ( id INT NOT NULL AUTO_INCREMENT, Name CHAR(50), PRIMARY KEY, Email CHAR(150)unique, BirthDate DATE, CreatedOn DATETIME );

CREATE TABLE IF NOT EXISTS SampleTbl3 ( id INT NOT NULL AUTO_INCREMENT, Name CHAR(50), PRIMARY KEY, Email CHAR(150)unique, BirthDate DATE, CreatedOn DATETIME );

CREATE TABLE IF NOT EXISTS SampleTbl4 ( id INT NOT NULL AUTO_INCREMENT, Name CHAR(50), PRIMARY KEY, Email CHAR(150)unique, BirthDate DATE, CreatedOn DATETIME );

INSERT INTO SampleTbl1 VALUES(1, 'Rose', 'Lebowski', '<EMAIL>');

INSERT INTO SampleTbl2 VALUES(2, '<NAME>');

INSERT INTO SampleTbl3 VALUES(3, 'Rose', 'Lebowski', '<EMAIL>', '2017-05-12');

INSERT INTO SampleTbl4 VALUES(4, 'Rose', 'Lebowski', '<EMAIL>', '2017-05-12');

 
DROP TABLE IF EXISTS SampleTbl1; DROP TABLE IF EXISTS SampleTbl2; DROP TABLE IF EXISTS SampleTbl3; DROP TABLE IF EXISTS SampleTbl4;
DROP TABLE IF EXISTS SampleTbl1; USE sampleDB2; 
 
CREATE TABLE IF NOT EXISTS SampleTbl6 ( id INT NOT NULL AUTO_INCREMENT, FirstName CHAR(50), LastName CHAR(50) PRIMARY KEY, Email CHAR(150)unique );

CREATE TABLE IF NOT EXISTS SampleTbl7 ( id INT NOT NULL AUTO_INCREMENT, Name CHAR(50), PRIMARY KEY, Email CHAR(150)unique, BirthDate DATE, CreatedOn DATETIME );

CREATE TABLE IF NOT EXISTS SampleTbl8 ( id INT NOT NULL AUTO_INCREMENT, Name CHAR(50), PRIMARY KEY, Email CHAR(150)unique, BirthDate DATE, CreatedOn DATETIME );

CREATE TABLE IF NOT EXISTS SampleTbl9 ( id INT NOT NULL AUTO_INCREMENT, Name CHAR(50), PRIMARY KEY, Email CHAR(150)unique,
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP DATABASE IF EXISTS sampleDB2; USE sampleDB;
DROP DATABASE IF EXISTS sampleDB; 
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- Please create a simple CREATE DATABASE statement for the sake of the example shown in MySQL
CREATE DATABASE sampleDB; USE sampleDB
create table IF NOT EXISTS cities(id, country varchar(32) NOT NULL, city varchar(32) NOT NULL);
insert into cities values(1, 'Canada', 'Ottawa');
insert into cities values(2, 'Canada', 'Toronto');
insert into cities values(3, 'Canada', 'Bombay');

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `person`;
DROP TABLE IF EXISTS `course`;
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `person`;
DROP TABLE IF EXISTS `course`;
CREATE TABLE IF NOT EXISTS `person` (
`id` int(11) NOT NULL AUTO_INCREMENT,
`age` int(11) NOT NULL,
`name` varchar(50) NULL DEFAULT NULL,
PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
CREATE TABLE IF NOT EXISTS `course` (
`id` int(11) NOT NULL AUTO_INCREMENT,
`shortCode` varchar(50) DEFAULT NULL,
`courseName` varchar(50) DEFAULT NULL,
`courseDuration` varchar(255) DEFAULT NULL,
`courseDescription` varchar(255) DEFAULT NULL,
`courseTeacher` varchar(255) DEFAULT NULL,
```
This will create a  table called `person` and will not create a table called `course`. The data type and size of the `name` column in the `person` table will be different from the other two tables.

```php
?>
```

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE `course` (id INT NOT NULL AUTO_INCREMENT, name VARCHAR(50) NOT NULL, code VARCHAR(50) NOT NULL, PRIMARY KEY (id));
CREATE TABLE `person` (id INT NOT NULL AUTO_INCREMENT, name VARCHAR(50) NOT NULL, age INT NOT NULL, PRIMARY KEY (id));

-- Test data
INSERT INTO cohort_enroll (person_id, course_id, date_enrolled, week_of_year, homework, grade, is_checked, status) VALUES
(1, 1, '2017-05-03', 4, 3, '9999', 1, 1),
(2, 2, '2017-07-02', 2, '123', '9999', 1, 1),
(3, 2, '2017-06-25', 2, '123', '9999', 1, 1),
(4, 2, '2017-07-26', 2, '123', '9999', 1, 1),
(5, 3, '2017-08-10', 4, '456', '9999', 1, 1),
(6, 1, '2016-05-13', 3, '13', '9999', 1, 1),
(7, 3, '2016-08-29', 2, '789', '9999', 0, 1);

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE person (
    `person_id` int(11) NOT NULL AUTO_INCREMENT,
    `name` varchar(50) NOT NULL,
    `gender` char(4) DEFAULT NULL,
    `rollno` int(5) DEFAULT NULL,
    `address` varchar(255) DEFAULT NULL,
    `birth_date` date DEFAULT NULL,
    `birth_year` year(4) DEFAULT NULL,
    `permanent_address` varchar(255) DEFAULT NULL,
    PRIMARY KEY (`person_id`), UNIQUE KEY `rollno` (`rollno`), INDEX `name` (`name`)
    ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
CREATE TABLE course (
    `course_id` int(2) NOT NULL AUTO_INCREMENT,
    `name` varchar(255) DEFAULT NULL,
    `department` char(4) DEFAULT NULL,
    PRIMARY KEY (`course_id`), UNIQUE KEY `name` (`name`)
    ) ENGINE=InnoDB DEFAULT CHARSET=latin1;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `person`;
DROP TABLE IF EXISTS `course`;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `person`;
DROP TABLE IF EXISTS `course`;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `person`;
DROP TABLE IF EXISTS `course`;
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `person`;
DROP TABLE IF EXISTS `course`;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
 
CREATE DATABASE IF NOT EXISTS MySQLDB;
USE MySQLDB;

 
CREATE TABLE courses (
  `id` int(11) NOT NULL,
  `grade` int(11) NOT NULL,
  `name` varchar(30) DEFAULT NULL,
  PRIMARY KEY (`id`),
  CONSTRAINT `FK_courses_grade` FOREIGN KEY (`grade`) REFERENCES `grades` (`id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
CREATE TABLE persons (
  `id` int(11) NOT NULL,
  `firstname` varchar(25) DEFAULT NULL,
  `lastname` varchar(25) DEFAULT NULL,
  `email` varchar(100) DEFAULT NULL,
  `grade` int(11) DEFAULT NULL,
  `department` varchar(30) DEFAULT NULL,
  PRIMARY KEY (`id`),
  CONSTRAINT `FK_persons_grade` FOREIGN KEY (`grade`) REFERENCES `grades` (`id`),
  CONSTRAINT `FK_persons_department` FOREIGN KEY (`department`) REFERENCES `departments` (`id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
CREATE TABLE grades (
  `id` int(11) NOT NULL,
  `grade` varchar(25) DEFAULT NULL,
  `course_id` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`),
  CONSTRAINT `FK_grades_course` FOREIGN KEY (`course_id`) REFERENCES `courses` (`id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
CREATE TABLE students (
  `id` int(11) NOT NULL,
  `firstname` varchar(25) DEFAULT NULL,
  `lastname` varchar(25) DEFAULT NULL,
  `gender` varchar(10) DEFAULT NULL,
  `course_id` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`),
  CONSTRAINT `FK_students_grade` FOREIGN KEY (`course_id`) REFERENCES `courses` (`id`),
  CONSTRAINT `FK_students_department` FOREIGN KEY (`course_id`) REFERENCES `courses` (`id`) ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
 
INSERT INTO students(id, firstname, lastname, gender, course_id)
VALUES
(1, "Joe","Brown", "Female", 1),
(2,"Peter","Parker",
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `student`;
 
CREATE TABLE IF NOT EXISTS `student` (
  `id` INTEGER PRIMARY KEY AUTO_INCREMENT,
  `name` VARCHAR(100) NOT NULL,
  `class` VARCHAR(100) NOT NULL
);
USE sampleDB;
DROP TABLE IF EXISTS `course`;
 
CREATE TABLE IF NOT EXISTS `course` (
  `id` INTEGER PRIMARY KEY AUTO_INCREMENT,
  `name` VARCHAR(100) NOT NULL
);
USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `person`;
DROP TABLE IF EXISTS `course`;
 ;
 ;
 ;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `person` (
  `personID` INT NOT NULL AUTO_INCREMENT,
    `lastname` VARCHAR(45) NULL DEFAULT NULL, 
    `firstname` VARCHAR(45) NOT NULL,
    `age` INT NOT NULL, 
    `gender` ENUM('male', 'female') NULL DEFAULT NULL, 
  PRIMARY KEY (`personID`));
CREATE TABLE IF NOT EXISTS `course` (
  `courseID` INT NOT NULL AUTO_INCREMENT, 
    `courseNum` INT NULL,
    `courseName` VARCHAR(45) NOT NULL, 
    `teacherID` INT, 
    `classroomID` INT, 
    `termID` INT, 
    `roomNum` INT, 
        PRIMARY KEY (`courseID`), 
        FOREIGN KEY (`teacherID`) REFERENCES `person` (`personID`), 
        FOREIGN KEY (`classroomID`) REFERENCES `course` (`courseID`), 
        FOREIGN KEY (`termID`) REFERENCES `course` (`courseID`));
 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `person` (
  `personID` INT NOT NULL AUTO_INCREMENT,
    `lastname` VARCHAR(45) NULL DEFAULT NULL, 
    `firstname` VARCHAR(45) NOT NULL,
    `age` INT NOT NULL, 
    `gender` ENUM('male', 'female') NULL DEFAULT NULL, 
  PRIMARY KEY (`personID`));
CREATE TABLE IF NOT EXISTS `course` (
  `courseID` INT NOT NULL AUTO_INCREMENT, 
    `courseNum` INT NULL,
    `courseName` VARCHAR(45) NOT NULL, 
    `teacherID` INT, 
    `classroomID` INT, 
    `termID` INT, 
    `roomNum` INT, 
        PRIMARY KEY (`courseID`), 
        FOREIGN KEY (`teacherID`) REFERENCES `person` (`personID`), 
        FOREIGN KEY (`classroomID`) REFERENCES `course` (`courseID`), 
        FOREIGN KEY (`termID`) REFERENCES `course` (`courseID`));
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS person, courses; DROP DATABASE IF EXISTS sampleDB;


[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- Hint: You can use ENGINE=InnoDB/MYISAM to get the best performance for performance tests
CREATE TABLE IF NOT EXISTS persons (
  personID INT NOT NULL AUTO_INCREMENT, 
    lastname VARCHAR(45) NULL DEFAULT NULL, 
    firstname VARCHAR(45) NOT NULL,
    age INT NOT NULL, 
    gender ENUM('male', 'female') NULL DEFAULT NULL, 
  PRIMARY KEY (`personID`));

INSERT INTO person
   (lastname,firstname,age,gender)

VALUES 
  ('Mendoza', 'John',55,'Male'), 
  ('Mendoza', 'Jane',55,'Female'); 

INSERT INTO course
        (lastname,firstname,courseNum,teacherID,classroomID,termID,roomNum); 

VALUES 
    ('<NAME>', 'John', '212111', 625, 72, 1); 

INSERT INTO course
    (firstname,lastname,courseNum,teacherID,classroomID,termID,roomNum) 
    
VALUES 
    ('Alban', 'Jake', '241312', 640, 101, 12), 
    ('Hans', 'Max', '224234', 555, 77, 1), 
    ('Vincent', 'Joel', '243241', 654, 22, 13); 

SELECT * FROM persons;
SELECT * FROM course; 

-- Please verify that you have created all tables.
SHOW TABLES;


[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE person (
    personID INT NOT NULL AUTO_INCREMENT, 
        firstname VARCHAR(45) PRIMARY KEY, 
        lastname, 
        age,
        gender, 
    FOREIGN KEY (courseID) REFERENCES course (`courseID`),
    PRIMARY KEY (courseNum));
CREATE TABLE course (
    courseID INT NOT NULL AUTO_INCREMENT, 
        courseNum, 
        courseName, 
        teacherID, 
        classroomID, 
        termID, 
        roomID,
        PRIMARY KEY (courseNum), 
        FOREIGN KEY (teacherID) REFERENCES person (personID), 
        FOREIGN KEY (classroomID) REFERENCES course (classroomID), 
        FOREIGN KEY (termID) REFERENCES course (classroomID));
-- Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use your database for the operations and assume no table other than person exist. Be sure to have a look of the example before creating a new table
SELECT COUNT(*) AS CITY FROM City WHERE City.cityID = 1;
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB; CREATE TABLE IF NOT EXISTS person (
    personID INT NOT NULL AUTO_INCREMENT, 
        firstname VARCHAR(45), 
        lastname, 
        age,
        gender, 
    FOREIGN KEY (classID) REFERENCES classroom (`classID`),
    KEY (classID), PRIMARY KEY (courseID));
CREATE TABLE IF NOT EXISTS teacher (
    teacherID INT NOT NULL AUTO_INCREMENT,
        faculty, 
        address, 
        country, 
        teacherID, 
    FOREIGN KEY (faculty) REFERENCES classroom (`classID`), 
    FOREIGN KEY (faculty) REFERENCES faculty (`faculty`), 
    FOREIGN KEY (classroomID) REFERENCES classroom (`classID`), 
    FOREIGN KEY (classroomID) REFERENCES classroom (`classID`), 
    PRIMARY KEY (teacherID));
-- Please create a very short query which uses SQL features in a complex way.
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE person (  
  personID INT AUTO_INCREMENT,
    lastname VARCHAR(45) NULL DEFAULT NULL, 
    firstname VARCHAR(45) NOT NULL, 
    age INT NOT NULL, 
    gender ENUM('male', 'female') NULL DEFAULT NULL, 
  PRIMARY KEY (personID));
CREATE TABLE course (  
  courseID INT AUTO_INCREMENT, 
    courseNum INT NULL,
    courseName VARCHAR(45) NOT NULL, 
    teacherID INT, 
    classroomID INT, 
    termID INT, 
    roomNum INT, 
        PRIMARY KEY (courseID), 
        FOREIGN KEY (teacherID) REFERENCES person (personID), 
        FOREIGN KEY (classroomID) REFERENCES course (courseID), 
        FOREIGN KEY (termID) REFERENCES course (courseID));
-- Please create a MySQL query to calculate the average of the grades in a sequence of courses. We suggest you use an SQL function 'round' to round the result to 2 decimal places; however, it's entirely up to you and the programmer to figure out the tradeoffs between speed and accuracy. You should also consider some queries to calculate other averages from a sequence of data that you can construct in-line using techniques like nested aggregate functions (having the sequence of courses be the join condition). Use SQL aggregate functions whenever possible.
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE person (  
  personID INT AUTO_INCREMENT,
    lastname VARCHAR(45) NULL DEFAULT NULL, 
    firstname VARCHAR(45) NOT NULL, 
    age INT NOT NULL, 
    gender ENUM('male', 'female') NULL DEFAULT NULL, 
  PRIMARY KEY (personID));
CREATE TABLE course (  
  courseID INT AUTO_INCREMENT, 
    courseNum INT NULL,
    courseName VARCHAR(45) NOT NULL, 
    teacherID INT, 
    classroomID INT, 
    termID INT, 
    roomNum INT, 
        PRIMARY KEY (courseID), 
        FOREIGN KEY
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO `course` (`courseID`, `courseNum`, `courseName`, `teacherID`, `classroomID`, `termID`, `roomNum`)
VALUES (1, 4501, 'Physics I', 3, 1, 1, 3), 
 (2, 4502, 'Applied Statistics', 1, 1, 2, 8),
 (3, 4503, 'Biology', 2, 2, NULL, NULL);
INSERT INTO `person` (`personID`, `lastname`, `firstname`, `age`, `gender`)
VALUES (1, 'Makre', 'Rachael', 59, 'female'), 
       (2, 'Smith', 'Micheal', 83, 'female'), 
       (3, 'Taylor', 'Ezekiel', 76, 'female'), 
       (4, 'Wilson', 'Carl', 79, 'female'), 
       (5, 'Holm', 'Emil', 44, 'female'), 
       (6, 'Wilson', 'Charles', 65, 'female'), 
       (7, 'Smith', 'Charles', 57, 'female'), 
       (8, 'Williams', 'Larry', 55, 'female'), 
       (9, 'Cooper', 'Frank', 64, 'female'), 
       (10, 'Adams', 'Rose', 81, 'female');
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SHOW TABLES;
DROP DATABASE IF EXISTS sampleDB ;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `person` (
  `personID` INT NOT NULL AUTO_INCREMENT,
    `lastname` VARCHAR(45) NULL DEFAULT NULL, 
    `firstname` VARCHAR(45) NOT NULL,
    `age` INT NOT NULL, 
    `gender` ENUM('male', 'female') NULL DEFAULT NULL, 
  PRIMARY KEY (`personID`));
CREATE TABLE IF NOT EXISTS `course` (
  `courseID` INT NOT NULL AUTO_INCREMENT, 
    `courseNum` INT NULL,
    `courseName` VARCHAR(45) NOT NULL, 
    `teacherID` INT, 
    `classroomID` INT, 
    `termID` INT, 
    `roomNum` INT, 
        PRIMARY KEY (`courseID`), 
        FOREIGN KEY (`teacherID`) REFERENCES `person` (`personID`), 
        FOREIGN KEY (`classroomID`) REFERENCES `course` (`courseID`), 
        FOREIGN KEY (`termID`) REFERENCES `course` (`courseID`));
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
 
CREATE TABLE IF NOT EXISTS `student` (
  `studentID` INT NOT NULL AUTO_INCREMENT,
    `firstName` VARCHAR(45) NULL,
    `lastName` VARCHAR(45) NULL,
  PRIMARY KEY (`studentID`)
   
  UNIQUE (firstName)
);</pre> 
</div>
<p class="image-right">
<img src="/images/querySQL.jpg" alt="Query SQL in MySQL" title="Query SQL in MySQL">

</p>
<p>
The queries here are created from a list of names where each name has four sections, the first and the last name.
&nbsp; &nbsp; First, we create a table with a foreign key constraint to the students table that has three columns.
<a href="https://www.geeksforgeeks.org/mysql-tutorial-foreign-key/">Learn more about Foreign Key constraint</a>.


</p>
</div>
</body>
</html>
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO course 
    (courseNum, courseName, teacherID, classroomID, termID, roomNum) 
    VALUES (3, 'Compilers Principles', 1, 1, 1, 3);
COMMIT;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `student`;
DROP TABLE IF EXISTS `person`;
DROP TABLE IF EXISTS `course`;
DROP TABLE IF EXISTS `term`;
DROP TABLE IF EXISTS `classroom`;
DROP DATABASE IF EXISTS sampleDB;<commit_msg>Added MySQL syntax highlighting<commit_after>---
layout: post
title: How To Run A MySQL Database Server On Your Mac
---
MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.

<!-- Please create a very short query which uses SQL features in a complex way. Be sure to use
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

CREATE TABLE IF NOT EXISTS `person` (
  `personID` INTEGER UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY, 
    `lastname` VARCHAR(45) NULL DEFAULT NULL, 
    `firstname` VARCHAR(45) NOT NULL,
    `age` INTEGER NOT NULL, 
    `gender` CHAR(6) NULL DEFAULT NULL
  );
CREATE TABLE IF NOT EXISTS `course` (
  `courseID` INTEGER UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    `courseNum` INTEGER NULL,
    `courseName` TEXT NOT NULL, 
    `teacherID` INTEGER, 
    `classroomID` INTEGER, 
    `termID` INTEGER, 
    `roomNum` INTEGER
  );
 
 
INSERT INTO `person` (`personID`, `lastname`, `firstname`, `age`, `gender`) VALUES (3, 'Rashan', 'Rashan', 29,"male"); 
DELETE FROM `person` WHERE `personID` = 3;
UPDATE `course` SET `courseName` = 'SQL' WHERE `courseID` = 1;
 

 
SELECT * FROM student ORDER BY enrollID; 
SELECT * FROM student WHERE enrollID IS NULL; 
SELECT * FROM student WHERE enrollID IS NULL AND address IS NULL; 

 

 
SELECT count(*) FROM student; 
SELECT SUM(amount)
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `person` (
  `personID` INT NOT NULL AUTO_INCREMENT,
    `lastname` VARCHAR(45) NULL DEFAULT NULL, 
    `firstname` VARCHAR(45) NOT NULL,
    `age` INT NOT NULL, 
    `gender` ENUM('male', 'female') NULL DEFAULT NULL, 
  PRIMARY KEY (`personID`)
);
CREATE TABLE IF NOT EXISTS `course` (
  `courseID` INT NOT NULLAUTO_INCREMENT, 
    `courseNum` INT NULL,
    `courseName` VARCHAR(45) NOT NULL, 
    `teacherID` INT, 
    `classroomID` INT, 
    `termID` INT, 
    `roomNum` INT, 
        PRIMARY KEY (`courseID`), 
        FOREIGN KEY (`teacherID`) REFERENCES `person` (`personID`), 
        FOREIGN KEY (`classroomID`) REFERENCES `person` (`personID`), 
        FOREIGN KEY (`termID`) REFERENCES `course` (`courseID`)
        );


[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `person` (
  `personID` INT NOT NULL AUTO_INCREMENT,
    `lastname` VARCHAR(45) NULL DEFAULT NULL, 
    `firstname` VARCHAR(45) NOT NULL,
    `age` INT NOT NULL, 
    `gender` ENUM('male', 'female') NULL DEFAULT NULL, 
  PRIMARY KEY (`personID`));
CREATE TABLE IF NOT EXISTS `course` (
  `courseID` INT NOT NULL AUTO_INCREMENT, 
    `courseNum` INT NULL,
    `courseName` VARCHAR(45) NOT NULL, 
    `teacherID` INT, 
    `classroomID` INT, 
    `termID` INT, 
    `roomNum` INT, 
        PRIMARY KEY (`courseID`), 
        FOREIGN KEY (`teacherID`) REFERENCES `person` (`personID`), 
        FOREIGN KEY (`classroomID`) REFERENCES `course` (`courseID`), 
        FOREIGN KEY (`termID`) REFERENCES `course` (`courseID`));
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SELECT * FROM course;
 

-- Write your solution here


[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `courses` (
  `courseID` INT NOT NULL AUTO_INCREMENT, 
    `courseNum` INT NULL,
    `courseName` VARCHAR(45) NOT NULL, 
    `teacherID` INT, 
    `classroomID` INT, 
    `termID` INT, 
    `roomNum` INT, 
        PRIMARY KEY (`courseID`), 
        FOREIGN KEY (`teacherID`) REFERENCES `person` (`personID`), 
        FOREIGN KEY (`classroomID`) REFERENCES `courses` (`courseID`), 
        FOREIGN KEY (`termID`) REFERENCES `courses` (`courseID`));



[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `course` (
  `courseID` INT NOT NULL AUTO_INCREMENT, 
    `courseNum` INT NULL,
    `courseName` VARCHAR(45) NOT NULL, 
    `teacherID` INT, 
    `classroomID` INT, 
    `termID` INT, 
    `roomNum` INT, 
        PRIMARY KEY (`courseID`), 
        FOREIGN KEY (`teacherID`, `classroomID`, `termID`) REFERENCES `course` (`courseID`));

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `people` (
  `personID` INT NOT NULL AUTO_INCREMENT, 
    `lastname` VARCHAR(45) NULL DEFAULT NULL, 
    `firstname` VARCHAR(45) NOT NULL,
    `age` INT NOT NULL, 
    `gender` ENUM('male', 'female') NULL DEFAULT NULL, 
-- Make SQL a bit easier by creating a table to act as an alias to courseTable and studentTable so you do not need to make duplicate copies of courseTable and studentTable each time. 
      FOREIGN KEY (`personID`) REFERENCES `course` (`courseID`) ON UPDATE CASCADE);

ALTER TABLE `people`
ADD UNIQUE INDEX `personid` (`personID`);

ALTER TABLE `people`
ADD UNIQUE INDEX `personid1` (`lastname`);

ALTER TABLE `course`
    ADD FOREIGN KEY (`teacherID`) REFERENCES `people` (`personID`)
    ON UPDATE CASCADE;

ALTER TABLE `course`
    ADD FOREIGN KEY (`classroomID`) REFERENCES `people` (`personID`)
    ON UPDATE CASCADE;
ALTER TABLE `course`
    ADD FOREIGN KEY (`termID`) REFERENCES `course` (`courseID`)
    ON UPDATE CASCADE;


CREATE INDEX courseID on course (courseID);

CREATE TABLE IF NOT EXISTS `coursestudent` (
    `courseID` INT NOT NULL,
    `studnetID` INT NOT NULL,
    FOREIGN KEY (`courseID`) REFERENCES `course` (`courseID`),
    FOREIGN KEY (`studnetID`) REFERENCES `course` (`courseID`)
);

ALTER TABLE `coursestudent`
    ADD UNIQUE INDEX `courseID1` (`courseID`);

ALTER TABLE `coursestudent`
    ADD UNIQUE INDEX `CoursestudnetID1` (`courseID`);
 
ALTER TABLE `coursestudent`
    ADD UNIQUE INDEX
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `courses` (
  `courseID` INT NOT NULL AUTO_INCREMENT, 
    `courseNum` INT NOT NULL, 
    `courseName` VARCHAR(45) NOT NULL, 
    `teacherID` INT, 
    `classroomID` INT, 
    `termID` INT, 
    `roomNum` INT, 
        PRIMARY KEY (`courseID`), 
        FOREIGN KEY (`teacherID`) REFERENCES `person` (`personID`), 
        FOREIGN KEY (`classroomID`) REFERENCES `course` (`courseID`), 
        FOREIGN KEY (`termID`) REFERENCES `course` (`courseID`));
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `persons` (
  `personID` INT NOT NULL AUTO_INCREMENT, 
    `lastname` VARCHAR(45) NULL DEFAULT NULL, 
    `firstname` VARCHAR(45) NOT NULL,
    `age` INT NOT NULL, 
    `gender` ENUM('male', 'female') NULL DEFAULT NULL, 
  PRIMARY KEY (`personID`));
CREATE TABLE IF NOT EXISTS `persons_courses` (
  `personCourseID` INT NOT NULL AUTO_INCREMENT, 
    `personID` INT NULL,
    `courseID` INT NOT NULL,
        PRIMARY KEY (`personCourseID`), 
        FOREIGN KEY (`personID`) REFERENCES `person` (`personID`), 
        FOREIGN KEY (`courseID`) REFERENCES `course` (`courseID`));
-- This query must be run in multiple statements
DELIMITER ;;
-- Please create a semantically equivalent program to the query
select courseID, courseNum, courseName
from course
inner join persons_courses
on course.courseID=personCourse.courseID
where persons_courses.personID=persons.personID
order by courseID, courseName;;
DELIMITER ;
    
-- Execute the query

DELIMITER ;;
-- Please create a semantically equivalent program to the query
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `course` (
  `courseID` INT NOT NULL AUTO_INCREMENT, 
    `courseNum` INT NULL,
    `courseName` VARCHAR(45) NOT NULL, 
    `teacherID` INT, 
    `classroomID` INT, 
    `termID` INT, 
    `roomNum` INT, 
        PRIMARY KEY (`courseID`), 
        FOREIGN KEY (`teacherID`, `classroomID`, `termID`) REFERENCES `course` (`courseID`));
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `course` (
  `courseID` INT NOT NULL AUTO_INCREMENT, 
    `courseNum` INT NULL,
    `courseName` VARCHAR(45) NOT NULL, 
    `teacherID` INT, 
    `classroomID` INT, 
    `termID` INT, 
    `roomNum` INT, 
        PRIMARY KEY (`courseID`), 
        FOREIGN KEY (`teacherID`, `classroomID`, `termID`) REFERENCES `course` (`courseID`));


</pre>		<br>
	</div>
	






[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `course` (
  `courseID` INT NOT NULL AUTO_INCREMENT, 
    `courseNum` INT NULL,
    `courseName` VARCHAR(45) NOT NULL, 
    `teacherID` INT, 
    `classroomID` INT, 
    `termID` INT, 
    `roomNum` INT, 
        PRIMARY KEY (`courseID`), 
        FOREIGN KEY (`teacherID`, `classroomID`, `termID`) REFERENCES `course` (`courseID`));

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
ALTER TABLE `enroll_student` ENGINE=InnoDB;
ALTER TABLE `student` ENGINE=InnoDB;
UPDATE `enroll_student` SET `student.name`='Jhon';
SELECT teacher.teacherID, course.courseName
FROM course INNER JOIN teacher on teacher.teacherID=course.teacherID  
INNER JOIN student on student.studentID=course.studentID;

UPDATE `enroll_student` SET `student.name`='Jhon';
SELECT teacher.teacherID, course.courseName
FROM course INNER JOIN teacher on teacher.teacherID=course.teacherID  
INNER JOIN student on student.studentID=course.studentID;

INSERT INTO `enroll_student`(`studentID`, `teacherID`,`classroomID`,`termID`,`roomID`) 
VALUES (1,10,3,1,2);

UPDATE `enroll_student` SET `student.name`='Jhon';
SELECT teacher.teacherID, course.courseName
FROM course INNER JOIN teacher on teacher.teacherID=course.teacherID  
INNER JOIN student on student.studentID=course.studentID;

UPDATE `enroll_student` SET `student.name`='Jhon';
SELECT teacher.teacherID, course.courseName
FROM course INNER JOIN teacher on teacher.teacherID=course.teacherID  
INNER JOIN student on student.studentID=course.studentID;
SELECT student.studentID, student.name, enroll_student.termID
FROM enroll_student INNER JOIN student ON student.studentID=enroll_student.studentID;

--SELECT course.courseName, teacher.teacherID, student.name, enroll_student.termID
SELECT student.studentID, student.name, enroll_student.termID
FROM enroll_student INNER JOIN student ON student.studentID=enroll_student.studentID
INNER JOIN course ON course.courseID=enroll_student.courseID
INNER JOIN teacher ON teacher.teacherID=enroll_student.teacherID;

--SELECT course.courseName, teacher.teacherID,
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `student` (
  `studentID` INT NOT NULL AUTO_INCREMENT, 
    `studentName` VARCHAR(30) NOT NULL, 
    `courseID` INT, 
        PRIMARY KEY (`studentID`, `courseID`), 
    FOREIGN KEY (`studentID`, `courseID`) REFERENCES `student` (`studentID`));

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `teacher` (
  `teacherID` INT NOT NULL AUTO_INCREMENT, 
  `first_name` VARCHAR(45) NOT NULL, 
  `last_name` VARCHAR(45) NOT NULL, 
  `mailID` VARCHAR(50) NOT NULL, 
  PRIMARY KEY (`teacherID`)
);

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `teacher` (
  `teacherID` INT NOT NULL AUTO_INCREMENT, 
  `first_name` VARCHAR(45) NOT NULL, 
  `last_name` VARCHAR(45) NOT NULL, 
  `mailID` VARCHAR(50) NOT NULL, 
  PRIMARY KEY (`teacherID`)
);
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE `teacher` (
  `teacherID`  INTEGER NOT NULL,
  `first_name` VARCHAR(45) NOT NULL,
  `last_name`  VARCHAR(45) NOT NULL,
  `mailID` VARCHAR(50) NOT NULL
);

CREATE TABLE IF NOT EXISTS `student` (
  `studentID` INT NOT NULL AUTO_INCREMENT,
  `first_name` VARCHAR(45) NOT NULL,
  `last_name` varchar(45) NOT NULL,
  `mobile` CHAR(14) NULL,
  `mailID` VARCHAR(50)  NULL,
  PRIMARY KEY (`studentID`)
);



CREATE TABLE IF NOT EXISTS `student_attendance` (
  `attendanceID` INT NOT NULL AUTO_INCREMENT,
  `studentID` INT NOT NULL,
  `courseID` INT NOT NULL,
  `date` DATE NOT NULL,
  PRIMARY KEY (`attendanceID`),
  FOREIGN KEY (`studentID`) REFERENCES `Student` (`studentID`),
  FOREIGN KEY (`courseID`) REFERENCES `course` (`courseID`)
);


CREATE TABLE IF NOT EXISTS `course` (
  `courseID` VARCHAR(45) NOT NULL,
  `courseName` varchar(45) NULL,
  `department` varchar(45) NULL,
  PRIMARY KEY (`courseID`)
);
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE teacher(teacherID INT NOT NULL PRIMARY KEY AUTO_INCREMENT, first_name VARCHAR(45) NOT NULL, last_name VARCHAR(45), mailID VARCHAR(50));
-- Please create a very simple query using SQL features in a complex way
INSERT INTO teacher( first_name, mailID, last_name) VALUES ("John", "<EMAIL>","G");
-- Please alter query 1 slightly (by changing in the values)
INSERT INTO teacher( first_name, mailID, last_name) VALUES ("John", "<EMAIL>","A");
-- Please show the results when you use SQL command
SELECT teacherID,first_name,last_name,mailID FROM teacher

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `teacher` (
  `teacherID` INT NOT NULL AUTO_INCREMENT,
  `first_name` VARCHAR(45) NOT NULL, 
  `last_name` VARCHAR(45) NOT NULL, 
  `mailID` INT NOT NULL AUTO_INCREMENT, 
   PRIMARY KEY (`teacherID`)
);
DROP DATABASE IF EXISTS sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE `student` ( `StudentID` INT(11) NOT NULL AUTO_INCREMENT, `StudentName` VARCHAR(50) NOT NULL, `EmailID` VARCHAR(50) UNIQUE NOT NULL, `Department` DECIMAL(4, 2) NOT NULL, PRIMARY KEY (`StudentID`) );

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `teacher`
(
  `teacherID` INT NOT NULL AUTO_INCREMENT, 
  `first_name` VARCHAR(45) NOT NULL, 
  `last_name` VARCHAR(45) NOT NULL, 
  `mailID` VARCHAR(50) NOT NULL
);



 
SELECT * FROM teacher;




[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE `student` ( `StudentID` INT(11) NOT NULL AUTO_INCREMENT, `StudentName` VARCHAR(50) NOT NULL, `EmailID` VARCHAR(50) UNIQUE NOT NULL, `Department` DECIMAL(4, 2) NOT NULL, PRIMARY KEY (`StudentID`) );
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE `student` ( `StudentID` INT(11) NOT NULL AUTO_INCREMENT, `StudentName` VARCHAR(50) NOT NULL, `EmailID` VARCHAR(50) UNIQUE NOT NULL, `Department` DECIMAL(4, 2) NOT NULL, PRIMARY KEY (`StudentID`) );

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
 
INSERT INTO `student`
VALUES(NULL, 'Kristen', '<EMAIL>', 'CSE');
INSERT INTO `student`
VALUES(NULL, 'Jeff', '<EMAIL>', 'CSE');
INSERT INTO `student`
VALUES(NULL, 'Daniela', '<EMAIL>', 'CSE');
INSERT INTO `student`
VALUES(NULL, 'Jason', '<EMAIL>', 'CSE');

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE `student` ( `StudentID` INT(11) NOT NULL AUTO_INCREMENT, `StudentName` VARCHAR(50) NOT NULL, `EmailID` VARCHAR(50) UNIQUE NOT NULL, `Department` DECIMAL(4, 2) NOT NULL, PRIMARY KEY (`StudentID`) );

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
 
UPDATE course_schedule SET id = 1, course-name = 'Software Engineering', course-instructor = 'I. Kumara, Shreeti', course-fees = 100.00 WHERE id=1;
-- Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE `student` ( `StudentID` INT(11) NOT NULL AUTO_INCREMENT, `StudentName` VARCHAR(50) NOT NULL, `EmailID` VARCHAR(50) UNIQUE NOT NULL, `Department` DECIMAL(4, 2) NOT NULL, PRIMARY KEY (`StudentID`) );<commit_msg>Updated MySQL<commit_after>MySQL, or MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE `student` ( `StudentID` INT(11) NOT NULL AUTO_INCREMENT, `StudentName` VARCHAR(50) NOT NULL, `EmailID` VARCHAR(50) UNIQUE NOT NULL, `Department` DECIMAL(4, 2) NOT NULL, PRIMARY KEY (`StudentID`) );
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SET UNIQUE_CHECKS=0;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

 

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE `teacher` ( `TeacherID` INT(11) NOT NULL AUTO_INCREMENT, `TeacherName` VARCHAR(50) NOT NULL, `EmailID` VARCHAR(50) UNIQUE NOT NULL, PRIMARY KEY (`TeacherID`) );
 
SELECT teacher.TeacherName, teacher.EmailID FROM teacher left outer join student on teacher.TeacherID=student.TeacherID WHERE student.Department IS NULL;
 
SELECT student.TeacherName,student.Department, student.StudentID,student.StudentName, student.TeacherID, teacher.TeacherName,teacher.EmailID FROM student inner join teacher on teacher.TeacherID=student.TeacherID LEFT OUTER JOIN class ON class.ClassID=student.ClassID WHERE student.Department IS NULL;
 
SELECT Department, count(*) FROM class GROUP BY Department ORDER BY Department;
 
SELECT Department,count(Department), sum(Class.ClassID) FROM class GROUP BY Department;
DROP DATABASE sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
 
INSERT INTO `student` (`StudentName`, `EmailID`, `Department`) VALUES ('<NAME>', '<EMAIL>', 752.75);
INSERT INTO `student` (`StudentName`, `EmailID`, `Department`) VALUES ('<NAME>', '<EMAIL>', 1.75);
INSERT INTO `student` (`StudentName`, `EmailID`, `Department`) VALUES ('<NAME>', '<EMAIL>', 100.08);
INSERT INTO `student` (`StudentName`, `EmailID`, `Department`) VALUES ('<NAME>', '<EMAIL>', 17001.36);
INSERT INTO `student` (`StudentName`, `EmailID`, `Department`) VALUES ('<NAME>', '<EMAIL>', 8024.50);
 
SELECT * FROM `student`, student_detail WHERE student.StudentID = detail.StudentID AND student.StudentName='<NAME>' OR student.StudentName='<NAME>'; 
SELECT `StudentID`, `StudentName`, `Department`, `Gender` 
FROM `student`, student_detail, student_gender 
WHERE student.StudentID = student_detail.StudentID
AND student.StudentID = student_gender.StudentID 
AND student.StudentName='<NAME>'
AND student_detail.Gender=student_gender.Gender; 
SELECT student.`StudentID`, student.`StudentName` 
FROM `student`, student_detail, student_gender 
WHERE student.StudentID = student_detail.StudentID 
AND student.StudentID = student_gender.StudentID 
AND student.StudentName IN ('Girish', 'Bishwaj')
AND student_detail.Gender = student_gender.Gender; 
SELECT student.StudentID, student.StudentName 
FROM `student`, student_detail 
WHERE student.StudentID = student_detail.StudentID AND student.StudentID IN (2, 4, 5); 
SHOW TABLES LIKE'student'; 

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE `student` ( `StudentID` INT(11) NOT NULL AUTO_INCREMENT, `StudentName` VARCHAR(50) NOT NULL, `EmailID` VARCHAR(50) UNIQUE NOT NULL, `Department` CHAR(4) NOT NULL, PRIMARY KEY (`StudentID`) );

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE `student` ( `StudentID` INT(11) NOT NULL AUTO_INCREMENT, `StudentName` VARCHAR(50) NOT NULL, `EmailID` VARCHAR(50) UNIQUE NOT NULL, `Department` DECIMAL(4, 2) NOT NULL, PRIMARY KEY (`StudentID`) );
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE `teacher` ( `TeacherID` INT(11) NOT NULL AUTO_INCREMENT, `TeacherName` VARCHAR(50) NOT NULL, `Year` DECIMAL(4, 2), PRIMARY KEY (`TeacherID`) );


[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

CREATE TABLE `student` ( `StudentID` INT(11) NOT NULL AUTO_INCREMENT, `StudentName` VARCHAR(50) NOT NULL, `EmailID` VARCHAR(50) UNIQUE NOT NULL, `Department` INT(2) NOT NULL, PRIMARY KEY (`StudentID`) );

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS employee ( `EmpID` INT(4) NOT NULL AUTO_INCREMENT, `EmpName` TEXT NOT NULL, `Designation` TEXT NOT NULL, `Salary` DECIMAL(10, 4), KEY (`EmpID`));

--

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE `student` ( `StudentID` INT(11) NOT NULL AUTO_INCREMENT, `StudentName` VARCHAR(50) NOT NULL, `EmailID` VARCHAR(50) UNIQUE NOT NULL, `Department` DECIMAL(4, 2) NOT NULL, PRIMARY KEY (`StudentID`) );

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE `student` ( `StudentID` INT(11) NOT NULL AUTO_INCREMENT, `StudentName` VARCHAR(50) NOT NULL, `StudentLevel` INT(3) DEFAULT NULL, `TeacherID` INT(11) DEFAULT NULL, PRIMARY KEY (`StudentID`) );
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE `course` ( `CourseID` INT(11) NOT NULL AUTO_INCREMENT, `CourseName` VARCHAR(50) NOT NULL, PRIMARY KEY (`CourseID`) );
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE `course` ( `CourseID` INT(11) NOT NULL AUTO_INCREMENT, `CourseName` VARCHAR(50) NOT NULL, `CourseCredits` INT(3) NOT NULL, PRIMARY KEY (`CourseID`) );
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO `student` (`StudentName`, `Department`, `StudentLevel`, `TeacherID`) VALUES ('Student 1', 20, 1, 1978);
INSERT INTO `student` (`StudentName`, `Department`, `StudentLevel`, `TeacherID`) VALUES ('School', 61, 2, 9877);
INSERT INTO `student` (`StudentName`, `Department`, `StudentLevel`, `TeacherID`) VALUES ('Student 2', NULL, 3, 22222);
INSERT INTO `course` (`CourseName`) VALUES ('Course 2');
INSERT INTO `course` (`CourseName`, `CourseCredits`) VALUES ('Course 1', 3);
INSERT INTO `course` (`CourseName`, `CourseCredits`) VALUES ('Course 5', 1);

-- MySQL 8.0+ supports foreign keys, primary and unique indexes.
ALTER TABLE `student` ADD CONSTRAINT `Student_Department` FOREIGN KEY (`Department`) REFERENCES `course` (`CourseID`);

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS employee ( `EmpID` INT(4) NOT NULL AUTO_INCREMENT, `EmpName` TEXT NOT NULL, `Designation` TEXT NOT NULL, `Salary` DECIMAL(10, 4), KEY (`EmpID`));
--
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SELECT CONCAT('My name is ',FIRST_NAME,LAST_NAME,': ');
SELECT CONCAT('My designation is ',Designation,' and I have',SALARY, '$');
UPDATE employee SET Salary=SALARY*SALARY_MULTIPLY AND DESIGNATION = 'Intern';
--
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS employee ( `EmpID` INT(5) NOT NULL AUTO_INCREMENT, `EmpName` TEXT NOT NULL, `Designation` TEXT NOT NULL, `Salary` DECIMAL(11, 2), KEY (`EmpID`));

--
--
--
--
--
-- Please modify the mutated program to show the data saved with 'SHOW DATABASE STATUS'.
--
-- Create a mutated function to return rows where a certain condition is met.
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE FUNCTION returnEmployees(Designation) RETURNS TABLE (EmpID int, EmpName text)
RETURNS SET GLOBAL LOCAL READS SQL DATA
BEGIN
    SELECT EmployeeID, EmpName FROM Employee where EmploymentStatus = 1 AND Designation = DESIGNATION;
END
--
-- Please call the new mutated function in the main function without specifying the value of 'DESIGNATION'.
--
SET ANSI_NULLS ON;
SET AUTOCOMMIT OFF;
SET CHARACTER_SET_CLIENT = DEFAULT;
SET CHARACTER_SET_RESULTS = DEFAULT;
SET COLLATION_CONNECTION = DEFAULT;
SET NAMES utf8;
SET SESSION sql_mode = "STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION";
SET TRANSACTION ISOLATION LEVEL READ COMMITTED;
SET READ_TIMEOUT = 0;
SET NAMES utf8mb4;
--
--
--
--
--
--
--
-- Please modify the mutated function so that it uses the new MySQL keyword 'SELECT' to read the rows that match the condition specified in the function argument DESIGNATION.
--
--
-- Please modify the main function so that it executes the select statement in the context of the database specified in the main function argument.
--
--
-- Finally, please comment the two main functions.

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
 
CREATE TABLE IF NOT EXISTS employee ( `EmpID` INT(4) NOT NULL AUTO_INCREMENT, `EmpName` TEXT NOT NULL, `Designation` TEXT NOT NULL, `Salary` DECIMAL(10, 4), KEY (`EmpID`));
USE sampleDB;
DROP TABLE IF EXISTS employee;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS employee ( `EmpID` INT(4) NOT NULL AUTO_INCREMENT, `EmpName` TEXT NOT NULL, `Designation` TEXT NOT NULL, `Salary` DECIMAL(10, 4), KEY (`EmpID`));
SELECT EMPID FROM employee; -- This should only return the employee id 07
INSERT INTO employee (EmpID, EmpName, Designation, Salary) VALUES(07, "<NAME>", "System Administrator", 150000); -- Modify
DELETE FROM employee WHERE EmpID = 09;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
ALTER TABLE employee MODIFY Salary DECIMAL(10, 4);
ALTER TABLE employee MODIFY Salary DECIMAL(10, 6);
ALTER TABLE employee MODIFY Designation TEXT;
--
-- Please create a new file which creates a new table. The new table will call itself `mutatedTable`.
CREATE OR REPLACE DIRECTORY temp
LOCATION '/tmp/mutated_table_data'
CREATE TABLE mutatedTable
(
    `id` int NOT NULL,
    `first` varchar(20) DEFAULT NULL,
    PRIMARY KEY (`id`),
    INDEX idx(id)
) ENGINE = INNODB;
--
-- You need to create the new table only once. It will be named `data1`.
TRUNCATE TABLE data1;
INSERT INTO data1 VALUES (1, 'John'), (2, 'Mike');
--
-- You need to use the data in a select statement. You first add new columns in order to maintain consistency later.
CREATE TABLE newColumns
(
    `id` int NOT NULL,
    `first` varchar(20) DEFAULT NULL
);
--
-- You need to run SQL commands like create table and add new columns. Just be sure to test that the commands are OK, because the table will not be shown after the table has been created.
SELECT * INTO TABLE newColumns
    FROM data1;
ALTER TABLE newColumns ADD FULLTEXT (first);
ALTER TABLE newColumns ADD FULLTEXT (last);
ALTER TABLE newColumns ADD FULLTEXT (designation);
--
-- You need to test how the new table behaves later on the database
CREATE TABLE tempTable;
INSERT INTO tempTable SELECT * FROM data1 AS newColumns;
SELECT * INTO TABLE tempTable;
ALTER TABLE tempTable ADD FULLTEXT (first);
SELECT * INTO TABLE tempTable;
--
-- You need to test new columns in a select statement using the FULLTEXT() function.
WITH fullTextData AS (SELECT * INTO TABLE tempTable)
SELECT first, last INTO TABLE newColumns
    FROM fullTextData;
SELECT * INTO TABLE newColumns AS newColumns
    FROM fullTextData;
SELECT first, last INTO TABLE newColumns
    FROM fullTextData AS fullTableData;
ALTER TABLE tempTable ALTER COLUMN designation VARCHAR(20);
SELECT first, last INTO TABLE newColumns
    FROM fullTextData AS fullTableData;
--
-- You need to test index column. You need to run INSERT query only once, because the column values will be updated as well. But if the column values are updated, also the index values will get updated.
SET
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS employee ( `EmpID` INT(4) NOT NULL AUTO_INCREMENT, `EmpName` TEXT NOT NULL, `Designation` TEXT NOT NULL, `Salary` DECIMAL(10, 4), KEY (`EmpID`));
USE sampleDB;
DROP TABLE IF EXISTS employee;
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS employee ( `EmpID` INT(4) NOT NULL AUTO_INCREMENT, `EmpName` TEXT, `Designation` TEXT, `Salary` DECIMAL(10, 4), KEY (`EmpID`));
USE sampleDB;
DROP TABLE IF EXISTS employee;
-- Please create a semantically equivalent query to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS employee ( `EmpID` INT(4) NOT NULL AUTO_INCREMENT, `EmpName` TEXT, `Designation` TEXT, `Salary` DECIMAL(10, 4), KEY (`EmpID`));
USE sampleDB;
DROP TABLE IF EXISTS employee;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS employee ( `EmpID` INT(4) UNSIGNED NOT NULL AUTO_INCREMENT, `EmpName` TEXT NOT NULL, `Designation` TEXT NULL DEFAULT 'Intern', `Salary` DECIMAL(10, 0) UNSIGNED DEFAULT NULL, KEY (`EmpID`));
USE sampleDB;
DROP TABLE IF EXISTS employee;
 
USE sampleDB;
CREATE DATABASE IF NOT EXISTS testDB; USE testDB;
ALTER DATABASE testDB CHARACTER SET utf8 COLLATE utf8_general_ci;
CREATE TABLE IF NOT EXISTS users ( `UserID` INT(4) UNSIGNED NOT NULL AUTO_INCREMENT, `UserID` INT(4) UNSIGNED, `Name` TEXT NOT NULL, `Age` INT(4));
USE testDB;
INSERT INTO users (UserID, UserID, Name, Age) VALUES (1,1, '<NAME>', 22);
INSERT INTO users (UserID, UserID, Name, Age) VALUES (2,1, '<NAME>', 25);
INSERT INTO users (UserID, UserID, Name, Age) VALUES (3,1, '<NAME>', 15);
INSERT INTO users (UserID, UserID, Name, Age) VALUES (4,1, '<NAME>', 21);
INSERT INTO users (UserID, UserID, Name, Age) VALUES (5,1, '<NAME>', 44);
INSERT INTO users (UserID, UserID, Name, Age) VALUES (6,1, '<NAME>', 12);
INSERT INTO users (UserID, UserID, Name, Age) VALUES (7,1, '<NAME>', 22);
INSERT INTO users (UserID, UserID, Name, Age) VALUES (8,1, 'Abby', 40);
INSERT INTO users (UserID, UserID, Name, Age) VALUES (9,1, '<NAME>', 16);
INSERT INTO users (UserID, UserID, Name, Age) VALUES (10,1, 'Ali', 19);
INSERT INTO users (UserID, UserID, Name, Age) VALUES (11,1, 'Billy', 16);
INSERT INTO users (UserID, UserID, Name, Age) VALUES (12,1, '<NAME>', 18);
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS employee ( EmpID INT PRIMARY KEY AUTO_INCREMENT, EmpName varchar(10) NOT NULL, Designation varchar(10) NOT NULL, Salary Decimal(10, 4) ) ENGINE=InnoDB AUTO_INCREMENT=10 DEFAULT CHARSET=latin1;
USE sampleDB;
-- Drop all the tables except employee. Now re-create employee table
DROP TABLE IF EXISTS salary;
DROP TABLE IF EXISTS employees;
-- Use employee table to insert employees. Do not change empID.
USE employee;
INSERT INTO employee (EmpID, EmpName, Designation, Salary) VALUE(1000, "Rajesh", "Intern Engineer", 1000000000), (10001, "Shri", "Intern Engineer", 5000000000), (10002, "Bhimya", "Intern Engineer", 4000000000), (10003, "Soni", "Intern Engineer", 1500000000), (10004, "Shreyas", "Intern Engineer", 5000000000), (10005, "Harsh", "Intern Engineer", 1000000000), (10006, "Mukesh", "Intern Engineer", 6000000000), (10007, "Vijay", "Intern Engineer", 5000000000) ;
 
DROP TABLE IF EXISTS employee;
USE sampleDB;
CREATE TABLE IF NOT EXISTS employee ( `EmpID` INT(4) NOT NULL AUTO_INCREMENT, `EmpName` TEXT NOT NULL, `Designation` TEXT NOT NULL, `Salary` DECIMAL(10, 4), KEY (`EmpID`));
-- Please explain how the above query can be re-written in the new table.
ALTER TABLE employee ADD constraint employee_unique UNIQUE (EmpName);
-- Create the employee table again and do not change empID.
CREATE TABLE IF NOT EXISTS employee ( EmpID INT PRIMARY KEY AUTO_INCREMENT, EmpName varchar(10) NOT NULL, Designation varchar(10
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS employee ( `EmpID` INTEGER AUTO_INCREMENT, `EmpName` TEXT NOT NULL, `Designation` TEXT NOT NULL, `Salary` INTEGER, KEY `EmpID` (`EmpID`));
USE sampleDB;
DROP TABLE IF EXISTS employee;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS employee ( `EmpID` INT(4) NOT NULL AUTO_INCREMENT, `EmpName` TEXT NOT NULL, `Designation` TEXT NOT NULL, `Salary` DECIMAL(10, 4), KEY (`EmpID`));
USE sampleDB;
DROP TABLE IF EXISTS employee CASCADE;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS employee ( `EmpID` INT(4) NOT NULL AUTO_INCREMENT, `EmpName` TEXT NOT NULL, `Designation` TEXT NOT NULL, `Salary` DECIMAL(10, 4), KEY (`EmpID`));
USE sampleDB;
DROP TABLE IF EXISTS employee CASCADE;
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- Please create the mutated query using mutated syntax.
DELETE FROM employee;

-- The above statements are not allowed at the moment. There is only one way to get result like this.
SELECT * FROM employee;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS employee ( `EmpID` INT(4) NOT NULL AUTO_INCREMENT, `EmpName` TEXT NOT NULL, `Designation` TEXT NOT NULL, `Salary` DECIMAL(10, 4), KEY (`EmpID`));
INSERT INTO employee (`EmpID`, `EmpName`, `Designation`, `Salary`) VALUES ('15', '<NAME>', 'Accountant', '2000');
UPDATE employee
SET Salary = Salary * 2000;
SELECT * FROM employee;
 
DROP TABLE IF EXISTS employee CASCADE;
 

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- Please run the program in a shell. You should see the mutated table under sampleDB.Table1. You can confirm the mutation by running
SELECT * FROM Table1;
-- Please create a modified program that does a few iterations of the previous program. For example, you can modify the previous program to create ten new rows and so forth. This should be done in a loop. You should see the new rows in sampleDB.Table1. Please drop all tables under sampleDB once you have seen the results. You need to drop at least three tables. In the end, drop all the tables once you have seen the results.
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employee CASCADE;
CREATE TABLE `my_new_table` (
    `Column1` INT NOT NULL
) ENGINE=InnoDB AUTO_INCREMENT=5
DEFAULT CHARACTER SET=utf8 COLLATE=utf8_general_ci;
-- Please run the program and you should see the new rows added to the Table1. You can drop all the tables in the sampleDB once you see the results.
DROP TABLE IF EXISTS employee CASCADE;
DROP TABLE IF EXISTS my_new_table CASCADE;
DROP DATABASE IF EXISTS sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

 
USE sampleDB;

 
ALTER TABLE employee CHANGE COLUMN EmpName Designation VARCHAR(20); INSERT INTO employee
(EmpID, EmpName, Designation, Salary)
VALUES
(11, 'Natalie', 'Manager', 200000),
(6022, 'Terry', 'Senior Analyst', 2000000);

-- Please explain to another student how they can use the new column in their program
SELECT * FROM employee
WHERE EmpID > 20 AND (
    SELECT EmpName
    FROM employee
    WHERE EmpID = 11
);
DROP TABLE IF EXISTS employee CASCADE;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS employee ( `EmpID` INT(4) NOT NULL AUTO_INCREMENT, `EmpName` TEXT NOT NULL, `Designation` TEXT NOT NULL, `Salary` DECIMAL(10, 4), KEY (`EmpID`));
BEGIN
  INSERT INTO employee VALUES (4,'Ankit','Manager',50000), (5, 'Prathamesh','Manager',45000), (6, 'Rajat', 'Manager', 39000);
INSERT INTO employee VALUES (7, 'Sushil', 'Manager', 39000), (8, 'Sachit', 'Manager', 50000), (9, 'Sai', 'Admin', 50000);
INSERT INTO employee VALUES (10, 'Shyam', 'Manager', 5000), (11, 'Bhavsar', 'Admin', 60000)
COMMIT;
DROP DATABASE IF EXISTS sampleDB;

*/
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS employee ( `EmpID` INT(4) NOT NULL AUTO_INCREMENT, `EmpName` TEXT NOT NULL, `Designation` TEXT NOT NULL, `Salary` DECIMAL(10, 4), KEY (`EmpID`));
INSERT INTO employee (`EmpID`, `EmpName`, `Designation`, `Salary`) VALUES ('15', '<NAME>', 'Accountant', '2000');
UPDATE employee
SET Salary = Salary * 2000;
SELECT * FROM employee;
DROP TABLE IF EXISTS employee CASCADE;
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS employee ( `EmpID` INT(4) NOT NULL AUTO_INCREMENT, `EmpName` TEXT NOT NULL, `Designation` TEXT NOT NULL, `Salary` DECIMAL(10, 4), KEY (`EmpID`));
INSERT INTO employee (`EmpID`, `EmpName`, `Designation`, `Salary`) VALUES ('15', 'Nurse Abu', 'Dental Assistant', '2000');
UPDATE employee
SET Salary = Salary * 5000;
SELECT * FROM employee;
DROP TABLE IF EXISTS employee CASCADE;
-- MySQL Workbench is an integrated development environment designed for MySQL. It is a GUI cross-platform application, which you can use to perform most common database management tasks such as view data, modify databases, configure schema and data management systems, perform common tasks such as searching and sorting, inserting and deleting data, and other standard tasks such as cloning, creating and dropping schemas to migrate data and execute scripts.

MySQL Workbench is a cross-platform desktop application designed for performing common work tasks including creating, reading, altering, writing, and executing a database management system (DBMS). MySQL Workbench can be installed under Windows, Linux, Ubuntu, and OS X, as well as Windows Vista and 7, 8 and 10, and macOS, including the latest versions of Apple's Catalina and Big Sur operating systems. For more detailed installation instructions, please refer to the MySQL Workbench section on the [MySQL Website](https: 

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS employee ( `EmpID` INT(4) NOT NULL AUTO_INCREMENT, `EmpName` TEXT NOT NULL, `Designation` TEXT NOT NULL, `Salary` DECIMAL(10, 4), KEY (`EmpID`));
INSERT INTO employee (`EmpID`, `EmpName`, `Designation`, `Salary`) VALUES ('10', '<NAME>', 'Accountant', '2000');
UPDATE employee
SET `Salary` = Salary * 2000;
SELECT * FROM employee;
DROP TABLE IF EXISTS employee;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS employee ( `EmpID` INT(4) NOT NULL AUTO_INCREMENT, `EmpName` TEXT NOT NULL, `Designation` TEXT NOT NULL, `Salary` DECIMAL(10, 4), KEY (`EmpID`));
UPDATE employee
SET salary = salary/2000;
SELECT * FROM employee;
DROP TABLE IF EXISTS employee CASCADE;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS employee ( `EmpID` INT(4) NOT NULL AUTO_INCREMENT, `EmpName` TEXT NOT NULL, `Designation` TEXT NOT NULL, `Salary` DECIMAL(10, 4), KEY (`EmpID`));
INSERT INTO employee (`EmpID`, `EmpName`, `Designation`, `Salary`) VALUES ('15', '<NAME>', 'Accountant', '2000');
UPDATE employee
SET salary = salary * 250;
SELECT * FROM employee;
DROP TABLE IF EXISTS employee CASCADE;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS employee ( `EmpID` INT(4) NOT NULL AUTO_INCREMENT, `EmpName` TEXT NOT NULL, `Designation` TEXT NOT NULL, `Salary` DECIMAL(10, 4), KEY (`EmpID`));
INSERT INTO employee (`EmpID`, `EmpName`, `Designation`, `Salary`) VALUES ('15', '<NAME>', 'Accounting Manager', '900');
UPDATE employee
SET Salary = Salary * 0.86;
SELECT * FROM employee;
DROP TABLE IF EXISTS employee CASCADE;
#
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS employee ( `EmpID` INT(4) NOT NULL AUTO_INCREMENT, `EmpName` TEXT NOT NULL, `Designation` TEXT NOT NULL, `Salary` DECIMAL(10, 4), KEY (`EmpID`));
INSERT INTO employee (`EmpID`, `EmpName`, `Designation`, `Salary`) VALUES ('15', '<NAME>', 'Accounting Manager', '900');
UPDATE employee
SET Salary = Salary * 0.86;
SELECT * FROM employee;
DROP TABLE IF EXISTS employee CASCADE;
#
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS employee ( `EmpID` INT(4) NOT NULL AUTO_INCREMENT, `EmpName` TEXT NOT NULL, `Designation` TEXT NOT NULL, `Salary` DECIMAL(10, 4), KEY (`EmpID`));
INSERT INTO employee (`EmpID`, `EmpName`, `Designation`, `Salary`) VALUES ('15', '<NAME>', 'Accounting Manager', '900');
UPDATE employee
SET Salary = Salary * 0.86;
SELECT * FROM employee;
DROP TABLE IF EXISTS employee CASCADE;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS employee ( `EmpID` INT(4) NOT NULL AUTO_INCREMENT, `EmpName` TEXT NOT NULL, KEY (`EmpID`));
INSERT INTO employee (`EmpID`, `EmpName`) VALUES ('15', '<NAME>');
SELECT * FROM employee;
DROP TABLE IF EXISTS employee CASCADE;
#
#

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS employee ( `EmpID` INT(4) NOT NULL AUTO_INCREMENT, `EmpName` TEXT NOT NULL, `Designation` TEXT NOT NULL, `Salary` DECIMAL(10, 4), KEY (`EmpID`));
INSERT INTO employee (`EmpID`, `EmpName`, `Designation`, `Salary`) VALUES ('15', '<NAME>', 'Accounting Manager', '900');
UPDATE employee
SET Salary = Salary + 900;
SELECT * FROM employee;
DROP TABLE IF EXISTS employee CASCADE;
```

**2. Please create a SQL query to extract the year of service from the employee table.** 

```sql
> SELECT YEAR(SERVICE_DAY) FROM employee;

[15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 1
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS employee ( `EmpID` INT(4) NOT NULL AUTO_INCREMENT, `EmpName` TEXT NOT NULL, `Designation` TEXT NOT NULL, `Salary` DECIMAL(10, 4), KEY (`EmpID`));
INSERT INTO employee (`EmpID`, `EmpName`, `Designation`, `Salary`) VALUES ('15', '<NAME>', 'Accounting Manager', '900');
UPDATE employee
SET Salary = Salary * 0.86;
SELECT * FROM employee;
DROP TABLE IF EXISTS employee CASCADE;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE `contact` (
  `contactID` INT(5) NOT NULL AUTO_INCREMENT,
  `first_name` INT(5) NOT NULL,
  `last_name` INT(5) NOT NULL,
  `email_address` INT(5) NOT NULL,
  `number_phone` INT(5) NOT NULL,
  PRIMARY KEY (`contactID`)
);

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE `contact` (
  `contactID` INT(5) NOT NULL AUTO_INCREMENT,
  `first_name` INT(5) NOT NULL,
  `last_name` INT(5) NOT NULL,
  `email_address` INT(5) NOT NULL,
  `number_phone` INT(5) NOT NULL,
  PRIMARY KEY (`contactID`)
);
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE `customer` (
  `customerID` INT(5) NOT NULL AUTO_INCREMENT,
  `contactID` INT(5) NOT NULL,
  `name` INT(5) NOT NULL,
  `address` INT(5) NOT NULL,
  `city` INT(5) NOT NULL,
  `state` INT(5) NOT NULL,
  `zip` INT(5) NOT NULL,
  PRIMARY KEY (`customerID`),
  FOREIGN KEY (`contactID`) REFERENCES `contact` (`contactID`)
);
DESC contact;
USE mysql_sampleDB;
SELECT * FROM contact;
USE mysql_sampleDB_2;
SET FOREIGN_KEY_CHECKS = 0;
DROP TABLE customer CASCADE;
ALTER TABLE contact CHANGE ID ID INT(5);
SET FOREIGN_KEY_CHECKS = 1;
DESC customer;
ALTER TABLE contact DROP foreign_key contactID;
ALTER TABLE contact DROP foreign_key contactID;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE `account` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `name` INT NOT NULL,
  `balance` INT NOT NULL,
  PRIMARY KEY (`ID`)
);

INSERT INTO `contact` (first_name, last_name, email_address, number_phone) VALUES (1, 'Abdul', '<EMAIL>', 6222);
INSERT INTO `contact` (first_name, last_name, email_address, number_phone) VALUES (2, '<NAME>', '<EMAIL>', 6086);
INSERT INTO `contact` (first_name, last_name, email_address, number_phone) VALUES (3, '<NAME> ', '<EMAIL>', 8456);
INSERT INTO `account` (`ID`, `name`, `balance`) VALUES (1, '<NAME>', 1500);
INSERT INTO `account` (`ID`, `name`, `balance`) VALUES (3, 'Amelia', 1000);
INSERT INTO `account` (`ID`, `name`, `balance`) VALUES (2, 'Vidya', 2000);
INSERT INTO `account` (`ID`, `name`, `balance`) VALUES (5, 'Jade', 500);
INSERT INTO `account` (`ID`, `name`, `balance`) VALUES (6, 'Kay', 30000);

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE `admin` (
  `adminID` INT(5) NOT NULL AUTO_INCREMENT,
  `password` INT(5) NOT NULL,
  PRIMARY KEY (`adminID`)
);

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE `contact` (
  `contactID` INT(5) NOT NULL AUTO_INCREMENT,
  `first_name` INT(5) NOT NULL,
  `last_name` INT(5) NOT NULL,
  `email_address` INT(5) NOT NULL,
  `number_phone` INT(5) NOT NULL,
  PRIMARY KEY (`contactID`)
);
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE `product` (
  `prodID` INT(2) NOT NULL AUTO_INCREMENT,
  `prodName` INT(10) NOT NULL,
  PRIMARY KEY (`prodID`)
);

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE `contact` (
  `contactID` INT(5) NOT NULL AUTO_INCREMENT,
  `first_name` INT(5) NOT NULL,
  `last_name` INT(5) NOT NULL,
  `email_address` INT(5) NOT NULL,
  `number_phone` INT(5) NOT NULL,
  PRIMARY KEY (`contactID`)
);
CREATE TABLE `address` (
  `addressID` INT(5) NOT NULL AUTO_INCREMENT,
  `post_office` INT(5) NOT NULL,
  `city` CHAR (20) NULL,
  `region` CHAR (20) NULL,
  `country` CHAR (20) NULL,
  PRIMARY KEY (`addressID`)
);

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE `customer` (
  `customerID` INT(5) NOT NULL AUTO_INCREMENT,
  `company_name` INT(5) NOT NULL,
  PRIMARY KEY (`customerID`)
);
 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE `employee` (
  `employeeID` INT(5) NOT NULL AUTO_INCREMENT,
  `first_name` INT(5) NOT NULL,
  `last_name` INT(5) NOT NULL,
  `contact_ID` INT(5) NOT NULL,
  `company_ID` INT(5) NOT NULL,
  PRIMARY KEY (`employeeID`)
);
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE `invoice` (
  `order_id` INT(5) NOT NULL AUTO_INCREMENT,
  `order_date` INT(15) NOT NULL,
  `customer` INT(5) NOT NULL,
  `total_amount` INT(5) NOT NULL,
  `order_status` INT(5) NOT NULL,
  PRIMARY KEY (`order_id`)
);

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO `contact`(first_name, last_name, email_address,number_phone) values(44,55,686478628634232434,120345324);

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO `contact`(first_name, last_name, email_address,number_phone) values(44,55,686478628634232434,120345324);
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `contact`;
DROP TABLE IF EXISTS `table1`;
CREATE TABLE `table1` ( `a` int, `b` int, `c` int, PRIMARY KEY(a) );
INSERT INTO `table1` (a,b,c) values(23,13,33);
DROP TABLE IF EXISTS `table1`;
DROP TABLE IF EXISTS `table1`;
DROP TABLE IF EXISTS `table1`;
DROP TABLE IF EXISTS `table1`;
DROP TABLE IF EXISTS `table1`;
DROP TABLE IF EXISTS `table1`;
DROP TABLE IF EXISTS `table1`;
DROP TABLE IF EXISTS `table1`;
DROP TABLE IF EXISTS `table1`;
DROP TABLE IF EXISTS `table1`;
DROP TABLE IF EXISTS `table1`;
DROP TABLE IF EXISTS `table1`;
DROP TABLE IF EXISTS `table1`;
DROP TABLE IF EXISTS `table1`;
DROP TABLE IF EXISTS `table1`;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS contact;
INSERT INTO `contact` (`id`, `first_name`, `last_name`, `email_address`, `number_phone`) VALUES (00, '444', '555', '<EMAIL>', '(222-555-1234)');
INSERT INTO `contact` (`id`, `first_name`, `last_name`, `email_address`, `number_phone`) VALUES (20, '666', '777', '<EMAIL>', '(222-555-1234)');

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
ALTER TABLE contact ADD phone_number char(6);
ALTER TABLE contact ADD unique(`phone_number`);
ALTER TABLE contact MODIFY email_address varchar(15);
SELECT * FROM contact;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO Contact(first_name, last_name, email_address,number_phone) values(44,55,686478628634232434,120345324);

insert into Contact ( first_name, last_name, email_address, gender, date_of_birth, nationality, is_under18) values

  ('Sophia', 'Angelini', '<EMAIL>', 'female', '1972-10-20', 'Italian', '18'),
  ('Isadora', 'Nerissa', '<EMAIL>', 'female', '1971-03-28', 'Polish', '17'),
  ('Leda', 'Dorota', '<EMAIL>', 'female','2002-06-06', 'Polish', '20'),
  ('Katerina', 'Maksyma', '<EMAIL>', 'female', '2002-05-13','Norwegian', '18'),
  ('Sergey', 'Tal', '<EMAIL>', 'female','2004-11-15', 'Russian', '19');

-- Please perform the following query to see that only 3 rows were inserted, the ones with 18- and 19-years of age.
SELECT * FROM Contact;
 
DROP DATABASE IF EXISTS sampleDB;

CREATE USER IF NOT EXISTS testuser@localhost IDENTIFIED BY 'testtesttest';
GRANT GRANT ALL PRIVILEGES ON sampleDB.* TO testuser;
FLUSH PRIVILEGES;
DROP USER testuser@localhost;

DROP DATABASE IF EXISTS sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

Create table if not exists `contact` (`id` int primary key auto_increment, `first_name` varchar(20) not null, `last_name` varchar(20) not null, `email_address` varchar(50), `number_phone` bigint);

INSERT INTO `contact`(`first_name`, `last_name`, `email_address`, `number_phone`) values(44,55,6863416286342323,145324528); 

-- Now change the primary key constraint to primary_key
ALTER TABLE `user` CHANGE `id` `id` int(5) auto_increment primary key;
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
ALTER TABLE contact ADD phone_number char(6);
ALTER TABLE contact ADD unique(`phone_number`);
ALTER TABLE contact MODIFY email_address varchar(15);
SELECT * FROM contact;
DROP DATABASE IF EXISTS sampleDB;
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
TRUNCATE contact;
SELECT * FROM contact;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
ALTER TABLE contact ADD phone int(6);
ALTER TABLE contact ADD unique(`phone`);
ALTER TABLE contact MODIFY email_address varchar(15);
SELECT * FROM contact;
DROP DATABASE IF EXISTS sampleDB;
INSERT INTO contact(name, email_address, `phone_number`) VALUES ('Eddie', '<EMAIL>', '6571981988');
INSERT INTO contact(name, email_address, `phone_number`) VALUES ('Nana', '<EMAIL>', '8571981999');
INSERT INTO contact(name, email_address, `phone_number`) VALUES ('Robert', '<EMAIL>', '9071981985');
INSERT INTO contact(name, email_address, `phone_number`) VALUES ('Jennifer', '<EMAIL>', '9275688866');
INSERT INTO contact(name, email_address, `phone_number`) VALUES ('Ron', '<EMAIL>', '6571981982');
SELECT * FROM contact;
DROP DATABASE IF EXISTS sampleDB;
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE employee
(
EMPID INT(20) UNSIGNED NOT NULL AUTO_INCREMENT,
NAME VARCHAR(100) NOT NULL,
TITLE INT(3) NOT NULL,
SALARY FLOAT NOT NULL,
DEPTID INT(4) NULL,
LASTPAY DATE,
PRIMARY KEY(EMPID)
);
INSERT INTO employee VALUES(null,'<NAME>','Sales Representative',100000,'3','2014-11-21');
INSERT INTO employee VALUES(null,'<NAME>','Sales Representative',110000,'1','2000-05-30');
INSERT INTO employee VALUES(null,'<NAME>','Salesperson',100000,'3','2014-12-02');
INSERT INTO employee VALUES(null,'<NAME>','Sales Representative',80000,'3','2009-03-20');
INSERT INTO employee VALUES(null,'<NAME>','Sales Representative',70000,'3','2013-05-31');
INSERT INTO employee VALUES(null
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS contact(
`id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'primary key',
`full_name` varchar(60) NOT NULL COMMENT 'name of person',
`address` text COMMENT'special address',
`city` varchar(30) NOT NULL COMMENT 'city name',
`state` varchar(2) NOT NULL COMMENT'state or province code',
`zip_code` char(5) NOT NULL COMMENT 'zip code in US',
`email` varchar(100) NOT NULL COMMENT 'email address',
`phone_number` char(6) NOT NULL COMMENT 'phone number',
FOREIGN KEY (`phone_number`) REFERENCES contact(`phone_number`) ON DELETE CASCADE,
PRIMARY KEY (`id`)
ENGINE=InnoDB
DEFAULT CHARACTER SET=utf8
COLLATE=utf8_general_ci
;
ALTER TABLE contact MODIFY status tinyint(1);
ALTER TABLE contact MODIFY first_name varchar(30);
ALTER TABLE contact MODIFY last_name varchar(30);

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
ALTER TABLE contact ADD phone_number char(6);
ALTER TABLE contact ADD unique(`phone_number`);
ALTER TABLE contact MODIFY email_address varchar(15);
SELECT * FROM contact;
DROP DATABASE IF EXISTS sampleDB;

-- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MyISAM is an efficient, column-oriented storage engine based on in-database indexes. It makes all data accessible to the user while storing only the primary key. It performs better than InnoDB for most queries compared to other storage engines.

MyISAM is an efficient, column-oriented storage engine based on in-database indexes. It makes all data accessible to the user while storing only the primary key. It performs better than InnoDB for most queries compared to other storage engines.

MyISAM is an efficient, column-oriented storage engine based on in-database indexes. It makes all data accessible to the user while storing only the primary key. It performs better than InnoDB for most queries compared to other storage engines.
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS  orders(
	order_id int(11) NOT NULL,
	purchase_date date NOT NULL,
	order_address text,
	PRIMARY KEY (order_id)
);
CREATE TABLE IF NOT EXISTS  customers(
	customer_id int(11) NOT NULL,
	customer_name varchar(25),
	customer_address1 text,
	customer_address2 text,
	PRIMARY KEY (customer_id)
);
CREATE TABLE IF NOT EXISTS  customer_order_details(
	customer_id int(11) NOT NULL,
	order_id int(11) NOT NULL,
	order_amount int(11) NOT NULL,
	UNIQUE INDEX IX_customer_orders(customer_id, order_id),
	CONSTRAINT FK_customers FOREIGN KEY (customer_id) REFERENCES customers (`customer_id`),
	CONSTRAINT FK_orders FOREIGN KEY (order_id) REFERENCES orders (`order_id`)
);
ALTER TABLE customer ADD FOREIGN KEY (customer_id) REFERENCES customers(customer_id);
ALTER TABLE customer ADD FOREIGN KEY (customer_id) REFERENCES customers(customer_id);
ALTER TABLE customers ADD FOREIGN KEY (customer_id) REFERENCES customers(customer_id);
ALTER TABLE customer_order_details ADD FOREIGN KEY (customer_id) REFERENCES customers(customer_id);
ALTER TABLE customer_order_details ADD FOREIGN KEY (order_id) REFERENCES orders(order_id);
ALTER TABLE customer ADD CONSTRAINT UNIQUE ("phone_number");
ALTER TABLE customers ADD CONSTRAINT UNIQUE ("phone_number");
ALTER TABLE orders ADD CONSTRAINT UNIQUE ("customer_id");
 
 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
USE customers;
 
INSERT INTO customers(customer_id, customer_name, customer_address1, customer_address2)
SELECT customer_id, customer_name,
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
TRUNCATE contact;
SELECT * FROM contact;
DROP DATABASE IF EXISTS sampleDB;
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE contact (name VARCHAR(250), phone_number VARCHAR(50), email_address VARCHAR(300)) ENGINE=InnoDB DEFAULT CHARSET=utf8;
INSERT INTO contact(name, phone_number, email_address) VALUES ('<NAME>', '(775) 555-3355', '<EMAIL>'),('<NAME>', '(775) 555-1111', '<EMAIL>'),('<NAME>', '(998) 555-6666', '<EMAIL>'),('<NAME>', '(998) 555-8888', '<EMAIL>');
SELECT * FROM contact;
DROP DATABASE IF EXISTS sampleDB;

select user();

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
 
-- Please create the following table schema (without indexes)
CREATE TABLE IF NOT EXISTS contact(
   phone             TEXT,
   email             TEXT,
   first_name        TEXT,
   last_name        TEXT,
   birthday         DATETIME,
   nationality      TEXT,
   city              TEXT,
   street            TEXT);
CREATE UNIQUE INDEX IF NOT EXISTS email_idx ON contact(email);
CREATE UNIQUE INDEX IF NOT EXISTS phone_idx ON contact(phone);
-- We may attempt to solve this task in two ways:
-- Using SQL and MySQL
-- Using MySQL and a foreign key.
 
CREATE TABLE IF NOT EXISTS addresses(
   name             TEXT                    NOT NULL,
   street           TEXT                    NOT NULL,
   house_number  TEXT,
   city             TEXT,
   postal_code  TEXT                    NOT NULL,
   state            TEXT,
   country          TEXT                   DEFAULT 'UK');
CREATE UNIQUE INDEX IF NOT EXISTS city_idx ON addresses(city);
DROP TABLE addresses CASCADE;
CREATE INDEX IF NOT EXISTS country_idx ON addresses(country);
CREATE TABLE IF NOT EXISTS `orders` (
   `id`          SERIAL                   PRIMARY KEY,
   `date`        DATE                     NOT NULL,
   `first_name`  TEXT,
   `last_name`   TEXT,
   `gender`      TEXT,
   `comments`    TEXT,
   `status`      TEXT
);
ALTER TABLE orders ADD FOREIGN KEY (status) REFERENCES orderstatus(id);
-- We may try to use the solution implemented in an intermediate stage.
SELECT * FROM orderstatus, orders, addresses;
-- We may try to solve the task in two ways:
SELECT DISTINCT `orders`.`id` FROM orders WHERE `orders`.`first_name` = `addresses`.`name` AND `orders`.`last_name` = `addresses`.`state`;
DELETE FROM orders WHERE status = 'Shipped' AND `orders`.`created_by` IN (SELECT `orders`.`order_no` FROM orders);
DROP TABLE addresses CASCADE, orderstatus, orders CASCADE;
-- We want to find out the following facts by trying to create a new derived table:
-- 450 orders
-- A country with
-- 1,235 customers
-- A city with
-- 103464 customers
-- A street with
-- 2,5946 customers

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREAT TABLE IF NOT EXISTS users (
  --name TEXT NOT NULL,
  email VARCHAR(80),
  pwd CHAR(16) NULL,
  isadmin BOOLEAN DEFAULT '0',
  UNIQUE(email)
);
INSERT INTO users
(email, pwd, isadmin)
VALUES
('<EMAIL>', <PASSWORD>', true),
('<EMAIL>', <PASSWORD>', true),
('<EMAIL>', <PASSWORD>', true);
COMMIT;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP DATABASE IF EXISTS sampleDB;
-- You should now be able to run the sample that we've just created.

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS customer; 
-- Please write a program which uses the PHPMyAdmin or similar tool (web application) to retrieve all the data for the customers of the company. You will need to access data to perform the task and it is required to use MySQL. Please check also the documentation and use of the PHP function.
-- Example query:   You can use JOIN syntax to add additional conditions.
SELECT id customer, first_name, last_name, email, gender, gender, phone FROM customers INNER JOIN addresses ON customers.id = addresses.customer; 
UPDATE addresses SET customer = 556 WHERE customer > 555
DROP DATABASE IF EXISTS sampleDB;
-- In the previous generation, the MySQL database server does not have an in-built database administration tool, but it is available internally as an add-on. This is a powerful tool, which will help you maintain data in a reliable, secure and performant way.
DROP DATABASE IF EXISTS sampleDB; 
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP DATABASE IF EXISTS sampleDB;
-- You should now be able to run the sample that we've just created.
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE people (
  id INT(11) NOT NULL AUTO_INCREMENT,
  username VARCHAR(200) NOT NULL,
  first_name VARCHAR(200) NOT NULL,
  last_name VARCHAR(200) NOT NULL,
  password VARCHAR(1000) NOT NULL,
  active BOOLEAN,
  PRIMARY KEY (id)
);

INSERT INTO `people` (`id`,`username`,`first_name`,`last_name`,`password`,`active`) 
VALUES
(1, 'admin', 'admin', 'admin', 'admin', true);

SELECT 
	*
FROM 
	`people`
where
	active is false;
	
DROP TABLE `people`;

ALTER TABLE `people` 
ADD `password` VARCHAR(200) NOT NULL AFTER `last_name`;

INSERT INTO `people` (`id`,`username`,`first_name`,`last_name`,`password`,`active`) 
VALUES
(2, 'teste1', 'Teste', 'teste1', 'teste1', true);

SELECT `id`, `username`, `first_name`, `last_name`, `password`, `active`
FROM `people`
ORDER BY `id`;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
 
SET default COLLATE = "";
ALTER DATABASE sampleDB COLLATE = "";

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
 
CREATE TABLE IF NOT EXISTS book (
    bookID   INT         NOT NULL AUTO_INCREMENT,
    bookTitle VARCHAR(30) NOT NULL,
    PRIMARY KEY   (bookID)
);
 

/* 

Select the number of rows in sampleDB.
SELECT count(*) FROM sampleDB.book;
-- This selects the number of rows in the sampleDB.
Insert a new row in the sampleDB.
INSERT INTO sampleDB.book(bookTitle)
VALUES ('Learn MySQL with PHP');
-- This inserts a new column to the book table in the sampleDB
SELECT * FROM sampleDB.book;
-- This should return the following information.
--     bookID   bookTitle
INSERT INTO sampleDB.book(bookID, bookTitle) 

VALUES
( 1, 'Learn MySQL', 
VALUES (2,'Learn PHP'),
(3,'Learn Python')

SELECT * FROM sampleDB.book;
-- This should return the following information.
--     bookID   bookTitle
INSERT INTO sampleDB.book(bookID, bookTitle) 

VALUES
( 1, 'Learn Python', 
VALUES (2,'Learn MySQL'),
-- Note, MySQL has an Auto Increment feature!
VALUES (3,'Learn PHP'),
-- You should see a new column that holds the number of the inserted row.
SELECT * FROM sampleDB.book;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE User(Id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, FirstName VARCHAR(128), LastName VARCHAR(128));
CREATE TABLE Test(Id INT PRIMARY KEY AUTO_INCREMENT, Name VARCHAR(128));
INSERT INTO User (FirstName, LastName) VALUES ('John', 'Doe'), ('Joe', 'Bird');
INSERT INTO Test (Name) VALUES ('Bob'), ('Alice');
SELECT * FROM User;
DROP TABLE IF EXISTS Test;
DROP TABLE IF EXISTS User;
DROP DATABASE IF EXISTS sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users (

u_name varch(40),
u_city varch(40),
u_state varchar(2),
u_zip int,
u_birthdate date,

PRIMARY KEY (u_name));


 
USE sampleDB;
DESCRIBE users;
CREATE TABLE IF NOT EXISTS users (
u_name varch(40),
u_city varch(40),
u_state varchar(2),
u_zip int,
u_birthdate date,
UNIQUE (u_name),

PRIMARY KEY (u_name));
 
USE sampleDB;
DESCRIBE users;
DROP DATABASE IF EXISTS sampleDB;





















[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE User(Id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, FirstName VARCHAR(128), LastName VARCHAR(128));
CREATE TABLE Test(Id INT PRIMARY KEY AUTO_INCREMENT, Name VARCHAR(128));
INSERT INTO User (FirstName, LastName) VALUES ('John', 'Doe'), ('Joe', 'Bird');
INSERT INTO Test (Name) VALUES ('Bob'), ('Alice');
SELECT * FROM User;
DROP TABLE IF EXISTS Test;
DROP TABLE IF EXISTS User;
DROP DATABASE IF EXISTS sampleDB;
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE User(Id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, FirstName VARCHAR(128), LastName VARCHAR(128));
CREATE TABLE Test(Id INT, Name VARCHAR(128));
INSERT INTO User (FirstName, LastName) VALUES ('John', 'Doe'), ('Joe', 'Bird');
INSERT INTO Test (Name) VALUES ('Bob'), ('Alice');
SELECT * FROM User;
DROP TABLE IF EXISTS Test;
DROP TABLE IF EXISTS User;
DROP DATABASE IF EXISTS sampleDB;
-- Do not forget to comment out the USE
USE sampleDB;
SELECT * FROM User;
USE sampleDB;
SELECT * FROM Test;
DROP TABLE IF EXISTS Test;
DROP TABLE IF EXISTS User;
DROP DATABASE IF EXISTS sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE SEQUENCE IF NOT EXISTS Users (Value INT DEFAULT 1 NOT NULL PRIMARY KEY)ENGINE=InnoDB;
CREATE TABLE TestUsers(UserId INT NOT NULL, UserIdId INT NOT NULL, UserIdValue INT NOT NULL UNIQUE, PRIMARY KEY (UserId, UserIdId));
INSERT INTO TestUsers (UserId, UserIdId, UserIdValue) VALUES (1, 1, 1), (2, 2, 2), (3, 3, 3);
INSERT INTO ValueUsers(UserIdValue, UserId) VALUES (1, 2), (2, 1), (3, 3), (4, 3);

-- What are the most effective ways to improve your application’s robustness with SQL and MySQL.

-- MySQL, when installed, runs on all your servers. You cannot safely drop or modify the tables in the sampleDB database because the tables refer to each other. Since the system is so robust, you can either change the tables or drop them.

-- Create a new table in one database and then insert data in the same table in another database.

-- After some time, you’ve learned about the relationship between the tables. Now you've discovered that the table Users already uses the UserId columns and both tables (values and valuesId) also use the UserId columns. You'd like to merge the tables back into a single table by combining the two User rows.

-- MySQL supports a JOIN feature, you can use its syntax to merge two tables. You'll need to keep track of relationships that need to be considered in future developments, so you can use the same database as the source of truth.
*/

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS User;
DROP DATABASE IF EXISTS SampleDB;
-- Please create a query which works on all available CPUs and stores the result in a temporary table
CREATE DBCC MEMORYSTATUS (1, 1, 1, 1, 0) ROUND 0 ROWS 0; CREATE TABLE User(Id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, FirstName VARCHAR(128), LastName VARCHAR(128)); CREATE TABLE Test(Id INT PRIMARY KEY AUTO_INCREMENT, Name VARCHAR(128)); INSERT INTO User (FirstName, LastName) VALUES ('John', 'Doe'), ('Joe', 'Bird'); INSERT INTO Test (Name) VALUES ('Bob'),( 'Alice'); SELECT * FROM User; DROP TABLE Test; DROP TABLE User; RESTORE DATABASE sampleDB;
-- Please create a query which works on the default database only and stores the result in a temporary table
CREATE SERVER default_server_id WITH PASSWORD '<PASSWORD>'; -- 060104_SampleServerAdmin@060104_SampleServerAdmin
USE default_server_id;
CREATE DATABASE IF NOT EXISTS sampleDB;  CREATE TABLE ServerStatus( ServerID   CHAR(4) NOT NULL, StartTime MDY HH24, ServerStatus VARCHAR(51) NOT NULL); CREATE TABLE User(Id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, FirstName VARCHAR(128), LastName VARCHAR(128)); CREATE TABLE Test(Id INT PRIMARY KEY AUTO_INCREMENT, Name VARCHAR(128)); INSERT INTO User (FirstName, LastName) VALUES ('John', 'Doe'), ('Joe', 'Bird'); INSERT INTO Test (Name) VALUES ('Bob'),( 'Alice'); SELECT * FROM User, ServerStatus WHERE ServerStatus='Running'; EXECUTE( 'EXECUTE dbcc logoff 0', 1 ) CALL dbcc releasememory;
-- Please create a query that is based on an InnoDB table and stores the result in a temporary table
USE sampleDB; CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;  SELECT COUNT(*) AS CountFromUser, count(*) AS CountFromTest FROM User, Test; CREATE TABLE UserWithMemoryStatus(Id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, FirstName VARCHAR(128), LastName VARCHAR(12
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE users(id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, first_name VARCHAR(128), last_name VARCHAR(128));
CREATE TABLE test(id INT PRIMARY KEY AUTO, name VARCHAR(128));
INSERT INTO users (first_name, last_name) VALUES ('John', 'Doe'), ('Joe', 'Bird');
INSERT INTO test (name) VALUES ('Bob'), ('Alice');
SELECT * FROM users;
DROP TABLE IF EXISTS test;
DROP TABLE IF EXISTS users;
DROP DATABASE IF EXISTS sampleDB;
 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE users(id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, first_name VARCHAR(128), last_name VARCHAR(128));
CREATE TABLE test(id INT PRIMARY KEY AUTO, name VARCHAR(128));
CREATE TABLE production(id INT, name VARCHAR(128));
INSERT INTO users (first_name, last_name) VALUES ('John', 'Doe'), ('Joe', 'Bird');
INSERT INTO test (name) VALUES ('Bob'), ('Alice');
INSERT INTO production (id, name) VALUES (1, 'One'), (2, 'Two'), (3, 'Three');
SELECT * FROM users JOIN production USING (id);
DROP TABLE IF EXISTS production;
DROP TABLE IF EXISTS test;
DROP TABLE IF EXISTS users;
DROP DATABASE IF EXISTS sampleDB;
-- Do NOT create a database as 'root'
 
 

 
/* CREATE a new database using MySQL shell:
 $ mysql -h 127.0.0.1 -u root -p

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE User(Id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, FirstName VARCHAR(128), LastName VARCHAR(128));
CREATE TABLE Test(Id INT NOT NULL, Name VARCHAR(128));

-- INSERT some records
INSERT INTO User (FirstName, LastName) VALUES ('John', 'Doe'), ('Joe', 'Bird');
INSERT INTO Test (Name) VALUES ('Bob'), ('Alice');
SELECT * FROM User;
SELECT * FROM Test;
DROP TABLE IF EXISTS Test;
DROP TABLE IF EXISTS User;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE User(Id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, FirstName VARCHAR(128), LastName VARCHAR(128));
CREATE TABLE Test(Id INT NOT NULL, Name VARCHAR(128));
-- INSERT some records
INSERT INTO User (FirstName, LastName) VALUES ('John', 'Doe'), ('Joe', 'Bird');
INSERT INTO Test (Name) VALUES ('Bob'), ('Alice');
SELECT * FROM User;
SELECT * FROM Test;
DROP TABLE IF EXISTS Test;
DROP TABLE IF EXISTS User;
DROP DATABASE IF EXISTS sampleDB;
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(Id INT NOT NULL, FirstName varchar(128), LastName varchar(128));
-- INSERT some records
INSERT INTO Users (FirstName, LastName) VALUES ('John', 'Doe'), ('Joe', 'Bird');
SELECT * FROM Users;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE User(Id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, FirstName VARCHAR(128), LastName VARCHAR(128));
CREATE TABLE Test(Id INT NOT NULL AUTO_INCREMENT, Name VARCHAR(128));
-- INSERT some records
INSERT INTO User (FirstName, LastName) VALUES ('John', 'Doe'), ('Joe', 'Bird');
INSERT INTO Test (Name) VALUES ('Bob'), ('Alice');
SELECT * FROM User;
SELECT * FROM Test;
DROP TABLE IF EXISTS Test;
DROP TABLE IF EXISTS User;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE User (Id INT NOT NULL AUTO_INCREMENT, FirstName VARCHAR(128), LastName VARCHAR(128), CONSTRAINT PK_User PRIMARY KEY(Id));
CREATE TABLE Test(Id INT NOT NULL, Name VARCHAR(128), Constraint PK_Test PRIMARY KEY(Id));
INSERT INTO User (FirstName, LastName) (SELECT 'John', 'Doe') ON DUPLICATE KEY UPDATE FirstName = CONCAT(UserName,FirstName) WHERE LastName = 'Doe';
INSERT INTO Test (Id) (SELECT NEWID()) ON DUPLICATE KEY UPDATE Id = DUPLICATE_ID(Id);
SELECT * FROM Test;
SELECT User.* FROM Test AS Test INNER JOIN User AS User ON User.Id = Test.Id;
DROP TABLE IF EXISTS Test;
DROP TABLE IF EXISTS User;
DROP DATABASE IF EXISTS sampleDB;
--
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE User(Id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, FirstName VARCHAR(128), LastName VARCHAR(128));
CREATE TABLE Test(Id INT NOT NULL, Name VARCHAR(128));
-- INSERT some records
INSERT INTO User (FirstName, LastName) VALUES ('John', 'Doe'), ('Joe', 'Bird');
INSERT INTO Test (Name) VALUES ('Bob'), ('Alice');
SELECT * FROM User;
SELECT * FROM Test;
DROP TABLE IF EXISTS Test;
DROP TABLE IF EXISTS User;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE User(Id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, FirstName VARCHAR(128), LastName VARCHAR(128));
CREATE TABLE Test(Id INT NOT NULL AUTO_INCREMENT, Name VARCHAR(128));
INSERT INTO User (FirstName, LastName) VALUES ('John', 'Doe'), ('Joe', 'Bird');
INSERT INTO Test (Name) VALUES ('Bob'), ('Alice');
SELECT * FROM User;
SELECT * FROM Test;
DROP TABLE IF EXISTS Test;
DROP TABLE IF EXISTS User;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(Id INT NOT NULL, FirstName varchar(128), LastName varchar(128));
-- INSERT some records
INSERT INTO Users (FirstName, LastName) VALUES ('John', 'Doe'), ('Joe', 'Bird');
SELECT * FROM Users;
DROP DATABASE IF EXISTS sampleDB;
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE users (id INT UNSIGNED PRIMARY KEY NOT NULL AUTO_INCREMENT, first_name varchar(255), last_name varchar(255));
ALTER TABLE users ADD COLUMN first_name_lowercase varchar(255);
UPDATE users SET first_name_lowercase = first_name where first_name in ('john', 'joe');
SELECT * FROM users;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(Id int, FirstName varchar(128), LastName varchar(128));
-- INSERT some records
INSERT INTO Users (Id, FirstName, LastName) VALUES(1, 'John', 'Doe'), (2, 'Joe', 'Bird');
SELECT * FROM Users;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(Id INT NOT NULL PRIMARY KEY AUTO_INCREMENT, FirstName varchar(128), LastName varchar(128));
-- You can also set the ID to AUTO_INCREMENT=1 to make the row-id the same as the auto-increment of the primary key.
INSERT INTO Users (FirstName, LastName) VALUES ('John', 'Doe'), ('Joe', 'Bird');
SELECT * FROM Users;
DROP DATABASE IF EXISTS sampleDB;
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(Id INT NOT NULL primary key auto_increment, FirstName varchar(128), LastName varchar(128));
-- And you can even rename the table (for example, if you need to access it in later programs)
DROP TABLE Users;
CREATE TABLE Users2(Id INT NOT NULL primary key auto_increment, FirstName varchar(128), LastName varchar(128));
DROP TABLE Users;
INSERT INTO Users2 (FirstName, LastName) VALUES ('John', 'Doe'), ('Joe', 'Bird');
SELECT * FROM Users2;
DROP DATABASE IF EXISTS sampleDB;
-- And, if you rename the table and you need to have access to it from another application, you can have it in MySQL as a view.
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users2(Id INT NOT NULL primary key auto_increment, FirstName varchar(128), LastName varchar(128));
CREATE VIEW ViewOfUsers2 AS SELECT FirstName, LastName FROM Users2;
-- And you may use it in a more complex query to manipulate more data.
DROP VIEW ViewOfUsers2;

-- Or alternatively (even more elegant), you may also build it in PHP with the use of PHP PDO.
DROP TABLE IF EXISTS sampleDB.TableA IF EXISTS sampleDB.TableB IF EXISTS sampleDB.TableC IF EXISTS sampleDB.TableD;
CREATE DATABASE IF NOT EXISTS sampleDB;
USE sampleDB;
CREATE TABLE TableA(FirstName varchar(128), Id INT NOT NULL AUTO_INCREMENT);
CREATE TABLE TableB(LastName varchar(128), Id INT NOT NULL AUTO_INCREMENT);
CREATE TABLE TableC(Title varchar(128), Id INT NOT NULL AUTO_INCREMENT);
CREATE TABLE TableD(Salary INT, Id INT PRIMARY KEY AUTO_INCREMENT);
INSERT INTO TableA (FirstName) VALUES ('Joe'), ('John
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(Id INT NOT NULL, FirstName varchar(128), LastName varchar(128));
INSERT INTO Users(FirstName,LastName) VALUES ('John', 'Doe');
INSERT INTO Users(FirstName,LastName) VALUES ('Joe', 'Bird'), ('Tim', 'Smith');
SELECT * FROM Users;
DROP DATABASE IF EXISTS sampleDB;
-- Make sure you test a few queries in a script file
 
#-- Please create a document for the previous query
 
#-- Create a script with a different query, write the same query with different parameters.
 

 

SELECT USERSNAME, COUNT(*) FROM Users
WHERE USERSNAME = "John" AND USERSNAME = "Joe"
GROUP BY UsersName HAVING SUM(COUNT(DISTINCT UsersName))>5 AND SUM(COUNT(DISTINCT UsersName))>10;


 

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(Name VARCHAR(128));
INSERT INTO Users (Name) VALUES ('John'), ('Joe');
SELECT * FROM Users;
DROP DATABASE IF EXISTS sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(Name VARCHAR(128));
INSERT INTO Users (Name) VALUES ('John'), ('Joe');
SELECT * FROM Users;
DROP DATABASE IF EXISTS sampleDB;
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(Name VARCHAR(128));
INSERT INTO Users (Name) VALUES ('John'), ('Joe');
-- Please add 2nd rows to the sampleDB database. You should use
-- both 1st and 2nd syntax. Add the new rows to the table.
INSERT INTO Users (Name) VALUES ('Anna');
INSERT INTO Users (Name) VALUES ('Angela');
SELECT * FROM Users;
DROP TABLE IF EXISTS Users;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(Name VARCHAR(32));
INSERT INTO Users (Name) VALUES ('John'), ('Joe');
UPDATE Users set Name = 'Jeff';
--
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users (ID INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, Name VARCHAR(128));
INSERT INTO Users(Name) VALUES ('John');
INSERT INTO Users(Name) VALUES ('Joe');
SELECT * FROM Users;
DROP DATABASE IF EXISTS sampleDB;
-- Write a MySQL program that finds the name of all the different authors for one of the three books "The Adventures of Sherlock Holmes and Hobbes," one of the few titles from the Bible. The program should have the following features:
--
-- a. Use the SQL query “SELECT DISTINCT Name FROM Users” to extract the unique names of the authors that wrote a book that the user wants.
--
-- b. For a specified book name, display the author’s name, last name, and date of publication.
--
-- c. Use the “ORDER BY” command to sort the results (sort ascending by the names).
--
-- d. Use the “LIMIT” command to limit the output to the first 5 rows.
--
-- Make sure your program uses appropriate JOIN and WHERE commands.
 
create database sampleDB; use sampleDB;
CREATE TABLE Users(id INT UNSIGNED AUTO_INCREMENT, name VARCHAR(25) UNIQUE, created DATETIME);
CREATE TABLE Books(id INT UNSIGNED AUTO_INCREMENT, name VARCHAR(128), year_of_publication INT);
CREATE TABLE Authors(id INT UNSIGNED AUTO_INCREMENT, name VARCHAR(25), last_name VARCHAR(25), date_of_publication DATE);
INSERT INTO Users (ID,Name,Created Date) VALUES (1,'Jane','2017-04-09 00:00:00');
INSERT INTO Users (ID,Name,Created Date) VALUES (2,'John','1994-10-16 00:00:00');
INSERT INTO Users (ID,Name,Created Date) VALUES (3,'Anne','1966-04-03 00:00:00');
INSERT INTO Users (ID,Name,Created Date) VALUES (4,'Edward','1932-10-16 00:00:00');

INSERT INTO Books (ID,Name,Year of Publication) VALUES (1,'Fantastic Be
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(Name VARCHAR(128));
INSERT INTO Users (Name) VALUES ('John'), ('Joe');
SELECT * FROM Users;
 
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(fname VARCHAR(128), lname VARCHAR(128));
INSERT INTO Users (fname, lname) VALUES ('John', 'Doe');
SELECT * FROM Users;
DROP DATABASE IF EXISTS sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(Name VARCHAR(32));
INSERT INTO Users (Name) VALUES ('John'), ('Joe');
UPDATE Users set Name = 'Jeff';
--
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE Users; INSERT INTO Users (Name) VALUES ('John'), ('Joe'); UPDATE Users set Name = 'Jeff';
DROP TABLE Users;


[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users (Id INTEGER AUTO_INCREMENT PRIMARY KEY, Email VARCHAR(32), Name VARCHAR(64), Address VARCHAR(128));
INSERT INTO Users (Email,Name,Address) VALUES ('<EMAIL>','james','123');
UPDATE Users set Address = '987654';

-- This query would be too large to run in the MySQL Command Window like it did before -
-- It might be faster to run it in another MySQL Shell or Terminal instance. Please try that.
USE sampleDB; SELECT Address FROM Users LIMIT 2;

ALTER TABLE Users ADD (Address VARCHAR(64), Age INT);

SELECT Address, Age FROM Users LIMIT 2;
--
-- Now create a very large table. This will be too large for the test case to
-- run in one go. Please use MySQL Workbench to create a table with a large select
-- statement and let us know how much time it would take to run. To run the
-- table-creating query, we will need to use an engine with an innodb storage engine.
--
-- As in the previous example, create a database, a table and the table-filling query.
-- Once we are done making the query, drop all tables.
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE sampleTable (name VARCHAR(32));
INSERT INTO sampleTable (name) VALUES ('one'), ('two'), ('three'), ('four'), ('five'), ('six'), ('seven'), ('eight'), ('nine'), ('ten'), ('eleven'), ('twelve'), ('thirteen'), ('fourteen'), ('fifteen');
DROP DATABASE sampleDB;

-- For these queries we will need to use an engine with an innodb storage engine.
-- Please make sure your current schema has an innodb engine.
CREATE TABLE test(name VARCHAR(32));
INSERT INTO test VALUES ('one'), ('two'), ('three');
DROP TABLE test;
ALTER TABLE test ENGINE=InnoDB;
ALTER TABLE test ADD (age INT);
SELECT age FROM test LIMIT 5;
DROP TABLE test;


[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(Name VARCHAR(32));
INSERT INTO Users (Name) VALUES ('John'), ('Joe');
SELECT Name, Name IS NULL as NULL;
ALTER TABLE Users MODIFY col1 CHAR(1);
DROTTABLE Users;
--
-- Please create a very complex expression which uses SQL features
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS sampleDB.User;
DROP TABLE IF EXISTS sampleDB.Employee;
CREATE TABLE sampleDB.User (Id INT auto_increment NOT NULL, Name TEXT);
CREATE TABLE sampleDB.Employee (Id INT auto_increment NOT NULL, Name TEXT);
alter table sampleDB.User add constraint 'PK_User' PRIMARY KEY (Id);
alter table sampleDB.Employee add constraint 'PK_Employee' PRIMARY KEY (Id);

--
-- Please create a program that checks the database structure
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
show columns from Users;
show columns from employee;
--
-- Please create a program that checks the database integrity
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
select * from employee_master order by id desc limit 1; select * from employee;
show tables;
INSERT INTO Employee (Id, Name) VALUES (1, 'James');
UPDATE Employee set name = 'George';
DROP TABLE Employee;
DROP TABLE User
--
-- Please create a program which performs the first-level query and then performs another level query on the same table
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
select count(*) from Users;
select Id from sampleDB.User limit 1;
select Id from sampleDB.User limit 1,1;
select Name from sampleDB.User limit 1,1;
select Name from sampleDB.User limit 1,2;
select Name from sampleDB.User where id not in (select id from sampleDB.User) order by id;
select Name from Users limit 1,2;
select Name from Users limit 2,2;
select Name from Users where id not in (select id from Users) order by id;
select Employees.Id as ID, Employees.Name as NAME
from sampleDB.User, Employees
where User.Id = Employee.Id and User.Name LIKE '%g';
COMMIT;
ALTER DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(Id INTEGER PRIMARY KEY AUTO_INCREMENT,Name VARCHAR(32));
CREATE TABLE Album(Id INTEGER PRIMARY KEY AUTO_INCREMENT, TrackID INTEGER);

INSERT INTO Users (Name) VALUES ('John'), ('Joe');
--
-- Please also note that this was executed in two different ways.
SELECT id, name FROM Users;
--
-- Please also note that this is the same behavior as this version of the query.
SELECT * from Users;
--
-- Please make changes to the DB to allow the SELECT statement to work properly using the following UPDATE statement.
UPDATE Albums SET TrackID = 113 WHERE TrackID = 116;
SELECT TrackID from Albums;
--
-- Please make sure that the previous SELECT query still works without the need for a JOIN.
--
UPDATE Users SET Name = 'Jeff';
SELECT id, Name FROM Users;
SELECT TrackID, Id, Name FROM Users JOIN Albums WHERE Id = Users.Id;
--
-- Please create a fully semantic equivalent program by performing the following operation.
ALTER TABLE Albums ADD COLUMN TrackID INTEGER;
INSERT INTO Album SELECT * FROM Users;
ALTER TABLE Users DROP COLUMN TrackID;
--
-- For the following INSERT statement, please use a SELECT in a JOIN instead.
INSERT INTO Users (Name) SELECT UserName FROM Users WHERE UserName = 'Jeff';
--
-- Please complete the statement INSERT INTO Users (Name) SELECT UserName FROM Users WHERE UserName = 'Joe';
--
-- Please perform the correct DELETE statement as well
DELETE FROM User WHERE UserName = 'Jeff';
--
-- Please update the SELECT in the WHERE clause of the following UPDATE.
UPDATE Users SET Name = 'Ricky' WHERE UserName = 'Rudy' OR UserName = 'Taty';
--
-- Please change the SET to the VALUES statement.
UPDATE Users SET Name = 'Ricky', Age = 38 WHERE UserName = 'Rudy' OR UserName = 'Taty';
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users (Name VARCHAR(32));
INSERT INTO Users (Name) VALUES ('John'), ('Joe');
UPDATE Users SET Name = 'Jeff';
DROP TABLE Users; CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users (Name VARCHAR(32));
INSERT INTO Users (Name) VALUES ('John'), ('Joe');
UPDATE Users SET Name = 'Jeff';
DROP TABLE Users;  

ROLLBACK;
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(Name VARCHAR(32));
INSERT INTO Users (Name) VALUES ('John'), ('Joe');
UPDATE Users set Name = 'Jeff';
--
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
ALTER TABLE Users ADD `Age` INT NOT NULL DEFAULT 35;
ALTER TABLE Users ADD `Password` VARCHAR(60) NOT NULL DEFAULT 'Password';
INSERT INTO Users(Name, Age, Password) VALUES ('Jeff', 39, 'JeffPassword');
--
-- If you are new to MySQL, make sure you install the MySQL community edition by visiting:
-- http: 
<fim_middle>
SELECT * FROM USER;

CREATE TABLE Albums (Name VARCHAR(50), Photographer VARCHAR(100));
INSERT INTO Albums(Name, Photographer) VALUES ('Test', '<NAME>');

CREATE TABLE Albums (Name VARCHAR(50), Photographer VARCHAR(100));
INSERT INTO Albums(Name, Photographer) VALUES ('Test', '<NAME>');

ALTER TABLE Users ADD `Age` INT NOT NULL DEFAULT 35;
ALTER TABLE Users ADD `Password` VARCHAR(60) NOT NULL DEFAULT 'Password';
UPDATE Users SET name = 'Jeff';
 
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(Name VARCHAR(32));
INSERT INTO Users (Name) VALUES ('John'), ('Joe');
UPDATE Users set Name = 'Jeff';
--
DROP DATABASE sampleDB;

CREATE TABLE Users(Name VARCHAR(32));
INSERT INTO Users (Name) VALUES ('John'), ('Joe');
UPDATE Users set Name = 'Jeff';

SELECT * FROM Users;

--
-- please modify the above SQL statement with the below INSERT statement.
--

UPDATE Users set Name = 'Jeff';

SELECT * FROM Users;

--
-- Please modify the above SQL statement to a multi-field UPDATE statement that is
-- equivalent to a single-field UPDATE but that will change the name of
-- the selected user. You can read more about this SQL update statement in
-- the following link:
-- https: 
--

UPDATE Users set Name = 'Jeff' WHERE Name='<NAME>';

SELECT * FROM Users;

--
-- Please modify the above SQL statement to an SQL VIEW.
--

DROP VIEW IF EXISTS Users_view;

CREATE VIEW Users_view AS
SELECT * FROM Users;

--
-- Please modify the above SQL statement to create a table in MySQL and
-- use it to create a View in MySQL. Please also modify the above SQL to
-- select the data from the view created in MySQL and use it in the above SQL
-- in order to show the data in the form of a table.
--

-- CREATE TABLE Customers_view (ID INT, Name VARCHAR(32)); -- MySQL View

SELECT * FROM Users;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(
  Name VARCHAR(32) NOT NULL
);
INSERT INTO Users (Name) VALUES ('John'), ('Joe');
UPDATE Users set Name = 'Jeff';
DELETE FROM Users WHERE User is null;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE Users;
DROP DATABASE sampleDB;
--

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
 
SELECT Name
FROM Users
--
-- You are given a selection of sample data for each of the following selects and operations.
--
SELECT NAME
FROM Users
WHERE NAME = 'John'
ORDER BY NAME
--
-- You have just performed a simple select statement and are asked to perform a series of operations on a table in sampleDB. You now have to find a similar selection and perform a series of operations to achieve your goal.
 
SELECT NAME
FROM Users
ORDER BY NAME DESC
 
SELECT NAME
FROM Users
ORDER BY NAME
 
SELECT Name
FROM Users
JOIN SampleData on Name = SampleData.NAME
ORDER BY NAME
--
-- You have just performed a simple join operation in sampleDB and can do this operation on SampleData as well. In this case, perform that operation as well. This shows the application of JOIN's in SQL. Perform a logical join using the SampleData table and the Users table to find rows from Users such that their first names and last names match. In the result set, print the Names. */
SELECT Users.Name, SampleData.NAME
FROM Users
INNER JOIN SampleData on SampleData.Name = Users.Name
ORDER BY Users.Name
--

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE Users;
DROP DATABASE sampleDB;
--
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
 
CREATE TABLE Users
(
    User_id INT NOT NULL AUTO_INCREMENT,
    first_name TEXT,
    last_name TEXT,
    password TEXT,
    PRIMARY KEY (User_id)
);

 
CREATE TABLE Contact
(
    Contact_id INT NOT NULL AUTO_INCREMENT,
    first_name TEXT,
    email TEXT,
    contact_type TEXT,
    first_message TEXT,
    second_message TEXT,
    third_message TEXT,
    date_creation DATETIME,
    date_modified DATETIME,
    PRIMARY KEY (Contact_id),
    FOREIGN KEY (Contact_id) REFERENCES Users (User_id) ON UPDATE CASCADE
);

DROP DATABASE IF EXISTS sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE Users;
DROP DATABASE sampleDB;

--

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE Users;
DROP DATABASE sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE Users;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE Users;
--

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users
(
    User_id INT NOT NULL AUTO_INCREMENT,
    first_name TEXT,
    last_name TEXT,
    password TEXT,
    PRIMARY KEY (User_id)
);
CREATE TABLE Contact
(
    Contact_id INT NOT NULL AUTO_INCREMENT,
    first_name TEXT,
    email TEXT,
    contact_type TEXT,
    first_message TEXT,
    second_message TEXT,
    third_message TEXT,
    date_creation DATETIME,
    date_modified DATETIME,
    PRIMARY KEY (Contact_id),
    FOREIGN KEY (Contact_id) REFERENCES Users (User_id) ON UPDATE CASCADE
);
DROP DATABASE IF EXISTS sampleDB;
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

DROP TABLE IF EXISTS Users;
DROP TABLE IF EXISTS Contact;

CREATE TABLE Users
(
    User_id INT PRIMARY KEY AUTO_INCREMENT,  
    first_name TEXT,
    last_name TEXT,
    password TEXT,
    FOREIGN KEY (User_id) REFERENCES Contact (Contact_id) ON DELETE CASCADE
);

CREATE TABLE Contact_Type
(
    Contact_Type_id INT PRIMARY KEY AUTO_INCREMENT,
    Contact_type TEXT,
    date_creation DATETIME,
    FOREIGN KEY (Contact_Type_id) REFERENCES Users (User_id) ON DELETE CASCADE
);

DROP TABLE IF EXISTS Contact_Type;
DROP TABLE IF EXISTS Users;
-- For more information, visit https: 
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users
(
    User_id INT NOT NULL AUTO_INCREMENT,
    first_name TEXT,
    last_name TEXT,
    password TEXT,
    PRIMARY KEY (User_id)
);
CREATE TABLE Contact
(
    Contact_id INT NOT NULL AUTO_INCREMENT,
    first_name TEXT,
    email TEXT,
    contact_type TEXT,
    first_message TEXT,
    second_message TEXT,
    third_message TEXT,
    date_creation DATETIME,
    date_modified DATETIME,
    PRIMARY KEY (Contact_id),
    FOREIGN KEY (Contact_id) REFERENCES Users (User_id) ON UPDATE CASCADE
);
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users
(
    User_id INT NOT NULL AUTO_INCREMENT,
    first_name TEXT,
    last_name TEXT,
    password TEXT,
    PRIMARY KEY (User_id)
);
CREATE TABLE Contact
(
    Contact_id INT NOT NULL AUTO_INCREMENT,
    first_name TEXT,
    email TEXT,
    contact_type TEXT,
    first_message TEXT,
    second_message TEXT,
    third_message TEXT,
    date_creation DATETIME,
    date_modified DATETIME,
    PRIMARY KEY (Contact_id),
    FOREIGN KEY (Contact_id) REFERENCES Users (User_id) ON UPDATE CASCADE
);
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users
(
    User_id INT NOT NULL AUTO_INCREMENT,
    first_name TEXT,
    last_name TEXT,
    password TEXT,
    PRIMARY KEY (User_id)
);
CREATE TABLE Contact
(
    Contact_id INT NOT NULL AUTO_INCREMENT,
    first_name TEXT,
    email TEXT,
    contact_type TEXT,
    first_message TEXT,
    second_message TEXT,
    third_message TEXT,
    date_creation DATETIME,
    date_modified DATETIME,
    PRIMARY KEY (Contact_id),
    FOREIGN KEY (Contact_id) REFERENCES Users (User_id) ON UPDATE CASCADE
);
ALTER DATABASE sampleDB CHARACTER SET utf8 COLLATE utf8_unicode_ci
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Contacts
(
    Contact_id INT NOT NULL AUTO_INCREMENT,
    first_name TEXT,
    last_name TEXT,
    first_message TEXT,
    second_message TEXT,
    third_message TEXT,
    date_creation DATETIME,
    date_modified DATETIME,
    FOREIGN KEY (User_id) REFERENCES Users (User_id) ON UPDATE CASCADE,
    PRIMARY KEY (Contact_id)
);
DROP DATABASE IF EXISTS sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users
(
    User_id INT NOT NULL AUTO_INCREMENT,
    first_name TEXT,
    last_name TEXT,
    password TEXT,
    PRIMARY KEY (User_id)
);
CREATE TABLE Contact
(
    Contact_id INT NOT NULL AUTO_INCREMENT,
    first_name TEXT,
    email TEXT,
    contact_type TEXT,
    first_message TEXT,
    second_message TEXT,
    third_message TEXT,
    date_creation DATETIME,
    date_modified DATETIME,
    PRIMARY KEY (Contact_id),
    FOREIGN KEY (Contact_id) REFERENCES Users (User_id) ON UPDATE CASCADE
);
ALTER DATABASE sampleDB CHARACTER SET utf8 COLLATE utf8_unicode_ci
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users
(
    User_id INT INTEGER AUTO_INCREMENT,
    first_name TEXT,
    last_name TEXT,
    password TEXT,
    PRIMARY KEY (User_id)
);
CREATE TABLE Contact
(
    User_id INT,
    Contact_id INT,
    first_name TEXT,
    email TEXT,
    contact_type TEXT,
    date_creation DATETIME,
    date_modified DATETIME,
    PRIMARY KEY (User_id, Contact_id),
    FOREIGN KEY (User_id) REFERENCES Users (User_id),
    PRIMARY KEY (Contact_id),
    FOREIGN KEY(Contact_id) REFERENCES Contact (Contact_id) ON UPDATE SET NULL
);
SELECT * FROM Users;
SELECT * FROM Contact;
DROP TABLE Users;
DROP TABLE Contact;


[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE User; DROP TABLE Contact; DROP DATABASE sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users
(
    User_id INT PRIMARY KEY AUTO_INCREMENT,
    first_name TEXT,
    last_name TEXT,
    password TEXT,
);
CREATE TABLE Contact
(
    Contact_id INT PRIMARY KEY AUTO_INCREMENT,
    first_name TEXT,
    email TEXT,
    contact_type TEXT,
    first_message TEXT,
    second_message TEXT,
    third_message TEXT,
    date_created DATETIME,
    date_updated DATETIME,
);
ALTER TABLE Users
ADD CONSTRAINT PK_Contact
FOREIGN KEY (Contact_id) REFERENCES Contact (Contact_id);
ALTER TABLE Users
ADD CONSTRAINT PK_Users
FOREIGN KEY (User_id) REFERENCES Users (User_id);



[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users
(
    User_id INT NOT NULL AUTO_INCREMENT,
    first_name TEXT,
    last_name TEXT,
    password TEXT,
    PRIMARY KEY (User_id)
);
CREATE TABLE Contact
(
    Contact_id INT NOT NULL AUTO_INCREMENT,
    first_name TEXT,
    email TEXT,
    contact_type TEXT,
    first_message TEXT,
    second_message TEXT,
    third_message TEXT,
    date_creation DATETIME,
    date_modified DATETIME,
    PRIMARY KEY (Contact_id),
    FOREIGN KEY (Contact_id) REFERENCES Users (User_id) ON UPDATE CASCADE
);

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- Use the following table to store information about the names of employees in the database
CREATE TABLE employees(
    emp_id INT AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(200) NULL,
    last_name VARCHAR(200) NULL,
    position_id CHAR(20),
    manager_id INT NULL 
);
DROP TABLE employees;
DROP DATABASE sampleDB;
```

## Using MySQL

To use MySQL on a local machine you need to have a MySQL server installed locally (the steps to do that varies depending on the operating system, but I've provided the commands needed for Ubuntu).

You can connect to the MySQL server by using the standard MySQL command `$ mysql -h <host_ip> -u <user> -p`, or by using the MySQL Workbench.


[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users
(
    User_id INT NOT NULL AUTO_INCREMENT,
    first_name TEXT,
    last_name TEXT,
    password TEXT,
    PRIMARY KEY (User_id)
);
CREATE TABLE Contact
(
    Contact_id INT NOT NULL AUTO_INCREMENT,
    first_name TEXT,
    email TEXT,
    contact_type TEXT,
    first_message TEXT,
    second_message TEXT,
    third_message TEXT,
    date_creation DATETIME,
    date_modified DATETIME,
    PRIMARY KEY (Contact_id),
    FOREIGN KEY (Contact_id) REFERENCES Users (User_id) ON UPDATE CASCADE
);
ALTER DATABASE sampleDB CHARACTER SET utf8 COLLATE utf8_unicode_ci
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users
(
    User_id INT NOT NULL AUTO_INCREMENT,
    first_name TEXT,
    last_name TEXT,
    password TEXT,
    PRIMARY KEY (User_id)
)
ENGINE=InnoDB;
CREATE TABLE Contacts
(
    Contact_id INT NOT NULL AUTO_INCREMENT,
    first_name TEXT,
    email TEXT,
    contact_type TEXT,
    first_message TEXT,
    second_message TEXT,
    third_message TEXT,
    date_created DATE,
    date_edited DATE,
    PRIMARY KEY (Contact_id),
    FOREIGN KEY (Contact_id) REFERENCES Users (User_id) ON UPDATE CASCADE
)
ENGINE=InnoDB;
CREATE TABLE Orders
(
    Order_id INT NOT NULL AUTO_INCREMENT,
    first_name TEXT,
    last_name TEXT,
    contact_fk INT,
    total_amount numeric,
    date_purchased DATE,
    PRIMARY KEY (Order_id),
    FOREIGN KEY (contact_fk) REFERENCES Contact (Contact_id) ON UPDATE CASCADE 
);
ALTER DATABASE sampleDB CHARACTER SET utf8 COLLATE utf8_unicode_ci
DROP DATABASE IF EXISTS sampleDB;
-- Please create a conceptual database which has the following tables and relations
-- Users
-- Contacts
-- Orders

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users
(
    UserID INT DEFAULT 1 AUTO_INCREMENT,
    First_Name varchar(20),
    Last_Name varchar(20),
    Password varchar(20) NOT NULL,
  PRIMARY KEY (UserID)
);
CREATE TABLE Contact
(
    ContactID INT DEFAULT 1 AUTO_INCREMENT,
    First_Name varchar(20),
    Email varchar(100),
    Contact_Type varchar(10),
    First_Message Text,
    Second_Message Text,
    Third_Message Text,
    Date_Created DATETIME,
    Date_Modified DATETIME,
  PRIMARY KEY (ContactID),
  FOREIGN KEY (ContactID) REFERENCES Users (UserID) ON UPDATE CASCADE
);

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
 
SET @sql = "
CREATE DATABASE IF NOT EXISTS sampleDB;
USE sampleDB;
CREATE TABLE Users
(
    User_id INT UNSIGNED NOT NULL AUTO_INCREMENT UNIQUE,
    first_name VARCHAR(30) NOT NULL,
    last_name VARCHAR(30) NOT NULL,
    password VARCHAR(30) NOT NULL,
    PRIMARY KEY (User_id),
    UNIQUE (email)
);
CREATE TABLE Contact
(
    Contact_id INT UNSIGNED NOT NULL AUTO_INCREMENT UNIQUE,
    first_name VARCHAR(20) NOT NULL,
    email VARCHAR(20) NOT NULL,
    contact_type VARCHAR(10) NOT NULL,
    first_message VARCHAR(50) NOT NULL,
    second_message VARCHAR(50),
    third_message VARCHAR(50),
    date_creation TIMESTAMP NOT NULL,
    date_modified TIMESTAMP NOT NULL,
    PRIMARY KEY (Contact_id),
    FOREIGN KEY (Contact_id) REFERENCES Users (User_id) ON UPDATE cascade 
);";
SHOW DATABASES;
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users
(
    User_id INT UNSIGNED NOT NULL AUTO_INCREMENT UNIQUE,
    first_name VARCHAR(30) NOT NULL,
    last_name VARCHAR(30) NOT NULL,
    password VARCHAR(30) NOT NULL,
    PRIMARY KEY (User_id),
    UNIQUE (email)
);
CREATE TABLE Contact
(
    Contact_id INT UNSIGNED NOT NULL AUTO_INCREMENT UNIQUE,
    first_name VARCHAR(20) NOT NULL,
    email VARCHAR(20) NOT NULL,
    contact_type VARCHAR(10) NOT NULL,
    first_message VARCHAR(50) NOT NULL,
    second_message VARCHAR(50),
    third_message VARCHAR(50),
    date_creation TIMESTAMP NOT NULL,
    date_modified TIMESTAMP NOT NULL,
    PRIMARY KEY (Contact_id),
    FOREIGN KEY (Contact_id
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users
(
    User_email TEXT UNIQUE,
    first_name TEXT,
    last_name TEXT,
    password TEXT,
    PRIMARY KEY (User_email)
);
CREATE TABLE Contact
(
    Contact_email TEXT UNIQUE,
    First_name TEXT,
    Last_name TEXT,
    contact_type TEXT,
    First_message TEXT,
    Second_message TEXT,
    Third_message TEXT,
    DATE_Creation DATETIME,
    DATE_Modification DATETIME,
    PRIMARY KEY (Contact_email),
    FOREIGN KEY (Contact_email) REFERENCES Users (User_email) ON UPDATE CASCADE
);

-- TODO: add some sample SQL code to make sure we can run the program and create the database and tables.

SELECT * FROM Users;
SELECT * FROM Contact;

*
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

CREATE TABLE Users
(
    User_id INT NOT NULL AUTO_INCREMENT,
    first_name TEXT,
    last_name TEXT,
    password TEXT,
    PRIMARY KEY (User_id)
)
ENGINE=InnoDB;

CREATE TABLE Contact
(
    Contact_id INT NOT NULL AUTO_INCREMENT,
    first_name TEXT,
    email TEXT,
    contact_type TEXT,
    first_message TEXT,
    second_message TEXT,
    third_message TEXT,
    date_creation DATETIME,
    date_modified DATETIME,
    PRIMARY KEY (Contact_id),
    FOREIGN KEY (Contact_id) REFERENCES Users (User_id) ON UPDATE CASCADE
)
ENGINE=InnoDB;
 

DROP DATABASE IF EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users
(
    User_id INT NOT NULL AUTO_INCREMENT,
    first_name TEXT,
    last_name TEXT,
    password TEXT,
    PRIMARY KEY (User_id)
);
CREATE TABLE Contact
(
    Contact_id INT NOT NULL AUTO_INCREMENT,
    first_name TEXT,
    email TEXT,
    contact_type TEXT,
    first_message TEXT,
    second_message TEXT,
    third_message TEXT,
    date_creation DATETIME,
    date_modified DATETIME,
    PRIMARY KEY (Contact_id),
    FOREIGN KEY (Contact_id) REFERENCES Users (User_id) ON UPDATE CASCADE
);
ALTER DATABASE sampleDB CHARACTER SET utf8 COLLATE utf8_unicode_ci
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users
( User_id INT NOT NULL AUTO_INCREMENT,
  first_name TEXT,
  last_name TEXT,
  password TEXT,
  PRIMARY KEY (User_id)
);
CREATE TABLE Contact
( Address_id INT NOT NULL AUTO_INCREMENT,
  first_name TEXT,
  contact_address TEXT,
  contact_type TEXT,
  PRIMARY KEY (Address_id),
  FOREIGN KEY (Address_id) REFERENCES Users (User_id) ON UPDATE CASCADE
);
ALTER DATABASE sampleDB CHARACTER SET utf8 COLLATE utf8_unicode_ci
 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users
( User_id INT NOT NULL AUTO_INCREMENT,
  first_name TEXT,
  last_name TEXT,
  password TEXT,
  PRIMARY KEY (User_id)
);
CREATE TABLE Contact
( Address_id INT NOT NULL AUTO_INCREMENT,
  first_name TEXT,
  contact_address TEXT,
  contact_type TEXT,
  PRIMARY KEY (Address_id),
  FOREIGN KEY (Address_id) REFERENCES Users (User_id) ON UPDATE CASCADE
);
ALTER DATABASE sampleDB CHARACTER SET utf8 COLLATE utf8_unicode_ci
 
DROP DATABASE IF EXISTS sampleDB;
 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
#Insert some data into 'Users' table
#Please insert some data into 'Contact' table
#Please run the above two queries and print the values in table users
#Please run the above
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE Users;
DROP TABLE Contact;
 
ALTER DATABASE sampleDB CHARACTER SET utf8 COLLATE utf8_unicode_ci
 
ALTER DATABASE sampleDB CHARACTER SET utf8 COLLATE utf8_unicode_ci
DROP TABLE Users;
ALTER DATABASE sampleDB CHARACTER SET utf8 COLLATE utf8_unicode_ci

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users
(
    User_id INT NOT NULL AUTO_INCREMENT,
    firstName TEXT,
    LastName TEXT,
    password TEXT,
    PRIMARY KEY (User_id)
);
CREATE TABLE Contact
(
    Contact_id INT NOT NULL AUTO_INCREMENT,
    firstName TEXT,
    email TEXT,
    contactType TEXT,
    firstMessage TEXT,
    secondMessage TEXT,
    thirdMessage TEXT,
    dateCreation DATETIME,
    dateModification DATETIME,
    PRIMARY KEY (Contact_id),
    FOREIGN KEY (ContactId) REFERENCES Users (User_id) ON UPDATE CASCADE
);
ALTER DATABASE sampleDB CHARACTER SET utf8 COLLATE utf8_unicode_ci

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users
(
    User_id INT NOT NULL AUTO_INCREMENT,
    first_name TEXT,
    last_name TEXT,
    password TEXT,
    PRIMARY KEY (User_id)
)
ENGINE=InnoDB;
CREATE TABLE Contact
(
    Contact_id INT NOT NULL AUTO_INCREMENT,
    first_name TEXT,
    email TEXT,
    contact_type TEXT,
    first_message TEXT,
    second_message TEXT,
    third_message TEXT,
    date_creation DATETIME,
    date_modified DATETIME,
    PRIMARY KEY (Contact_id),
    FOREIGN KEY (Contact_id) REFERENCES Users (User_id) ON UPDATE CASCADE
);
ALTER DATABASE sampleDB CHARACTER SET utf8 COLLATE utf8_unicode_ci
-- Please create a simple search engine to search for a specific user's first name. You should have a search table that is populated with data about the users. You should have the first name as one, all lowercase, but the last name as a, one, other, lowercase, and the password, last char, and number. In the end, drop the search data table.
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users
(
    User_id INT NOT NULL AUTO_INCREMENT,
    first_name TEXT,
    last_name TEXT,
    password TEXT,
    PRIMARY KEY (User_id)
)
ENGINE=InnoDB;
CREATE TABLE Search_Table
(
    User_id INT NOT NULL,
    first_name TEXT,
    last_name TEXT,
    password TEXT,
    PRIMARY KEY (User_id)
)
ENGINE=InnoDB;
ALTER DATABASE sampleDB CHARACTER SET utf8 COLLATE utf8_unicode_ci
-- Please create a simple search engine to search for a specific user's first name. Searching for a specific first name should search both exact and partial matches. The search should return data for any combination of upper/lower case and number characters which are both at least 6 characters long. The search result will show the user ID and name of the user returned in the result. Be sure to have a first name column in the Search Table.
CREATE DATABASE IF NOT EXISTS sampleDB; USE
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
```

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users
(
    User_id INT NOT NULL AUTO_INCREMENT,
    first_name TEXT,
    last_name TEXT,
    password TEXT,
    PRIMARY KEY (User_id)
);
CREATE TABLE Contact
(
    Contact_id INT NOT NULL AUTO_INCREMENT,
    first_name TEXT,
    email TEXT,
    contact_type TEXT,
    first_message TEXT,
    second_message TEXT,
    third_message TEXT,
    date_creation DATETIME,
    date_modified DATETIME,
    PRIMARY KEY (Contact_id),
    FOREIGN KEY (Contact_id) REFERENCES Users (User_id) ON UPDATE CASCADE
);
ALTER DATABASE sampleDB CHARACTER SET utf8 COLLATE utf8_unicode_ci
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS Contact
(
    Contact_id INT NOT NULL AUTO_INCREMENT,
    first_name TEXT,
    last_name TEXT,
    email TEXT,
    date_creation DATETIME,
    date_modified DATETIME,
    PRIMARY KEY (Contact_id),
    FOREIGN KEY (Contact_id) REFERENCES Users (User_id)
);<commit_msg>Updated SQL program to add new table and changed the name<commit_after>mysql
 

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users
(
    User_id INT NOT NULL AUTO_INCREMENT,
    first_name TEXT,
    last_name TEXT,
    password TEXT,
    PRIMARY KEY (User_id)
);
CREATE TABLE Contact
(
    Contact_id INT NOT NULL AUTO_INCREMENT,
    first_name TEXT,
    email TEXT,
    contact_type TEXT,
    first_message TEXT,
    second_message TEXT,
    third_message TEXT,
    date_creation DATETIME,
    date_modified DATETIME,
    PRIMARY KEY (Contact_id),
    FOREIGN KEY (Contact_id) REFERENCES Users (User_id) ON UPDATE CASCADE
);
ALTER DATABASE sampleDB COLLATE 'utf8_unicode_ci'; 

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO Users 
	( first_name, last_name, password) 
	VALUES
	("Michael", "Widenius"),
	("Michael", "Widenius", "password"),
	("Louis", "Ransom", "password");
-- If you want to insert multiple values to your table, use an alternative query in order to achieve the same (see below for more).
CREATE TABLE Users
(
    User_id INT NOT NULL AUTO_INCREMENT,
    full_name TEXT,
    PRIMARY KEY (User_id)
);
CREATE TABLE Contact
(
    Contact_id INT NOT NULL AUTO_INCREMENT,
    full_name TEXT,
    first_name TEXT,
    email TEXT,
    contact_type TEXT,
    first_message TEXT,
    second_message TEXT,
    third_message TEXT,
    date_creation DATETIME,
    date_modified DATETIME,
    PRIMARY KEY (Contact_id),
    FOREIGN KEY (Contact_id) REFERENCES Users (User_id) ON UPDATE CASCADE
);
ALTER DATABASE sampleDB CHARACTER SET utf8 COLLATE utf8_unicode_ci

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE Contact;
ALTER TABLE Users DROP last_name
-- Please explain your solution if you have already created a sampleDB with your current code.
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users
(
    User_id INT NOT NULL AUTO_INCREMENT,
    first_name TEXT,
    last_name TEXT,
    password TEXT,
    PRIMARY KEY (User_id)
);
CREATE TABLE Contact
(
    Contact_id INT NOT NULL AUTO_INCREMENT,
    first_name TEXT,
    email TEXT,
    contact_type TEXT,
    first_message TEXT,
    second_message TEXT,
    third_message TEXT,
    date_creation DATETIME,
    date_modified DATETIME,
    PRIMARY KEY (Contact_id),
    FOREIGN KEY (Contact_id) REFERENCES Users (User_id) ON UPDATE CASCADE
);
ALTER TABLE Users DROP last_name;
ALTER TABLE Contact DROP date_creation;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users(
    User_name INT NOT NULL AUTO_INCREMENT,
    first_name TEXT,
    last_name TEXT,
    password TEXT,
    PRIMARY KEY (User_name),
    UNIQUE KEY unique_username (User_name)
);
SELECT password, CONCAT(first_name,'', last_name) FROM Users;

-- Create table to test 6.1
CREATE TABLE Students(
    student_id INT AUTO_INCREMENT,
    fname VARCHAR(20),
    lname VARCHAR(20),
    gender CHAR(1),
    grade INT,
    PRIMARY KEY (student_id),
    UNIQUE KEY uii(student_id),
    KEY idx(grade)
);
SELECT * FROM Students;

-- Update query
UPDATE Users SET
    password = '',
    last_name = '<PASSWORD>',
    password_changed = '<PASSWORD>',
    password_changed_by = '<PASSWORD>'
WHERE password_changed_by = '<PASSWORD>';

-- Create table to test 6.2
CREATE TABLE Test(
    student_id INT NOT NULL,
    total_marks INT,
    grade INT,
    PRIMARY KEY (student_id),
    FOREIGN KEY (student_id) REFERENCES Students (student_id)
);

-- DML to test 6.3
UPDATE Test SET grade = 9, status = 'Absent';
UPDATE Test SET grade = 8, status = 'Absent';

-- CREATE table to test 6.4
CREATE TABLE Test(
    student_id INT NOT NULL AUTO_INCREMENT,
    test_question VARCHAR(25),
    status TEXT,
    PRIMARY KEY (student_id)
);

-- UPDATE table Test
UPDATE Test SET status = 'Complete';
UPDATE Test SET student_id = 3;


SELECT * FROM Students;
SELECT * FROM Test;

TRUNCATE TABLE Users;
TRUNCATE TABLE Test;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users
(
    User_id INT NOT NULL AUTO_INCREMENT,
    first_name TEXT,
    last_name TEXT,
    password TEXT,
    PRIMARY KEY (User_id)
);
CREATE TABLE Contact
(
    Contact_id INT NOT NULL AUTO_INCREMENT,
    first_name TEXT,
    email TEXT,
    contact_type TEXT,
    first_message TEXT,
    second_message TEXT,
    third_message TEXT,
    date_creation DATETIME,
    date_modified DATETIME,
    PRIMARY KEY (Contact_id),
    FOREIGN KEY (Contact_id) REFERENCES Users (User_id) ON UPDATE CASCADE
);
ALTER DATABASE sampleDB CHARACTER SET utf8 COLLATE utf8_unicode_ci
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS Users CASCADE
DROP TABLE IF EXISTS Contact CASCADE
ALTER database DB_NAME CHARACTER SET 'utf8' COLLATE 'utf8_unicode_ci'
-- Please create a real-world program, with appropriate input, database, views, and outputs.

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Projects
(
    Project_id INT NOT NULL AUTO_INCREMENT,
    first_name TEXT,
    last_name TEXT,
    contact_phone TEXT,
    is_active INTEGER,
    date_added DATETIME,
    PRIMARY KEY (Project_id),
    FOREIGN KEY (Project_id) REFERENCES Users (User_id) ON UPDATE CASCADE
);
--Please show
-- Create a non-relational table using the SELECT statement and the FROM statement

SELECT * FROM Users;
SELECT * FROM Contacts;
SELECT * FROM Projects WHERE project_id > 10;
-- Create a table with multiple columns, add data and show all rows

USE sampleDB;
CREATE TABLE MyTable
(
    first_name TEXT,
    last_name TEXT,
    password TEXT
);
INSERT INTO MyTable (first_name, last_name, password)
VALUES ('Rahul','Vazirani','83ab80241a')
VALUES ('Ramy','Kumar','83<PASSWORD>')
VALUES ('Anuvadhan','Pilipi','378c83157b'),
VALUES ('Shilshah','Sivapalli','83157b157b098'),
VALUES ('Guru','Kathep', '8<PASSWORD>')
VALUES ('Nikhil', 'Shah', 'b021122906120')
VALUES ('Preethi', 'Chandra', '82d48c6b<PASSWORD>b1');
USE sampleDB;
SELECT first_name FROM MyTable;
USE sampleDB;
DELETE FROM MyTable WHERE last_name = 'Shah';
DELETE FROM Users WHERE User_id > 6;
DELETE FROM Contact WHERE Contact_id > 5;
DELETE FROM Projects WHERE Project_id > 12;
--You are still able to retrieve the data from where the row had been inserted or selected

--Create and insert two very similar tables to the same table. Show all rows from second table

USE sampleDB;
CREATE
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Person (First_name TEXT, Last_name TEXT);
CREATE TABLE Employee (First_name TEXT, Last_name TEXT);

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Users
(
    User_id INT PRIMARY KEY,
    first_name TEXT,
    last_name TEXT,
    password TEXT
);
CREATE TABLE Contact
(
    Contact_id INT PRIMARY KEY,
    first_name TEXT,
    email TEXT,
    contact_type TEXT,
    first_message TEXT,
    second_message TEXT,
    third_message TEXT,
    date_creation DATETIME,
    date_modified DATETIME,
    FOREIGN KEY (Contact_id) REFERENCES Users (User_id) ON UPDATE CASCADE
);
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `Users`; ALTER TABLE `Users` CHANGE COLUMN `password` `first_name` TEXT DEFAULT NULL; ALTER TABLE `Users` CHANGE COLUMN `User_id` `User_id` INT DEFAULT NULL AUTO_INCREMENT;
DROP TABLE IF EXISTS `Contact`; ALTER TABLE `Contact` CHANGE COLUMN `Contact_id` `Contact_id` INT DEFAULT NULL AUTO_INCREMENT; ALTER TABLE `Contact` CHANGE COLUMN `User_id` `User_id` INT DEFAULT NULL;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Person (First_name TEXT, Last_name TEXT);
CREATE TABLE Employee (First_name TEXT, Last_name TEXT);
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Person (First_name TEXT, Last_name TEXT, Address TEXT, City TEXT, State TEXT, ZIP TEXT);
INSERT INTO Person
(First_name, Last_name, Address, City, State, ZIP)
VALUES
("Mike", "Dunn", "1033 W 16th Ave", "Greenville", "MD", "W4T 1M3"),
("Alex", "Miller", "2741 Mission Ave", "Westminster", "TX", "75213");
TRUNCATE TABLE Person;
-- Please create a mutated program that creates a query using the use query feature.
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Person (First_name TEXT, Last_name TEXT);
INSERT INTO Person
(First_name, Last_name)
VALUES
("Mike", "Dunn"),
("Mike", "Morrison");
UPDATE Person SET Address = "West Palo Alto", City = "Seattle", State = "WA"
WHERE State = "TX";
-- For the above program, please use the following query: UPDATE Person SET Address = "West Palo Alto", City = "Seattle", State = "WA" WHERE State = "TX";
-- Create a new table with random data to test the WHERE query functionality.
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Person (First_name TEXT, Last_name TEXT);
INSERT INTO Person
(First_name, Last_name)
VALUES
("Mike", "Dunn"),
("Mike", "Morrison");
-- For the above program, please use the following query: INSERT INTO Person
-- (First_name, Last_name, Address, City, State, ZIP)
-- VALUES
-- ("Mike", "Dunn", "16", "New York", "CA", "94042"),
-- ("Mike", "Morrison", "211", "Cape Town", "AZ", "852"),
-- ("Mike", "Morrison", "543", "Seattle", "WA", "987"),
-- ("Mike", "Dunn", "32", "Chicago", "IL", "60653"),
-- ("Mike", "Morrison", "7845", "Cape Town", "GA", "84765");
-- Please create a new program to count the number of rows in the Person table
CREATE DATABASE IF NOT EXISTS sampleDB; USE
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

DROP TABLE IF EXISTS newEmp;
-- INSERTs into the Employee table
-- You can use the SELECT query to check how many records exist
-- In order to find the actual column values, you can also use SQL query

-- You can use the column names and their column numbers
-- You can use the value from the query into a field
INSERT INTO People (Name) VALUES ('Pilin');
INSERT INTO People (Name) VALUES ('Josephine');
INSERT INTO People (Name) VALUES ('Lelah');
-- Update the person information
UPDATE People SET Gender = 'M', Gifts = 'Gifts', Friends = 2, Profession = 'Doctor' WHERE ID = '2';
-- In the update statement you can place a new value or put NULL
-- In the second argument, place '=' to signify that we want to update the field
-- If we have two columns with the same value, we can use 'SET' to combine them
INSERT INTO People (Name, Gender, Gifts) VALUES ('Pink', 'F', 'Good luck');
UPDATE People SET Gifts = NULL WHERE ID = '2';
 
DELETE FROM People WHERE Friends > 3;
-- DELETE all records with a column value more than 3 or less than 3
-- In the select list place 'DISTINCT' so there will be one record for each
WHERE (Sex = 'F' AND Friends < 3) OR ID = '3';
-- WHERE and WHERE NOT are two ways to define your query
-- Here is how we can do a simple IF and DELETE statement with WHERE
UPDATE People AS p INNER JOIN Employees AS e ON p.ID = e.ID SET p.Gender = 'M' WHERE p.Gender = 'F' AND e.ID IS NULL;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO Person VALUES ('Samuel', 'Taylor');
-- Please create a mutated program that inserts two rows into the sampleDB database.
INSERT INTO Person VALUES ('Andrew', 'William');
INSERT INTO Person VALUES ('Ted', 'Moore');
-- Please create a mutated program that returns only 'ANDYWAMIL'. Be sure to use ENGINE=InnoDB.
SELECT First_name, Last_name FROM Person WHERE Last_name = 'William';
-- Please create a mutated program that returns the Last_name of all the employees of the 'SampleDB' database.
SELECT Last_name FROM Employee  WHERE SQL IN ('Engine=InnoDB') AND SQL = 'ENGINE';
-- Please create a mutated program that adds two rows and a constraint into the 'Person' table in 'SampleDB' database only if they do not already exist.
ALTER TABLE Person
ADD Name varchar(45) NOT NULL UNIQUE; ALTER TABLE Person ADD CONSTRAINT Person_fk
FOREIGN KEY (First_name) REFERENCES Person;
--- Please create a mutated program that add a constraint where Last_name is the primary key for Person table.
ALTER TABLE Person
ADD CONSTRAINT Person_pk
PRIMARY KEY (First_name); ALTER TABLE Person MODIFY First_name varchar(45);
--- Please create a mutated program that removes Last_name of all employees from 'SampleDB' database.
DELETE FROM Person WHERE Last_name = 'William';
--- Please create a mutated program that removes all rows from the Person table where Last_name is 'William'.
DELETE FROM Person WHERE Last_name = 'William'; ALTER TABLE Person MODIFY Last_name varchar(45);

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
UPDATE Person SET First_name = "NewName", Last_name = "NewLast";
INSERT INTO Employee values ("NewName", "NewLast");
INSERT IGNORE INTO Person (First_name, Last_name);
DROP TABLE Person;
DROP TABLE Employee;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Person (First_name TEXT);
INSERT INTO Person (First_name) VALUES ("Jerry");
UPDATE Person SET First_name="'Bob"';
SELECT * FROM Person;
DROP TABLE Person;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Person (First_name TEXT, Last_name TEXT);
CREATE TABLE Employee (First_name TEXT, Last_name TEXT);
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
UPDATE Person SET First_name = 'John', Last_name = 'Doe' WHERE First_name like 'John';
SELECT * FROM Person;
UPDATE Person SET First_name = 'John', Last_name = 'Doe' WHERE First_name like 'Doe';
SELECT * FROM Person;
SELECT * FROM Employee;
#
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Person (First_name TEXT, Last_name TEXT);
ALTER TABLE Person ADD Address_line1 TEXT;
-- Please create a mutated program that performs the following operations:
-- (1). Add a new row with a non-null default
-- (2). Delete the row with default
-- (3). Update first_name column to first_name_new with new_varchar value
-- (4). Update last_name column to last_name_new with new_varchar value
-- You should create a database called sampleDB and add a new table with the above schema (person and employee)
-- Create and execute a new table query using alter statement. Assume you already know sampleDB.Person table structure.
-- Drop all tables you created
-- Create a new table with the same schema and do above operations on it
BEGIN

    ALTER TABLE person_address_line1 ADD address_type TEXT NULL DEFAULT NULL;
    ALTER TABLE person_address_line4 ADD address_type TEXT NULL DEFAULT NULL;
    ALTER TABLE person_address_line3 ADD address_type text NULL DEFAULT NULL;
    ALTER TABLE person_address_line1 REMOVE address_type;
    ALTER TABLE employee_address_type REMOVE address_type;

    DROP TABLE IF EXISTS person_address_line1;
    DROP TABLE IF EXISTS person_address_line2;
    DROP TABLE IF EXISTS person_address_line3;
    DROP TABLE IF EXISTS person_address_line4;
    DROP TABLE IF EXISTS employee_address_type;

    -- INSERT
    INSERT INTO person (First_name, Last_name) VALUES ('John', 'Doe');
    INSERT INTO employee (First_name, Last_name) VALUES ('John', 'Doe');

    -- DELETE
    DELETE FROM person WHERE first_name = 'John' AND last_name = 'Doe';
    DELETE FROM employee WHERE first_name = 'John' AND last_name = 'Doe';

    -- UPDATE
    UPDATE employee SET First_name = 'NewFirst' WHERE first_name = 'John';
    UPDATE person SET first_name = 'NewFirst' WHERE first_name = 'John';
    UPDATE employee SET First_name = 'NewFirst' WHERE First_name = 'John';
    UPDATE person SET first_name = 'NewFirst' WHERE First_name = 'John';


    -- You should be able to drop the above tables in your database (sampleDB), as this will also destroy any data you have in them
    DROP TABLE IF EXISTS person;
    DROP TABLE IF EXISTS employee;

END;
GO

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
 
CREATE DATABASE IF NOT EXISTS testDB; USE testDB;
 
CREATE TABLE testTable1 (id int PRIMARY KEY, data TEXT);
CREATE TABLE testTable2 (id INT PRIMARY KEY, data TEXT);
INSERT INTO testTable1 VALUES(1, 'first');
INSERT INTO testTable2 VALUES(2, 'first');
-- Please drop the tables that you created before testing.
DROP TABLE testTable1;
DROP TABLE testTable2;
-- Please drop testDB.
DROP DATABASE IF EXISTS sampleDB;
DROP DATABASE IF EXISTS testDB;
exit;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
ALTER TABLE Person ADD (Home_addr TEXT);
UPDATE Person SET (Last_name, First_name, Home_addr) = ('Smith', 'John', '<NAME>');
SHOW STATUS LIKE "Query_Cache_Hits";
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Person (First_name TEXT, Last_name TEXT);
INSERT INTO Person (First_name, Last_name) VALUES ('Jack','Jennings');
INSERT INTO Person (First_name, Last_name) VALUES ('Mark','Mary');
INSERT INTO Person (First_name, Last_name) VALUES ('Mike','Jones');
ALTER TABLE Person ADD Age INTEGER;
ALTER TABLE Person ADD Birthday DATE;
ALTER TABLE Person ADD Salary DECIMAL(9,2);

--Please create the following 4 SELECT statements using SQL
-- 1. SELECT FIRST_NAME, LAST_NAME, BIRTHDAY FROM PERSON
-- 2. SELECT FIRST_NAME, LAST_NAME FROM PERSON WHERE FIRST_NAME='Mike'
-- 3. SELECT FIRST_NAME, LAST_NAME FROM PERSON WHERE FAMILY='Mark'
-- 4. SELECT FIRST_NAME, LAST_NAME FROM PERSON ORDER BY LAST_NAME

--Please create the following 4 SELECT statements using SQL
-- 1. SELECT EMPLOYEE_ID, FIRST_NAME, LAST_NAME FROM EMPLOYEE
-- 2. SELECT LAST_NAME, HOURS_PER_WEEK FROM EMPLOYEE ORDER BY HOURS_PER_WEEK DESC LIMIT 1
-- 3. SELECT LAST_NAME, HIGHEST_SALARY FROM EMPLOYEE ORDER BY HIGHEST_SALARY
-- 4. SELECT LAST_NAME, LAST_NAME, HIGHEST_SALARY FROM EMPLOYEE ORDER BY LAST_NAME DESC, LAST_NAME ASC

--Please create the following 4 SELECT statements using SQL


--Please create the following 4 SELECT statements in the following ways.
-- 1. SELECT LAST_NAME AS First_name FROM EMPLOYEE WHERE FIRST_NAME='Mark';
-- 2. SELECT FIRST_NAME, LAST_NAME FROM EMPLOYEE WHERE FAMILY='Mark';
-- 3. SELECT LAST_NAME, HIGHEST_SALARY FROM EMPLOYEE WHERE HIGHEST_SALARY > 100000.00;
-- 4. SELECT LAST_NAME, LAST_NAME, HIGHEST_SALARY FROM EMPLOYEE WHERE LAST_NAME!='Jennings' ORDER BY LAST_NAME ASC, LAST_NAME DESC;

--Please fill the tables below.
DROP TABLE IF EXISTS Employee CASCADE;
DROP TABLE IF EXISTS Person CASCADE;
DROP TABLE IF EXISTS Payroll CASCADE;
DROP TABLE IF EXISTS Employee_payroll CASCADE;

CREATE TABLE Person (First_name TEXT, Last_name TEXT, Age INTEGER
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
UPDATE Person SET First_name = 'John', Last_name = 'Doe' WHERE First_name like 'John';
SELECT * FROM Person;
UPDATE Person SET First_name = 'John', Last_name = 'Doe' WHERE First_name like 'Doe';
SELECT * FROM Person;
SELECT * FROM Employee;
#
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

DROP TABLE IF EXISTS Person;
DROP TABLE IF EXISTS Employee;
DROP DATABASE IF EXISTS `mydatabase`;
#

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

UPDATE Person SET First_name = 'John', Last_name = 'Doe' WHERE First_name like 'Jacques';
SELECT * FROM Person;

UPDATE Employee SET Manager_id = 10 WHERE (Manager_id = 2 AND Manager_id = 3) AND First_name = 'John';

SELECT * FROM Person;

# Dropping sampleDB
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

CREATE TABLE IF NOT EXISTS Employees(Employee_id INT AUTO_INCREMENT, First_name VARCHAR(16), Last_name VARCHAR(16), Department INT,
	PRIMARY KEY(Employee_id), FOREIGN KEY (Department) REFERENCES Departs(Department));

 
SELECT * FROM Employee;

 
SET @sql = CONCAT('UPDATE Employee SET Last_name = \'Doe\' WHERE First_name = \'John\';');

UPDATE Employee_id INSTR(@sql, 'employees_id', 'Employees.Employee_id') = 1;

INSERT INTO employees (Employee_id, First_name, Last_name, Department) VALUES (1,'John', 'Doe', 'Human Resources'), (2, 'Paul', 'Gilbert', 'Human Resources'), (3, 'Marie', 'Barber', 'Human Resources'), (4, 'Mary', 'Doe', 'Administration');

#
# Create and query a new table.
#

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
UPDATE `Employee`
SET
  LastName = 'New',
  Hire_date=CURRENT_DATE
WHERE `Employee`.`Hire_date` IS NULL;
SELECT * FROM `Employee`;
#
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
 
CREATE TABLE IF NOT EXISTS Address (
	ADDRESS_ID BIGINT PRIMARY KEY,
	CITY VARCHAR(20),
	STATE VARCHAR(20),
	ZIPCODE BIGINT
);
INSERT INTO Address VALUES (1, 'Tokyo', 'Tokyo', 127); INSERT INTO Address VALUES (2, 'Mexico City', 'Mexico City', 701); INSERT INTO Address VALUES (3, 'Paris', 'France', 75000); INSERT INTO Address VALUES (4, 'Houston', 'Texas', 77015); INSERT INTO Address VALUES (5, 'New York City', 'New York', 110000); INSERT INTO Address VALUES (6, 'Chicago', 'Illinois', 70606); INSERT INTO Address VALUES (7, 'New Bedfordshire', 'New Bedfordshire', 79455); INSERT INTO Address VALUES (8, 'Amsterdam', NULL, 84023);
SELECT * FROM Address; SELECT * FROM Person;
UPDATE Person SET First_name = 'John', Last_name = 'Doe' WHERE First_name like 'John'; SELECT * FROM Person; UPDATE Person SET First_name = 'John', Last_name = 'Doe' WHERE First_name like 'Doe'; SELECT * FROM Person; SELECT * FROM Address;
DROP TABLE IF EXISTS Address;
#
 
SELECT * FROM Address JOIN (
	SELECT * FROM Person
	JOIN Employees AS Employess ON Address.CITY=Employess.CITY
) AS Employess ON Address.CITY=Employess.CITY;
/* Join the data on the "CITY" column
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS Person;
DROP TABLE IF EXISTS Employee;
DROP DATABASE IF EXISTS `mydatabase`;
#
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS Person;
DROP TABLE IF EXISTS Employee;
DROP DATABASE IF EXISTS `mydatabase`;
#
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

INSERT INTO Person (name) VALUES ("Tony");
INSERT INTO Person (name) VALUES ("Morpheus");
INSERT INTO Person (name) VALUES ("Donald");
INSERT INTO Person (name) VALUES ("Trillian");

INSERT INTO Employee (name, salary) VALUES ("<NAME>", 215000.00), ("<NAME>", 150.00), ("<NAME>", -2000000.00), ("<NAME>", -4000000.00 ), ("<NAME>", 3300000.00), ("<NAME>", 75000000.00);

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
create table Employee( firstname varchar(50), lastname varchar(50), address varchar(100) );
create table Person( firstname varchar(50), lastname varchar(50), address varchar(100), employeeId int );
insert into Employee values ("Jose","Batista","Calle 4829");
insert into Employee values ("Pedro","Garcia","Calle 4830");
insert into Employee values ("Nicolás","Pujol","Calle 4831");
insert into Person values ("Jose","Batista","Calle 4832",2);
insert into Person values ("Pedro","Garcia","Calle 4833",3);
insert into Person values ("Nicolás","Pujol","Calle 4834", NULL);
 
create table Person2( firstname varchar(50), lastname varchar(50), address varchar(100), employeeId int );
insert into Person2 values ("Jose","Batista","Calle 4835",2);
insert into Person2 values ("Pedro","Garcia","Calle 4836",3);
insert into Person2 values ("Nicolás","Pujol","Calle 4837", NULL);
 
#
-- Your first project is the creation of a program
DROP TABLE IF EXISTS Person;
DROP TABLE IF EXISTS Employee;
DROP TABLE IF EXISTS Person2;
DROP DATABASE IF EXISTS myprogram
create database IF NOT EXISTS myprogram; use myprogram;
create table Person( firstname varchar(50), lastname varchar(50), address varchar(100) );
create table Employee( firstname varchar(50), lastname varchar(50), address varchar(100) );
insert into Employee values ("Jose","Batista","Calle 4835");
insert into Employee values ("Pedro","Garcia","Calle 4836");
insert into Employee values ("Nicolás","Pujol","Calle 4837");
create table Person2( firstname varchar(50), lastname varchar(50), address varchar(100), employeeId int );
insert into Person2 values ("Jose","Batista","Calle 4835",4);
insert into Person2 values ("Pedro","Garcia","Calle 4836",2);
insert into Person2
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS Person(
  `id`      int(11) NOT NULL AUTO_INCREMENT,
  `FirstName`   varchar(35) DEFAULT NULL,
  `LastName`    varchar(35) DEFAULT NULL,
  `Phone`          smallint(6) DEFAULT 0,
  `DateOfBirth`         varchar(20) DEFAULT "00/00/0000",
  PRIMARY KEY (`id`)
);
CREATE TABLE IF NOT EXISTS Employee (
  `id`      int(11) NOT NULL AUTO_INCREMENT,
  `Name` varchar(100) DEFAULT NULL,
  `Salary`          decimal(18,2) DEFAULT 2000.00,
  `Phone` varchar(10) CHARACTER SET 'utf8 COLLATE 'utf8_unicode_ci' DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `email` (`email`)
);
INSERT INTO Person VALUES (1, "Bobby",   "Smith",    43445,         "00/00/0000");
INSERT INTO Person VALUES (2, "Eva",      "Johnson",    45654,             "00/00/0123");
INSERT INTO Person VALUES (3, "Jessica",  "Bacon",     43444,       "00/00/0001");
INSERT INTO Person VALUES (4, "Jerry",    "Sparrow", 43445,       "00/00/0002");
INSERT INTO Person VALUES (5, "Bobby",    "Williams", 43445,              "2000/03/31");
INSERT INTO Person VALUES (6, "Eva",         "Pugh",  45654,           "00/00/0005");
INSERT INTO Employee VALUES (11, "Sam", 3000.00,     "43431234567"),
    (12, "Sarah", 2000.00, null),
    (13, "Mike", 1600.00, "76547654567");
#
-- Please show the contents of database
SELECT * FROM sampleDB.Person;
SELECT * FROM sampleDB.Employee;
#
# Please run the following SQL query. You should see employee records for all of your employees' salaries.
#
# UPDATE Employee SET Salary = Salary * 4 / 3;
#


[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

DROP TABLE IF EXISTS Person;
#
# The only change would be the creation of the new table.
CREATE TABLE Person(
    id INTEGER PRIMARY KEY,
    first_name VARCHAR(256),
    last_name VARCHAR(256),
    other_data FLOAT,
    some_stuff TEXT
);

DROP TABLE IF EXISTS Employee;
#
# We can modify the table, but will need a new INSERT /UPDATE statement.
TRUNCATE Person;
INSERT INTO Person VALUES(1, 'John', 'Doe', 23.4432, 'Hello');
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS Person;
#
# The only change would be the creation of the new table.
CREATE TABLE Person(
    id INTEGER PRIMARY KEY,
    first_name VARCHAR(256),
    last_name VARCHAR(256),
    other_data FLOAT,
    some_stuff TEXT
);
DROP TABLE IF EXISTS Employee;
#
# We can modify the table, but will need a new INSERT /UPDATE statement.
TRUNCATE Person;
INSERT INTO Person VALUES(1, 'John', 'Doe', 23.4432, 'Hello');
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
#
# A normal MySQL user lacks all necessary privileges to the database server, and it can create a security hole.
# You can find the credentials for the database "sampleDB" using one of the following instructions.
CONNECT 'localhost'@'%';
USE sampleDB; SHOW GRANTS FOR 'root'@'%';
SHOW GRANT FOR'sampleDB'@'%';
DELIMITER
#
# If you can see that you can create a database, you can also add user privileges to a new database with SQL statements. Here we create a new database and set some privileges.
DELIMITER
CREATE DATABASE IF NOT EXISTS 'MyDB' DEFAULT CHARACTER SET ascii;
DELIMITER
--
-- Create a new superuser in the database 'MyDB'.
USE MyDB;
#
# Now that we have "SuperAdmin" as a SQL authentication user, we can create a table so we can use that superuser to execute all the statements for this database.
#
USE MyDB
DROP DATABASE IF EXISTS MyDB;

USE MyDB;
#
# We must create a user named 'SuperUser' so that a user can access this database.
CREATE USER'superUser' IDENTIFIED BY 'Admin123';

#
# Now execute all the CREATE statement below so that users can use this database.
# User permissions can be granted upon creating a database.
#
# As we are using the "SuperUser" as a command line user here, we can create a new database so that we do not need to worry about the port number.

#
# We will need to login to the MySQL console to perform all these CREATE statements.
#
CONNECT'superUser'@'%';
--
CREATE DATABASE MyDB DEFAULT CHARSET=unicode;

#
# Connect to the MySQL database server on port 3306 using a command line client.
#
# At this point the MySQL server should say "Welcome to MySQL". Now add and execute all the statements we created earlier.
#
DROP USER'superUser';
DROP DATABASE IF EXISTS MyDB;
#
# It is best practice to drop your database before proceeding. In order to do so, make a copy of the sampleDB database, and
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DELETE FROM Person WHERE id=5;
TRUNCATE Person;
INSERT INTO Person VALUES(2, 'Alice', 'Doe', 24, 'Hello');

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
TRUNCATE Person;
INSERT INTO Person VALUES(1, 'Taylor', 'Blake', 5000.222, 'Hi there');
#
# The mutated program is now valid, at least as long as only one table remains.
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS Employee;
# CREATE TABLE Employee (id INTEGER PRIMARY KEY, employer VARCHAR(256), position VARCHAR(256), salary FLOAT);
CREATE TABLE Employee (
    id INTEGER PRIMARY KEY,
    employer VARCHAR(256),
    position VARCHAR(256),
    salary FLOAT,
    bonus FLOAT
);
--
# Let's now create some new rows in the Employee table.
INSERT INTO Employee VALUES(1,'IBM', 'Manager', 12345, 0);
INSERT INTO Employee VALUES(2, 'Black Duck', 'Developer', 98765, 5000);
INSERT INTO Employee VALUES(3, 'HP', 'Team Lead', 12345, 10000);
INSERT INTO Employee VALUES(4, 'Tata Global Services', 'Developer', 54321, 7500);
INSERT INTO Employee VALUES(5, 'Oracle', 'Developer', 34567, 60000);
INSERT INTO Employee VALUES(6, 'Oracle', 'Java Developer', 98765, 3.999);
INSERT INTO Employee VALUES(7, 'Black Duck', 'Designer', 32145, 0);
INSERT INTO Employee VALUES(8, 'Big Ben', 'Tester', 4567, 0);
INSERT INTO Employee VALUES(9, 'Tata Global Services', 'Tester', 8765, 0);
DROP TABLE IF EXISTS Employee_detail;
#
# Let's now use a JOIN! Let's say we want to obtain information about all employees, including their company, position and salary. We will need a JOIN clause.
SELECT emp.id, emp.first_name, emp.last_name, e.employer, emp.position, emp.salary, emp.bonus FROM Employee as emp INNER JOIN Employee_detail AS e ON emp.id = e.employee_id;
#
# Let us write some new queries.
SELECT emp.id, emp.first_name, emp.last_name, e.employer, e.position, emp.salary, emp.bonus FROM Employee AS
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

#
# If you do not need/want to drop it, you can do so too. But do not.
 
#
#  
DROP TABLE IF EXISTS Person;
CREATE TABLE Person(
    id INTEGER PRIMARY KEY,
    first_name VARCHAR(256),
    last_name VARCHAR(256)
)
#
#  
DROP TABLE IF EXISTS Person;
CREATE TABLE Person(
    id INTEGER PRIMARY KEY,
    first_name VARCHAR(256),
    last_name VARCHAR(256)
);
SELECT * FROM Person;
#
#
#
#


[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
TRUNCATE Person;
INSERT INTO Person VALUES(1, 'Taylor', 'Blake', 5000.222, 'Hi there');
#
# The mutated program is now valid, at least as long as only one table remains.
DROP DATABASE sampleDB;
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS Person VALUES(Id INT, FirstName VARCHAR(45), LastName VARCHAR(45), Salary DECIMAL(15,2), Phone VARCHAR(45));
INSERT INTO Person VALUES(1, 'Taylor', 'Blake', 5000.222, 'Hi there');
DROP TABLE Person;
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
 
INSERT INTO Person VALUES(1, 'Drew', 'Woodbury', 5000.000, 'Hi there');
DROP DATABASE sampleDB;
--
-- In this query, the first statement has `ON_FAILURE = 1`. It means
-- that `insert.sql` stops and returns control to `mysql`. Then it runs
-- `insert.sql`, which executes each LOAD DATA statement to load the data for
-- the table with the same name. We see the row in the newly added table!
--
#
# Now, for that to work properly, we need to modify the script `insert.sql`:
--
# 1. Run `SHOW VARIABLES LIKE 'value'`;
# 2. Set `ON_FAILURE = 1` in SHOW VARIABLES.
# 3. Modify SHOW VARIABLES to look like this: 
# ON_FAILURE=0; LOAD DATA INFILE 'load.sql';
#
# Save it to load.sql
#
# 4. Execute: `LOAD DATA INFILE 'load.sql'`
#
# This is how the loaded data should look like:
#
# 1. To get the column names, run `SHOW COLUMNS FROM Table`.
# 2. To get the column values, run `SELECT * FROM Table`.
# 3. Execute `drop table if exists Person; 
# create table Person (A int, B text, C double, D text)`
# 4. Finally, execute `load data local infile'sample.tbl'`.

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
#


[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SELECT * FROM person;
#
-- Finally, to drop all tables you created, simply delete the respective query.
DROP TABLE Person;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

DROP TABLE Person;
-- Please create a semantically equivalent query to the previous one
DROP TABLE Person;
CREAte TABLE Person (id INT NOT NULL auto_increment PRIMARY KEY, fname VARCHAR(50), lname VARCHAR(50), salary FLOAT, comment TEXT);
-- Please create a semantically equivalent SQL statement to the previous one
SELECT fname, lname, salary, comment FROM Person;
#
# You have been tasked with generating and querying an entire database table using multiple different query formats, using multiple different dialects.
-- Please go through queries listed below and answer all questions accordingly. You can get help with the following as well:
-- 1. https: 
-- 2. https: 
-- For more queries and queries you can check out on your own.
DROP KEYSPACE IF EXISTS mysql;
DROP KEYSPACE IF EXISTS sampleDB;
CREATE KEYSPACE IF NOT EXISTS mysql WITH REPLICATION ={
    'class':'SimpleStrategy','replication_factor':1 };
CREATE TABLE IF NOT EXISTS sampleDB.sampleTable (id INT NOT NULL PRIMARY KEY, fname VARCHAR(50), lname VARCHAR(50), salary FLOAT, date_inserted TIMESTAMP DEFAULT CURRENT_TIMESTAMP);
-- Please create a semantically equivalent query with MySQL in-memory engine to the previous one
SELECT id, fname, lname, salary, date_inserted FROM sampleDB.sampleTable;
INSERT INTO `testDB`.`sampleTable` (`id`, `fname`, `lname`, `salary`, `date_inserted`) VALUES ('1', 'Taylor', 'Blake', 5000.222, '2017-01-26 01:01:17');
SELECT * FROM mysql.testDB.sampleTable;
--
-- Please create a semantically equivalent query with MySQL in-memory engine to the previous one
-- Please go through queries listed below and answer all questions accordingly. You can get help with the following as well:
-- 1. https: 
-- 2. https: 
SELECT c.id, c.fname, c.lname, c.salary, c.date_inserted FROM mysql.testDB.sampleTable c WHERE (c
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
#
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS sample("age" int);
INSERT INTO sample(age) VALUES(30), (40), (50), (60), (70), (80);
#
# Please insert new data to table sample.
INSERT INTO sample(age) VALUES(90);
UPDATE sample SET age = 110;
DELETE FROM sample WHERE age = 90;
SELECT age, (SELECT age FROM sample) AS average FROM sample;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

CREATE TABLE `user` (
    id SERIAL PRIMARY KEY,
    username VARCHAR(50),
    password VARCHAR(100)
)ENGINE=InnoDB;



[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS mytable (
    id            INT(6)  NOT NULL AUTO_INCREMENT,
    name          VARCHAR(50)                DEFAULT NULL,
    PRIMARY KEY(id)
);
 
INSERT INTO mytable (name) VALUES ('Name');
 
ALTER TABLE mytable CHANGE name mystr Mystr, ADD CONSTRAINT a
FOREIGN KEY (name) REFERENCES mytable (name);

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
# Insert data into the database
CREATE TABLE `employees` (
    `employeeId` INT NOT NULL AUTO_INCREMENT,
    `employeeFName` VARCHAR(50),
    `employeeLName` VARCHAR(50),
    `employeeNip` INT(11) DEFAULT NULL,
    `employeeGender` CHARACTER(1) DEFAULT NULL,
    `salGratuity` FLOAT DEFAULT NULL,
    `salary` FLOAT DEFAULT NULL,
    `departName` VARCHAR(50) DEFAULT NULL,
    `status` TINYINT(1) DEFAULT NULL,
    PRIMARY KEY (`employeeId`)
    );
#
# Drop all tables
DROP TABLE employees;
DROP DATABASE IF EXISTS sampleDB;
USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
UPDATE employees2 SET deptno = 3 WHERE empno = '002';
#
#

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE `user` (
    id SERIAL PRIMARY KEY,
    username VARCHAR(50),
    password VARCHAR(100)
)ENGINE=InnoDB;
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE `user` (
    id SERIAL PRIMARY KEY,
    username VARCHAR(50),
    password VARCHAR(100)
)ENGINE=InnoDB;
<commit_msg>added the MySQL Server version<commit_after>---
layout: post
title: "Intro to MySQL"
description: "A walk through of the basics of MySQL, and how to create and explore a few tables that are needed to start using it over time, and to keep you interested"
category: articles
tags: [mysql, database, sql, beginner]
---
{% include JB/setup %}

I created a quick guide to get you started with the programming basics and then built a number of tables that could be used to explore and experiment with a number of different features of SQL in MySQL. The guide aims to get you to the point where you can start using MySQL at ease, rather than having to know the whole thing just because you're introduced to it. By the end of this guide, you'll have the basics you need to get started and be ready to explore and test other SQL statements.

A quick history: in 1992, <NAME>, CTO of [DataDrivenDB](http: 

The MySQL project began with a C++ version of an ANSI-C RDBMS called Berkeley DB that was written for the Macintosh, and a small PHP/MySQL version that was written in PHP for use in Windows applications and websites. He soon learned about the MariaDB database fork in 2002 developed by MySQL AB as well as developed by Oracle in 2003. To be fair to him, not all the companies were happy with the MySQL project, he thought (see the picture below), but he knew that it was going to be very successful in his future.

![MySQL](http: 

This lead to the MySQL Community Server project that was created by <NAME>, a programmer who was very passionate about SQL
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE `user` (
    id SERIAL PRIMARY KEY,
    username VARCHAR(50),
    password VARCHAR(100)
)ENGINE=InnoDB;

ALTER TABLE user AUTO_INCREMENT = 11;
ALTER TABLE user AUTO_INCREMENT = 32;
ALTER TABLE user AUTO_INCREMENT = 89;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE `user`;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE `user2` (
    id SERIAL PRIMARY KEY,
    username VARCHAR(50),
    password VARCHAR(100)
)ENGINE=InnoDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE mytable(
   a INT PRIMARY KEY AUTO_INCREMENT,
    b VARCHAR(30),
    c INT,
    d TEXT,
    e DATE
)ENGINE=InnoDB;
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE mytable(
   a INT PRIMARY KEY AUTO_INCREMENT,
    b VARCHAR(30),
    c INT,
    d TEXT,
    e DATE
)ENGINE=InnoDB;
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE mytable(
   a INT PRIMARY KEY AUTO_INCREMENT,
    b VARCHAR(30),
    c INT,
    d TEXT,
    e DATE
);

-- Please create a way to create a new database, add users to the database and alter the database structure (tables, columns, constraints, indexes)
USE sampleDB;
CREATE DATABASE testDB; USE testDB;
DELIMITER
CREATE USER 'admin'@'%'
IDENTIFIED BY 'admin';
GRANT ALL PRIVILEGES ON testDB.* TO '<EMAIL>'@'%';
FLUSH PRIVILEGES;
DELIMITER ;
show variables like 'password%';
show variables like 'user%.password%';
show databases;
*/

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE `mytable`(
   `a` INT AUTO_INCREMENT PRIMARY KEY NOT NULL,
    `b` VARCHAR(30),
    `c` INT,
    `d` TEXT,
    `e` DATE,
    KEY(`e`)
);

 
USE sampleDB; DROPTABLE mytable;
DROP TABLE`mytable`;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS mytable(
   a INT PRIMARY KEY AUTO_INCREMENT,
    b VARCHAR(30),
    c INT,
    d TEXT,
    e DATE
)ENGINE=InnoDB;

mysql> INSERT INTO mytable VALUES(NULL, 'Hi', 123,'sdf', '2020-10-12');
Query OK, 1 row affected (0.01 sec)
Records: 1  Duplicates: 0  Warnings: 0

mysql> UPDATE mytable SET b='lo' WHERE d='sdf';
Query OK, 1 row affected (0.05 sec)
Records: 1  Duplicates: 0  Warnings: 0

mysql> DELETE FROM mytable WHERE b='Hi';
Query OK, 21 rows affected (0.00 sec)
Records: 21  Duplicates: 0  Warnings: 0

mysql> SHOW TABLES;
+---------------+
| Tables_in_sampleDB |
+-----------------+
| mytable         |
| schema_migrations |
| sys.metadata    |
+-----------------+
3 rows in set (0.00 sec)

mysql> SHOW tables WHERE table_name = 'tables_in_sampleDB';
+---------------------+
| Tables_in_sampleDB |
+---------------------+
| mytable             |
| schema_migrations   |
+---------------------+
2 rows in set (0.00 sec)


```


[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE mytable(
   a INT PRIMARY KEY AUTO_INCREMENT,
    b VARCHAR(30),
    c INT,
    d TEXT,
    e DATE
)ENGINE=MyISAM;

-- Please create a program to do the following:
-- 1.	Create a database sampleDB in MyISAM mode using the SQL keyword ENGINE=MyISAM
-- 2.	Create a new table mytable in the database sampleDB as above.


[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE mytable(
   a INT PRIMARY KEY AUTO_INCREMENT,
    b TEXT UNIQUE KEY,
    c INT,
    d TEXT,
    e DATETIME
)ENGINE=InnoDB;
# To see differences
show tables;
show tables from sampleDB;
SHOW FULL COLUMNS FROM mytable;
# To truncate tables
use sampleDB;
DELETE FROM mytable;
show tables;
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE mytable(
   a INT PRIMARY KEY AUTO_INCREMENT,
    b VARCHAR(30),
    c INT,
    d TEXT,
    e DATE
)ENGINE=InnoDB;
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DO $$
CREATE TABLE mytable(
   a INT PRIMARY KEY AUTO_INCREMENT,
    b VARCHAR(30),
    c INT,
    d TEXT,
    e DATE
)ENGINE=myISAM;
commit;
DO $$;
DROP TABLE IF EXISTS mytable CASCADE;
commit;
 

SELECT * FROM mytable; -- Your answer should be: SELECT * FROM mytable WHERE b = 'My Table Value 1';
commit;
INSERT INTO mytable (a, b, c, d, e) VALUES(1, 'My Table Value 1', 1, '"My Table Value 2"', sysdate());
commit;
 
SELECT * FROM mytable ORDER BY c;
SELECT * FROM mytable WHERE a = 'My Table Value 1';
 
SELECT DISTINCT name FROM mytable ORDER BY c;

 
SELECT * FROM mytable WHERE c=1;
SELECT b, c, d FROM mytable;
SELECT b, count(*) OVER() FROM mytable;
 
USE sampleDB;
SELECT IF(b='a column', c, 0), IF(b='a column', e, 0) FROM mytable LEFT JOIN anothertable ON a=c UNION SELECT b, d FROM mytable LEFT JOIN anothertable ON a=c INNER JOIN anothertable ON a=0;
COMMIT;
INSERT INTO mytable (a, b, d) VALUES(7, 'Some', "Some Values for D");
INSERT INTO mytable (a, b, d) VALUES(7, 'Some', "Some Values 2 for D");
commit;
/* You have a total of three queries
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE mytable (b varchar(40) PRIMARY KEY, c int, d text, e date);
DROP TABLE IF EXISTS mytable;
-- Drop all tables.
DROP  DATABASE IF EXISTS sampleDB;

-- The MySQL Query Engine used to write this tutorial is based on a MySQL grammar parser written by <NAME> which uses a small handful of SQL features.
-- You will learn some basic syntax, and you will learn a lot of SQL with just a few lines of code.

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE mytable(
   id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(20),
    gender VARCHAR(15),
    birthday INT,
    place CHAR(4)
)ENGINE=InnoDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE mytable;
-- drop only database - do not drop tables or data
DROP DATABASE IF EXISTS sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE mytable(
   a int auto_increment primary key,
    b varchar(30),
    c int,
    d text,
    e date
)ENGINE=InnoDB;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE mytable(
   a int auto_increment primary key,
    b varchar(30),
    c int,
    d text,
    e date
)ENGINE=InnoDB;
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE mytable(
   a int auto_increment primary key,
   b varchar(30) not null,
   c int not null,
   d text not null,
   e date not null
)ENGINE=InnoDB;
DROP DATABASE sampleDB;

*/

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE mytable(
   a INT AUTO_INCREMENT PRIMARY KEY, c INT,
    b VARCHAR(30), e DATE
)ENGINE=INNODB;
INSERT  INTO mytable VALUES(1, 20,'xyz', '2016-08-19');
INSERT INTO mytable VALUES(2, 30,'xyz2', '2016-08-22');

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO mytable(b,c,d,e)
VALUES
   ('myval','myval',null,null),
   ('myval',5,'mydat',null);
INSERT INTO mytable(b,c) VALUES ('b','c');INSERT INTO mytable(b,c) VALUES ('b', 'e');
SELECT e FROM mytable;
DROP TABLE mytable;
DROP DATABASE IF EXISTS sampleDB;
 
 
CREATE DATABASE sampleDB DEFAULT CHARACTER SET utf8; USE sampleDB;
BEGIN
   INSERT INTO mytable(b,c) VALUES ('b','e');
   COMMIT;
END;
 
 
 
 
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE mytable(
   a int auto_increment primary key,
    b varchar(30),
    c int,
    d text
)ENGINE=InnoDB;
CREATE TABLE mytable2(
   a int auto_increment primary key,
    b varchar(30),
    c int,
    d text
)ENGINE=InnoDB; 
INSERT INTO mytable(b,c,d) VALUES('ab','1',NULL);
INSERT INTO mytable(b,c,d) VALUES('bc','2',NULL);
INSERT INTO mytable2(b,c,d) VALUES('ab','1',NULL);
INSERT INTO mytable2(b,c,d) VALUES('cd','2',NULL);
SELECT * FROM mytable3; 
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

CREATE TABLE employee (
	id int auto_increment,
    first_name varchar(30),
    last_name varchar(30),
    salary int,
    PRIMARY KEY (id)
);

 
DELIMITER $$
CREATE PROCEDURE do_Insert(IN emp_id  int, IN emp_name varchar(30), IN emp_salary int)
BEGIN
	INSERT INTO employee(id, first_name, last_name,salary) VALUES (NULL, emp_name, emp_name, emp_salary );
END
$$
DELIMITER ;
 
DELIMITER $$
CREATE PROCEDURE do_delete(IN employee_id int)
BEGIN
	DELETE FROM employee WHERE id = employee_id;
END
$$
DELIMITER ;
 
DELIMITER $$
CREATE PROCEDURE salary_Range (IN from_salary_range int, IN to_salary_range int)
BEGIN
SELECT e.id, e.first_name, e.last_name, e.salary
FROM employee as e
WHERE e.salary BETWEEN from_salary_range AND to_salary_range
ORDER BY e.salary
END
$$
DELIMITER ;

-- You can also find the source code of this task here: https: 

-- To learn more about how to define stored procedures, queries, and procedures, please visit the official SQL tutorial at: https: 

DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE mytable(
   a int auto_increment primary key,
    b varchar(30),
    c int,
    d text,
    e date
)ENGINE=InnoDB;
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE mytable ( a int auto_increment primary key, b varchar(30), c int, d text, e date) ;
DROP TABLE IF EXISTS mytable ;
CREATE TABLE mytable ( a int auto_increment primary key, b varchar(30), c int, d text, e date) ;
CREATE TABLE other_table (c int, d text, e date) ;
INSERT INTO mytable SET b = 'cat'; INSERT INTO other_table (c, d, e) VALUES(1, 'dog', '2016-07-18');
UPDATE mytable SET c=b; UPDATE other_table SET e = d;
DROP TABLE IF EXISTS mytable;
DROP TABLE IF EXISTS other_table;
SELECT c, d FROM mytable, other_table WHERE c > b AND d > c;
SELECT d FROM mytable WHERE c!=1;
CREATE TABLE test(a int, b text)ENGINE=INNODB;
INSERT INTO test (a, b) VALUES(1, 'abc');
DROP TABLE IF EXISTS test;
CREATE TABLE test(a int, b text)ENGINE=INNODB;
INSERT INTO test (a, b) VALUES(1, 'abc');
DROP TABLE IF EXISTS test;
-- Create a table for the purposes of the following demo.
CREATE TABLE demo (a int, b int);
INSERT INTO demo (a, b) VALUES(1, 2);
DROP TABLE IF EXISTS demo;
-- Now, drop the demo table and re-create it.
DROP TABLE IF EXISTS demo;
CREATE TABLE demo (a int, b int);
INSERT INTO demo (a, b) VALUES(1, 2);

DROP TABLE IF EXISTS demo;
CREATE TABLE demo (a int, b int) ;
GRANT ALL PRIVILEGES ON demo TO 'new_user'@localhost;
GRANT ALL PRIVILEGES ON demo to 'database_user'@'%';
GRANT ALL PRIVILEGES ON demo to 'database_user'@'localhost';
-- It can also perform a single SQL statement:
--
-- MySQL [sampleDB]> ALTER TABLE demo ADD COLUMN c char(50);
-- Query OK, 8 rows affected (0.24 sec)
--
INSERT INTO demo (a, b, c) VALUES(10, 20, 'hello');
--
UPDATE demo SET a = c WHERE a = 10;
--
DROP TABLE IF EXISTS demo;
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB; CREATE TABLE demo (a int, b int) ; ALTER TABLE demo ADD COLUMN c char(50
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE mytable(
   a int NOT NULL AUTO_INCREMENT PRIMARY KEY,
    b varchar(30) NOT NULL,
    c int NOT NULL,
    d text,
    e date NOT NULL
)ENGINE=InnoDB;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE mytable(
  id int auto_increment primary key,
  name varchar(50),
  title varchar(50),
  address text,
  telephone text
)ENGINE=InnoDB;
 
USE sampleDB;
SELECT myFunction();
SELECT myVar;
 
USE sampleDB;
DELETE FROM mytable; -- Use a delete statement which uses one of each of the three MySQL commands and what they are used within a delete statement should give familiar result.
 
USE sampleDB;
UPDATE mytable; -- Use an update statement which uses one of each of the three MySQL commands and what they are used within an update statement should give familiar result.
 

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS mytable;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE address(
    id int auto_increment primary key,
    city varchar(30),
    surname varchar(20)
)ENGINE=InnoDB;
INSERT INTO address(city,surname) VALUES ('Dresden','Meier');

-- What is going on here?
SELECT id,city as city_name,CONCAT(surname, " ", firstname) as address
    FROM address
    INNER JOIN mytable USING(a);
--
-- The address table has no entry for the address ID:12; as it does not exist in the database. This is intentional, because there are no rows with the given address ID in the address table:
--
--
CREATE TABLE address(
    id int auto_increment primary key,
    city varchar(30),
    surname varchar(20)
)ENGINE=InnoDB;
INSERT INTO address(city,surname) VALUES ('Dresden','Meier');
-- What next?
-- Please create a program which generates the following diagram:
--
-- _____________________________________________________
-- |  1)     2)       3)                            |
-- |                      |  4)     5)     6)      7)     8)    |
-- |                      |    9) 10) |     11)       12)              |
-- |____________________|_______________________________|___________________|
--    (0,0)           (0,1)         (1,1)                  (1,0)
--
-- 1st row: This row represents the customer with ID 123, which is not yet present in the database (no customer with same ID). ID is used to reference customer records and is incremented each time new customer is added. The customer has the specified city 'Dresden' and surname 'Meier'. The customer name in the database is '<NAME>'!
-- 2nd row: The customer was added via the 2nd row, and has the city 'Dresden', which is also in the database. The surname was automatically added from the employee object of the employee with ID 122. In the database, this is '<NAME>', because the employee name is in the employee table (both with ID 122 and Name '<NAME>').
-- 3rd row: The customer is still present in the database, it has the city 'Dresden', which is still 'Dresden' in the address table, because we were not able to find an entry in the address table for this address record (it had an ID of 12).
-- 4th row: The database automatically adds an address for customer
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS mytable;
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS mytable;
DROP TABLE IF EXISTS mytable2;
CREATE TABLE mytable (
  ID INT(10) UNSIGNED AUTO_INCREMENT PRIMARY KEY,
  field_1 TEXT NULL,
  field_2 TEXT NULL
);
CREATE TABLE IF NOT EXISTS mytable2 (
  ID INT(11) UNSIGNED AUTO_INCREMENT PRIMARY KEY,
  field TEXT NULL
);

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS mytable;
CREATE TABLE mytable (
        myint int
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE mytable (
    id int(10) not null auto_increment,
    num int(10),
    PRIMARY KEY (id)
);
DROP TABLE IF EXISTS mytable;
-- MySQL should allow us to use it...
SHOW DATABASES;
USE sampleDB;
SELECT * from mytable;
SELECT * from mytable LIMIT 10;
SELECT * from mytable LIMIT 0,10;
SELECT * from mytable LIMIT 10,0;
SELECT * from mytable LIMIT 1000,100;
INSERT INTO mytable (num) VALUES (10);
INSERT INTO mytable (num) VALUES (15);
INSERT INTO mytable (num) VALUES (19);
INSERT INTO mytable (num) VALUES (27);

SELECT * from mytable WHERE num>20 OR EXISTS (SELECT * from mytable WHERE num=15);
SELECT * from mytable WHERE num>20 AND EXISTS (SELECT * from mytable WHERE num=10)
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS mytable;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS mytable;

 
INSERT INTO mytable (data) VALUES ("0");
INSERT INTO mytable (data) VALUES ("1");
 ;

 
mysql -u root -p -p sampleDB
mysql> select * from mytable;
+------+---------------------+
| data |                      |
+------+---------------------+
|    0 |                      |
|    1 |                      |
|    2 |                      |
|    3 |                      |
|    4 |                      |
|    5 |                      |
|    6 |                      |
|    7 |                      |
|    8 |                      |
|    9 |                      |
|   10 |                      |
|   11 |                      |
|   12 |                      |
|   13 |                      |
|   14 |                      |
|   15 |                      |
|   16 |                      |
|   17 |                      |
|   18 |                      |
|   19 |                      |
|   20 |                      |
+------+---------------------+
209 rows in set (0.05 sec)

 
drop table if exists mytable;

 
drop table if exists mytable;

 
mysql> select * from mytable;
+------+---------------------+
| data |                      |
+------+---------------------+
|    0 |                      |
|    1 |                      |
|    2 |                      |
|    3 |                      |
|    4 |                      |
|    5 |                      |
|    6 |                      |
|    7 |                      |
|    8 |                      |
|    9 |                      |
|   10 |                     
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS mytable;
CREATE TABLE mytable (
        myint int
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS mytable;
CREATE TABLE IF NOT EXISTS mytable
(
        myint INT NOT NULL,
        CONSTRAINT myint_pk PRIMARY KEY(myint)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
DROP TABLE IF EXISTS mytable;
CREATE TABLE IF NOT EXISTS mytable
(
        myint INT NOT NULL,
        CONSTRAINT myint_pk PRIMARY KEY(myint)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
-- In the following program, please implement the query in the same way as the one written in previous generation.
 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS mytable;
CREATE TABLE mytable (
        myint INT NOT NULL DEFAULT 5466
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
DROP TABLE IF EXISTS mytable;
CREATE TABLE mytable (
        myint INT NOT NULL DEFAULT 5466
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
-- In the following program, please implement the same query in a completely different way.
 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS mytable;
CREATE TABLE mytable (
        myint INT NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
DROP TABLE IF EXISTS mytable;
CREATE TABLE mytable (
        myint INT NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
-- In the following program, please re-implement the above two queries in a different way.
 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS mytable;
CREATE TABLE mytable (
        myint INT NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
DROP TABLE IF EXISTS mytable;
CREATE TABLE IF NOT EXISTS mytable
(
        myint INT NOT NULL,
        CONSTRAINT myint_pk PRIMARY KEY(myint)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
DROP TABLE IF EXISTS mytable;
CREATE TABLE IF NOT EXISTS mytable
(
        myint INT NOT NULL,
        CONSTRAINT myint_pk PRIMARY KEY(myint)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
-- If you were to use MySQL for the previous generation, what problems would you encounter?
 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS mytable;
CREATE TABLE mytable (
        col1 INT DEFAULT NULL,
        col2 varchar(255)
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS people;
CREATE TABLE people ('name' varchar(80), 'height' character(1));
CREATE INDEX people_name ON people ('name');
DROP INDEX IF EXISTS people_height;
CREATE INDEX people_height ON people ('height');
SELECT * FROM people;
DROP TABLE IF EXISTS people;
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS people;
CREATE TABLE people('name' varchar(80), 'height' integer);
CREATE INDEX people_name ON people('name');
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS mytable2;
CREATE TABLE mytable2 (
        x int
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- 3. Add the MySQL database access driver to your php.ini or mysql.cnf file.
[mysql.default]
default-character-set=utf8

[mysqld]
# Set this to a number high enough for each unique database you have to use your connection string for
skip-thread-db

# When MySQL is used as a backend for a database, you should keep this value as '1', if you use mysqlnd.
skip-socket

default-storage-engine=InnoDB

table_open_cache=10240
#table_open_cache = 100
#table_open_cache = 32768

join_buffer=10050368
#join_buffer = 10
#join_buffer = 4096, only in innodb

join_buffer_size=10050368
#join_buffer_size = 1024
#join_buffer_size = 4096, only in innodb

max_clients = 10800
#max_clients = 960
#max_clients = 3145728

query_cache_type   = 0

query_cache = 10000
#query_cache = 100

read_buffer_size = 1073741824
#read_buffer_size = 4096
#read_buffer_size = 40960

write_buffer_size = 10000000000
#write_buffer_size = 2000000
#write_buffer_size = 20000000

# When InnoDB is used as a database, turn off the server caching (it is slow and causes problems).
# You can turn off the caching for SELECT queries when using InnoDB, too, to improve performance of your applications.
read_rnd_buffer_size = 0
sort_buffer_size = 0
#sort_buffer_size = 512
#sort_buffer_size = 1024
read_rnd_request_buffers = 256		# Default number of buffers allocated by the server during a query.
#read_rnd_request_buffers = 256		# Default number of buffers used by
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS mytable;
CREATE TABLE IF NOT EXISTS mytable (
        myint int
) DEFAULT CHARSET=utf8;

-- Make an index for the column that is used for filtering the data
USE sampleDB;
DROP TABLE IF EXISTS mytable;
CREATE TABLE IF NOT EXISTS mytable (
        myint int
) DEFAULT CHARSET=utf8;

 
SET @n = 0;
INSERT INTO mytable (myint) SELECT 5 FROM sysdatabases
UNION ALL
SELECT @n := @n + 1, 5 FROM mytable;
 
SELECT mytable.myint from mytable
WHERE myint BETWEEN 0 AND 4;

 
SELECT mytable.myint from mytable
WHERE myint BETWEEN 2 AND 6;

 
SELECT mytable.myint, name, username from mytable ORDER BY myint DESC;

 
ALTER TABLE IF EXISTS mytable_modify ADD CONSTRAINT mytable_check CHECK (myint BETWEEN 1 AND 5);
  
ALTER TABLE IF EXISTS mytable_modify DROP CONSTRAINT mytable_check;
*/
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

DROP TABLE IF EXISTS mytable;
CREATE TABLE mytable (
        key longtext NOT NULL PRIMARY KEY,
        text text,
        flag byte(1),
        key2 longtext NOT NULL
);
-- Please create a very fast program to do a basic table scan in the last three days. It should fetch all rows using either an INNER or a JOIN syntax. You should use ENGINE=InnoDB
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS mytable;
CREATE TABLE mytable (
        key longtext NOT NULL PRIMARY KEY,
        text text,
        flag byte(1),
        key2 longtext NOT NULL
) ENGINE=InnoDB CHARACTER SET=utf8;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS mytable;
CREATE TABLE mytable (
        myint int
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

CREATE TABLE mytable (
    mytext text NOT NULL UNIQUE
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
 
DROP TABLE IF EXISTS sampleDB.user; DROP TABLE IF EXISTS sampleDB.userlog; DROP TABLE IF EXISTS sampleDB.post; DROP TABLE IF EXISTS sampleDB.postlog;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

DELETE FROM mytable;
INSERT INTO mytable VALUES (23333), (1);
-- Delete a row using MySQL
DELETE FROM mytable WHERE id = 23333;
SELECT * FROM mytable;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS mytable;
CREATE TABLE mytable (
        year20 varchar(10)
, year20b varchar(10)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS mytable;
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS mytable;
CREATE TABLE IF NOT EXISTS mytable (
        myint int
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
DROP TABLE IF EXISTS mytable;
CREATE TABLE IF NOT EXISTS mytable (
        myint int
) ENGINE=MyISAM DEFAULT CHARSET=utf8;
DROP TABLE IF EXISTS mytable;
CREATE TABLE IF NOT EXISTS mytable (
        myint int
) ENGINE=MergeTree DEFAULT KEY(myint) ORDER BY (myint) ENGINE=InnoDB;
DROP TABLE IF EXISTS mytable;
CREATE TABLE IF NOT EXISTS mytable (
        myint int
) ENGINE=MyISAM DEFAULT CHARSET=utf8;

SELECT * FROM mytable;
INSERT INTO mytable VALUES(1234);
SELECT * FROM mytable;

SELECT count(*) FROM mytable;
SELECT count(*) AS total FROM mytable;
SELECT max(myint) AS value FROM mytable;
SELECT min(myint) AS value FROM mytable;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS mytable;
DROP DATABASE sampleDB;
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS mytable;
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE mytable( myid int, title varchar(255));
INSERT INTO mytable(myid, title) VALUES(0,'abc');
INSERT INTO mytable(myid, title) VALUES(1,'def');
INSERT INTO mytable(myid, title) VALUES(2,'ghi');
SELECT * FROM mytable ;
DROP TABLE mytable;
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS mytable;
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS mytable;
DROP DATABASE sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS mytable;
CREATE TABLE mytable ( id INT, name TEXT, price INT, PRIMARY KEY (id));
INSERT INTO mytable VALUES (NULL,'Carmen',12.34);
INSERT INTO mytable VALUES (NULL,'Jimmy',3.3);
INSERT INTO mytable VALUES (NULL,'Bart',2.13);
SELECT id,name,price FROM mytable;
DROP TABLE mytable;
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE mytable( myid int, title varchar(255));
INSERT INTO mytable(myid, title) VALUES(0,'abc');
INSERT INTO mytable(myid, title) VALUES(1,'def');
INSERT INTO mytable(myid, title) VALUES(2,'ghi');
SELECT * FROM mytable ;
DROP TABLE mytable;
DROP DATABASE sampleDB;
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SELECT * FROM mytable AS s;
DROP TABLE s;
DROP DATABASE sampleDB;
 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SELECT myid, title, myid * 10 AS times FROM mytable;
SELECT myid, title, myid * 10 AS times FROM mytable AS s;
DROP TABLE s;
DROP DATABASE sampleDB;
 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE SCHEMA sales;
CREATE TABLE sales.employees(id INT, name VARCHAR(255));
INSERT INTO sales.employees(id, name) VALUES(1, 'John');
INSERT INTO sales.employees(id, name) VALUES(2, 'Mary');
INSERT INTO sales.employees(id, name) VALUES(3, 'Tina');
SELECT * FROM sales.employees;
-- DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE mytable( myid int, title varchar(255));
INSERT INTO mytable(myid, title) VALUES(0,'abc');
INSERT INTO mytable(myid, title) VALUES(1,'def');
INSERT INTO mytable(myid, title) VALUES(2,'ghi');
DELETE c FROM mytable c;
SELECT * FROM mytable ;
DROP TABLE mytable;
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE mytable( myid int, title varchar(255));
INSERT INTO mytable(myid, title) VALUES(0,'abc');
INSERT INTO mytable(myid, title) VALUES(1,'def');
INSERT INTO mytable(myid, title) VALUES(2,'ghi');

CREATE TABLE mytable( myid int primary key, title varchar(255));
INSERT INTO mytable(myid, title) VALUES(0,'abc');
INSERT INTO mytable(myid, title) VALUES(1,'def');
INSERT INTO mytable(myid, title) VALUES(2,'ghi');
DROP TABLE mytable;
DROP DATABASE sampleDB;

<br>
## The query below should execute without an error when I execute it for yourself on the MySQL Workbench.

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SET NAMES utf8;
DROP TABLE IF EXISTS `mytable`;
CREATE TABLE `mytable`(`myid` INT(11) NOT NULL, `title` VARCHAR(255) NOT NULL) ENGINE=InnoDB;
INSERT INTO `mytable` (`myid`, `title`) VALUES
(0, 'abc'),
(1, 'def'),
(2, 'ghi');
SELECT `title` FROM `mytable` ;
DROP TABLE `mytable`;
DROP DATABASE sampleDB;
-- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

If you are looking for a database-as-a-service, then PostgreSQL is for you. It is not necessarily for every scenario that you are. Also, it offers commercial support through third-party providers where applicable. Here you can easily take advantage of the capabilities of open-source software.
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SELECT * FROM mytable ;
DROP TABLE mytable;
DROP DATABASE sampleDB;
-- Please create another semantically equivalent program to the second generation
SELECT * FROM mytable;
-- Please use a database which has appropriate permissions to execute this query (e.g. as a read/write DBA or database Administrator).
-- Please create and query a database that does not have the same permissions.
-- Do the following in the appropriate database:
USE sampleDB;
CREATE TABLE users ( userid int, username varchar(255), password varchar(255));
use sampleDB;
create table user_permissions(
user_id int not null,
db_id int not null,
role_id int not null
);
insert into user_permissions (user_id, db_id, role_id) values (1,0,1);

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE mytable( myid int, title varchar(255));
INSERT INTO mytable(myid, title) VALUES(0,'abc');
INSERT INTO mytable(myid, title) VALUES(1,'def');
INSERT INTO mytable(myid, title) VALUES(2,'ghi');
SELECT * FROM mytable ;
DROP TABLE mytable;
DROP DATABASE sampleDB;
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE mytable( myid int, title varchar(255));
INSERT INTO mytable(myid, title) VALUES(1,'abc');
INSERT INTO mytable(myid, title) VALUES(2,'def');
INSERT INTO mytable(myid, title) VALUES(3,'ghi');
SELECT * FROM mytable ;
DROP TABLE mytable;
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS category( catid int, catname varchar(255), PRIMARY KEY(catid) );
CREATE TABLE IF NOT EXISTS item( itemid int, catid int, desc varchar(80), PRIMARY KEY(itemid), CONSTRAINT fk_item_category FOREIGN KEY(catid) REFERENCES category(catid) );

SELECT * FROM category;
SELECT * FROM item;
INSERT INTO item(itemid, desc, catid) VALUES(1,'first item',1);
INSERT INTO item(itemid, desc, catid) VALUES(2,'second item',2);
INSERT INTO item(itemid, desc, catid) VALUES(3,'third item',1);
SELECT * FROM item where itemid=1;
SELECT * FROM category WHERE catid=1;
DROP TABLE IF EXISTS item;
DROP TABLE IF EXISTS category;
DROP DATABASE IF EXISTS sampleDB;
# To be considered a hard core, you should have a hard time to understand every topic mentioned in the course. You are expected to fully understand the database and the table in detail and be able to understand the query in that way. Do not worry if you miss the details. You are free/liberal in what you can write and use SQL.

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE mytable( myid INT PRIMARY KEY, title VARCHAR(255));
INSERT INTO mytable(myid, title) VALUES(0,'abc');
INSERT INTO mytable(myid, title) VALUES(1,'def');
INSERT INTO mytable(myid, title) VALUES(1,'ghi');
SELECT * FROM mytable ;
DROP TABLE mytable;
DROP DATABASE sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE mytable( myid int, title varchar(255) )ENGINE=InnoDB ;
INSERT INTO mytable( myid, title) VALUES(0, 'abc');
INSERT INTO mytable( myid, title) VALUES(1, 'def');
INSERT INTO mytable( myid, title) VALUES(2, 'ghi');
SELECT * FROM mytable ;
-- Please explain how your program compares with what you wrote in RPGM12.
 
SHOW MASTER STATUS;
SHOW DATABASES;
SHOW TABLES IN astronomers;
SELECT * FROM astronomers WHERE SAT_SCORE > 100 ;
-- You need to create the new table if needed or refer to the old table. You can see what columns are included in this table by examining its columns.
CREATE TABLE Astronomers(
    AstronomyID int(11) NOT NULL AUTO_INCREMENT,
    FirstName varchar(50),
    LastName varchar(50),
    SAT_Score int(11),
    SAT_Name varchar(50),
    SALT_Name varchar(50),
    AstronomyRank int(64),
    AstronomyYear int(11),
    PRIMARY KEY(AstronomyID)
);
INSERT INTO Astronomers(FirstName,LastName,SAT_Score,SAT_Name,SALT_Name,AstronomyRank,AstronomyYear) VALUES('Brian','Harris',6,'G', 'J','2006','2006');
INSERT INTO Astronomers(FirstName,LastName,SAT_Score,SAT_Name,SALT_Name,AstronomyRank,AstronomyYear) VALUES('Jayce','Hawley',5,'G', 'J','2006','2006');
INSERT INTO Astronomers(FirstName,LastName,SAT_Score,SAT_Name,SALT_Name,AstronomyRank,AstronomyYear) VALUES('Charles','Shapira',9,'G', 'J','200
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE mytable( myid int, title varchar(255));
INSERT INTO mytable(myid, title) VALUES(1,'abc');
INSERT INTO mytable(myid, title) VALUES(2,'def');
INSERT INTO mytable(myid, title) VALUES(3,'ghi');
SELECT myid, title FROM mytable WHERE myid < 3 ;
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE mytable( myid int, title varchar(255));
INSERT INTO mytable(myid, title) VALUES(1,'abc');
INSERT INTO mytable(myid, title) VALUES(2,'def');
INSERT INTO mytable(myid, title) VALUES(3,'ghi');
SELECT * FROM mytable ;
DROP TABLE mytable;
DROP DATABASE sampleDB;
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE mytable( myid int, title varchar(255));
INSERT INTO mytable(myid, title) VALUES(1,'abc');
INSERT INTO mytable(myid, title) VALUES(NULL,'abc');
INSERT INTO mytable(myid, title) VALUES(2,'def');
INSERT INTO mytable(myid, title) VALUES(NULL,'def');
SELECT * FROM mytable ;
DROP TABLE mytable;
DROP DATABASE sampleDB;

mysql> CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
ERROR 1063 (23000): Duplicate entry 'abc' for key 'PRIMARY'
mysql> ALTER TABLE mytable DROP PRIMARY KEY;
Query OK, 1 row affected, 0.00 sec
Records: 1  Duplicates: 0  Warnings: 0
mysql> INSERT INTO mytable(myid, title) VALUES(1,'abc');
Query OK, 1 row affected, 0.00 sec
Records: 1  Duplicates: 0  Remaining rows: 1 After delete: 0
mysql> INSERT INTO mytable(myid, title) VALUES(3,'ghi');
Query OK, 1 row affected, 0.00 sec
Records: 1  Duplicates: 0  Remaining rows: 1 After delete: 0
mysql> INSERT INTO mytable(myid, title) VALUES(2,'def');
Query OK, 1 row affected, 0.01 sec
Records: 2  Duplicates: 0  Remaining rows: 1 After delete: 0
mysql> SELECT * FROM mytable ORDER BY myid ASC;
+---------+-----------+
| myid   | title    |
+---------+-----------+
| NULL   | abc      |
| 1      | def      |
| 2      | ghi      |
+---------+-----------+
3 rows in set (0.01 sec)
mysql> DROP TABLE mytable;
Query OK, 0 rows affected (1.18 sec)
Records: 2  Duplicates: 0  Remaining rows: 1
mysql> DROP DATABASE sampleDB;
 Query OK, 1 row affected (0.00 sec)
Records: 1
mysql>

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE mytable( myid int, title varchar(255));
INSERT INTO mytable(myid, title)
    SELECT 
        (CASE WHEN myid =1
            THEN 100
            ELSE myid
            END), 
        (CASE WHEN myid =1
            THEN 'abc'
            ELSE 'xyz'
            END) 
        FROM mytable LIMIT 1;
INSERT INTO mytable(myid, title) VALUES(5,'abc');
INSERT INTO mytable(myid, title) VALUES(4,'def ghi');
INSERT INTO mytable(myid, title) VALUES(3,'lmn');
SELECT * FROM mytable ;
DROP TABLE mytable;
DROP DATABASE sampleDB;
-- End
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE mytable( myid INT, title text);
INSERT INTO mytable(myid, title) VALUES (1,'abc');
INSERT INTO mytable(myid, title) VALUES (2,'def');
INSERT INTO mytable(myid, title) VALUES (3,'ghi');
SELECT * FROM mytable ;
DROP TABLE mytable;
DROP DATABASE sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE mytable( myid INT, title VARCHAR(255));
INSERT INTO mytable (myid,title) VALUES(1,'abc');
INSERT INTO mytable (myid,title) VALUES(2,'def');
INSERT INTO mytable (myid,title) VALUES(3,'ghi');
SELECT * FROM mytable ;
DROP TABLE mytable;
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE mytable( myid int, title text, text text );
INSERT INTO mytable(myid, title, text) VALUES(1,'abc', 'def');
INSERT INTO mytable(myid, title, text) VALUES(2,'def', 'ghi');
INSERT INTO mytable(myid, title, text) VALUES(3,'ghi', 'jkl');
SELECT * FROM mytable ;
DROP TABLE mytable;
DROP DATABASE sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE mytable( myid int, title varchar(255));
INSERT INTO mytable(myid, title) VALUES(1,'abc');
INSERT INTO mytable(myid, title) VALUES(2,'def');
INSERT INTO mytable(myid, title) VALUES(3,'ghi');
SELECT * FROM mytable ;
DROP TABLE mytable;
DROP DATABASE sampleDB;
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

CREATE TABLE mytable( myid int, title varchar(255));
INSERT INTO mytable(myid, title) VALUES(1,'abc');
INSERT INTO mytable(myid, title) VALUES(2,'def');
INSERT INTO mytable(myid, title) VALUES(3,'ghi');
SELECT * FROM mytable ;
DROP TABLE mytable;
DROP DATABASE sampleDB;
 
```
---

# SQL 语法
## 表结构
**建表**
```sql
 CREATE TABLE tablename
(
  column1
  primary key,
  column2 varchar(255),
  column3 BLOB
)
ENGINE=InnoDB DEFAULT CHARSET=utf8;
```

## 查询数据
```sql
SELECT column1, column2, column3 FROM tablename where column1=4;
SELECT `column1`,`column2`,`column3` FROM `tablename` ;
```


## 分区

**新建表空间**
```sql
 CREATE TABLESPACE tablespace_id
ENGINE=InnoDB  DEFAULT CHARSET=utf8  COMPRESSION=LZ4;
```
将表写入表空间中
```sql
 INSERT INTO TABLESPACE tablespace_id
ENGINE=InnoDB  DEFAULT CHARSET=utf8  COMPRESSION=LZ4
 VALUES ();
```

使用表空间进行数据存储
```sql
 INSERT INTO TABLESPACE tablespace_id ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='data'
 VALUES ();
```

查找表空间
```
 SHOW TABLESPACES;
SHOW CREATE TABLESPACE tablespace_id;
SHOW KEY FROM mytable;
SHOW STATUS LIKE "data";
SHOW INDEX FROM mytable;
```
**删除表空间**
```sql
DROP TABLESPACE tablespace_id ;
```

# 索引
索引有以下三种类型
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE mytable( myid int, title varchar(255) UNIQUE, PRIMARY KEY(myid));
INSERT INTO mytable( myid, title) VALUES(1,'abc');
INSERT INTO mytable( myid, title) VALUES(1, 'abc1');
INSERT INTO mytable( myid, title) VALUES(1, 'abc');
 
DROP TABLE mytable;
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE mytable( myid int, title varchar(255));
INSERT INTO mytable(myid, title) VALUES(1,'abc');
INSERT INTO mytable(myid, title) VALUES(2,'def');
INSERT INTO mytable(myid, title) VALUES(3,'ghi');
SELECT myid AS ID, title FROM mytable ORDER BY ID ASC;
DROP TABLE mytable;
DROP DATABASE sampleDB;
GRANT ALL PRIVILEGES ON `sampledb`.* TO 'demoUser'@'localhost' IDENTIFIED BY 'demoPassword' WITH GRANT OPTION;
FLUSH PRIVILEGES;
show grants for 'demoUser'@'localhost';
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE mytable (id int, title varchar(255));
INSERT INTO mytable (id, title) VALUES (1, "abc");
INSERT INTO mytable (id, title) VALUES (2, "def");
INSERT INTO mytable (id, title) VALUES (3, "ghi");
SELECT * FROM mytable ;
DROP TABLE mytable;
DROP DATABASE sampleDB;


[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE mytable ( myid INT,title  CHAR(255)  );
INSERT INTO mytable (id, title) VALUES (1, 'abc');
INSERT INTO mytable (id, title) VALUES (2, 'def');
INSERT INTO mytable (id, title) VALUES (3, 'ghi');
SELECT * FROM mytable WHERE title='def';
DROP TABLE mytable;
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE mytable( myid int, title varchar(255));
INSERT INTO mytable(myid, title) VALUES(1,'abc');
INSERT INTO mytable(myid, title) VALUES(2,'def');
INSERT INTO mytable(myid, title) VALUES(3,'ghi');
SELECT * FROM mytable ;
DROP TABLE mytable;
DROP DATABASE sampleDB;
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS my_table( myid int, title varchar(255));
INSERT INTO mytable(myid, title) VALUES(1,'abc');
INSERT INTO mytable(myid, title) VALUES(2,'def');
INSERT INTO mytable(myid, title) VALUES(3,'ghi');
select title from mytable;
DROP TABLE mytable;
DROP DATABASE sampleDB;
-- Please use a very short query to check what happens when we comment out engine='myISAM'. Check what happens when you change the first SELECT statement to engine='INNODB'. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS my_table( myid int, title varchar(255));
INSERT INTO my_table(myid, title) VALUES(1,'abc');
INSERT INTO my_table(myid, title) VALUES(2,'def');
INSERT INTO my_table(myid, title) VALUES(3,'ghi');
 
-- Create an InnoDB database */
DROP DATABASE IF EXISTS sampleDB;
CREATE DATABASE sampleDB
# Add a new column to the "my_table" table */ 
COLLATE = COLLATE utf8_general_ci
ENGINE = InnoDB;
-- Insert values into the "my_table" table. */ 
INSERT INTO myTable(myid,title) 
VALUES (1,'my name is Mariana'),(2,'my name is Carolina'); 
SELECT * FROM myTable; 
# Insert values into the "my_table" table.
INSERT INTO myTable(myid,title)
VALUES ('555','my name is Paul');
SELECT * FROM myTable;
# Uncomment the third INSERT command.
# This would update the data in the title field with data from the "myTable" table by myid values 1,555.
# Check what it looks like */
select title from myTable where myid=555;
DROP TABLE myTable;
DROP DATABASE sampleDB;
DROP DATABASE IF EXISTS sampleDB;
CREATE DATABASE sampleDB ENGINE=MyISAM;
USE smpDB;
#Add a column to the "my_table" table */ 
ALTER TABLE my_table ADD COLUMN myname varchar(50);
#
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE mytable( myid int, title varchar(255));
INSERT INTO mytable(myid, title) VALUES(1,'abc');
INSERT INTO mytable(myid, title) VALUES(2,'def');
SELECT * FROM mytable ORDER BY myid DESC;
-- Please create a very short program that creates and uses a database.
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE mytable( myid int, title varchar(255));
INSERT INTO mytable(myid, title) VALUES(1,'abc');
INSERT INTO mytable(myid, title) VALUES(2,'def');
SELECT * FROM mytable ORDER BY myid DESC;
SELECT * FROM mytable ;
drop table mytable ;
DROP DATABASE sampleDB;

-- Please create a program that performs an INNER JOIN on the sampleDB database with a small result set.
CREATE DATABASE IF NOT EXISTS testDB2;USE testDB2;
CREATE TABLE mytable2( id int, title varchar(255));
INSERT INTO mytable2(id, title) VALUES(1,'abc');
INSERT INTO mytable2(id,title) VALUES(2,'def');
INSERT INTO mytable2(id,title) VALUES(3,'ghi');
INSERT INTO mytable2(id,title) VALUES(3,'jkl');
SELECT * FROM mytable2 INNER JOIN sampleDB ON mytable2.id=sampleDB.mytable.myid;
-- Please create a very short program that performs a multiple JOINs and is written in a single SQL statement.
CREATE DATABASE IF NOT EXISTS testDB; USE testDB;
CREATE TABLE mytable( id int, title varchar(255));
INSERT INTO mytable(id, title) VALUES(1,'abc');
INSERT INTO mytable(id,title) VALUES(2,'def');
INSERT INTO mytable(id,title) VALUES(3,'ghi');
CREATE TABLE mytable2( id int, title varchar(255));
INSERT INTO mytable2(id, title) VALUES(1,'abc');
INSERT INTO mytable2(id,title) VALUES(2,'def');
INSERT INTO mytable2(id,title) VALUES(3,'ghi');
INSERT INTO mytable2(id,title) VALUES(3,'jkl');
SELECT * FROM mytable INNER JOIN mytable2 ON mytable
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE mytable ( myid int, title varchar(255), PRIMARY KEY (myid) );
INSERT INTO mytable (myid, title) VALUES(1, 'foo1');
INSERT INTO mytable (myid, title) VALUES(2, 'foo2');
INSERT INTO mytable (myid, title) VALUES(3, 'foo3');
SELECT * FROM mytable;
DROP TABLE mytable;
DROP DATABASE sampleDB ;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE mytable( myid int, title varchar(255));
INSERT INTO mytable(myid, title) VALUES(1,'abc');
INSERT INTO mytable(myid, title) VALUES(2,'def');
INSERT INTO mytable(myid, title) VALUES(3,'ghi');
SELECT myid, title FROM mytable ;
DROP TABLE mytable;
DROP DATABASE sampleDB;
```

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE mytable( myid INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, title CHAR(255));
INSERT INTO mytable(myid, title) VALUES(1,'abc');
INSERT INTO mytable(myid, title) VALUES(2,'def');
INSERT INTO mytable(myid, title) VALUES(3,'ghi');
SELECT * FROM mytable ;
DROP TABLE mytable;
DROP DATABASE sampleDB;
-- Please create a query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB.
USE sampleDB;
CREATE TABLE t1 (id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, city CHAR(255));
INSERT INTO t1(id, city) VALUES(1, 'Madrid');
INSERT INTO t1(id, city) VALUES(2, 'Barcelona');
INSERT INTO t1(id, city) VALUES(3, 'Toulouse');
DROP TABLE t1;
DROP DATABASE sampleDB;
-- Please create an equivalent to the previous generation, which uses SQL commands and MySQL syntax for creating tables and inserting rows. You can use sampleDB as the database name.
USE sampleDB;
CREATE TABLE t1 (id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, city CHAR(255));
INSERT INTO t1(id, city) VALUES(1, 'Madrid');
INSERT INTO t1(id, city) VALUES(2, 'Barcelona');
INSERT INTO t1(id, city) VALUES(3, 'Toulouse');
DROP TABLE t1;
DROP DATABASE sampleDB;
-- Please perform equivalent to the previous program. Use sampleDB as the database name.
USE sampleDB;
CREATE TABLE t1 (id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, city CHAR(255));
INSERT INTO t1
SELECT name, id, city FROM table(t1);
DROP TABLE t1;
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE mytable( myid int, title varchar(255));
INSERT INTO mytable(myid, title) VALUES(1,'abc');
INSERT INTO mytable(myid, title) VALUES(2,'def');
INSERT INTO mytable(myid, title) VALUES(3,'ghi');
SELECT * FROM mytable ;
DROP TABLE mytable;
DROP DATABASE sampleDB;
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SELECT * FROM mytable;
SELECT myid, title FROM mytable WHERE myid=1;
DELETE FROM mytable;
DROP TABLE mytable;
DROP DATABASE sampleDB;
-- Please create a program for adding new users:
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE users( userid varchar(7), pass varchar(255) );
INSERT INTO users(userid, pass) VALUES('student','abc');

SELECT * FROM users;
DROP TABLE users;
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE mytable( myid int, title varchar(255));
INSERT INTO mytable VALUES(1, 'abc');
INSERT INTO mytable VALUES(2, 'def');
INSERT INTO mytable VALUES(3, 'ghi');
SELECT * FROM mytable ;
DROP TABLE mytable;
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE mytable( id int PRIMARY KEY AUTO_INCREMENT, title varchar(255) UNIQUE);
INSERT INTO mytable(title) VALUES('abc');
INSERT INTO mytable(title) VALUES('abc');
INSERT INTO mytable(title) VALUES('abc');
INSERT INTO mytable(title) VALUES('abc');
SELECT * FROM mytable ;
DROP TABLE mytable;
DROP DATABASE sampleDB ;

## Create a database (If not existing); Create table (The first statement); Create data (The second statement); Query the list of records; Drop the table; Drop the database;

## What kind of data can a database store?
* A set of data.
* A row of data.
* A table of data.

## How does a database store data?
* In a relational database, databases store data in rows. Each row is labeled with a unique identifier and is made up of zero or more values, which can be a single piece of data (integer, float, text data). Rows can be linked to columns. A database manages the way that data is stored within each row of data. In a relational database, you can interact with rows and columns to manipulate or generate the results you are looking for.

* Data within a database is represented by data types and columns within a table are made of data types.

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE mytable(my_id int, my_title varchar(255));
INSERT INTO mytable(my_id, my_title) VALUES(1, 'abc');
INSERT INTO mytable(my_id, my_title) VALUES(2, 'def');
INSERT INTO mytable(my_id, my_title) VALUES(3, 'ghi');
SELECT * FROM mytable ;
DROP TABLE mytable;
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE myuser( userid int, name varchar(100), balance int, status char(1));
INSERT INTO myuser VALUES(1, 'joe', 1234, 'A');
INSERT INTO myuser VALUES(2, 'joe', -1234, 'A');
INSERT INTO myuser VALUES(3, 'joe', 1000000, 'A');
INSERT INTO myuser VALUES(4, 'joe', -1000000, 'A');
INSERT INTO myuser VALUES(5, 'joe', 100, nulls);
INSERT INTO myuser VALUES(6, 'joe', nulls, 'A');
INSERT INTO myuser VALUES(7, 'joe', '35h', 'A');
INSERT INTO myuser VALUES(8, 'joe', '36h', 'A');
INSERT INTO myuser VALUES(9, 'joe', '39h', 'A');
INSERT INTO myuser VALUES(10, 'joe', '20h', 'B');
INSERT INTO myuser VALUES(11, 'joe', '20h', 'A');
SELECT * from myuser;
DROP TABLE myuser;
DROP DATABASE sampleDB;

*/
In my case, the error occurred when the select * from myuser; part was run by my machine.

My user is a Windows user. According to the information about the Windows Registry, the computer user (username) is not the same as the account.

The command below returns the account name of the current user.

net user
C:\WINDOWS\system32>net user
Username     Password       Comment        ProfilePath
nt authority\system 12345678   Administrator     C:\WINDOWS\system32\config\systemprofile
Joe            98765432  joe              C:\WINDOWS\system32\config\systemprofile\Profiles\joe.txt
DOMAIN\Joe      -          joe              C:\WINNT\System32\config\systemprofile\Profiles\joe.txt
joe            98765432  joe              C:\WINNT\SYSTEM32\config\systemprofile\Profiles\joe.txt
127.
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE mytable( myid int, title varchar(255));
INSERT INTO mytable VALUES(1, 'abc');
INSERT INTO mytable VALUES(2, 'def');
INSERT INTO mytable VALUES(3, 'ghi');
SELECT * FROM mytable ;
DROP TABLE mytable;
DROP DATABASE sampleDB;
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE mytable( myid int, title varchar(255));
INSERT INTO mytable VALUES(1, 'abc');
INSERT INTO mytable VALUES(2, 'def');
INSERT INTO mytable VALUES(3, 'ghi');
CREATE OR REPLACE PROCEDURE myproc()
BEGIN
SELECT * FROM mytable;
END;
CALL myproc();
DROP PROCEDURE myproc();
DROP TABLE mytable;
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE mytable( myid serial NOT NULL UNIQUE, title varchar (255));
INSERT INTO mytable VALUES(1, 'abc');
INSERT INTO mytable VALUES(2, 'def');
INSERT INTO mytable VALUES(3, 'ghi');
SELECT * FROM mytable ;
DROP TABLE mytable;
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE persons( personsid int NOT NULL AUTO_INCREMENT UNIQUE, name VARCHAR(255) UNIQUE, phone VARCHAR(10));
ALTER TABLE persons AUTO_INCREMENT=5;
INSERT INTO persons VALUES(1, 'Jason', '555-123-4567');
INSERT INTO persons VALUES(2, 'Peter', '555-777-8889');
INSERT INTO persons VALUES(3, 'Anna', '555-666-4447');
INSERT INTO persons VALUES(4, 'Michael', '555-333-9999');
SELECT * FROM persons;
DROP TABLE persons;
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE mytable( myid int, title varchar(255) PRIMARY KEY, price decimal(10,2));
INSERT INTO mytable VALUES(1, 'abc', 100);
INSERT INTO mytable VALUES(2, 'def', 500);
SELECT myid, title, price FROM mytable ;  
DROP TABLE mytable;
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO mytable VALUES (1,'abc');
INSERT INTO mytable VALUES (2,'abc');
SELECT distinct myid FROM mytable ;
DROP TABLE mytable;
DROP DATABASE sampleDB;

SELECT * FROM mysql.version();

 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE mytable
(
    id INT(6) UNSIGNED AUTO_INCREMENT,
    name CHAR(200 ) DEFAULT NULL,
    PRIMARY KEY(id)
);

START TRANSACTION;
    INSERT INTO mytable VALUES (1, 'firstname');
ROLLBACK;
DROP TABLE mytable;
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE mytable( myid int, title varchar(255) PRIMARY KEY, price decimal(10,2));
INSERT INTO mytable VALUES(1, 'abc', 100);
INSERT INTO mytable VALUES(2, 'def', 500);
SELECT myid, title, price FROM mytable ;  
DROP TABLE mytable;
DROP DATABASE sampleDB;
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
alter table mytable add newColumn INT NOT NULL AFTER id; SHOW COLUMNS;
    ALTER TABLE mytable modify price DECIMAL(10,2);  ALTER TABLE SampleDB.Testmodify ADD COLUMN newColumn INT NOT NULL AFTER id; SHOW COLUMNS;
DROP TABLE mytable;
DROP DATABASE sampleDB;
show databases;
drop database sampleDB;
-- Please use  MySQL’s Query Analyzer to identify problems in the query
create db table test(s1 varchar(15), s2 varchar(14));
insert into test values('aaaa','aaaa');
insert into test(s1, s2) values('bbb', 'bbbbb');
insert into test values('cccc','cccc');
-- you must have the access privileges for the view.
create view Testview1 as
select * from Testtable where test1 like 'a%';
-- to update only the columns that have a NULL value, you can use
-- UPDATE Testtbl SET testField = 'newvalue' WHERE testField like 'aaa%'
create view Testview2 as
select * from Testtable where test1 like 'a%';
-- to update a whole row you must be able to delete the old value first. Use SELECT Testtbl.*, Testtbl.testField as oldValue FROM Testtbl LIMIT 1 and then update Testtbl SET testField = 'newvalue' where oldValue = 'oldvalue'
create view Testview3 as
select * from Testtable where test1 like 'a%';
-- you cannot edit or remove rows through the view.
create view Testview3 as
select * from Testtable where test1 like 'a%';
-- To add a new row and then delete you need to remove the old values
create view Testview4 as
select * from Testtable where test1 like 'a%';
select * from testtable,* from testtable,testtable where testtable.id=testtable.otherId;
select * from testtable,testtable where id=testtable.id;
drop view Testview4;
drop view Testview3;
drop view Testview2;
drop view Testview1;
drop view Testview;
DROP view Testtbl;
-- Please update the program in section 4.2 to allow you to list the columns in each
-- table. Be sure to use the ENGINE=* option and that both tables are in the same
-- database.
CREATE TABLE
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
ALTER TABLE mytable ADD column mycolumn blob;
UPDATE mytable SET mycolumn = '1,255-1234';
SELECT mycolumn, count(mycolumn) FROM mytable;
ALTER TABLE mytable DROP COLUMN mycolumn;
SELECT myid, title, price FROM mytable ;  
DROP TABLE mytable;
DROP DATABASE sampleDB;
 
CREATE OR REPLACE FUNCTION getcustomersnameandsum(cid int) RETURNS SETOF TEXT 
BEGIN
DECLARE resultset set;
LOOP 
select customers.fname, orders.sumtotal, customers.lname into @result from database_samples.customers 
	JOIN database_samples.orders 
		ON ((customers.cid = orders.cid));
		
RETURN NEXT;
END LOOP;
END
;
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SELECT customers.cid,customers.fname, customers.lname,customers.sumtotal FROM database_samples.customers
SELECT sum(orders.sumtotal) FROM database_samples.customers JOIN database_samples.orders on ( (customers.cid = orders.cid));
DROP TABLE getcustomersnameandsum;
SELECT getcustomersnameandsum(1);
DROP DATABASE sampleDB;
-- Please create a program that displays all column details of a table. Use JOIN
 -- to join customer and sales for the date.
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
 
CREATE TABLE customer (
	cid int(11) unsigned NOT NULL AUTO_INCREMENT,
  fname char(32) NOT NULL DEFAULT '',
  lname char(32) NOT NULL DEFAULT '',
  phone int(10) unsigned NOT NULL DEFAULT '0',
  email char(32) NOT NULL DEFAULT '',
  PRIMARY KEY (cid)
);

 
CREATE TABLE sales (
	cid int(11) unsigned NOT NULL,
  tid int(11)
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
ALTER TABLE mytable ADD CONSTRAINT idx ON mytable(price);
SELECT COUNT(*) FROM mytable;
DROP TABLE mytable;
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS mytable;
CREATE TABLE mytable( myid int, title varchar(255) PRIMARY KEY, price decimal(10,2));
INSERT INTO mytable VALUES(1, 'abc', 100);
INSERT INTO mytable VALUES(2, 'def', 500);
SELECT myid, title, price FROM mytable; UPDATE mytable SET price=price*2;
SELECT myid, title, price FROM mytable ; UPDATE mytable SET price=price-100;
SELECT myid, title, price FROM mytable ; 
TRUNCATE TABLE mytable;
SELECT myid, title, price FROM mytable ; 
INSERT INTO mytable VALUES(3, 'abc', 200);
SELECT myid, title, price FROM mytable ; 
INSERT INTO mytable VALUES(4, 'abc', 200);
SELECT myid, title, price FROM mytable ; 
DROP TABLE IF EXISTS mytable;
DROP DATABASE sampleDB;
```
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE mytable ( myid int, title varchar(255)  ) ENGINE=InnoDB;
 
INSERT INTO mytable VALUES(1, 'def');
INSERT INTO mytable VALUES(3, 'abc');
INSERT INTO mytable VALUES(4, 'efg');
SELECT myid, title FROM mytable  JOIN mytable ON mytable.myid=mytable.myid;
ALTER TABLE mytable ADD btitle varchar(255); 
 
UPDATE mytable SET title = 'ghi ', btitle = 'jk' WHERE myid=1 ; 
SELECT myid, title, btitle FROM mytable; 
DROP TABLE mytable;
DROP DATABASE sampleDB;
-- The next step is to demonstrate how multi-user connections can be achieved with MySQL. Let’s start with creating a user and granting privileges on the database to that user. */
CREATE USER 'user'@'localhost' IDENTIFIED BY '<PASSWORD>';
GRANT ALL PRIVILEGES ON sampleDB.* TO user@localhost IDENTIFIED BY '<PASSWORD>' ;
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
 
CREATE TABLE user1table1( uid int PRIMARY KEY AUTO_INCREMENT, username varchar(100) NOT NULL, userphone varchar(25));
CREATE TABLE user1table2( uid int PRIMARY KEY AUTO_INCREMENT, username varchar(100) NOT NULL, uf2 char(1) CHECK(uf2 in ('1','R','Y')));
 
CREATE TABLE user1table1 ( uid int PRIMARY KEY AUTO_INCREMENT, username varchar(100) NOT NULL REFERENCES user1table2(uid) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB DEFAULT CHARSET=unicode;
 
ALTER TABLE user1table1 ADD fk  int(11) NOT NULL REFERENCES  user1table2 (uid) ON UPDATE CASCADE ON DELETE CASCADE   ;
ALTER TABLE user1table1 ADD CONSTRAINT UK_user
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE mytable( myid int, title varchar(255) PRIMARY KEY, price decimal(10,2));
INSERT INTO mytable VALUES(1, 'abc', 100);
INSERT INTO mytable VALUES(2, 'def', 500);
SELECT myid, title, price FROM mytable ;  
DROP TABLE mytable;
DROP DATABASE sampleDB;
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
UPDATE mytable SET title = 'hghi' WHERE myid = 1 ;
SELECT myid, title, price FROM mytable ;  
DROP TABLE mytable;
DROP DATABASE sampleDB;
--Please create a program which creates a mutated database which can replace the previous one. Note that you have to design a solution to replace the previous one by creating a copy of the database.
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE DATABASE IF NOT EXISTS newDB; COPY newDB.mytable(myid, title, price)  FROM sampleDB.mytable ;  
SELECT myid, title, price FROM newDB.mytable ;  
DROP TABLE newDB.mytable;
DROP DATABASE sampleDB;  
DROP DATABASE newDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE mytable ( ID int, price decimal(10,2), FOREIGN KEY (ID) REFERENCES mytable ( myid ) ON DELETE CASCADE ON UPDATE CASCADE);
INSERT INTO mytable values(2, 1000);
INSERT INTO mytable values(3, 1001);
INSERT INTO mytable values(3, 1002);
SELECT myid, price FROM mytable  ORDER BY price;
UPDATE mytable set price = 1002 WHERE ID = 3;
SELECT myid, price FROM mytable  ORDER BY price;
DROP TABLE mytable;
DROP DATABASE sampleDB;

-- 
# MySQL Commands for Ubuntu 16.04

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
 
 
 
SELECT myid, title, price FROM mytable ;
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO mytable SELECT * FROM mytable ;  
INSERT INTO mytable SELECT myid, title, price FROM mytable ;  
UPDATE mytable SET price = (price*2)-10 WHERE myid = 1;  
SELECT myid, title, price FROM mytable ;  
UPDATE mytable SET price = (price*2)-10 WHERE myid IN (1,2);  
SELECT myid, title, price FROM mytable ;  
UPDATE mytable SET price = price-10 JOIN mytable USING (myid) WHERE myid < 3;  
SELECT myid, title, price FROM mytable ;  
SELECT myid, title, price FROM mytable ;  
CREATE TABLE mytable( myid int, title varchar(255) PRIMARY KEY, price decimal(10,2));
CREATE TABLE mytable2( myid int, title varchar(255) PRIMARY KEY, price decimal(10,2));
INSERT INTO mytable VALUES(3, 'xyz', 200);
INSERT INTO mytable VALUES(4, 'zyx', 300);
INSERT INTO mytable VALUES(5, 'wxc', 400);
INSERT INTO mytable2 SELECT * FROM mytable;
INSERT INTO mytable2 SELECT * FROM mytable ;
INSERT INTO mytable2 SELECT * FROM mytable ;
INSERT INTO mytable2 SELECT price, CONCAT(myid,title) INTO mytable2.newprice FROM mytable2 WHERE price = 400;
SELECT price, mytable2.newprice, CONCAT(myid,title) FROM mytable2 ;  
DELETE FROM mytable WHERE price = 400;
SELECT * FROM mytable WHERE price = 400;  
DELETE FROM mytable2 WHERE myid = 4;
SELECT * FROM mytable2 ;  
INSERT INTO mytable SELECT myid, title, price FROM mytable2, mytable2.newprice WHERE myid IN (5,6,7);  
INSERT INTO mytable SELECT myid, title, price FROM mytable2, mytable2.newprice WHERE myid = 6;  
DELETE FROM mytable2.newprice WHERE myid = 6;  
SELECT * FROM mytable2 WHERE myid = 6;  
DELETE FROM mytable2 LEFT JOIN mytable2 USING (myid);
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO mytable VALUES(3, 'ghi', 500);
SELECT myid, title, price FROM mytable ;  
UPDATE mytable SET price = 7000 WHERE myid = 1;
SELECT myid, title, price FROM mytable ;  
UPDATE mytable SET myid = 1, title = 'xyz', price = 6970 WHERE myid = 2;
INSERT INTO mytable VALUES(1, 'abc', 100);  
SELECT myid, title, price FROM mytable ;  
DELETE FROM mytable WHERE myid = 3;
SELECT myid, title, price FROM mytable ;  
DROP DATABASE sampleDB;
-- Please create a full program that does all the above
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO mytable VALUES(1, 'abc', 100);
INSERT INTO mytable VALUES(2, 'def', 500);
INSERT INTO mytable VALUES(3, 'ghi', 500);
UPDATE mytable SET myid = 1, title = 'xyz', price = 6970 WHERE myid = 2;
INSERT INTO mytable VALUES(1, 'abc', 100);  
SELECT myid, title, price FROM mytable ;  
DELETE FROM mytable WHERE myid = 3;
SELECT myid, title, price FROM mytable ;  
DROP DATABASE sampleDB;

-- 11.1.2. The Database Model - MySQL Database Model Introduction
-- MySQL is a relational database management system (RDBMS). It provides you an easy-to-use schema-style language for manipulating and analyzing data stored in relational data stores. MySQL is also an embeddable database system. Its architecture is based on standard database management system (DBMS) specifications, operating system interface specification and well specified coding conventions. MySQL provides several data types, and several SQL language constructs. Database programs and their interactions need not be written in programming languages such as DB2, APL, PL/SQL, C, but they need to conform to the database model. MySQL offers several access methods for accessing MySQL databases, including multiple independent processes (multiple nodes) and network connections.

-- The MySQL database engine is very high-performance, but also is embedded into many database management programs such as Microsoft Access, Microsoft Excel, Microsoft Access, Microsoft Power
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE mytable( myid int, title varchar(255) PRIMARY KEY, price decimal(10,2));
INSERT INTO mytable VALUES(1, 'abc', 100);
INSERT INTO mytable VALUES(2, 'def', 500);
SELECT myid, title, price FROM mytable ;  
DROP TABLE mytable;
DROP DATABASE sampleDB;
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO mytable VALUES(3, 'egh', 900);
UPDATE mytable SET price = price +50 WHERE myid = 2;
SELECT myid, title, price FROM mytable ;  
DROP TABLE mytable;
DROP DATABASE sampleDB;

DROP DATABASE mysql;
DROP DATABASE mybase;


[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP DATABASE sampleDB;
-- Test your code
DROP DATABASE sampleDB;
-- Try to modify program above to perform SQL operations
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
UPDATE mytable SET price = price * 2 WHERE myid > 1;
SELECT myid, title, price FROM mytable ;  
DROP TABLE mytable;
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE mytable( myid int, title varchar(255) PRIMARY KEY, price decimal(10,2));
INSERT INTO mytable VALUES(1,'abc1', 100);
INSERT INTO mytable VALUES(2,'abc2', null);
INSERT INTO mytable VALUES(2,'abc3', 200);
INSERT INTO mytable VALUES(2,'abc4', null);
INSERT INTO mytable VALUES(2,'abc5', null);
SELECT myid, title,  price FROM mytable ;  
DROP TABLE mytable;
DROP DATABASE sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE mytable( myid int, title varchar(255), price decimal(10,2) );

INSERT INTO table1 VALUES(1, 'abc', 130000);   
INSERT INTO table1 VALUES(2, 'def', 80000);  
INSERT INTO table1 VALUES(3, 'abc', 400000);   
INSERT INTO table1 VALUES(4, 'def', 90000);   
INSERT INTO table1 VALUES(4, 'abc', 60000);    
 
UPDATE mytable set price=price*1.1;
SELECT myid, title, price FROM mytable;

DROP TABLE mytable;
DROP DATABASE sampleDB;
-- Please recreate the previous example with MySQL Workbench as GUI

-- mysql> CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- mysql> CREATE TABLE mytable( myid int, title varchar(255), price double precision );
-- mysql> INSERT INTO mytable VALUES(1, 'abc', 100);
-- mysql> INSERT INTO mytable VALUES(2, 'def', 500);
-- mysql> SELECT myid, title, price FROM mytable ;  
-- mysql> DROP TABLE mytable;
-- mysql> DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
 -- SQL-injection attack
 UPDATE mysupplier SET sup_name = '' WHERE supplier_id = 1;
 INSERT INTO mysupplier VALUES(5, '<script>alert();</script>', 335);
 
 -- SQL-injection attack
UPDATE mysupplier SET
sup_address = '<script>alert();</script>'
 WHERE supplier_id in (select supplier_id 
from mysupplier where
sup_name = 'Sony';
 
 DROP DATABASE sampleDB;
 

## Database Design and Implementation

1. Create the user and database

**Example**

 Create a database named ```mysql_crud```  with character set UTF8
 You have to create the tables first

CREATE DATABASE `sampleDB`    ;

GRANT ALL PRIVILEGES ON sampleDB.*to 'admin'@'%'; -- this is the administrator priviliges

CREATE USER 'admin'@'%' IDENTIFIED BY '<PASSWORD>@!';
GRANT ALL PRIVILEGES ON sampleDB.*to 'admin'@'localhost';

1. Create tables and records by creating them and inserting data

For the user table
 CREATE TABLE `users` (
               `id` int(11) UNSIGNED NOT NULL AUTO_INCREMENT,
               `created_at` datetime COLLATE utf8_unicode_ci DEFAULT NULL,
               `updated_at` datetime COLLATE utf8_unicode_ci DEFAULT NULL,
               `deleted_at` datetime DEFAULT NULL,
               `email` varchar(255) NOT NULL,
               `display_name` varchar(255) NOT NULL,
               `password` varchar(255) NOT NULL,
               `remember_token` varchar(100) DEFAULT NULL,
               PRIMARY KEY (`id`),
               UNIQUE KEY `email` (`email`)
       ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

For the employee table
 CREATE TABLE `employees` (
                   `id` int(11) UNSIGNED NOT NULL AUTO_INCREMENT,
                   `created_at` datetime COLLATE utf8_unicode_ci DEFAULT NULL,
                   `updated_at` datetime COLLATE utf8_unicode_ci DEFAULT NULL,
                   `deleted_at` datetime DEFAULT NULL,
                   `name` varchar(255) NOT NULL,
                   `
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE mytable( myid int, title varchar(255) PRIMARY KEY, price decimal(10,2));
INSERT INTO mytable VALUES(1,'abc1', 100);
INSERT INTO mytable VALUES(2,'abc2', null);
INSERT INTO mytable VALUES(2,'abc3', 200);
INSERT INTO mytable VALUES(2,'abc4', null);
INSERT INTO mytable VALUES(2,'abc5', null);
SELECT myid, title,  price FROM mytable ;  
DROP TABLE mytable;
DROP DATABASE sampleDB;
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO mytable VALUES(1,'abc1', 100.00);
INSERT INTO mytable VALUES(2,'abc2', null.00);
INSERT INTO mytable VALUES(2,'abc3', 900.00);
INSERT INTO mytable VALUES(2,'abc4', null.00);
INSERT INTO mytable VALUES(2,'abc5', null.00);
SELECT myid, title,  price+100 FROM mytable WHERE price IS null;
DROP TABLE mytable;
DROP DATABASE sampledb;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO mytable SELECT myid, title, 100 FROM mytable, (VALUES(1, 'abc1'));
INSERT INTO mytable SELECT myid, title, 200 FROM mytable, (VALUES(2, 'abc2'), (NULL, 'abc3'), (2, 'abc4'));
INSERT INTO mytable SELECT myid, title, NULL FROM mytable, (VALUES(2, 'abc5'));
SELECT myid, title, price FROM mytable ;  
DROP TABLE mytable;
DROP DATABASE sampleDB;
-- Please create a very short query which uses multiple ORDER BY
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE mytable( myid int, title varchar(255), price decimal(10, 2), price1 decimal(10,2));
INSERT INTO mytable VALUES(1,'abc1', 100, 90);
INSERT INTO mytable VALUES(1,'abc2', 200, 40);
INSERT INTO mytable VALUES(1,'abc3', null, null);
INSERT INTO mytable VALUES(1,'abc4', null, 100);
INSERT INTO mytable VALUES(1,'abc5', 300, 90);
INSERT INTO mytable VALUES(2,'abc1', 90, 100);
INSERT INTO mytable VALUES(2,'abc2', null, null);
INSERT INTO mytable VALUES(2,'abc3', 90, 40);
INSERT INTO mytable VALUES(2,'abc4', null, 100);
INSERT INTO mytable VALUES(2,'abc5', 100, 30);
SELECT title, price1, price FROM mytable ORDER BY price desc;
DROP TABLE mytable;
DROP DATABASE sampleDB;
-- Please create a semantically equivalent query to the previous one.
SELECT title, price1, price FROM mytable ORDER BY price desc ;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE mytable( myid int, title varchar(255), price decimal(10,2) );
INSERT INTO mytable VALUES(1,'abc1', 100);
INSERT INTO mytable VALUES(2,'abc2', null);
INSERT INTO mytable VALUES(2,'abc3', 200);
INSERT INTO mytable VALUES(2,'abc4', null);
INSERT INTO mytable VALUES(2,'abc5', null);
SELECT myid, title, price FROM mytable ;
SELECT * FROM mytable LIMIT 2 ;  
DROP TABLE mytable;
DROP DATABASE sampleDB;
 

CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE mytable( myid int, title varchar(255), price decimal(10,2) );
INSERT INTO mytable VALUES(1,'abc1', 100);
INSERT INTO mytable VALUES(2,'abc2', null);
INSERT INTO mytable VALUES(2,'abc3', 200);
INSERT INTO mytable VALUES(2,'abc4', null);
INSERT INTO mytable VALUES(2,'abc5', null);
SELECT myid, title, price FROM mytable ;
SELECT * FROM mytable ;
DROP TABLE mytable;
DROP DATABASE sampleDB;

```

![img](/assets/posts/mysql/00-create-drop-table.png){:class="img-responsive"}

## References
- [MySQL Docs](https: 
- [MySQL tutorial](https: 
- [MySQL Community Tutorial](https: 
- [How to create a dynamic, interactive SQL shell using MariaDB Client](https: 
- [[mysql] mysql安装](https: 
- [MySQL 常见错误
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS mytable( myid INT PRIMARY KEY, title VARCHAR(255) NOT NULL UNIQUE, price DECIMAL(10,2) DEFAULT '0.00');
INSERT INTO mytable VALUES(1,'abc1', 100);
INSERT INTO mytable VALUES(2,'abc2', 'abc1');
INSERT INTO mytable VALUES(2,'abc3', 'abc1');
INSERT INTO mytable VALUES(2,'abc4', 'abc2');
INSERT INTO mytable VALUES(2,'abc5', NULL);
SELECT myid, title, price FROM mytable;
DROP TABLE mytable ;
DROP DATABASE sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE mytable( myid int, title varchar(255) PRIMARY KEY, price decimal(10,2));
INSERT INTO mytable VALUES(1,'abc1', 100);
INSERT INTO mytable VALUES(2,'abc2', null);
INSERT INTO mytable VALUES(3,'abc3', 200);
INSERT INTO mytable VALUES(4,'abc4', null);
INSERT INTO mytable VALUES(5,'abc5', null);
SELECT * FROM mytable ;  
DROP TABLE mytable;
DROP DATABASE sampleDB;
USE MYSQL;
ALTER TABLE mytable MODIFY price bigint NULL;
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS mytable( myid INT PRIMARY KEY, title VARCHAR(255) NOT NULL UNIQUE, price DECIMAL(10,2) DEFAULT '0.00');
INSERT INTO mytable VALUES(1,'abc1', 100);
INSERT INTO mytable VALUES(2,'abc2', 'abc1');
INSERT INTO mytable VALUES(2,'abc3', 'abc1');
INSERT INTO mytable VALUES(2,'abc4', 'abc2');
INSERT INTO mytable VALUES(2,'abc5', NULL);
SELECT myid, title, price FROM mytable;
DROP TABLE mytable ;
DROP DATABASE sampleDB;
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS mytable( myid INT PRIMARY KEY, title VARCHAR(255) NOT NULL UNIQUE, price DECIMAL(10,2) DEFAULT '0.00');
SELECT myid, title FROM mytable;
UPDATE mytable SET price = 0.50 WHERE myid = 1;
SELECT myid, title FROM mytable;
UPDATE mytable USING mytable_mutated SET price = 5.60 WHERE myid = 1;
SELECT myid, title FROM mytable;
DROP TABLE mytable ;
SELECT myid, title, price FROM mytable;
DROP DATABASE sampleDB;
-- Please create a new database sampleDB based on an existing database sampleDB
CREATE DATABASE IF NOT EXISTS sampleDB_new; USE sampleDB_new;
CREATE TABLE IF NOT EXISTS mytable( myid INT PRIMARY KEY, title VARCHAR(255) NOT NULL UNIQUE, price DECIMAL(10,2) DEFAULT '0.00');
SELECT myid, title FROM mytable;
UPDATE mytable SET price = 5.60 WHERE myid = 1;
SELECT myid, title FROM mytable;
DROP TABLE mytable ;
SELECT myid, title FROM mytable;
DROP DATABASE sampleDB_new;
-- Please create a new database sampleDB based on an existing database sampleDB
CREATE DATABASE IF NOT EXISTS sampleDB_new; USE sampleDB_new;
CREATE TABLE IF NOT EXISTS mytable( myid INT PRIMARY KEY, title VARCHAR(255) NOT NULL UNIQUE, price DECIMAL(10,2) DEFAULT '0.00');
SELECT myid, title FROM mytable;
UPDATE mytable SET price = 5.60 WHERE myid = 1;
SELECT myid, title FROM mytable;
DROP DATABASE sampleDB_new;
-- This is a way to see the difference between two different ways to write a statement.
-- 1. One way uses parentheses in a line. The statement is executed in the context of the entire block.
-- 2. The other way uses square brackets to reference specific objects. The statements is executed in
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
UPDATE mytable SET price=price+price;
DROP DATABASE sampleDB;


[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
 

 

UPDATE invoices SET price_in_usd=price*1.13 WHERE invoices.paid=0 ;

 
UPDATE products SET price=price*1.13 WHERE products.price is NULL;

 
UPDATE orders SET paid=paid*1.05 ;

 
UPDATE customer SET price_paid_today=(price*1.05*paid)/(orders.paid*1.10) WHERE paid = 1;

 
UPDATE invoices_products SET date_paid=date(current_timestamp()) WHERE paid = 1;

 
UPDATE invoices_orders SET paid_today=1 WHERE paid = 
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS Mutated (idINT INT AUTO_INCREMENT PRIMARY KEY, price DECIMAL(10,2) UNIQUE);
UPDATE Mutated SET price = 100 WHERE idINT = 2;
SELECT price FROM Mutated;
DROP TABLE Mutated;
DROP DATABASE sampleDB;


[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
UPDATE mytable SET price = '0.50' WHERE myid =(SELECT MIN(myid) FROM mytable WHERE title = 'abc4') ;
SELECT myid, title, price FROM mytable;
DROP TABLE mytable ;
DROP DATABASE sampleDB;
-- Please create a program to add data to a table with NULL values. Be sure to show sample insert and update.
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
ALTER TABLE mytable ADD CONSTRAINT myfk FOREIGN KEY(myid) REFERENCES mytable(myid) ON DELETE CASCADE ON UPDATE CASCADE;
INSERT INTO mytable VALUES(NULL,'abc1', '0');
INSERT INTO mytable VALUES(NULL,NULL, '0');
SELECT myid, title, price FROM mytable;
DROP TABLE mytable ;
DROP DATABASE sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS Mutated (idINT INT AUTO_INCREMENT PRIMARY KEY, price DECIMAL(10,2) UNIQUE);
UPDATE Mutated SET price = 100 WHERE idINT = 2;
SELECT price FROM Mutated;
DROP TABLE Mutated;
DROP DATABASE sampleDB;
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS Mutated (idINT INT AUTO_INCREMENT PRIMARY KEY, price DECIMAL(10,2) UNIQUE);
UPDATE Mutated SET price = 100 WHERE idINT = 2;
SELECT price FROM Mutated;
DELETE FROM Mutated WHERE idINT = 2;
SELECT price FROM Mutated;
DROP TABLE Mutated;
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS Mutated (pk INT AUTO_INCREMENT PRIMARY KEY, name char(50) UNIQUE);
SELECT pk, name FROM Mutated;
UPDATE Mutated SET name = "test" WHERE pk = 3;
SELECT * FROM Mutated;
DROP TABLE Mutated;
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS Mutated (idINT INT AUTO_INCREMENT PRIMARY KEY, price DECIMAL(10,2) UNIQUE);
UPDATE Mutated SET price = 100 WHERE idINT = 2;
SELECT price FROM Mutated;
DROP TABLE Mutated;
DROP DATABASE sampleDB;

\c sampleDB
DROP DATABASE IF EXISTS Mutated;
*/

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS Mutated (idINT INT AUTO_INCREMENT PRIMARY KEY, price DECIMAL(10,2) UNIQUE);
UPDATE Mutated SET price = 200 WHERE idINT = 2;
SELECT price FROM Mutated;
DROP TABLE Mutated;
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS Mutated (idINT INT AUTO_INCREMENT PRIMARY KEY, price DECIMAL(12,2) UNIQUE);
UPDATE Mutated SET price = 100 WHERE idINT = 2;
SELECT price FROM Mutated;
DROP TABLE Mutated;
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS Mutated (idINT INT AUTO_INCREMENT PRIMARY KEY, price DECIMAL(10,2) UNIQUE);
UPDATE Mutated SET price = 100 WHERE idINT = 2;
SELECT price FROM Mutated;
DELETE FROM Mutated WHERE idINT = 2;
SELECT price FROM Mutated;
DROP TABLE Mutated;
DROP DATABASE sampleDB;
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE Mutated;
DROP DATABASE sampleDB;
-- Please drop any tables you created that were not created with ENGINE INNODB before.

DROP DATABASE IF EXISTS simpleDB;

CREATE DATABASE IF NOT EXISTS simpleDB; USE simpleDB;

CREATE TABLE IF NOT EXISTS Student_Grade ( idINT INT NOT NULL PRIMARY KEY, Name VARCHAR(50), Grade VARCHAR(10));

INSERT INTO Student_Grade VALUES(101, 'Adam', 'A');
INSERT INTO Student_Grade VALUES(102, 'Bob', 'A');
INSERT INTO Student_Grade VALUES(103, 'Charlie', 'AA');
INSERT INTO Student_Grade VALUES(104, 'Doris', 'A');
INSERT INTO Student_Grade VALUES(105, 'Eric', 'F');

SELECT * FROM Student_Grade;
-- You can add a column, but can’t add a foreign key.
ALTER TABLE Student_Grade ADD Grade2 VARCHAR(20);
ALTER TABLE Student_Grade ADD CONSTRAINT `FK_Student_Grade_Grade2` FOREIGN KEY (Grade2) REFERENCES Student_Grade (Grade);

SELECT * FROM Student_Grade;

ALTER TABLE Student_Grade MODIFY Grade1 VARCHAR(20);

UPDATE Student_Grade SET Grade = 'E';
SELECT * FROM Student_Grade;

SELECT Grade FROM Student_Grade WHERE Grade IN ('E', 'A', 'AA'); -- If multiple Grades are provided, you need to use UNION

-- You can drop columns that are NOT part of a foreign key.
ALTER TABLE Student_Grade MODIFY Grade CHAR(5);
DROP TABLE Student_Grade;

DROP DATABASE IF EXISTS bigDB;

CREATE DATABASE IF NOT EXISTS bigDB;
CREATE TABLE IF NOT EXISTS largeTable ( idINT INT AUTO_INCREMENT PRIMARY KEY, colSTR VARCHAR(255) );
INSERT INTO largeTable VALUES(10, 'Hello');

CREATE TABLE IF NOT EXISTS smallTable ( idINT INT AUTO_INCREMENT PRIMARY KEY, colSTR VARCHAR(255) );
INSERT INTO smallTable VALUES(10, 'Hello2');

ALTER TABLE smallTable ADD CONSTRAINT FK_smallTable_largeTable FOREIGN KEY (idINT) REFERENCES largeTable(idINT);

SELECT * FROM smallTable;

ALTER TABLE smallTable MODIFY colSTR VARCHAR(20);
SELECT * FROM small
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS Product (
  id INT NOT NULL AUTO_INCREMENT,
  productName TEXT NULL,
  price decimal(10,2) NULL,
  category TEXT NULL,
  PRIMARY KEY (id)
);
INSERT INTO Product (productName, price, category) VALUES ("MacBook Pro 15", 5999, "Laptop");
INSERT INTO Product (productName, price, category) VALUES ("MacBook Pro 15 2 TB", 6099, "Laptop");
SELECT * FROM Product;
UPDATE Product SET productName = "MacBook Pro 15 with 2 TB", price = 7999 WHERE id = 2;
SELECT * FROM Product;
UPDATE Product SET category = "Headphones", price = 13099 WHERE id = 2;
SELECT * FROM Product;
DROP TABLE Product;
DROP DATABASE sampleDB;
*/

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS Mutated;
ALTER TABLE Mutated ENGINE = INNODB;
CREATE TABLE IF NOT EXISTS Mutated;
CREATE INDEX IF NOT EXISTS price_index ON Mutated (price);
INSERT INTO Mutated VALUES (1), (2), (3);
SELECT price FROM Mutated;
DELETE FROM Mutated WHERE price >= 150;
SELECT price FROM Mutated;
DROP INDEX IF EXISTS price_index;
DROP TABLE Mutated;
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

CREATE TABLE IF NOT EXISTS Mutated (
idINT INT AUTO_INCREMENT PRIMARY KEY,
price DECIMAL(10, 2) UNIQUE
);

UPDATE Mutated SET price = 100 WHERE idINT = 2;
SELECT price FROM Mutated;

DELETE FROM Mutated WHERE idINT = 2;
SELECT price FROM Mutated;

DROP TABLE Mutated;

DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS Mutated (id INT AUTO_INCREMENT PRIMARY KEY, price DECIMAL(10,2) UNIQUE);
UPDATE Mutated SET price = 100 WHERE id = 2;
SELECT price FROM Mutated;
DELETE FROM Mutated WHERE id = 2;
SELECT price FROM Mutated;
DROP TABLE Mutated;
DROP DATABASE sampleDB;
-- 
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS Mutated (id INT AUTO_INCREMENT PRIMARY KEY, price DECIMAL(10,2) UNIQUE);
UPDATE Mutated SET price = 100 WHERE id = 2;
SELECT price FROM Mutated;
DELETE FROM Mutated WHERE id = 2;
SELECT price FROM Mutated;
DROP TABLE Mutated;
DROP DATABASE sampleDB;
--
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

SELECT id, price
FROM Mutated;

SELECT id, price
FROM Mutated
WHERE price = 100;

SELECT id, price
FROM Mutated
WHERE price = 100
AND id = 2;

SELECT id, price
FROM Mutated
WHERE price = 100
AND id = NOT 2;

SELECT id, price
FROM Mutated
WHERE price = 100
AND id IS NULL;

SELECT id, price
FROM Mutated
WHERE price = 100
AND id IS NOT NULL;

SELECT id, price
FROM Mutated
WHERE price = 100
OR id = 2;

SELECT id, price
FROM Mutated
WHERE price = 100
OR id = 2
AND id IS NULL;

SELECT id, price
FROM Mutated
WHERE price = 100
AND price = 100;

SELECT id, price
FROM Mutated
WHERE price = 100
AND price = 100
AND id = 2;

SELECT id, price
FROM Mutated
WHERE price = 100
AND price = 100
AND id = 2
AND price = 100;

SELECT id, price
FROM Mutated
WHERE price = 100
AND price = 100
AND id = 2
AND price = 100
AND id IS NULL;

SELECT id, price
FROM Mutated
WHERE price = 100
AND price = 100
AND id = 2
AND price = 100
AND id IS NOT NULL;

SELECT id, price
FROM Mutated
WHERE price = 100
AND price = 100
AND id = 2
AND NOT price = 100;

SELECT id, price
FROM Mutated
WHERE price = 100
AND price = 100
AND id = 2
AND
price = 100
AND id IS NULL;

SELECT id, price
FROM Mutated
WHERE price = 100
AND price = 100
AND id = 2
AND
price = 100
AND id IS NOT NULL;

/* Do the above multiple times to see how
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS Mutated (id INT AUTO_INCREMENT PRIMARY KEY, price DECIMAL(10,2) UNIQUE);
UPDATE Mutated SET price = 100 WHERE price = 99.8;
SELECT price FROM Mutated;
DELETE FROM Mutated WHERE price = 99.8;
SELECT price FROM Mutated;
DROP TABLE Mutated;
DROP DATABASE sampleDB;
--
-- Please create a query which displays an existing table:
SELECT * FROM Mutated;
--

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS Mutated (id INT AUTO_INCREMENT PRIMARY KEY, price DECIMAL(10,2) UNIQUE);
UPDATE Mutated SET price = 100 WHERE id = 2;
SELECT price FROM Mutated;
DELETE FROM Mutated WHERE id = 2;
SELECT price FROM Mutated;
DROP TABLE Mutated;
DROP DATABASE sampleDB;
--
-- Please create a program to insert several records into a table, then query the table and check the values and data types for each row.
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS Mutated (id INT AUTO_INCREMENT PRIMARY KEY, price DECIMAL(10,2));
INSERT INTO Mutated (price) VALUES (150);
INSERT INTO Mutated (price) VALUES (200);
INSERT INTO Mutated (price) VALUES (350);
SELECT * FROM Mutated ORDER BY price DESC;
DROP TABLE Mutated;
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

CREATE TABLE IF NOT EXISTS Mutated (id INT AUTO_INCREMENT PRIMARY KEY, price DECIMAL(10,2) UNIQUE);
INSERT INTO Mutated (price) VALUES (100);
DELETE FROM Mutated WHERE id = 2;
SELECT price FROM Mutated;
DROP TABLE Mutated;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS Mutated (id INT AUTO_INCREMENT PRIMARY KEY, price DECIMAL(10,2) UNIQUE);
UPDATE Mutated SET price = 80 WHERE id = 2;
SELECT price FROM Mutated;
DELETE FROM Mutated WHERE id = 2;
SELECT price FROM Mutated;
DROP TABLE Mutated;
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS Mutated (id INT AUTO_INCREMENT PRIMARY KEY, price DECIMAL(10,2) UNIQUE);
UPDATE Mutated SET price = 80 WHERE id = 2;
SELECT price FROM Mutated;
DELETE FROM Mutated WHERE id = 2;
SELECT price FROM Mutated;
DROP TABLE Mutated;
DROP DATABASE sampleDB;
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS Mutated (id INT PRIMARY KEY, price DECIMAL(10,2));
UPDATE Mutated SET price = 80;
SELECT price FROM Mutated;
DELETE FROM Mutated WHERE id = 4;
SELECT price FROM Mutated;
DROP TABLE Mutated;
DROP DATABASE sampleDB;


[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS Mutated (id INT AUTO_INCREMENT PRIMARY KEY, price DECIMAL(10,2) UNIQUE);
UPDATE Mutated SET price = 80 WHERE id = 2;
SELECT price FROM Mutated;
DELETE FROM Mutated WHERE id = 2;
SELECT price FROM Mutated;
DROP TABLE Mutated;
DROP DATABASE sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS Mutated (id INT AUTO_INCREMENT PRIMARY KEY, price DECIMAL(10,2) UNIQUE);
UPDATE Mutated SET price = 80 WHERE id = 2;
SELECT price FROM Mutated;
DELETE FROM Mutated WHERE id = 2;
SELECT price FROM Mutated;
DROP TABLE Mutated;
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS Mutated (id INT AUTO_INCREMENT PRIMARY KEY, price REAL);
UPDATE Mutated
SET price = 2 + (price * 0.5)
WHERE price IS NULL;
SELECT price FROM Mutated;
DELETE FROM Mutated WHERE price IS NULL;
SELECT price FROM Mutated;
DROP TABLE Mutated;
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS Mutated (id INT AUTO_INCREMENT PRIMARY KEY, price DECIMAL(10,2) UNIQUE);
UPDATE Mutated SET price = 80 WHERE id = 1;
SELECT price FROM Mutated;
DELETE FROM Mutated WHERE id = 1;
SELECT price FROM Mutated;
DROP TABLE Mutated;
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS Mutated (id INT AUTO_INCREMENT PRIMARY KEY, price DECIMAL(10,2) UNIQUE);
UPDATE Mutated SET price = 80 WHERE id = 1;
SELECT price FROM Mutated;
DELETE FROM Mutated WHERE id = 1;
SELECT price FROM Mutated;
DROP TABLE Mutated;
DROP DATABASE sampleDB;
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS Mutated (id INT AUTO_INCREMENT PRIMARY KEY, price DECIMAL(10,2), name TEXT);
INSERT INTO Mutated(price, id, name) VALUES(80,1, "<NAME>");
UPDATE Mutated SET price = 80 WHERE id = 1;
UPDATE Mutated SET price = 100 WHERE id = 3;
DELETE FROM Mutated WHERE id = 1;
SELECT price FROM Mutated;
SELECT price, name FROM Mutated;
DROP TABLE Mutated;
DROP DATABASE sampleDB;
 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS Mutated (id INT AUTO_INCREMENT PRIMARY KEY, price DECIMAL(10,2), name TEXT);
CREATE TABLE IF NOT EXISTS Users (id INT UNIQUE, name TEXT);
INSERT INTO Mutated(price, id, name) VALUES(80,1,"<NAME>");
INSERT INTO Users(id, name) VALUES(1,"Fredrik");
UPDATE Mutated SET price = 80 WHERE id = 1;
UPDATE Mutated SET price = 100 WHERE id = 3;
UPDATE Users SET name = "Jim" WHERE id = 3;
SELECT id, name FROM Users;
SELECT price FROM Users;
SELECT price, name FROM Mutated;
DROP TABLE Mutated;
DROP TABLE Users;
DROP DATABASE sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- No other table should exist but you can check that by trying
-- to create a new schema and using the query: SELECT * FROM mutated
-- as well as that the same table does not exist.
CREATE TABLE IF NOT EXISTS Mutated (id INT AUTO_INCREMENT PRIMARY KEY, price DECIMAL(10,2) UNIQUE);
SELECT * FROM Mutated;
UPDATE Mutated SET price = 80 WHERE id = 1;
SELECT * FROM Mutated;
DELETE FROM Mutated WHERE id = 1;
SELECT * FROM Mutated;
DROP TABLE Mutated;
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS Mutated (date DATE, qty DECIMAL(10,2), price DECIMAL(10,2));
UPDATE Mutated SET qty = 100, price = 99.75 WHERE qty = 100;
SELECT * FROM Mutated;
DROP TABLE Mutated;
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS MutatedGen2 (id INT AUTO_INCREMENT PRIMARY KEY, price DECIMAL(10,2) UNIQUE);
UPDATE MutatedGen2 SET price = 80 WHERE id = 1;
SELECT price FROM MutatedGen2;
DELETE FROM MutatedGen2 WHERE id = 1;
SELECT price FROM MutatedGen2;
DROP TABLE MutatedGen2;
DROP DATABASE sampleDB;
-- Please create a very very short query which uses the JSON parser in a simple way. You should not use sampleDB as the database for the tests, but the database where the query will be executed: You need to create a table to store test data (test_data is the name in your preferred language). In the end, drop the table. */
CREATE DATABASE IF NOT EXISTS testDB; USE testDB;
CREATE TABLE IF NOT EXISTS test_data (username VARCHAR(10), password <PASSWORD>(10));
INSERT INTO test_data VALUES ("Marco", "1"), ("Alex", "999"),  ("Manuell", "777");
INSERT INTO test_data (username, password) VALUES ( "Daniel", "99");
INSERT INTO test_data VALUES  ("Carlo","78"), ("Cruz","654");
-- After writing some code (e.g. a table creation routine) for creating a database, a simple SQL query, and a mutation, run a simple test query: You need to write a program that uses tables created for this purpose. In the end, query for all the data stored in test_data and print the username and password fields. */
CREATE DATABASE IF NOT EXISTS testDB; USE testDB;
CREATE TABLE IF NOT EXISTS test_data2( id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,username VARCHAR(10), password VARCHAR(10));
INSERT INTO test_data2 (username, password) VALUES ( "Marco", "1"), ("Alex", "999"),  ("Manuell", "777");
INSERT INTO test_data2 (username, password) VALUES  ("Daniel", "99");
INSERT INTO test_data2 VALUES  ("Carlo","78"), ("Cruz","654");
-- After writing some code (e.g. a table creation routine) for creating a database, a simple SQL query, and a mutation, run a simple update query for the database: You need to write
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS Mutated (id INT AUTO_INCREMENT PRIMARY KEY, price DECIMAL(10,2) UNIQUE);
UPDATE Mutated SET price = 80 WHERE id = 2;
SELECT price FROM Mutated;
UPDATE Mutated SET price = 10 WHERE id = 2;
SELECT price FROM Mutated;
DROP TABLE Mutated;
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS Mutated (id INT AUTO_INCREMENT PRIMARY KEY, price DECIMAL(10,2) UNIQUE);
UPDATE Mutated SET price = 80 WHERE id = 2;
SELECT price FROM Mutated;
UPDATE Mutated SET price = 10 WHERE id = 2;
SELECT price FROM Mutated;
DROP TABLE Mutated;
DROP DATABASE sampleDB;
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS Mutated (id INT NOT NULL, price DECIMAL(10,2) UNIQUE, INDEX idx(price));
UPDATE Mutated SET price = 80 WHERE id = 2;
SELECT price FROM Mutated;
UPDATE Mutated SET price = 10 WHERE id = 2;
SELECT price FROM Mutated;
SELECT price FROM Mutated ORDER BY price;
DROP TABLE Mutated;
DROP DATABASE sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS Mutated (id INT AUTO_INCREMENT PRIMARY KEY, price DECIMAL(10,2) UNIQUE);
SELECT price FROM Mutated WHERE id = 2;
UPDATE Mutated SET price = 80 WHERE id = 2;
UPDATE Mutated SET price = 10 WHERE id = 2;
DROP TABLE Mutated;
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS Mutated (id INT AUTO_INCREMENT PRIMARY KEY, price DECIMAL(10,2) UNIQUE);
UPDATE Mutated SET price = 80 WHERE id = 2;
UPDATE Mutated SET price = 10 WHERE id = 2;
UPDATE Mutated SET price = 20 WHERE id = 2;
SELECT price FROM Mutated;
DROP TABLE Mutated;
DROP DATABASE sampleDB;
-- Please create some example programs in SQL and explain what each program is doing and why. 
# What is the result of the following SQL program?
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO Mutated (id, price) VALUES ('1', 99.30);
INSERT INTO Mutated (id, price) VALUES ('4', 35.90);
INSERT INTO Mutated (id, price) VALUES ('8', 77.30);
INSERT INTO Mutated (id, price) VALUES ('12', 67.39);
SELECT price FROM Mutated WHERE price > 60;
# What is the result of the following SQL program?
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO Mutated (id, price) VALUES ('1', 99);
INSERT INTO Mutated (id, price) VALUES ('6', 35.80);
INSERT INTO Mutated (id, price) VALUES ('8', 77.70);
UPDATE Mutated SET price = price * 1.3 WHERE price < 75.00 AND price > 65.00 AND price % 2 = 0;
SELECT price FROM Mutated WHERE price > 60;
DROP TABLE Mutated;
DROP DATABASE sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
ALTER TABLE Mutated MODIFY price DOUBLE;
ALTER TABLE Mutated ADD new_price DOUBLE AFTER price;
SELECT new_price FROM Mutated;
UPDATE Mutated SET new_price = new_price+1 WHERE id = 2;
ALTER TABLE Mutated DROP COLUMN new_price;
DROP DATABASE sampleDB;

</pre>
</body>
</html>
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS Mutated (id INT AUTO_INCREMENT CONSTRAINT ID UNIQUE PRIMARY KEY, price DECIMAL(10,2) UNIQUE);
UPDATE Mutated SET price = 80 WHERE id = 2;
SELECT price FROM Mutated;
UPDATE Mutated SET price = 10 WHERE id = 2;
SELECT price FROM Mutated;
DROP TABLE Mutated;
DROP DATABASE sampleDB;

\# How can these be combined to one?
CREATE TABLE IF NOT EXISTS Mutated (id INT AUTO_INCREMENT CONSTRAINT ID UNIQUE PRIMARY KEY, price DECIMAL(10,2) UNIQUE, brand_name VARCHAR(32));
UPDATE Mutated SET price = 80 WHERE id = 2;
UPDATE Mutated SET brand_name = 'Ford' WHERE id = 2;
SELECT price, brand_name FROM Mutated;
UPDATE Mutated SET price = 10 WHERE id = 2;
SELECT price, brand_name FROM Mutated;
DROP TABLE Mutated;
DROP DATABASE sampleDB;

\# What is this syntax for?
CREATE TABLE IF NOT EXISTS Mutated (id INT AUTO_INCREMENT CONSTRAINT ID UNIQUE PRIMARY KEY, price DECIMAL(10,2) UNIQUE, brand_name VARCHAR(32));
UPDATE Mutated SET price = 80 WHERE id = 2;
UPDATE Mutated SET brand_name = 'Ford' WHERE id_ = 2;
SELECT price, brand_name FROM Mutated;
UPDATE Mutated SET price = 10 WHERE id = 2;
SELECT price, brand_name FROM Mutated;
DROP TABLE Mutated;
DROP DATABASE sampleDB;
-- Thanks to <NAME> for the detailed examples.

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS Mutated (id INT AUTO_INCREMENT PRIMARY KEY, price DECIMAL(10,2) UNIQUE);
SELECT price FROM Mutated WHERE id = 2;
UPDATE Mutated SET price = 80 WHERE id = 2;
UPDATE Mutated SET price = 10 WHERE id = 2;
DROP TABLE Mutated;
DROP DATABASE sampleDB;
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS Mutated (id INT AUTO_INCREMENT PRIMARY KEY, price DECIMAL(10,2) UNIQUE);
SELECT price from mutated where id = 2;
UPDATE mutated set price = 80 where id = 2;
UPDATE mutated set price = 10 where id = 2;
DROP TABLE Mutated;
DROP DATABASE sampleDB;
 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS Mutated (id INT AUTO_INCREMENT PRIMARY KEY, price DECIMAL(10,2) UNIQUE);
SELECT price from mutated where id = 2;
UPDATE mutated set price = 80 where id = 2;
UPDATE mutated set price = 10 where id = 2;
DROP TABLE Mutated;
DROP DATABASE sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS Mutated (id INT AUTO_INCREMENT PRIMARY KEY, price DECIMAL(10,2) UNIQUE, quantity INT);
SELECT price, quantity FROM Mutated WHERE id = 2;
UPDATE Mutated SET price = 80 WHERE id = 2;
UPDATE Mutated SET price = 10, quantity = 20 WHERE id = 2;
UPDATE Mutated SET price = 15 WHERE id = 2;
DROP TABLE Mutated;
DROP DATABASE sampleDB;
-----------------------------------------------

# Telco Customer Reviews
-- https: 
 
DROP DATABASE IF EXISTS CovidConfirmed;
CREATE DATABASE CovidConfirmed;
-- Connecting using MySQL Workbench
-- 1.

# 2.
--

# Data for 2010
-- Load the data into the database
SET NAMES utf8mb4;
DROP TABLE IF EXISTS tb_customer_data;
SELECT * INTO tb_customer_data FROM
(
    SELECT CustomerID,
    CONCAT_WS(' ', Name, Surname) AS FullName,
    CAST(Day.DATE_FORMAT AS DATETIME) AS Dated,
    CAST(Day.DATE_FORMAT AS DATE) AS Date,
    CAST(Day.DATE_FORMAT AS TIME) AS Time,
    CAST(Day.DATE_FORMAT AS DATETIME) AS Datetime,
    CAST(Day.DATE_FORMAT AS TIME) AS Time_format,
    CAST(Day.DATE_FORMAT AS DATETIME) AS Date_format,
    CAST(Day.DATE_FORMAT AS TIME) AS Time_format,
    SUM(TotalCharges) / COUNT(*) AS AvgCharges
    FROM (
        SELECT CAST('2010-07-04' AS DATETIME) AS DATE_FORMAT,
        CAST('7:00 PM' AS TIME) AS TIME_FORMAT
        UNION ALL
        SELECT CAST('2010-07-04' AS DATETIME) AS DATE_FORMAT,
        CAST('7:15 PM' AS TIME) AS TIME_FORMAT
        UNION ALL
        SELECT CAST('2010-07-04' AS DATETIME) AS DATE_FORMAT,
        CAST('7:30 PM' AS TIME) AS TIME_FORMAT
        UNION
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP DATABASE sampleDB;
DROP TABLE Mutated;
DROP DATABASE sampleDB;
```
I had another problem, the database kept stopping accepting queries even though I added more RAM and changed the limits, but at the end the server couldn't start (error 23). Finally I found out that I had to create a log database and disable it completely, as my server is still running but the log database is gone, so I deleted it and it is okay now, no problem.

A nice way to perform operations is to execute a script at server startup and then change the database at a later time to perform the same tasks as if it used only a single database.
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS Mutated (id INT AUTO_INCREMENT PRIMARY KEY, price DECIMAL(10,2) UNIQUE);
SELECT price FROM Mutated WHERE id = 2;
DROP TABLE Mutated USING sampleDB;
DROP DATABASE sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SELECT price FROM Mutated WHERE id = 2 AND price <= 80;
UPDATE Mutated SET price = price + 2 WHERE id = 2 AND price <= 80;
UPDATE Mutated SET price = 10 WHERE id = 2 AND price <= 80;
DROP TABLE Mutated;
DROP DATABASE sampleDB;

CREATE DATABASE "sampleDB";
USE sampleDB;
SELECT price FROM Mutated WHERE id = 2 AND price <= 80;
UPDATE Mutated SET price = price + 2 WHERE id = 2 AND price <= 80;
UPDATE Mutated SET price = 10 WHERE id = 2 AND price <= 80;
DROP TABLE Mutated;
DROP DATABASE sampleDB;

--- MySQL
mysql> ALTER DATABASE `sampleDB`
mysql> UPDATE Mutated SET price = price + 2 WHERE id = 2 AND price <= 80;
mysql> UPDATE Mutated SET price = 10 WHERE id = 2 AND price <= 80;
mysql> DROP TABLE Mutated;
mysql>
```
MySQL is a simple web application server, which may be used to store data and run queries. MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS Mutated (id INT AUTO_INCREMENT PRIMARY KEY, price DECIMAL(10,2) UNIQUE);
SELECT price FROM Mutated WHERE id = 2;
UPDATE Mutated SET price = 80 WHERE id = 2;
UPDATE Mutated SET price = 10 WHERE id = 2;
DROP TABLE Mutated;
DROP DATABASE sampleDB;
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
create table mytbl(id int primary key auto_incr, sname varchar(20), ssn int);
insert into mytbl(id, sname, ssn) values(1,'Tamra', 1111);
insert into mytbl(id, sname, ssn) values(2,'Suriyasi', 121234);
SELECT * FROM mytbl;
drop table mytbl;
DROP DATABASE sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SELECT price FROM Mutated WHERE id = 2;
UPDATE Mutated SET price = 80 WHERE id = 2;
UPDATE Mutated SET price = price + price WHERE id = 2;
UPDATE Mutated SET price = price + (price*3) WHERE id = 2;
UPDATE Mutated SET price = price * 2 WHERE id = 2;
DROP TABLE Mutated;
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS Mutated;
CREATE TABLE Mutated (id INT AUTO_INCREMENT PRIMARY KEY, price DECIMAL(10,2) UNIQUE);
SELECT price FROM Mutated WHERE id = 2;
UPDATE Mutated SET price = 80 WHERE id = 2;
UPDATE Mutated SET price = price - 2 WHERE id = 2;
UPDATE Mutated SET price = price - 2 WHERE id = 2 AND id = 2;
DROP TABLE Mutated;
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

CREATE ALIAS IF NOT EXISTS Mutated AS Mutated;
SELECT price FROM Mutated AS Mutated WHERE id = 2;
UPDATE Mutated AS Mutated SET price = 80 WHERE id = 2;
UPDATE Mutated AS Mutated SET price = 10 WHERE id = 2;
DROP TABLE Mutated;
DROP DATABASE sampleDB;
SELECT price FROM Mutated AS Mutated WHERE id = 2;
UPDATE Mutated AS Mutated SET price = 80 WHERE id = 2;
UPDATE Mutated AS Mutated SET price = 10 WHERE id = 2;
DROP TABLE Mutated;
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS Mutated (id INT AUTO_INCREMENT PRIMARY KEY, productName VARCHAR(50), category VARCHAR(50));
SELECT price FROM Mutated WHERE id = 3;
UPDATE Mutated SET productName = "Baby Wings", category = "Hobbies" WHERE id = 3;
UPDATE Mutated SET price = 50 WHERE id = 3;
UPDATE Mutated SET price = 60 WHERE id = 3;
SELECT * FROM Mutated;
DROP TABLE Mutated;
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS Mutated;
CREATE TABLE Mutated (id INT AUTO_INCREMENT PRIMARY KEY, price DECIMAL(10,2) UNIQUE);
SELECT price FROM Mutated WHERE id = 2;
UPDATE Mutated SET price = 80 WHERE id = 2;
UPDATE Mutated SET price = price - 2 WHERE id = 2;
UPDATE Mutated SET price = price - 2 WHERE id = 2 AND id = 2;
DROP TABLE Mutated;
DROP DATABASE sampleDB;
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS Mutated;
CREATE TABLE Mutated (id INT AUTO_INCREMENT PRIMAIY KEY, price DECIMAL(10,2) UNIQUE);
UPDATE Mutated SET price_changed = (price + 2);
UPDATE Mutated SET price_changed = price_changed + 1 WHERE id = 2;
UPDATE Mutated SET price_changed = price_changed + 1 WHERE id = 2 AND id = 2;
UPDATE Mutated SET price_changed = price_changed - 1 WHERE id = 2;
UPDATE Mutated SET price_changed = price_changed - price WHERE id = 2;
UPDATE Mutated SET price_changed = price_changed - price WHERE id = 2 AND id = 2;
UPDATE Mutated SET price_changed = price_changed + (price_changed + price) WHERE id = 2;
DROP TABLE Mutated;
DROP DATABASE sampleDB;











-- http: 

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SET @myid=1;
INSERT INTO Mutated VALUES(@myid,-2 @myid, 2,4,@myid);
SELECT price FROM Mutated WHERE id = 2;
SELECT price FROM Mutated WHERE id = -2;
SELECT price FROM Mutated WHERE id = 2 AND id = -2;
DROP TABLE Mutated;
SELECT price FROM Mutated WHERE price < 50.12345678;
DROP TABLE Mutated;
DROP DATABASE sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS Mutated;
CREATE TABLE Mutated (id INT AUTO_INCREMENT PRIMARY KEY, price DECIMAL(10,2) UNIQUE);
UPDATE Mutated SET price = 80 WHERE price = 80; -- This condition should be false
UPDATE Mutated SET price = price - 2 WHERE price = price - 2; -- This condition should be true
UPDATE Mutated SET price = price - 2 WHERE price = 90 AND price = 30; -- This condition should be true
UPDATE Mutated SET price = price - 2 WHERE price = 48 AND price = 48 AND price = 48;
DROP TABLE Mutated;
DROP DATABASE sampleDB;
-- Please create a program with the same code as the one for your task so that the execution can be verified.
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS Mutated;
CREATE TABLE Mutated (id INT AUTO_INCREMENT PRIMARY KEY, price DECIMAL(10,2) UNIQUE);
SELECT price FROM Mutated WHERE price = 80;
UPDATE Mutated SET price = 80 WHERE price = 80;
UPDATE Mutated SET price = price - 2 WHERE price = price - 2;
UPDATE Mutated SET price = price - 2 WHERE price = 90 AND price = 30;
UPDATE Mutated SET price = price - 2 WHERE price = 48 AND price = 48 AND price = 48;
SELECT price FROM Mutated WHERE price = 90;
DROP TABLE Mutated;
DROP DATABASE sampleDB;

*/

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
 
DROP TABLE IF EXISTS Mutated;
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS Mutated;
CREATE TABLE Mutated (id INT AUTO_INCREMENT PRIMARY KEY, price DECIMAL(10,2) UNIQUE);
SELECT price FROM Mutated WHERE id = 2;
UPDATE Mutated SET price = 80 WHERE id = 2;
UPDATE Mutated SET price = price - 2 WHERE id = 2;
UPDATE Mutated SET price = price - 2 WHERE id = 2 AND id = 2;
DROP TABLE Mutated;
DROP DATABASE sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS Mutated;
DROP DATABASE sampleDB;
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

DROP TABLE IF EXISTS Mutated; INSERT INTO Mutated VALUES (23),(24),(25),(26),(27),(27),(27),(27),(27),(28), (29),(30),(31),(32),(33),(34),(35),(36),(37),(38),(39),(40);
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE MutationTest(
  id int,
  name varchar(40),
  grade varchar(100),
  password varchar(100)
);
INSERT INTO MutationTest (id,name,grade,password)
  VALUES (10,"test2","B","test"),
         (20,"test3","C","test"),
         (30,"test4","B","test");
--- In the previous program we have deleted all the data from the sample table and created no new data. This is called Data Wipe. It has multiple use-cases like:
1. Clearing the table data if needed.
2. Clearing the database or completely removing the sample table.
3. Resetting the entire sample table data.
4. Creating a sample table just like the previous generation if the data has been created.
5. Populating an entire database with sample data.
6. Performing a DDL operation on any of the existing tables in the database.
If we use the previous approach for the demo, and we have no data in Mutated table, then 
we have performed no data wipe.

Now we have to create a new table for mutating the last table. Mutated table will have all the data from before.
CREATE TABLE Mutated(
    id int,
    name varchar(40),
    grade varchar(100),
    password varchar(100)
);
INSERT INTO Mutated (id,name,grade,password)
  VALUES (10,"test4","C","test"),
         (20,"test2","B","test"),
         (30,"test1","B","test");

In this program we added two rows, named ID 30 and 20. After running the program, we can see the data in Mutated table. We have mutated the data in Mutated table
And now we have to drop the Mutated table.
DROP TABLE Mutated;
--- In this program, to perform this task, we have dropped entire last table Mutated. This was done for demo and to perform an example for this program we have used Mutated table.
Now we have to perform drop-table from before program in this case.

DROP TABLEsampleDB;

You are free to use MySQL but you have to comply with the license.

Please submit your completed program in a proper format in our online judge.

#Note

You are given 30 seconds to read the question, 10 for question solution but do take note that the problem statement is very difficult and you can get a little frustrated even before trying.


[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS mutated;
CREATE TABLE Mutated (a INT, b INT);
INSERT IGNORE INTO Mutated VALUES (1, 2);
CREATE TABLE IF NOT EXISTS Test(a INT, b INT);
INSERT ignore INTO Test VALUES (1, 2);
ALTER TABLE Mutated ADD UNIQUE INDEX IF NOT EXISTS my_index(a, b);
SELECT a FROM Mutated WHERE b<2;       
 
SELECT a FROM Mutated WHERE b<2 LIMIT 1;   
 
SELECT b, a FROM Mutated GROUP BY a, b ORDER BY b DESC, a;
SELECT b, a FROM Mutated WHERE a=2 ORDER BY b DESC LIMIT 1;   
 

DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
UPDATE Mutated SET MutatedName = 'Mutated Column';

-- Please create a program which inserts, queries, updates and deletes records in the tables Mutated, Mutated_with_SQL

-- Please create a program that inserts, selects, updates and deletes data in the Mutated table. Your user should be able to add, remove, edit and update
-- the names of the table and all columns. A user must be able to search for records in the table. The user should be able to add, edit, remove and query in all
-- the columns the existing records in the table have. A user must be able to create a new column and then add the column, modify and remove it while
-- modifying the existing records.

<!-- DDL commands please do not remove or change comment, we just need to have the code. It took all my time making --><fim_middle>-- table. Please note that this code was done without using any ORM

-- Please create a program which can insert multiple files with different columns.
-- As the user can upload more than one file per upload, display the file names and count them. There must be a way to display file size and MIME type of the selected files. There must also be a user that can select all the files present in a directory (directory of all the *.php files must be accessible to the user) or all the php files in a specific directory. A user should be able to drag and drop files in the window or through right click on a selection to rename them. The user should be able to display the names of the files in the dropdown menu. 
-- As a result, a user should be able to upload a single file through a drop down to view file name, size, and extension.
-- For users to select a file to upload, they need to know their selected directory.
</code></pre>

<p>You can find a complete example of code in our <a href='http://www.tutorialspoint.com/mysql/' target="_blank">Tutorialspoint MySQL Tutorial</a>.
<a href='http://www.tutorialspoint.com/mysql/mysql_insert_insert.htm' target="_blank">Tutorialspoint MySQL Tutorial</a>
</p>

</body>
</html>
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS Mutated;
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS Mutated;
DROP DATABASE sampleDB;
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Mutated 
(
  ID INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
  FirstName VARCHAR(15) NOT NULL,
  LastName VARCHAR(10) NOT NULL,
  Email VARCHAR(200) NOT NULL UNIQUE
);
INSERT INTO Mutated
VALUES(1, 'Mary', 'Jane', '<EMAIL>'),
(2, 'John', 'Smith', '<EMAIL>'),
(3, 'James', 'Doe', '<EMAIL>'),
(4, 'Frank', 'Gordon', '<EMAIL>'),
(5, 'John', 'Doe', '<EMAIL>'),
(6, 'Jane', 'Doe', '<EMAIL>'),
(1000, 'John', 'Doe', '<EMAIL>');
 
 
DROP DATABASE sampleDB; 
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO Mutated (a,b,c,d) VALUES (1,2,3,4); COMMIT;
DROP DATABASE sampleDB;

--
-- MySQL dump 10.13  Distrib 5.7.29, for Linux (x86_64)
--
-- Host: localhost    Database: queryGenerator
-- ------------------------------------------------------
-- Server version	5.7.22-0ubuntu0.18.04.1

 ;
 ;
 ;
 ;
 ;
 ;
 ;
 ;
 ;
 ;

--
-- Table structure for table `Mutated`
--

DROP TABLE IF EXISTS `Mutated`;
 ;
 ;
CREATE TABLE `Mutated` (
  `a` int(11) NOT NULL,
  `b` int(11) NOT NULL,
  `c` int(11) NOT NULL,
  `d` int(11) NOT NULL,
  KEY `a` (`a`),
  KEY `b` (`b`),
  KEY `c` (`c`),
  KEY `d` (`d`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
 ;

--
-- Dumping data for table `Mutated`
--

LOCK TABLES `Mutated` WRITE;
 ;
INSERT INTO `Mutated` VALUES (1,1,2,3),(2,10,34,5),(3,10,-1,-1
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
 

CREATE TABLE IF NOT EXISTS Mutated (
    Field_1 INT NOT NULL,
    Mutated_Field SET('a','b'),
    FIELD_3 INT DEFAULT NULL,
    Field_4 TINYINT DEFAULT 0,
    PRIMARY KEY (Field_1)
);


CREATE TABLE IF NOT EXISTS Mutated2 (
    Field_2 INT NOT NULL,
    Mutated_Field SET('c'),
    Field_4 INT DEFAULT NULL,
    Field_3 TINYINT DEFAULT 0,
    PRIMARY KEY (Field_2)
);

INSERT INTO Mutated
    SELECT 1,
    ('a','b',3),
    NULL,
    0
FROM Mutated2;

 
SELECT *
FROM Mutated
    JOIN Mutated2
  ON Mutated.FIELD_2 = Mutated2.Field_2
WHERE Mutated2.MUTATED_FIELD HAS (
    'a', 'b'
);

INSERT INTO Mutated
   (Field_2)
  VALUES
  (1);

SHOW PROCESSLIST;

CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
 

CREATE TABLE IF NOT EXISTS Mutated (
    Field_1 INT NOT NULL,
    Mutated_Field SET('a','b'),
    FIELD_3 INT DEFAULT NULL,
    FIELD_4 TINYINT DEFAULT 0,
    PRIMARY KEY (Field_1)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

CREATE TABLE IF NOT EXISTS Mutated2 (
    Field_2 INT NOT NULL,
    Mutated_Field SET('c'),
    Field_4 INT DEFAULT NULL,
    Field_3 TINYINT DEFAULT 0,
    PRIMARY KEY (Field_2)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

INSERT INTO Mutated
    SELECT 1,
    ('a','b',3),
    NULL,
    0
FROM Mutated2;

UPDATE Mutated
   SET Mutated_Field = (Select Mutated_Field FROM Mutated2 WHERE Field_1 = 1)
WHERE Field_2 = 4;

SHOW PROCESSLIST;

--
/* Please create a semantically equivalent program to the previous generation. You need to use
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS Mutated;
DROP DATABASE sampleDB;

-- Here is a sample SELECT statement. Since we want to make the output very human
-- We first need to convert the binary value into text
mysql> SELECT BINARY "mutated" FROM Mutated;
+-------------------+
| mutated           |
+-------------------+
| 7FB6E991D0983177 |
+-------------------+
1 row in set (0.00 sec)
-- Let's take a closer look
mysql> SELECT BINARY "mutated" FROM Mutated;
+-------------------+
| mutated           |
+-------------------+
| 7FB6E991D0983177 |
+-------------------+
1 row in set (0.00 sec, 1.36 sec in loop)
mysql> SELECT mutated FROM Mutated;
+--------------------+
| mutated            |
+--------------------+
| 7FB6E991D0983177 |
+--------------------+
1 row in set (0.00 sec)
-- You can compare a column as well using =. Take a look at a real-life application
-- If you need to see rows only, add LIMIT N to the end of your query or use the OFFSET N. Here is a sample query
mysql> SELECT BINARY "mutated" FROM Mutated LIMIT 2;
+-------------------+
| mutated           |
+-------------------+
| 7FB6E991D0983177 |
+-------------------+
1 row in set (0.00 sec)
mysql> SELECT BINARY "mutated" FROM Mutated LIMIT 2 OFFSET 2;
+----------------------+
| mutated              |
+----------------------+
| F006825DCC6D0393 |
+----------------------+
1 row in set (0.00 sec)
mysql> SELECT BINARY "mutated" FROM Mutated UNION ALL
-- Another way to do the same query is to use the WHERE condition. Here is a sample query
mysql> SELECT BINARY "mutated" FROM Mutated WHERE "mutated" NOT IN (SELECT BINARY "mutated" FROM Mutated LIMIT 3);
+-------------------+
| mutated           |
+-------------------+
| 5A0CF130293D2237 |
+-------------------+
1 row in set (0.00 sec)
mysql> SELECT BINARY "mutated" FROM Mutated WHERE "mutated" IN (SELECT BINARY "mutated" FROM Mutated LIMIT 2) AND "name" = "<NAME>";
+-------------------+
| mutated           |
+-------------------+
| 7FB6E991D0983177
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS Mutated;
DROP TABLE IF EXISTS MutatedId;
DROP TABLE IF EXISTS MutatedText;
DROP TABLE IF EXISTS MutatedEnum;
DROP TABLE IF EXISTS MutatedTextEnum2;
DROP TABLE IF EXISTS MutatedIntEnum;
DROP TABLE IF EXISTS MutatedIntEnum2;
DROP TABLE IF EXISTS MutatedBit;
DROP TABLE IF EXISTS MutatedDateTime;
DROP TABLE IF EXISTS MutatedTimestamp;
DROP TABLE IF EXISTS MutatedYear;
DROP TABLE IF EXISTS MutatedBinary;
DROP TABLE IF EXISTS MutatedBlob;
DROP TABLE IF EXISTS MutatedSet;
DROP TABLE IF EXISTS MutatedJson;
DROP TABLE IF EXISTS MutatedClob;
DROP TABLE IF EXISTS MutatedChar;
DROP TABLE IF EXISTS MutatedLongVarChar;
DROP TABLE IF EXISTS MutatedTinyInt;
DROP TABLE IF EXISTS MutatedSmallInt;
DROP TABLE IF EXISTS MutatedInt;
DROP TABLE IF EXISTS MutatedBigInt;
DROP TABLE IF EXISTS MutatedDouble;
DROP TABLE IF EXISTS MutatedDecimal;
DROP TABLE IF EXISTS MutatedMoney;
DROP TABLE IF EXISTS MutatedTinyText;
DROP TABLE IF EXISTS MutatedVarShortText;
DROP TABLE IF EXISTS MutatedLongText;
DROP TABLE IF EXISTS MutatedDate;
DROP TABLE IF EXISTS MutatedTime;
DROP TABLE IF EXISTS MutatedYearDate;
DROP TABLE IF EXISTS MutatedNewTableInt;
DROP TABLE IF EXISTS MutatedNewTableLongText;
DROP TABLE IF EXISTS MutatedNewTableBinary;
DROP TABLE IF EXISTS MutatedNewTableVarBinary;
DROP TABLE IF EXISTS MutatedNewTableString;
DROP TABLE IF EXISTS MutatedNewTableTimestamp;
DROP TABLE IF EXISTS MutatedNewTableDatetime;
DROP TABLE IF EXISTS MutatedNewTableIntEnum;
DROP TABLE IF EXISTS MutatedNewTableBit;
DROP INDEX IF EXISTS MutatedId;
DROP DATABASE sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS Mutated;
DROP DATABASE sampleDB;
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Mutated (
    c1 INT NOT NULL,
    c2 CHAR(10),
    c3 VARCHAR(NAME),
    c4 VARCHAR(30),
    c5 DATE,
    c6 TIMESTAMP
);

INSERT INTO Mutated (c1, c2, c3, c4, c5, c6)
VALUES (1, 'alpha-', '123', 'value', '2012-01-02', '2010-03-07 12:50:53');

ALTER TABLE Mutated ADD PRIMARY KEY (c1);

INSERT INTO Mutated (c1, c2, c3, c4, c5, c6)
VALUES (2, 'bravo-', '876', 'value', '2012-01-03', '2010-03-07 12:50:53');

ALTER TABLE Mutated ADD PRIMARY KEY (c1);

INSERT INTO Mutated (c1, c2, c3, c4, c5, c6)
VALUES (3, 'charlie-', 'x', 'value', '2012-01-04', '2010-03-07 12:50:53');

ALTER TABLE Mutated ADD PRIMARY KEY (c1);

INSERT INTO Mutated (c1, c2, c3, c4, c5, c6)
VALUES (4, 'delta-', '9', 'value3', '2012-01-01', '2010-03-07 12:50:53');

ALTER TABLE Mutated ADD PRIMARY KEY (c1);
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
 
CREATE TABLE Students (
  id INTEGER,
  name varchar(255),
  year INT,
  CONSTRAINT studentID PRIMARY KEY (id)

);

CREATE TABLE StudGroup (
  id INTEGER,
  Name varchar(255),
  year INT,
  CONSTRAINT studentName PRIMARY KEY (id)

);

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS Mutated;
DROP TABLE IF EXISTS StudentsMutated;
DROP TABLE IF EXISTS StudentsMutatedBy;

 


[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Mutated (id INT(20), c INT(5) UNSIGNED, INDEX (id));
CREATE TABLE Mutated (id INT(20), c INT(5) UNSIGNED);
CREATE TABLE Mutated (id INT(20), c INT(5) UNSIGNED);
CREATE TABLE s
a VALUES (1);
INSERT INTO s VALUES (1);
-- Please create your third version, where all mutations are performed by an update instead of deleting them. You should use a SELECT or INSERT statement. The INSERT should be executed only once (per transaction). You can assume that the mutations are complete in the final state, no other rows should be added to the table.
-- The expected result should be the 2 rows inserted.
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Mutated (id INT(20), c INT(5) UNSIGNED);
UPDATE Mutated SET Mutated.c=c+10 WHERE Mutated.id=2;
INSERT INTO Mutated VALUES (1,7);
DROP TABLE Mutated;
DROP DATABASE sampleDB;
<commit_msg>Update tutorial 26<commit_after>---
layout: post-no-feature
title:  "Tutorial 26 - MySQL"
date:   2012-10-24
category: mysql
---

<a href="../../tutorial/tutorial-mysql.html"><i class="glyphicon glyphicon-chevron-left"></i> Tutorial 26 - MySQL</a>

---


[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS Mutated;
DROP TABLE IF EXISTS StudentsMutated;
DROP TABLE IF EXISTS StudentsMutatedBy;
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

CREATE TABLE IF NOT EXISTS Mutated (
	"ID" INT UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,
	"Name" VARCHAR(100),
	"Age" INT
);

CREATE TABLE IF NOT EXISTS StudentsMutated (
	"ID" INT UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,
	"Name" VARCHAR(100),
	"Age" INT,
	"Mutated" VARCHAR(100)
);

CREATE TABLE IF NOT EXISTS StudentsMutatedBy (
	"ID" INT UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,
	"Name" VARCHAR(100),
	"Age" INT,
	"Mutated" VARCHAR(100),
	"MutatedBy" VARCHAR(100)
);

 
SELECT * FROM MUTATED;

 

-- You will need to include the "mysql.h" header.
INSERT INTO StudentsMutated (Name,Age) VALUES ('Jacob',50);
INSERT INTO StudentsMutatedBy (Name,Age,Mutated) VALUES ('John',80,'Newly mutated to Karen');
UPDATE Mutated SET MutatedBy='Karen' WHERE "Name" = 'Jacob';

--- SELECT MUTED BY --
SELECT * FROM StudentsMutatedBy;

-- You might use this for this task also. Do NOT use other query in the UPDATE stmt.
UPDATE S.StudentsMutatedBy 
SET 
	S.StudentsMutatedBy.Mutated="'Taylor'" 
	WHERE 
	S.StudentsMutatedBy.MutatedBy='<NAME>';

-- You might use this for this task also. Do NOT use other query in the UPDATE stmt.
DELETE 
FROM S.StudentsMutatedBy 
WHERE 
	S.StudentsMutatedBy.Mutated<>'Newly mutated to Karen'
AND 
	S.StudentsMutatedBy.MutatedBy='%';

-- You might use this for this task also. Do NOT use other query in the UPDATE stmt.
UPDATE Mutated
SET MutatedBy=(SELECT * FROM StudentsMutatedBy WHERE Mutated = MutatedBy LIMIT 1)
WHERE Mutated = 'Jacob';
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS Mutated;
DROP TABLE IF EXISTS StudentsMutated;
DROP TABLE IF EXISTS StudentsMutatedBy;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS Mutated;
DROP TABLE IF EXISTS StudentsMutated;
DROP TABLE IF EXISTS StudentsMutatedBy;
 
CREATE TABLE Mutated (
id int(10) NOT NULL,
first varchar(20) NOT NULL,
last varchar(20) NOT NULL,
name varchar(50) NOT NULL,
age int(3) NOT NULL
) ENGINE=InnoDB;
INSERT INTO Mutated(id, first, last, name, age) VALUES 
(1, 'Hilda', 'Kennedy', 'Hilda', 16),
(2, 'Laura', 'Marshal', 'Laura', 14),
(3, 'John', 'Hendricks', 'John', 20);
-- Create the mutated2 table where all information for all students will have a mutation of the mutated data.
CREATE TABLE Mutated2 (
id int(10) NOT NULL,
first varchar(20) NOT NULL,
last varchar(20) NOT NULL,
name varchar(50) NOT NULL,
age int(3) NOT NULL
) ENGINE=InnoDB;
INSERT INTO Mutated2(id, first, last, name, age) SELECT id, first, last, name, age FROM `Mutated`;
 
ALTER TABLE Mutated2 ADD CONSTRAINT fk_Student_Mutated FOREIGN KEY (id) REFERENCES Mutated(id) ON DELETE CASCADE;
 
ALTER TABLE Mutated ADD CONSTRAINT FK_Student_Mutated2 FOREIGN KEY (id) REFERENCES Mutated2(id) ON DELETE CASCADE;
-- Perform operations on the mutated data.
select * from Mutated2 JOIN Mutated USING (first);
DROP DATABASE sampleDB;
exit;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- You must create the mutated table by dropping the old table
DROP TABLE IF EXISTS Mutated;

CREATE TABLE Mutated (Name TEXT, Email TEXT, Instructor BIT(1));
-- This is the main table that is involved in the mutated process
CREATE TABLE StudentsMutated (ID INT, Name TEXT, Email TEXT, College TEXT);
-- This table is created as instructed, you must be sure to drop it
DROP TABLE IF EXISTS StudentsMutatedBy;

CREATE TABLE StudentsMutatedBy (ID INT, Name TEXT, Email TEXT, College TEXT);

INSERT INTO Mutated VALUES ('<NAME>', '<EMAIL>', '0');
INSERT INTO Mutated VALUES ('<NAME>', '<EMAIL>', '0');

INSERT INTO StudentsMutated VALUES (1, '<NAME>', '<EMAIL>', 'Saint-Louis Polytechnic Institute');
INSERT INTO StudentsMutated VALUES (2, '<NAME>', '<EMAIL>', 'Saint-Louis Polytechnic Institute');
INSERT INTO StudentsMutated VALUES (3, '<NAME>', '<EMAIL>', 'Saint-Louis Polytechnic Institute');

INSERT INTO StudentsMutatedBy VALUES (1, '<NAME>', '<EMAIL>', 'Saint-Louis Polytechnic Institute');
INSERT INTO StudentsMutatedBy VALUES (2, '<NAME>', '<EMAIL>', 'Saint-Louis Polytechnic Institute');
INSERT INTO StudentsMutatedBy VALUES (3, '<NAME>', '<EMAIL>', 'Saint-Louis Polytechnic Institute');

SELECT * FROM StudentsMutatedBy;
-- This is the mutated table
 SELECT * FROM StudentsMutated;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

DROP TABLE IF EXISTS Mutated;
DROP TABLE IF EXISTS StudentsMutated;
DROP TABLE IF EXISTS StudentsMutatedBy;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- You must create the mutated table by dropping the old table
DROP TABLE IF EXISTS Mutated;
CREATE TABLE Mutated (Name TEXT, Email TEXT, Instructor BIT(1));
-- This is the main table that is involved in the mutated process
CREATE TABLE StudentsMutated (ID INT, Name TEXT, Email TEXT, College TEXT);
-- This table is created as instructed, you must be sure to drop it
DROP TABLE IF EXISTS StudentsMutatedBy;
CREATE TABLE StudentsMutatedBy (ID INT, Name TEXT, Email TEXT, College TEXT);
INSERT INTO Mutated VALUES ('<NAME>', '<EMAIL>', '0');
INSERT INTO Mutated VALUES ('<NAME>', '<EMAIL>', '0');
INSERT INTO StudentsMutated VALUES (1, '<NAME>', '<EMAIL>', 'Saint-Louis Polytechnic Institute');
INSERT INTO StudentsMutated VALUES (2, '<NAME>', '<EMAIL>', 'Saint-Louis Polytechnic Institute');
INSERT INTO StudentsMutated VALUES (3, '<NAME>', '<EMAIL>', 'Saint-Louis Polytechnic Institute');
INSERT INTO StudentsMutatedBy VALUES (1, '<NAME>', '<EMAIL>', 'Saint-Louis Polytechnic Institute');
INSERT INTO StudentsMutatedBy VALUES (2, '<NAME>', '<EMAIL>', 'Saint-Louis Polytechnic Institute');
INSERT INTO StudentsMutatedBy VALUES (3, '<NAME>', '<EMAIL>', 'Saint-Louis Polytechnic Institute');
SELECT * FROM StudentsMutatedBy;
-- This is the mutated table
 SELECT * FROM StudentsMutated;
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- Please write a program to drop all sampleDB tables
USE sampleDB;
DROP TABLE IF EXISTS StudentsMutatedBY;
DROP TABLE IF EXISTS Mutated;
DROP TABLE IF EXISTS StudentsMutated;
DROP DATABASE sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- You must create the main table by dropping the old table, drop the temporary table,
-- and insert rows from mutated table in the new table.
DROP TABLE IF EXISTS Mutated;
DROP TABLE IF EXISTS StudentsMutated;
DROP TABLE IF EXISTS StudentsMutatedBy;
CREATE TABLE Mutated (Name TEXT, Email TEXT, Instructor BIT(1));
INSERT INTO Mutated VALUES ('<NAME>', '<EMAIL>', '0');
INSERT INTO Mutated VALUES ('<NAME>', '<EMAIL>', '0');
INSERT INTO StudentsMutated VALUES (1, '<NAME>', '<EMAIL>', 'Saint-Louis Polytechnic Institute');
INSERT INTO StudentsMutated VALUES (2, '<NAME>', '<EMAIL>', 'Saint-Louis Polytechnic Institute');
INSERT INTO StudentsMutated VALUES (3, '<NAME>', '<EMAIL>', 'Saint-Louis Polytechnic Institute');
INSERT INTO StudentsMutatedBy VALUES (1, '<NAME>', '<EMAIL>', 'Saint-Louis Polytechnic Institute');
INSERT INTO StudentsMutatedBy VALUES (2, '<NAME>', '<EMAIL>', 'Saint-
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- You must create the semantic equivalent by dropping the old table
DROP TABLE IF EXISTS Students;
CREATE TABLE Students (ID INT NOT NULL UNIQUE, Name TEXT, Email TEXT, College TEXT(30));
INSERT INTO Students VALUES (1, '<NAME>', '<EMAIL>', 'Saint-Louis Polytechnic Institute');
INSERT INTO Students VALUES (2, '<NAME>', '<EMAIL>', 'Saint-Louis Polytechnic Institute');
INSERT INTO Students VALUES (3, '<NAME>', '<EMAIL>', 'Saint-Louis Polytechnic Institute');

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- First create the student table as it is intended
DROP TABLE IF EXISTS Students;
CREATE TABLE Students (ID NUMERIC, NAME TEXT, COLLEGE TEXT);
INSERT INTO Students VALUES (1,'<NAME>','Saint-Louis Polytechnic Institute');
INSERT INTO Students VALUES (2,'<NAME>','Saint-Louis Polytechnic Institute');
INSERT INTO Students VALUES (3,'<NAME>','Saint-Louis Polytechnic Institute');
-- Then we will create the mutated table
DROP TABLE IF EXISTS Mutated;
CREATE TABLE Mutated (IDINT NUMERIC, Student INT, Mutated INT);
-- now add data. Mutated Int is defined as 0 (false) or 1 (true)
INSERT INTO Mutated VALUES (1,1,0);
INSERT INTO Mutated VALUES (2,2,1);
INSERT INTO Mutated VALUES (3,3,0);
-- The mutated Int should only hold 1 (only 1 mutated value in the student table can be active)
SELECT COUNT(*) FROM Mutated;
DROP TABLE IF EXISTS StudentsMutated;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- You need to create the mutated table by dropping the old table
DROP TABLE IF EXISTS Mutated;
CREATE TABLE Mutated (Name TEXT);
INSERT INTO Mutated VALUES ('<NAME>');
INSERT INTO Mutated VALUES ('<NAME>');
INSERT INTO Mutated VALUES ('Aust<NAME>');
SELECT * FROM Mutated; 
-- This is the main table that is involved in the mutated process
CREATE TABLE StudentsMutated (ID INT, Name TEXT); 
-- This table is created as instructed, you must be sure to drop it
DROP TABLE IF EXISTS StudentsMutatedBy;
CREATE TABLE StudentsMutatedBy (ID INT, Name TEXT);
INSERT INTO Mutated VALUES ('<NAME>');
INSERT INTO Mutated VALUES ('<NAME>');
INSERT INTO Mutated VALUES ('<NAME>');
INSERT INTO Mutated VALUES ('<NAME>');
INSERT INTO Mutated VALUES ('<NAME>');
INSERT INTO Mutated VALUES ('<NAME>');
INSERT INTO Mutated VALUES ('<NAME>');
SELECT * FROM MutatedBy;
-- This is the mutated table
 SELECT * FROM Mutated;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- First create the student table as it is intended
DROP TABLE IF EXISTS Students;
CREATE TABLE Students (ID NUMERIC, NAME TEXT, COLLEGE TEXT);
INSERT INTO Students VALUES (1,'<NAME>','Saint-Louis Polytechnic Institute');
INSERT INTO Students VALUES (2,'<NAME>','Saint-Louis Polytechnic Institute');
INSERT INTO Students VALUES (3,'<NAME>','Saint-Louis Polytechnic Institute');
-- Then we will create the mutated table
DROP TABLE IF EXISTS Mutated;
CREATE TABLE Mutated (IDINT NUMERIC, Student INT, Mutated INT);
-- now add data. Mutated Int is defined as 0 (false) or 1 (true)
INSERT INTO Mutated VALUES (1,1,0);
INSERT INTO Mutated VALUES (2,2,1);
INSERT INTO Mutated VALUES (3,3,0);
-- The mutated Int should only hold 1 (only 1 mutated value in the student table can be active)
SELECT COUNT(*) FROM Mutated;
DROP TABLE IF EXISTS StudentsMutated;
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS MutatedV2;
CREATE TABLE MutatedV2 (IDINT INT, Student INT, Mutated INT DEFAULT 0);
INSERT INTO MutatedV2 VALUES (1,1,0);
UPDATE MutatedV2 SET Mutated=1 WHre IDINT IN (2,3);
UPDATE MutatedV2 SET Mutated=1 WHERE MUTATED=0;
-- Please create a query using all data from tables, as long as we keep the mutation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS Mutation;
CREATE TABLE Mutation (ID INT, Student INT, Student_Mutated INT DEFAULT Mutation.Student);
INSERT INTO Mutation VALUES (1,1,1);
INSERT INTO Mutation VALUES (1,2,1);
INSERT INTO Mutation VALUES (2,1,2);
INSERT INTO Mutation VALUES (2,2,2);
SELECT MUTATED, Student, Student_Mutated FROM Mutation;
DROP TABLE IF EXISTS MyMutation;
CREATE TABLE MyMutation (IDINT INT, Student INT DEFAULT Mutation.Student);
INSERT INTO MyMutation VALUES (1,1);
INSERT INTO MyMutation VALUES (2,2);
INSERT INTO MyMutation VALUES (3,3);
UPDATE MyMutation SET Student = Student_Mutated;
UPDATE MyMutation SET Student_Mutated = Student;
SELECT * FROM MyMutation;
DROP TABLE IF EXISTS StudentMutated2;
CREATE TABLE StudentMutated2 (IDINT INT, Student INT, Mutated INT DEFAULT Mutation.Student);
INSERT INTO StudentMutated2 VALUES (1,1,1);
INSERT INTO StudentMutated2 VALUES (2,2,2);

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS MutatedNew;
CREATE TABLE MutatedNew (ID INT, Student INT, Mutated int NOT NULL);
INSERT INTO MutatedNew VALUES (1,1,0);
INSERT INTO MutatedNew VALUES (2,2,1);
INSERT INTO MutatedNew VALUES (3,3,0);
SELECT * FROM MutatedNew INNER JOIN Students ON MutatedNew.Student = Students.ID;
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS Mutated;
-- Please use ENGINE=InnoDB as the new table engine for the second mutation
CREATE TABLE Mutated (IDINT NUMERIC, Student INT, Mutated INT);
CREATE TABLE Students_Mutated (IDINT NUMERIC, Mutated INT);
INSERT INTO Students_Mutated VALUES (1,0);
INSERT INTO Students_Mutated VALUES (2,1);
INSERT INTO Students_Mutated VALUES (3,0);
INSERT INTO Mutated VALUES (1,1,0);
INSERT INTO Mutated VALUES (2,2,1);
INSERT INTO Mutated VALUES (3,3,0);
-- Please remove all indexes from the Students and Mutated tables
DROP INDEX student_mutated_idx;
DROP INDEX student_mutated_idx;
DROP INDEX student_mutated_idx;
---- Please modify the program so that the two new tables Students and Students_Mutated are merged in a single compound index
UPDATE student_mutated SET Student_Mutated = 1 WHERE 1=1;
UPDATE student_mutated SET Student_Mutated = 1 WHERE 1=1;
UPDATE student_mutated SET Student_Mutated = 1 WHERE 1=1;
ALTER TABLE Students_Mutated ADD UNIQUE (Mutated, Student);
UPDATE mutated SET Mutated = 0 WHERE Mutated=0;
-- Please run it, you should get an empty result!
-- Now lets make a new table with unique IDs
CREATE TABLE Students (IDNUM NUMERIC, NAME TEXT);
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IfNotExists (ID INT NOT NULL UNIQUE, name CHAR(50), color CHAR(10), PRIMARY KEY (ID));
CREATE TABLE ifNotExists (ID INT NOT NULL UNIQUE, name CHAR(50), color CHAR(10), PRIMARY KEY (ID));
INSERT INTO IfNotExists VALUES (25,'Mara','Green'),('Mara','Green');
INSERT INTO IfNotExists VALUES (25,'Mara','Green');
SELECT color, COUNT(*) FROM IfNotExists;
-- Drop any table you did not need
DROP TABLE IfExists;
DROP TABLE ifExists;
DROP DATABASE IF EXISTS sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
 

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- First create the student table as it is intended
DROP TABLE IF EXISTS Students;
CREATE TABLE Students (ID NUMERIC, NAME TEXT, COLLEGE TEXT);
INSERT INTO Students VALUES (1,'<NAME>','Saint-Louis Polytechnic Institute');
INSERT INTO Students VALUES (2,'<NAME>','Saint-Louis Polytechnic Institute');
INSERT INTO Students VALUES (3,'<NAME>','Saint-Louis Polytechnic Institute');
-- Then we will create the mutated table
DROP TABLE IF EXISTS Mutated;
CREATE TABLE Mutated (IDINT NUMERIC, Student INT, Mutated INT);
-- now add data. Mutated Int is defined as 0 (false) or 1 (true)
INSERT INTO Mutated VALUES (1,1,0);
INSERT INTO Mutated VALUES (2,2,1);
INSERT INTO Mutated VALUES (3,3,0);
-- The mutated Int should only hold 1 (only 1 mutated value in the student table can be active)
SELECT COUNT(*) FROM Mutated;
DROP TABLE IF EXISTS StudentsMutated;
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE StudentsMutated;
-- Now create the mutated table that holds the data in it
DROP TABLE IF EXISTS Mutated;
CREATE TABLE Mutated (IDINT INT);
-- Then add data
INSERT INTO Mutated VALUES (1);
INSERT INTO Mutated VALUES (2);
INSERT INTO Mutated VALUES (3);
-- Now create the mutated table that holds the data in it and store a reference to the student table
DROP TABLE IF EXISTS StudentsMutated;
CREATE TABLE StudentsMutated (IDINT INT, StudentID INT, Mutated INT);
INSERT INTO StudentsMutated VALUES (2,3,0);
INSERT INTO StudentsMutated VALUES (2,2,1);
INSERT INTO StudentsMutated VALUES (2,3,0);
-- The mutated INT should now hold 1 and StudentID should contain 3
UPDATE StudentsMutated SET Mutated = 1 WHERE StudentID=3;
UPDATE StudentsMutated SET Mutated = 1 WHERE StudentID=3;
-- Drop StudentsMutated table
DROP TABLE IF EXISTS StudentsMutated;

ALTER DATABASE sampleDB ENGINE=INNODB;


select s.NAME, m.Student, m.Mutated from Student i, Mutated m where i.ID=m.Student and i.NAME='Paul';

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS Original;
CREATE TABLE Original (ID INT, Mutated INT, Stam FLOAT);
INSERT INTO Original VALUES (1,0,30.55);
INSERT INTO Original VALUES (2,1,17);
INSERT INTO Original VALUES (3,1,4.5);
-- If the data is read as such, the SQL will try to use that data and do nothing. To make sure the Mutated data is taken into consideration properly, we should also make sure Stam=30.55
SELECT IDINT, Mutated, Stam FROM Original;
-- If we update Original Table
UPDATE Original SET Stam=Stam+5 WHERE ID=2;
-- now we need to make sure Stam=15.5
SELECT IDINT, Mutated, Stam FROM Original;
-- the only modified original value should be ID=3
DROP TABLE IF EXISTS Updated;
CREATE TABLE Updated (ID INT, Mutated INT, Stam FLOAT);
INSERT INTO Updated VALUES (3,0,47.5);
ALTER TABLE Updated MODIFY Stam Stam DECIMAL(2,2);
-- Now the mutated Int should hold 0 (Only 2 of 3 students can be active)
SELECT COUNT(*) FROM Mutated;
-- And now the Stam should be 57.57
SELECT Stam FROM Updated;
ALTER TABLE Original MODIFY ID INT;
DROP TABLE IF EXISTS Updated;
-- UPDATE table Original with column IDINT int AUTO_INCREMENT=4
CREATE TABLE Updated (ID INT, Mutated INT, Stam DECIMAL);
INSERT INTO Updated VALUES (1,0,30.55,
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- First create the mutated table
DROP TABLE IF EXISTS Mutated;
CREATE TABLE Mutated (ID INT, Mutated INT);
-- Now add one value in Mutated INT table
INSERT INTO Mutated VALUES (1,0);
-- Now update the Mutated INT
UPDATE Mutated SET Mutated = 1 WHERE ID = 2;
-- Now check the Mutated Int
SELECT Mutated FROM Mutated WHERE ID = 2;
-- Please use the above query to create a semantically equivalent program to the previous generation using SQL, PHP, Python or JavaScript.
-- You should only use sampleDB as the database name and assume no other table exist. You need to create new tables to perform operations.

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS StudentsMutated;
CREATE TABLE StudentsMutated (IDINT INT, Student INT, Mutated INT);
INSERT INTO StudentsMutated VALUES (1,1,1);
INSERT INTO StudentsMutated VALUES (2,2,0);
INSERT INTO StudentsMutated VALUES (3,1,0);
SELECT COUNT(*) FROM StudentsMutated;

DROP TABLE IF EXISTS Mutated;
DROP TABLE IF EXISTS Students;
DROP TABLE IF EXISTS StudentsMutated;

DELIMITER $$
CREATE PROCEDURE TestMutated(INT ID)
BEGIN
DECLARE mutated INT DEFAULT 0;
DECLARE s INT DEFAULT NULL;
DECLARE IDMutated INT DEFAULT 0;
DECLARE IDStudent INT DEFAULT 0;
DECLARE IDStudentMutated INT DEFAULT 0;
DECLARE IDCollege INT DEFAULT 0;
SET MUTATED = 0;
SET COLLEGE = NULL;
SET IDStudent = 1;
SET Student = 1;

DECLARE mutatedCursor CURSOR FOR
SELECT Students
FROM Students
WHERE ID < ID;
DECLARE CONTINUE HANDLER FOR NOT FOUND SET IDStudent = 0;

DECLARE mutatedStudentCursor CURSOR FOR SELECT StudentID FROM StudentsMutated WHERE StudentID = Student;
DECLARE CONTINUE HANDLER FOR NOT FOUND SET Student = 0;

DECLARE IDCollegeCursor CURSOR FOR
SELECT Collegues.CollegeID
FROM Students
INNER JOIN StudentsCollegues
ON Students.StudentID = StudentsCollegues.StudentID
INNER JOIN Collegues
ON StudentsCollegues.CollegeID = Colleg
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- Create a sample table for the mutated table
DROP TABLE IF EXISTS MutatedSample;
CREATE TABLE MutatedSample (IDINT NUMERIC, Student INT, Mutated INT);
-- Update the data in the mutated table. MutatedInt is defined as INT
INSERT INTO MutatedSample VALUES (3, 2, 1);
SELECT * FROM MutatedSample;
SELECT IDINT FROM MutatedSample WHERE MUTATED = 1;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- Create a sample table for the mutated table
DROP TABLE IF EXISTS MutatedSample;
CREATE TABLE MutatedSample (IDINT NUMERIC, Student INT, Mutated INT);
-- Update the data in the mutated table. MutatedInt is defined as INT
INSERT INTO MutatedSample VALUES (3, 2, 1);
SELECT * FROM MutatedSample;
SELECT IDINT FROM MutatedSample WHERE MUTATED = 1;
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- Create a sample table for the mutated table
DROP TABLE IF EXISTS MutatedSample;
CREATE TABLE MutatedSample (IDINT NUMERIC, Student INT, Mutation INT);
-- Update the data in the mutated table. Mutation is defined as INT
INSERT INTO MutatedSample VALUES (3, 2, -1);
SELECT * FROM MutatedSample;
SELECT IDINT FROM MutatedSample WHERE MUTATION = -1;
COMMIT
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- Create a sample table for the mutated table
DROP TABLE IF EXISTS MutatedSample;
CREATE TABLE MutatedSample (IDINT NUMERIC, Student INT, Mutated INT, Syllable INT);
-- Update the data in the mutated table. MutatedInt is defined as INT
INSERT INTO MutatedSample VALUES (3, 2, 1, 1);
SELECT * FROM MutatedSample;
SELECT IDINT FROM MutatedSample WHERE MUTATED = 1 AND SYLLABE = 1;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- Create a sample table for the mutated table
DROP TABLE IF EXISTS MutatedSample;
CREATE TABLE MutatedSample (IDINT NUMERIC, Student INT, Mutated INT);
-- Update the data in the mutated table. MutatedInt is defined as INT
UPDATE MutatedSample SET MUTATED = 1 WHERE Mutation = 0 AND (NOT (IDINT = 3)) AND Student = 2;
SELECT * FROM MutatedSample;
SELECT Mutated FROM MutatedSample;
DROP TABLE MutatedSample;
DROP DATABASE IF EXISTS sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- The mutated column is now declared
SHOW VARIABLES LIKE 'Mutated_';
SELECT STUDENT FROM MutatedSample;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- Create a sample table for the mutated table
DROP TABLE IF EXISTS MutatedSample;
CREATE TABLE MutatedSample (ID INT);
INSERT INTO MutatedSample VALUES (10);
SELECT * FROM MutatedSample;
SELECT ID INT FROM MutatedSample;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- The mutated column is now declared
SHOW VARIABLES LIKE 'Mutated_';
SELECT STUDENT FROM MutatedSample;
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- The mutated column is now declared
SHOW VARIABLES LIKE 'Mutated_';
SELECT STUDENT FROM sampleDB.MutatedSample;


[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

 

CREATE TABLE IF NOT EXISTS MutatedSample (
  id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  name VARCHAR(255)
);

 
INSERT INTO MutatedSample (name) VALUES ('<NAME>');
INSERT INTO MutatedSample (name) VALUES ('<NAME>');
INSERT INTO MutatedSample (name) VALUES ('<NAME>');
SELECT * FROM MutatedSample;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
# The mutated column is now declared
SHOW VARIABLES LIKE 'Mutated_';
SELECT MUTANT FROM mutatedSample;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS MutatedSample;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Student (ID INT PRIMARY KEY, NAME VARCHAR(50), COURSE_NO INT);
INSERT INTO Student VALUES (1, '<NAME>', 1001);
INSERT INTO Student VALUES (2, 'Dr. <NAME>', 1002);
INSERT INTO Student VALUES (3, '<NAME>', 1003);
INSERT INTO Student VALUES (4, 'Mr. <NAME>', 1004);
INSERT INTO Student VALUES (5, '<NAME>', 1001);
INSERT INTO Student VALUES (6, '<NAME>', 1002);
INSERT INTO Student VALUES (7, '<NAME>', 1003);
INSERT INTO Student VALUES (8, '<NAME>', 1003);
INSERT INTO Student VALUES (9, 'Dr. <NAME>', 1003);
INSERT INTO Student VALUES (10, 'Dr. <NAME>', 1001);
INSERT INTO Student VALUES (11, 'Mr. <NAME>', 1002);

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Student (ID INT PRIMARY KEY, NAME VARCHAR(50), COURSE_NO INT);
INSERT INTO Student VALUES (1, '<NAME>', 1001);
INSERT INTO Student VALUES (2, 'Dr. <NAME>', 1002);
INSERT INTO Student VALUES (3, '<NAME>', 1003);
INSERT INTO Student VALUES (4, 'Mr. <NAME>', 1004);
INSERT INTO Student VALUES (5, '<NAME>', 1001);
INSERT INTO Student VALUES (6, '<NAME>', 1002);
INSERT INTO Student VALUES (7, '<NAME>', 1003);
INSERT INTO Student VALUES (8, '<NAME>', 1003);
INSERT INTO Student VALUES (9, 'Dr. <NAME>', 1003);
INSERT INTO Student VALUES (10, 'Dr. <NAME>', 1001);
INSERT INTO Student VALUES (11, 'Mr. <NAME>', 1002);
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Student (ID INT PRIMARY KEY, NAME VARCHAR(50), COURSE_NO INT);
INSERT INTO Student VALUES (1, '<NAME>', 1001);
INSERT INTO Student VALUES (2, 'Dr. <NAME>', 1002);
INSERT INTO Student VALUES (3, '<NAME>', 1003);
INSERT INTO Student VALUES (4, 'Mr. <NAME>', 1004);
INSERT INTO Student VALUES (5, '<NAME>', 1001);
INSERT INTO Student VALUES (6, '<NAME>', 1002);
INSERT INTO Student VALUES (7, '<NAME>', 1003);
INSERT INTO Student VALUES (8, '<NAME>', 1003);
INSERT INTO Student VALUES (9, 'Dr. <NAME>', 1003);
INSERT INTO Student VALUES (10, 'Dr. <NAME>', 1001);
INSERT INTO Student VALUES (11, 'Mr. <NAME>', 1002);

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Department (ID INT PRIMARY KEY, DEPARTMENT_NAME VARCHAR(50), DEPARTMENT_LOC VARCHAR(50));

DROP TABLE Student; DROP TABLE Department; use sampleDB;


*-- Install MySQl on Ubuntu
```bash
sudo apt install mysql-server mariadb-server 
# Install MariaDB
sudo apt install mariadb-client
# Install MySQL
sudo apt install mysql-server
```
## References

- https: 

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Student (ID INT PRIMARY KEY, NAME VARCHAR(50), COURSE_NO INT);
INSERT INTO Student VALUES (1, '<NAME>', 1002);
INSERT INTO Student VALUES (2, 'Dr. <NAME>', 1001);
INSERT INTO Student VALUES (3, '<NAME>', 1002);
INSERT INTO Student VALUES (4, 'Mr. <NAME>', 1003);
INSERT INTO Student VALUES (5, '<NAME>', 1003);
INSERT INTO Student VALUES (6, '<NAME>', 1003);
INSERT INTO Student VALUES (7, '<NAME>', 1003);
INSERT INTO Student VALUES (8, '<NAME>', 1001);
INSERT INTO Student VALUES (9, '<NAME>', 1002);
INSERT INTO Student VALUES (10, 'Dr. <NAME>', 1002);
INSERT INTO Student VALUES (11, 'Mr. <NAME>', 1003);
INSERT INTO Student VALUES (12, '<NAME>', 1001);
INSERT INTO Student VALUES (13, '<NAME>', 1002);
INSERT INTO Student VALUES (14, 'Mr. <NAME>', 1002);
INSERT INTO Student VALUES (15, 'Mr. <NAME>', 1002);
INSERT INTO Student VALUES (16, '<NAME>', 1002);
INSERT INTO Student VALUES (17, 'Mr. <NAME>', 1
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Subject (ID INT PRIMARY KEY, SUBJECT_NAME VARCHAR(255));
INSERT INTO Subject VALUES (1, 'MATH');
INSERT INTO Subject VALUES (2, 'PHYSICS');
INSERT INTO Subject VALUES (3, 'SCIENCE');

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Student (ID INT PRIMARY KEY, NAME VARCHAR(30), COURSE_NO INT);
INSERT INTO Student VALUES (1, 'Dr. <NAME>', 1002); 
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Subject (ID INT PRIMARY KEY, SUBJECT_NAME VARCHAR(255));
INSERT INTO Subject VALUES (1, 'MATH');
INSERT INTO Subject VALUES (2, 'PHYSICS');
INSERT INTO Subject VALUES (3, 'SCIENCE');
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS Subject CASCADE;
CREATE TABLE Subject (ID INT PRIMARY KEY, SUBJECT_NAME VARCHAR(255));
-- Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You can use a sample program. In the end, drop all tables you created.
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SELECT SUBJECT_NAME FROM Subject;
SELECT SUBJECT_NAME FROM sampledb.Subject;
SELECT * FROM subject;
SELECT * FROM sampledb.subject;
DROP DATABASE IF EXISTS sampleDB;

We will be using MySQL, PHP and Python for some of the challenges that we encounter while building different applications.

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
 
CREATE TABLE COMMENTS_HISTORY (SUBJECT INTEGER, COMMENT_ID INTEGER, COMMENT TEXT, CREATED TIMESTAMP DEFAULT CURRENT_TIMESTAMP);


```



[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Subject (ID INT PRIMARY KEY, SUBJECT_NAME VARCHAR(255));
INSERT INTO Subject VALUES (1,'Math');
INSERT INTO Subject VALUES (2,'Physics');
INSERT INTO Subject VALUES (3,'Science');
-- Please write queries using these techniques on the sampleDB.  Then drop it
-- using a DROP DATABASE statement.
-- If you write something else other than the ones presented above and
-- they do not work; please state so and I can fix your program.

-- Please try the following queries:
 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS IntermediateTable (
  ID INT,
  SCHOOL VARCHAR(255),
  CONSTRAINT IF NOT EXISTS IntermediateTableId
  PRIMARY KEY(ID AUTO_INCREMENT) DEFAULT ('Math')
) ENGINE=InnoDB;

 
DROP TABLE IF EXISTS IntermediateTable;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Subject (ID INT PRIMARY KEY, SUBJECT_NAME VARCHAR(255));
INSERT INTO Subject VALUES (1, 'MATH');
INSERT INTO Subject VALUES (2, 'PHYSICS');
INSERT INTO Subject VALUES (3, 'SCIENCE');
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS Subject;
CREATE TABLE Subject (
	ID INT PRIMARAY KEY,
	SUBJ_NAME VARCHAR(255)
);
INSERT INTO Subject VALUES (1, 'MATH');
INSERT INTO Subject VALUES (2, 'PHYSICS');
INSERT INTO Subject VALUES (3, 'SCIENCE');
-- Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS Subject;
CREATE TABLE Subject(
	ID INT PRIMARY KEY,
	SUBJ_NAME VARCHAR(255)
);
INSERT INTO Subject VALUES (1, 'MATH');
INSERT INTO Subject VALUES (2, 'PHYSICS');
INSERT INTO Subject VALUES (3, 'SCIENCE');

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Professor (ID INT PRIMARY KEY, FIRST_NAME VARCHAR(255), LAST_NAME VARCHAR(258), SCHOOL VARCHAR(255));
INSERT INTO Professor VALUES (1, 'Michael', 'Widenius', 'MIT');
INSERT INTO Professor VALUES (2, 'Michael', 'Collins', 'MIT');
INSERT INTO Professor VALUES (3, 'Tom', 'Barron', 'MIT');
-- Please create a semantically equivalent program that uses WHERE instead of a simple equality statement
 
 
USE sampleDB;
CREATE TABLE Course (ID INT PRIMARY KEY, COURSE_TITLE VARCHAR(255), SCHOOL VARCHAR(255));
INSERT INTO Course VALUES (1, 'MATH 101', 'MIT');
INSERT INTO Course VALUES (2, 'MATH 220', 'University of Alberta');
INSERT INTO Course VALUES (3, 'MATH 422', 'MIT');
INSERT INTO Course VALUES (4, 'MATH 301', 'University of Texas at Austin');
INSERT INTO Course VALUES (5, 'SCIENCE 102', 'University of California, Los Angeles');
INSERT INTO Course VALUES (6, 'MATH 302', 'MIT');
INSERT INTO Course VALUES (7, 'MATH 323', 'MIT');
SET SQL_SAFE_UPDATES = 0;
DROP TRIGGER trg_Sample;
DROP TABLE IF EXISTS Subject CASCADE; DROP TABLE IF EXISTS Professor CASCADE; DROP TABLE IF EXISTS Course CASCADE;
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Subject (ID INT PRIMARY KEY, SUBJECT_NAME VARCHAR(255));
INSERT INTO Subject VALUES (1, 'MATH');
INSERT INTO Subject VALUES (2, 'PHYSICS');
INSERT INTO Subject VALUES (3, 'SCIENCE');
CREATE TABLE Professor (ID INT PRIMARY KEY, FIRST_NAME VARCHAR(255), LAST_NAME VARCHAR(258), SCHOOL VARCHAR(255));
INSERT INTO Professor VALUES (1, 'Michael', 'Widenius', 'MIT');
INSERT INTO Professor VALUES (2, 'Michael', 'Collins', 'MIT');
INSERT INTO Professor VALUES (3, 'Tom', 'Barron', 'MIT');
SET SQL_SAFE_UPDATES = 1; DROP TRIGGER tr
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Student (ID INT PRIMARY KEY, SENIORITY INT, SCHOOL VARCHAR(255));
INSERT INTO Student VALUES (1, 1, 'Youth School'), (2, 2, 'Youth School');
CREATE TABLE Program (ID INT PRIMARY KEY, NAME_Of_Program VARCHAR(255));
INSERT INTO Program VALUES (2, 'Highschool'), (3, 'Bachelor'), (4, 'Master'), (5, 'Doctorate');
DO $$ BEGIN SELECT SCHOOL FROM Subject WHERE ID > 1 END $$;
DO $$ BEGIN SELECT BRANCH FROM Subject GROUP BY BRANCH HAVING COUNT(*) > 1 END $$;
DO $$ DECLARE cur CURSOR FOR SELECT * FROM Student INNER JOIN Program ON Student.SCHOOL = Program.ID INNER JOIN Subject ON Student.PROGRAM = Subject.ID INNER JOIN School ON Subject.SCHOOL = School.ID WHERE BRANCH = 'Youth School' GROUP BY ID $$;
DECLARE CONTINUE HANDLED SET cur FOR cur;
CLOSE cur;
DEALLOCATE cur;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO sampleDB.Subject VALUES (4, 'CHEMISTRY');
CREATE TABLE Student (ID INT PRIMARY KEY, SEX INT, STUDENT_NAME VARCHAR(255));
INSERT INTO Student VALUES (1, 'Male', '<NAME>');
INSERT INTO Student VALUES (2, 'Female', '<NAME>');
CREATE TABLE StudentRoll(ID INT PRIMARY KEY, SEX INT, STUDENT_NAME VARCHAR(255), ROLL INT);
INSERT INTO StudentRoll VALUES (1, 'Female', '<NAME>', 2);
INSERT INTO StudentRoll VALUES (2, 'Male', '<NAME>', 1);
-- Please create a similar database and table scheme to the preceding one.
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE subject(ID INT PRIMARY KEY, SUBJECT_NAME VARCHAR(255));
INSERT INTO sampleDB.subject VALUES (1, 'MATH');
INSERT INTO sampleDB.subject VALUES (4, 'CHEMISTRY');
CREATE TABLE result(ID INT PRIMARY KEY, MID INT, SCORE INT);
INSERT INTO sampleDB.result VALUES (1, 1, 90);
INSERT INTO sampleDB.result VALUES (2, 1, 80);
INSERT INTO sampleDB.result VALUES (3, 1, 70);
INSERT INTO sampleDB.result VALUES (4, 2, 90);
INSERT INTO sampleDB.result VALUES (5, 2, 80);
INSERT INTO sampleDB.result VALUES (6, 2, 70);
INSERT INTO sampleDB.result VALUES (7, 1, 80);
INSERT INTO sampleDB.result VALUES (8, 1, 90);
INSERT INTO sampleDB.result VALUES (9, 2, 90);
INSERT INTO sampleDB.result VALUES (10, 2, 80);
INSERT INTO sampleDB.result VALUES (11, 2, 70);
INSERT INTO sampleDB.result VALUES (12, 3, 90);
INSERT INTO sampleDB.result VALUES (13, 3, 80);
INSERT INTO sampleDB.result VALUES (14, 3, 70);

SELECT SCORE FROM sampleDB.result where SCORE < 70 ORDER BY SCORE desc LIMIT 3;
SELECT SCORE FROM sampleDB.result where ID=1 ORDER BY SCORE desc LIMIT 1;
-- Please describe a query on how to sort the results of the previous query by
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SELECT * FROM Subject;
 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

SELECT * FROM Subject;
 
CREATE TABLE Subjects (ID INT PRIMARY KEY, SUBJECT_NAME VARCHAR(255));
INSERT INTO Subjects VALUES (1, 'MATH');
INSERT INTO Subjects VALUES (2, 'PHYSICS');
INSERT INTO Subjects VALUES (3, 'SCIENCE');

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Subject (ID INT PRIMARY KEY, SUBJECT_NAME VARCHAR(255));
INSERT INTO Subject VALUES (1, 'MATH');
INSERT INTO Subject VALUES (2, 'PHYSICS');
INSERT INTO Subject VALUES (3, 'SCIENCE');
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
# For your convenience, the following table is in the Sample Database.
#
-- This table contains data about students and their respective grades.
# For each student, there is a student number, a student name, a student grade and,
# for each grade, there is a grade number, the grades (out of 10), course code,
# and the course name. The table also has another column:
#
-- If grade < 7, the student gained 'fail'.
-- If grade between 7 and 10, the student gained 'pass'.
-- If grade = 8 or above, the student gained'subminative'.
CREATE TABLE Students (STUDENT_ID INT, STUDENT_NAME VARCHAR(255), GRADE INT, FILED_ON DATE,
                          FAIL VARCHAR(160), PASS VARCHAR(160), SUBMINATIVE VARCHAR(160) PRIMARY KEY);
INSERT INTO Students VALUES (1, 'Student 1', 7, '2018-01-01', 'fail', 'fail','subminative');
INSERT INTO Students VALUES (2, 'Student 2', 8, '2018-01-01', 'fail', 'pass', 'fail');
INSERT INTO Students VALUES (3, 'Student 3', 9, '2018-01-02', 'pass', 'fail', 'pass');
INSERT INTO Students VALUES (4, 'Student 4', 8, '2018-01-03', 'fail', 'fail', 'fail');
INSERT INTO Students VALUES (5, 'Student 5', 7, '2018-01-04', 'fail','start', 'pass');
INSERT INTO Students VALUES (6, 'Student 6', 5, '2018-01-04', 'fail', 'pass', 'fail');
INSERT INTO Students VALUES (7, 'Student 7', 9, '2018-01-05', 'fail', 'fail', 'fail');
INSERT INTO Students VALUES (8, 'Student 8', 7, '2018-01-06', 'fail', 'fail', 'pass');
INSERT INTO Students VALUES (8, 'Student 9', 10, '2018-01-06', 'pass', 'fail','start');
INSERT INTO Students VALUES
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Subject (ID INT PRIMARY KEY, SUBJECT_NAME VARCHAR(255));
INSERT INTO Subject VALUES (1, 'MATH');
INSERT INTO Subject VALUES (2, 'PHYSICS');
INSERT INTO Subject VALUES (3, 'SCIENCE');
 
CREATE DATABASE myDB; USE myDB;
CREATE TABLE Subject (ID INT PRIMARY KEY, SUBJECT_NAME VARCHAR(255));
INSERT INTO Subject VALUES (1, 'MATH');
INSERT INTO Subject VALUES (2, 'PHYSICS');
INSERT INTO Subject VALUES (3, 'SCIENCE');
-- Please write two queries.
 -- Please create the following two statements.
CREATE DATABASE myDB; USE myDB;
CREATE TABLE Subject (ID INT PRIMARY KEY, SUBJECT_NAME VARCHAR(255));
INSERT INTO Subject VALUES (1, 'MATH');
INSERT INTO Subject VALUES (2, 'PHYSICS');
INSERT INTO Subject VALUES (3, 'SCIENCE');
 

CREATE DATABASE myDB; USE myDB;
CREATE TEMPORARY TABLE Subject (ID INT PRIMARY KEY, SUBJECT_NAME VARCHAR(255));
INSERT INTO Subject VALUES (1, 'MATH');
INSERT INTO Subject VALUES (2, 'PHYSICS');
INSERT INTO Subject VALUES (3, 'SCIENCE');
 

CREATE DATABASE myDB; USE myDB;
DROP TABLE Subject;
 

CREATE DATABASE myDB; USE myDB;

CREATE TABLE Subject2 (ID INT PRIMARY KEY, SUBJECT_NAME VARCHAR(255));
INSERT INTO Subject2 VALUES (1, 'MATH2');
INSERT INTO Subject2 VALUES (2, 'PHSICS2');
INSERT INTO Subject2 VALUES (3, 'SCIENCE2');
INSERT INTO Subject2 VALUES (4, 'MATH2');
INSERT INTO Subject2 VALUES (5, 'MATH2');
INSERT INTO Subject2 VALUES (6, 'MATH2');
INSERT INTO Subject2 VALUES (7, 'MISC2');
INSERT INTO Subject2 VALUES (8, 'MISC2');
INSERT INTO Subject2 VALUES (9, 'MISC2');
INSERT INTO Subject2 VALUES (10, 'MATH2');
INSERT INTO Subject2 VALUES (11, 'MATH2');
INSERT INTO Subject2 VALUES (12, 'MATH2');
INSERT INTO Subject2 VALUES (13, 'MISC2');
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE Subject; DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE Subject;
 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE Subject;
CREATE TABLE Student (ID INT PRIMARY KEY, SNAME VARCHAR(1000), SGRADE VARCHAR(255));
INSERT INTO Student VALUES (1, 'Vini', '0-0');
INSERT INTO Student VALUES (2,'Rafaela', '0-2');
INSERT INTO Student VALUES (3,'Samantha', '0-2');


CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE Student;
CREATE TABLE Enrollment (ID INT PRIMARY KEY, SNAME VARCHAR(1000), EMAIL VARCHAR(1000), STUDENT_ID INT);
INSERT INTO Enrollment VALUES (2, 'Rafaela', '<EMAIL>', 1);
INSERT INTO Enrollment VALUES (3, 'Chris', '<EMAIL>', 1);
INSERT INTO Enrollment VALUES (4, 'Samy', '<EMAIL>', 2);
INSERT INTO Enrollment VALUES (5, 'John', '<EMAIL>', 2);
INSERT INTO Enrollment VALUES (1, 'Vini', '<EMAIL>', 3);
INSERT INTO Enrollment VALUES (6, '<NAME>', '<EMAIL>', 4);
INSERT INTO Enrollment VALUES (1, 'Samy', '<EMAIL>', 1);
INSERT INTO Enrollment VALUES (7, 'John', '<EMAIL>', 1);

-- After changing the schema, check the data.

SELECT sname AS 'Student Name',
email AS 'Student Email',
COUNT(*)
FROM enrollments
GROUP BY email
ORDER BY COUNT(*) DESC;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SELECT SUBJECT_NAME FROM Subject ORDER BY SUBJECT_NAME;
-- SELECT SUBJECT_NAME FROM subjects WHERE SUBJECT_NAME = 'PHYSICS';
SELECT SUBJECT_NAME FROM subjects WHERE SUBJECT_NAME = 'Math';
SELECT SUBJECT_NAME FROM subjects WHERE SUBJECT_NAME = 'Physics';
DROP TABLE Subject; DROP DATABASE IF EXISTS sampleDB; -- If you use any MySQL queries.


-- INSERT INTO Subject(SUBJ_NAME) VALUES('Physics');
-- SELECT SUBJ_NAME FROM Subject;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE Subject; DROP DATABASE sampleDB;
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE Subject; DROP DATABASE;
-- MySQL will create indexes for you automatically for you. The name of the index can be specified in your table definition without the need of explicit type, if you are not sure what type of index to use. 
CREATE TABLE Subject (Subject_Id INT(11) AUTO_INCREMENT, Subject_Name VARCHAR(24) NOT NULL, Subject_Teacher INT(11), PRIMARY KEY (Subject_Id, Subject_Teacher))ENGINE=InnoDB DEFAULT CHARSET=u
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE `Subject`; DROP TABLE IF EXISTS Student; DROP TABLE IF EXISTS Teacher; DROP DATABASE sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS Subject CASCADE;

-- Create another example that adds 2 tables
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS Question CASCADE;
DROP TABLE IF EXISTS Option CASCADE;

CREATE TABLE Question (id VARCHAR(30) NOT NULL UNIQUE KEY, answer VARCHAR(50));
CREATE UNIQUE INDEX question_unique_id ON Question (id);

CREATE TABLE Option (id VARCHAR(30) NOT NULL UNIQUE KEY, questionId VARCHAR(30), answer VARCHAR(10));
CREATE UNIQUE INDEX option_idx ON Option (id);

ALTER TABLE Option ADD CONSTRAINT fk_option_question ON FOREIGN KEY (questionId) REFERENCES Question (id);

INSERT INTO Question VALUES('q1', 'q1 answer');
INSERT INTO Question VALUES('q2', 'a2q2');
INSERT INTO Question VALUES('q2', 'a2q2');
INSERT INTO Question VALUES('q2', 'a2q2');
INSERT INTO Question VALUES('q3', 'q3 answer');
INSERT INTO Option VALUES('o1', 'q1','a1');
INSERT INTO Option VALUES('b1', 'q1','b1');
INSERT INTO Option VALUES('b1', 'q1','d1');
INSERT INTO Option VALUES('o1', 'q2','a1');
INSERT INTO Option VALUES('o2', 'q2', 'a1');
INSERT INTO Option VALUES('o2', 'q2', 'a2');
INSERT INTO Option VALUES('o2', 'q2', 'a2');
INSERT INTO Option VALUES('o2', 'q2', 'a1');
INSERT INTO Option VALUES('o2', 'q2', 'a1');
INSERT INTO Option VALUES('o2', 'q3', 'a1');
INSERT INTO Option VALUES('o3', 'q3', 'a1');
INSERT INTO Option VALUES('o3', 'q3', 'a2');
INSERT INTO Option VALUES('o3', 'q3', 'a2');


CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS Question CASCADE;
DROP TABLE IF EXISTS Option CASCADE;
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP PROCEDURE IF EXISTS getStudentsFromCourse;
DELIMITER |
CREATE PROCEDURE getStudentsFromCourse(nCourse INT)
BEGIN
SELCT SubjectName FROM Course WHERE CourseID = nCourse;
END; |
DELIMITER ;
DROP TABLE IF EXISTS Subject;
DROP TABLE IF EXISTS Course;
DROP DATABASE sampleDB;
<commit_msg>Added instructions for MySQL client (#1)<commit_after># Lab 20: Learning the MySQL Client

MySQL can be installed on Unix-like operating systems but can be also used using Microsoft Windows. However, MySQL is still supported by multiple database systems and so, using a Linux-based operating system is recommended. Here is the link to the official installation instructions:

https: 

You will need MySQL working on your device in order to run the project. It will be available under an open-source licens that allows it to be used by developers. Please select the appropriate option for your device and follow the instructions specific for your operating system. Follow the instructions for the operating system you will be working with on the corresponding link.

## 2.x


[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Subjects (id  int PRIMARY KEY, name VARCHAR NOT NULL);
INSERT INTO Subjects (id, name) VALUES (1, 'Math');
CREATE TABLE Subjects (id  int PRIMARY KEY, name VARCHAR NOT NULL);
INSERT INTO Subjects (id, name) VALUES (2, 'Mathematics');
CREATE TABLE Subjects (id  int PRIMARY KEY, name VARCHAR NOT NULL);
INSERT INTO Subjects (id, name) VALUES (3, 'English');
CREATE TABLE Subjects (id  int PRIMARY KEY, name VARCHAR NOT NULL);
INSERT INTO Subjects (id, name) VALUES (4, 'Science and Technology');
CREATE TABLE Subjects (id  int PRIMARY KEY, name VARCHAR NOT NULL);
INSERT INTO Subjects (id, name) VALUES (5, 'Physics');
CREATE TABLE Subjects (id  int PRIMARY KEY, name VARCHAR NOT NULL);
INSERT INTO Subjects (id, name) VALUES (6, 'History');
CREATE TABLE Subjects (id  int PRIMARY KEY, name VARCHAR NOT NULL);
INSERT INTO Subjects (id, name) VALUES (7, 'Biology');
CREATE TABLE Subjects (id  int PRIMARY KEY, name VARCHAR NOT NULL);
INSERT INTO Subjects (id, name) VALUES (8, 'Politics');
CREATE TABLE Subjects (id  int PRIMARY KEY, name VARCHAR NOT NULL);
INSERT INTO Subjects (id, name) VALUES (9, 'Commerce');
CREATE TABLE Subjects (id  int PRIMARY KEY, name VARCHAR NOT NULL);

-- Please write the query to create a tree that contains all the name of students. You need to create a new table, and insert the data using the INSERT Statement. You should use ENGINE=INNODB. In the end, drop the created tables. */

Create Database IF NOT EXISTS students; USE students;
CREATE TABLE student (
	s_no int not null,
	name varchar not null
	foreign key(s_no) references student(s_no)
);
 
Insert Into student values(1,'Chaitanya');
Insert Into student values(2,'Anna');
Insert Into student values(3,'Jay');
Insert Into student values(4,'Mahendra');
 
drop table student;
Create Database IF NOT EXISTS students; USE students;

select s_no from student;
select name from student;
select s_no from student;
SELECT * FROM student;
select name from student;
select s_no from student;
select s_no from student;
select name from student;
select s_no from student;
select name from student;
select s_no from student;
select name from student;

alter table student
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE Subject; DROP DATABASE sampleDB;
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE Subject (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, name VARCHAR(255));



SELECT *
FROM Subject
ORDER BY id;

SELECT *
FROM Subject a LEFT JOIN Subject b ON a.name = b.name
WHERE name = 'Bach';

SELECT *
FROM Subject a RIGHT JOIN Subject b ON a.name = b.name
WHERE name='Grosser';

SELECT *
FROM Subject a CROSS JOIN Subject b INNER JOIN Subject c ON a.id = b.id AND b.id = c.id
WHERE b.name = 'Bach';

SELECT *
FROM Subject a ORDER BY a.id DESC;

SELECT *
FROM Subject a ORDER BY a.id DESC LIMIT 5;


[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE Subject; DROP TABLE Student; DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS Subject;
DROP DATABASE sampleDB;

SET FOREIGN_KEY_CHECKS = 1;  
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SELECT LAST_INSERT_ID();
-- END

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS Student;
CREATE TABLE Student (FirstName VARCHAR(20), LastName VARCHAR(20), Grade INT);
INSERT INTO Student (FirstName, LastName, Grade) VALUES ('John','Smith',8);
INSERT INTO Student (FirstName, LastName, Grade) VALUES ('Jane','Lee',9);
SELECT * FROM Student;
DROP DATABASE IF EXISTS sampleDB;
 

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS Student;
CREATE TABLE Student (FirstName VARCHAR(20), LastName VARCHAR(20), Grade INT);
INSERT INTO Student (FirstName, LastName, Grade) VALUES ('John','Smith',8);
INSERT INTO Student (FirstName, LastName, Grade) VALUES ('Jane','Lee',9);
SELECT * FROM Student;
DROP DATABASE IF EXISTS sampleDB;
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS Student;
CREATE TABLE Student (FirstName VARCHAR(20), LastName VARCHAR(20), Grade INT);
INSERT INTO Student (FirstName, LastName, Grade) VALUES ('John','Smith',8);
INSERT INTO Student (FirstName, LastName, Grade) VALUES ('Jane','Lee',9);
INSERT INTO Student (FirstName, LastName, Grade) VALUES ('Tom','Stark',10);
SELECT * FROM Student;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS Student;
CREATE TABLE Student (FirstName VARCHAR(20), LastName VARCHAR(20), Grade INT);
INSERT INTO Student (FirstName, LastName, Grade) VALUES ('John', 'Smith', 8);
INSERT INTO Student (FirstName, LastName, Grade) VALUES ('Jane', 'Lee', 9);
SELECT * FROM Student;
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;


CREATE TABLE Student (
ID INT AUTO_INCREMENT PRIMARY KEY,
FirstName VARCHAR(20) NOT NULL,
LastName VARCHAR(20),
Grade INT NOT NULL);

INSERT INTO Student (FirstName, LastName, Grade) VALUES ('John', 'Smith', 8);
INSERT INTO Student (FirstName, LastName, Grade) VALUES ('Jane', 'Lee', 9);


DROP TABLE IF EXISTS Student;
CREATE TABLE Student (
ID MEDIUMINT,	--  主键
FirstName VARCHAR(30) NOT NULL,	--  索引定义范围：字符长度为30， 存储唯一值:
LastName VARCHAR(30),	--  索引定义范围：字符长度为30, 存储唯一值:
Grade INT NOT NULL);	--  索引定义范围：0-64位数字，存储整数类型值


INSERT INTO Student (id, FirstName, LastName, Grade) VALUES (100, 'John'	,'Smith', 8);
INSERT INTO Student (id, FirstName, LastName, Grade) VALUES (100, 'Jane',	'Lee', 9);

DROP TABLE IF EXISTS Student;
CREATE TABLE Student (
ID INTEGER PRIMARY KEY,
FirstName VARCHAR(30) NOT NULL,
LastName VARCHAR(30),
Grade INT NOT NULL);

INSERT INTO Student (id, FirstName, LastName, Grade) VALUES(100, 'John',	'Smith',8);
INSERT INTO Student (id, FirstName, LastName, Grade) VALUES(100, 'Jane',	'Lee',9);


DROP TABLE IF EXISTS Student;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS Student;
CREATE TABLE Student (FirstName VARCHAR(20), LastName VARCHAR(20), Grade INT);
INSERT INTO Student (FirstName, LastName, Grade) VALUES ('John','Smith',8);
INSERT INTO Student (FirstName, LastName, Grade) VALUES ('Jane','Lee',9);
SELECT ID, Grade, FirstName FROM Student, sampleDB.Student;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS Student;
CREATE TABLE Student (FirstName VARCHAR(20), LastName VARCHAR(20), Grade INT);
INSERT INTO Student (FirstName, LastName, Grade) VALUES ('John','Smith',8);
INSERT INTO Student (FirstName, LastName, Grade) VALUES ('Jane','Lee',9);
SELECT * FROM Student;
DROP DATABASE IF EXISTS sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS Student; CREATE TABLE Student (FirstName VARCHAR(20), LastName VARCHAR(20), Grade INT); INSERT INTO Student (FirstName, LastName, Grade) VALUES ('John','Smith',8); INSERT INTO Student (FirstName, LastName, Grade) VALUES ('Jane','Lee',9); SELECT * FROM Student; DROP TABLE IF EXISTS Student; DROP DATABASE IF EXISTS sampleDB;
{% endhighlight %}

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS Student;
CREATE TABLE Student (FirstName VARCHAR(20), LastName VARCHAR(20), Grade INT);
INSERT INTO Student (FirstName, LastName, Grade) VALUES ('John','Smith',8);
INSERT INTO Student (FirstName, LastName, Grade) VALUES ('Jane','Lee',9);
INSERT INTO Student (FirstName, LastName, Grade) VALUES ('Tom','Stark',10);
SELECT * FROM Student;
DROP DATABASE IF EXISTS sampleDB;
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS Teacher;
CREATE TABLE Teacher (FirstName VARCHAR(20),  LastName VARCHAR(20), Salary INT);
INSERT INTO Teacher (FirstName, LastName, Salary) VALUES ('Sabar', 'Vetan', 72000);
INSERT INTO Teacher (FirstName, LastName, Salary) VALUES ('George', 'Wit', 25);
INSERT INTO Teacher (FirstName, LastName, Salary) VALUES ('Jenana', 'Hedrick', 256);
SELECT * FROM Teacher;
DROP DATABASE IF EXISTS sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS Student;
CREATE TABLE Student (FirstName VARCHAR(20), LastName VARCHAR(20), Grade INT);
INSERT INTO Student (FirstName, LastName, Grade) VALUES ('John','Smith',2);
INSERT INTO Student (FirstName, LastName, Grade) VALUES ('Jane','Lee',7);
INSERT INTO Student (FirstName, LastName, Grade) VALUES ('Tom','Stark',7);
INSERT INTO Student (FirstName, LastName, Grade) VALUES ('Steve','Rogers',90);
SELECT * FROM Student;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS Student;
CREATE TABLE Student (First_Name VARCHAR(20), Last_Name CHAR(20), Grade INT);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('John', 'Smith', 8);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('Jane', 'Lee', 9);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('Tom', 'Stark', 10);
SELECT * FROM Student;
DROP DATABASE IF EXISTS sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS Student2;
CREATE TABLE Student2 (FirstName VARCHAR(20), LastName VARCHAR(20), Grade INT, Phone Number VARCHAR(20));
INSERT INTO Student2 (FirstName, LastName, Grade, Phone Number) VALUES ('John','Smith',8,80766764567);
INSERT INTO Student2 (FirstName, LastName, Grade, Phone Number) VALUES ('Jane','Lee',9,7656575796);
INSERT INTO Student2 (FirstName, LastName, Grade, Phone Number) VALUES ('Tom','Stark',10,6548778477);
INSERT INTO Student2 (FirstName, LastName, Grade, Phone Number) VALUES ('Angela','Miller',7,9877421164);
SELECT * FROM Student2 WHERE FirstName LIKE "A";
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS Student;
CREATE TABLE Student (FirstName VARCHAR(20), LastName VARCHAR(20), Grade INT);
INSERT INTO Student (FirstName, LastName, Grade) VALUES ('John','Smith',8);
INSERT INTO Student (FirstName, LastName, Grade) VALUES ('Jane','Lee',9);
INSERT INTO Student (FirstName, LastName, Grade) VALUES ('Tom','Stark',10);
SELECT * FROM Student;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS Student;
CREATE TABLE Student (First_Name VARCHAR(20), Last_Name CHAR(20), Grade INT);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('John', 'Smith', 8);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('Jane', 'Lee', 9);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('Tom', 'Stark', 10);
SELECT * FROM Student;
DROP DATABASE IF EXISTS sampleDB;
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
GRANT ALL PRIVILEGES ON sampleDB.*
TO 'root'@localhost
IDENTIFIED BY 'password'
WITH GRANT OPTION;
DROP DATABASE IF EXISTS sampleDB;
-- This code creates a virtual host that forwards all TCP requests traffic to MySQL:
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
GRANT ALL PRIVILEGES ON *.*
TO 'root'@'%'
IDENTIFIED BY 'password'
WITH GRANT OPTION;
DROP DATABASE IF EXISTS sampleDB;
FLUSH PRIVILEGES;
-- This code creates a virtual host that forwards all TCP requests traffic to MySQL, then forwards the TCP connection for accessing the MySQL DB to Redis:
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
GRANT ALL PRIVILEGES ON *.*
TO 'root'@'%'
IDENTIFIED BY 'password'
WITH GRANT OPTION,
MAP REDUCE TO RISK PERFORMANCE_SCHEMA.*
REDIRECT_TO_PRINT '127.0.0.1:6379';
DROP DATABASE IF EXISTS sampleDB;
-- Please create a query to find maximum of the Grade column from Grade tables
SELECT IFNULL(MAX(Grade), 0) Grade
FROM Student;
-- In your case:
SELECT IFNULL(Max(Grade), 0) Grade
FROM Student;
-- and:
SELECT ifnull(MAX(Grade), 0) Grade
FROM Student;
-- The above syntax is incorrect, while:
SELECT IFNULL(MAX(Grade))
FROM Student;
-- is correct
SELECT IFNULL(Max(Grade)) FROM Student;
-- You also can use the following syntax:
SELECT Grade AS Max_Grade
FROM Student;
SHOW DATABASES;
SHOW TABLES;
SHOW TABLE STATUS;
-- Drop all tables.
DROP TABLE IF EXISTS Grade;
DROP TABLE IF EXISTS Student;

-- Please create a query to find average of the Grade column from Grade tables
SELECT AVG(Grade), Count(*) Grade_Count FROM Student GROUP BY Grade;
-- in your case
SELECT AVG(Grade), Count(*) FROM Student GROUP BY Grade
-- and:
SELECT AVG(
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS Student;
CREATE TABLE Student (First_Name VARCHAR(20), Last_Name CHAR(20),
Grade INT);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('John', 'Smith', 8);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('Jane', 'Lee', 9);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('Tom', 'Stark', 10);
SELECT * FROM Student;
UPDATE Student SET Grade = 8.0 WHERE Grade = 8.0;
SELECT * FROM Student;
DROP TABLE Student;
 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS Student;
CREATE TABLE Student (First_Name VARCHAR(20), Last_Name CHAR(20),
Grade INT);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('John', 'Smith', 8.0);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('Jane', 'Lee', 9);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('Tom', 'Stark', 10);
SELECT * FROM Student;
CREATE PROCEDURE addGrade(In_studentID int, in_grade double) RETURNS text
BEGIN
UPDATE Grade SET Grade = Grade + in_grade WHERE Student_ID = In_studentID;
RETURN 'Success';
END

DROP PROCEDURE addGrade;
EXEC addGrade(2, 2.0);
SELECT * FROM Student;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS Student;
CREATE TABLE Student (First_Name VARCHAR(20), Last_Name CHARACTER(20), Grade INT);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('John', 'Smith', 8);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('Jane', 'Lee', 9);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('Tom', 'Stark', 10);

SELECT * FROM Student;
CREATE TABLE Student (First_Name VARCHAR(40), Last_Name CHARACTER(20), Grade INT);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('John', 'Smith', 8);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('Jane', 'Lee', 9);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('Tom', 'Stark', 10);

SELECT * FROM Student;
CREATE TABLE Student (First_Name CHARACTER(20), Last_Name CHARACTER(20), Grade INT);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('John', 'Smith', 8);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('Jane', 'Lee', 9);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('Tom', 'Stark', 10);

SELECT * FROM Student;

DROP TABLE IF EXISTS Student;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

-- Now change the column data type:
ALTER TABLE Student MODIFY First_Name VARCHAR(50);
ALTER TABLE Student MODIFY Grade TINYINT;
ALTER TABLE Student MODIFY Last_Name CHAR(50);

COMMIT;
-- And drop the database
DROP DATABASE IF EXISTS sampleDB;
-- The purpose of this exercise is to recreate the database table structure using SQL (stored procedures are used in this case - see "Exercise 2")
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

CREATE TABLE Student (First_Name VARCHAR(30), Last_Name CHAR(20), Grade INT);
DROP PROCEDURE IF EXISTS updateGrade;
DELIMITER $$
CREATE PROCEDURE updateGrade(IN student_id INT)
BEGIN
	UPDATE Student SET Grade = 7
	WHERE Student_Id = student_id;
END $$
DELIMITER ;
-- Update Grade:
CALL updateGrade(2);
CALL updateGrade(1);

SELECT * FROM Student;

DROP PROCEDURE IF EXISTS updateGrade;
DELIMITER $$
CREATE PROCEDURE updateGrade(IN student_id INT)
BEGIN
	UPDATE Student SET Grade = 7
	WHERE Student_Id = student_id;
END $$
DELIMITER ;
-- Update Grade:
CALL updateGrade(2);
CALL updateGrade(1);

SELECT * FROM Student;

DROP PROCEDURE IF EXISTS updateGrade;
DELIMITER $$
CREATE PROCEDURE updateGrade(IN student_id INT)
BEGIN
	UPDATE Student SET Grade = 7
	WHERE Student_Id = student_id;
END $$
DELIMITER ;
-- Update Grade:
CALL updateGrade(2);
CALL updateGrade(1);

SELECT * FROM Student;

DROP DATABASE IF EXISTS sampleDB;
-- And add a constraint on the columns:
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

-- Now change the column data type:
ALTER TABLE Student MODIFY First_Name VARCHAR(30);
ALTER TABLE Student MODIFY Grade TINYINT;
ALTER TABLE Student MODIFY Last_Name CHAR(20);
COMMIT;
-- And drop the database
DROP DATABASE IF EXISTS sampleDB;

CREATE
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('Marc', 'Johnson', 10);
UPDATE Student SET First_Name = 'Thomas' WHERE Grade = 10;
SELECT * FROM Student;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS Student;
CREATE TABLE Student (First_Name VARCHAR(20), Last_Name CHAR(20), Grade INT);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('John', 'Smith', 8);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('Jane', 'Lee', 9);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('Tom', 'Stark', 10);
SELECT * FROM Student;
DROP DATABASE IF EXISTS sampleDB;
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS Student;
CREATE TABLE Student (First_Name VARCHAR(20), Last_Name CHAR(20), Grade INT);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('John', 'Smith', 8);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('Jane', 'Lee', 9);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('Tom', 'Stark', 5);
UPDATE Student SET Grade = Grade - 1 WHERE Grade > 8;
SELECT * FROM Student;
DROP DATABASE IF EXISTS sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

SELECT First_Name FROM Student WHERE Last_Name = "Smith";
SELECT Last_Name FROM Student WHERE First_Name = 'Tom';
SELECT First_Name, Last_Name, Grade FROM Student WHERE Grade = 9;
UPDATE Student SET Grade = 10 WHERE Grade = 9;
SELECT First_Name, Last_Name, Grade FROM Student WHERE Grade = 10;
SELECT First_Name, Last_Name, Grade FROM Student WHERE Grade = 10;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
 
DROP TABLE IF EXISTS Student;
CREATE TABLE Student (First_Name VARCHAR(20), Last_Name CHAR(20), Grade INT);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('John', 'Smith', 8);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('Jane', 'Lee', 9);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('Tom', 'Stark', 10);
SELECT * FROM Student WHERE Grade IN (2, 3);
DROP TABLE IF EXISTS Student;
DROP DATABASE IF EXISTS sampleDB;

You are to use dynamic sql to perform the following tasks: Update the grade in a specific grade level. Read in multiple records representing the student table at the same time and sum the grades.

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DELETE FROM Student WHERE First_Name = 'John';
SELECT First_Name, Last_Name, Grade FROM Student;
DROP DATABASE IF EXISTS sampleDB;
-- Please create a program that updates all records in the Student table to a new record
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
UPDATE Student SET Grade=8 WHERE Grade=9;
SELECT First_Name, Last_Name, Grade FROM Student;
DELETE FROM Student;
DELETE FROM Student WHERE First_Name = 'Jane';
SELECT Grade FROM Student;
DROP DATABASE IF EXISTS sampleDB;
-- Please create a program that modifies the same records in the Student table
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
UPDATE Student SET first_name ='Tom' WHERE first_name<>'John' AND Last_Name = 'Stark';
SELECT * FROM Student;
DROP DATABASE IF EXISTS sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
drop table IF EXISTS Student, Teacher; CREATE TABLE Student (First_Name VARCHAR(20), Last_Name CHAR(20), Grade INT); CREATE TABLE Teacher (First_Name VARCHAR(20), Last_Name CHAR(20)); INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('John', 'Smith', 8); INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('Jane', 'Lee', 9); INSERT INTO Teacher (First_Name, Last_Name) VALUES ('Tom', 'Stark');
UPDATE Student SET Grade=4 WHERE Last_Name='Smith';
UPDATE Student SET Grade=5 WHERE Last_Name='Lee';
UPDATE Teacher SET First_Name='Dick', Last_Name='Clark' WHERE First_Name='Tom';
SELECT * FROM Student;
SELECT * FROM Teacher;
SELECT * FROM Student, Teacher WHERE Student.First_Name=Teacher.First_Name;
DROP DATABASE IF EXISTS sampleDB;
-- Please create a small test program that counts the number of unique values in a character set. Don't use a table. It's easier to work with a table of data if each character has a separate row. Please use engine=InnoDB.
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SELECT COUNT(*) FROM character_set_client; DROP DATABASE IF EXISTS sampleDB;
SELECT COUNT(DISTINCT Username) FROM Users;
SELECT COUNT(*) FROM character_set_server;
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS Student;
CREATE TABLE Student (First_Name VARCHAR(20), Last_Name CHAR(20), Grade INT);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('John', 'Smith', 8);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('Jane', 'Lee', 9);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('Tom', 'Stark', 5);
UPDATE Student SET Grade = Grade - 1 WHERE Grade > 8;
SELECT * FROM Student;
DROP DATABASE IF EXISTS sampleDB;
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS Student;
CREATE TABLE Student (First_Name VARCHAR(20), Last_Name CHAR(20), Grade INT);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('John', 'Smith', 8);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('Jane', 'Lee', 9);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('Tom', 'Stark', 5);
SELECT * FROM Student;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS Student;
CREATE TABLE Student (First_Name VARCHAR(20), Last_Name CHAR(20), Grade INT);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('John', 'Smith', 8);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('Jane', 'Lee', 9);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('Tom', 'Stark', 4);  
UPDATE Student SET Grade = Grade + 2 WHERE Grade < 4;
SELECT * FROM Student;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS Students;
CREATE TABLE Students(
    First_Name VARCHAR(20),
    Last_Name CHAR(20),
    Grade INT NOT NULL CHECK (Grade > 7 OR Grade <=0 ),
    Department CHAR(20));
INSERT INTO Students (First_Name, Last_Name, Grade, Department) VALUES ('John', 'Smith', 8, 'Maths');
INSERT INTO Students (First_Name, Last_Name, Grade, Department) VALUES ('Jane', 'Lee', 9, 'Physical');
INSERT INTO Students (First_Name, Last_Name, Grade, Department) VALUES ('Tom', 'Stark', 5, 'Physics');
CREATE FUNCTION Students_Count(Department CHAR(20)) RETURNS INT
    PREPARE STATEMENT
      SELECT COUNT(*) FROM Students WHERE Department = :Department;
SELECT Students_Count('Maths');
DROP TABLE Students;
DROP DATABASE IF EXISTS sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS Student;
CREATE TABLE Student (First_Name VARCHAR(20), Last_Name CHAR(20), Grade INT);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('John', 'Smith', 8);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('Jane', 'Lee', 9);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('Tom', 'Stark', 5);
UPDATE Student SET Grade = Grade - 1 WHERE Grade > 8;
 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS Student;
CREATE TABLE Student (First_Name VARCHAR(20), Last_Name CHAR(20), Grade INT);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('John', 'Smith', 8);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('Jane', 'Lee', 9);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('Tom', 'Stark', 5);
CREATE TABLE IF NOT EXISTS Student_Scores;
INSERT INTO Student_Scores (First_Name, Last_Name, Grade, Marks_Obtained) VALUES ('John', 'Smith', 8, 60);
INSERT INTO Student_Scores (First_Name, Last_Name, Grade, Marks_Obtained) VALUES ('Tom', 'Stark', 5, 80);
CREATE TABLE IF NOT
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS Student;
CREATE TABLE Student (First_Name VARCHAR(20), Last_Name CHAR(20), Grade INT);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('John', 'Smith', 8);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('Jane', 'Lee', 9);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('Tom', 'Stark', 5);


[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS Student;
CREATE TABLE Student (First_Name VARCHAR(20), Last_Name CHAR(20), Grade INT);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('John', 'Smith', 8);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('Jane', 'Lee', 9);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('Tom', 'Stark', 5);
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS Student;
CREATE TABLE Student (FirstName VARCHAR(20), LastName CHAR(20), Grade INT);

INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('John', 'Smith', 8);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('Jane', 'Lee', 9);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('Tom', 'Stark', 5);

DROP TABLE IF EXISTS Student  -- Please test all the commands
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

DROP TABLE IF EXISTS Student
CREATE TABLE Student (
    FirstName CHAR(20),
    LastName CHAR(20),
    Grade INT
) -- Please test all the commands<fim_middle>
SHOW CREATE TABLE Student  -- Please test all the commands
SHOW CREATE DATABASE sampleDB; -- Please test all the commands

DROP TABLE IF EXISTS Student  -- Please test all the commands
CREATE TABLE Student (
    First_Name VARCHAR(20),
    LastName CHAR(20),
    Grade INT
)

SELECT * FROM Student

DROP TABLE IF EXISTS Student
CREATE TABLE Student (
    First_Name VARCHAR(20),
    LastName CHAR(20),
    Grade INT
);

SELECT * FROM Student WHERE Grade > 8

DROP TABLE IF EXISTS Student
CREATE TABLE Student (
    First_Name VARCHAR(20),
    LastName CHAR(20),
    Grade INT
);

SELECT Grade FROM Student WHERE grade <= 5 GROUP BY Grade HAVING COUNT(Grade) = 2
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS student;
CREATE TABLE student (first VARCHAR(50), last CHAR(25), grade INT);
INSERT INTO student (first,last,grade) VALUES ('John','Smith',8);
INSERT INTO student (first,last,grade) VALUES ('Jane','Lee',9);
INSERT INTO student (first,last,grade) VALUES ('Tom','Stark',5);
-- Please write a simple query which uses a group by clause, so that the grouping conditions are in a single query. You need to use sampleDB as the database. You can use the following SQL structure to create your database. Note: your program must create a table for each student for the first time.
 -- Please write a simple query which uses the SQL JOIN feature to access the records of two tables. This feature is named as left outer join. The left part of the JOIN specifies two tables to be joined on and the right part specifies the table which the output data will be stored in. Use sampleDB and test tables 
CREATE TABLE IF NOT EXISTS test (id INT);
CREATE TABLE IF NOT EXISTS student
SELECT ID, First_Name, Last_Name FROM student WHERE First_Name = "Jane" AND Last_Name NOT IN ('Donald', 'Thomas');
-- Please update the above query to change the condition to return John Smith that belongs to the group (John) but does not belong explicitly to group Donald.

-- In this assignment, you will have to write a simple query which extracts data from a selected table and creates a copy in another table.
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employee CASCADE;
CREATE TABLE employee (Employee_ID INT, First_Name VARCHAR(20), Last_Name CHAR(25), Seniority INT);
INSERT INTO employee (Employee_ID, First_Name, Last_Name, Seniority) VALUES 20, 'John','smith', 0;
INSERT INTO employee (Employee_ID, First_Name, Last_Name, Seniority) VALUES 21, 'Mary', 'Smith', 95;
INSERT INTO employee (Employee_ID, First_Name, Last_Name, Seniority) VALUES 23, 'Sarah', 'Jones', 
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- And execute it.
CREATE TABLE Student (First_Name VARCHAR(20), Last_Name CHAR(20), Grade INT);

-- NOTE:- In this case, MySQL only allows a maximum of 10000 columns and 10000 rows in a table. 

-- To drop table, just execute the following query on the mysql shell
DROP TABLE IF EXISTS Student;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS Student;
DROP TABLE IF EXISTS Subject;
CREATE TABLE Student (
  First_Name VARCHAR(20), Last_Name CHAR(20), Grade INT, Primary Key (First_Name, Last_Name)
);
CREATE TABLE Subject (
  Subject_Id INT NOT NULL primary key auto_increment,
  Name VARCHAR(20) UNIQUE,
  FOREIGN KEY (Subject_Id) REFERENCES Student (Subject_Id)
);
INSERT INTO Subject (Name) VALUES ('Physics');
INSERT INTO Subject (Name) VALUES ('Chemistry');
INSERT INTO Student (First_Name,Last_Name, Class) VALUES ('Drew','Stark', 'Physics');
INSERT INTO Student (First_Name,Last_Name, Class) VALUES ('Jhon','Hill', 'Physics');
INSERT INTO Student (First_Name,Last_Name, Class) VALUES ('Jim','Miller', 'Physics');
INSERT INTO Student (First_Name,Last_Name, Class) VALUES ('Albert','Einstein', 'Physics');
INSERT INTO Student (First_Name,Last_Name, Class) VALUES ('Charlie','Bender','Physics');
Insert into Subject (Name) values ('Engineering');
Insert into Subject (Name) values ('Social Studies');
Insert into Subject (Name) values ('Business');
Insert into Subject (Name) values ('Engineering');
Insert into Subject (Name) values ('Business');
Insert into Student (First_Name,Last_Name, Class) values ('Mark','Spencer', 'Engineering');
Insert into Student (First_Name, Last_Name, Class) values ('Billy', 'Harrison', 'Engineering');
Insert into Student (First_Name, Last_Name,Class) values ('Sue', 'Green', 'Engineering');
Insert into Student (First_Name, Last_Name,Class) values ('Sara', 'Johnson', 'Engineering');
Insert into Student (First_Name, Last_Name,Class) values ('Kevin', 'Stark', 'Engineering');
Insert into Subject (Name) values ('Biology');
Insert into Subject (Name) values ('Politics');
Insert into Subject (Name) values ('Physics');
Insert into Subject (Name) values ('Engineering');
Insert into
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SELECT * FROM grades WHERE grades.student_id = Students.Student_ID

-- https: 

DESCRIBE Student;
DESC Students;
DESC students;
--
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS Student;
CREATE TABLE Student (First_Name VARCHAR(20), Last_Name CHAR(20), Grade INT);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('John', 'Smith', 8);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('Jane', 'Lee', 9);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('Tom', 'Stark', 5);
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS Student;
CREATE TABLE Student (First_Name CHAR(20), Last_Name CHAR(20), Grade INT);
INSERT INTO Student VALUES ('John', 'Smith', 8);
INSERT INTO Student VALUES ('Jane', 'Lee', 9);
INSERT INTO Student VALUES ('Tom', 'Stark', 5);


[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS Student_1;
CREATE TABLE Student_1 (First_Name VARCHAR(20), Last_Name CHAR(20), Grade INT);
INSERT INTO Student_1 (First_Name, Last_Name, Grade) VALUES ('John', 'Smith', 8);
INSERT INTO Student_1 (First_Name, Last_Name, Grade) VALUES ('Tom', 'Stark', 5);
ALTER TABLE Student_1 CHANGE First_Name First_Name VARCHAR(20);
ALTER TABLE Student_1 CHANGE Last_Name Last_Name CHAR(20);
ALTER TABLE Student_1 ADD PRIMARY KEY (First_Name, Last_Name);
ALTER TABLE Student_1 ADD CONSTRAINT stu_fname UNIQUE (First_Name);
ALTER TABLE Student_1 ADD CONSTRAINT stu_lname UNIQUE (Last_Name);
-- INSERT INTO Student (first_name, last_name, grade) VALUES ('John', 'Smith', 5);
ALTER TABLE Student ADD CONSTRAINT stu_grade_gt_5 primary key (First_Name, Last_Name, Grade)
ALTER TABLE Student ADD CONSTRAINT stu_grade_lt_5_desc primary key (First_Name, Last_Name, Grade)

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

DROP TABLE IF EXISTS Student;
CREATE TABLE Student (First_Name VARCHAR(20), Last_Name CHAR(20), Grade INT);
INSERT INTO Student (Student_ID, First_Name, Last_Name, Grade) VALUES(1, 'John', 'Smith', 8);
INSERT INTO Student (Student_ID, First_Name, Last_Name, Grade) VALUES(2, 'Jane', 'Lee', 9);
INSERT INTO Student (Student_ID, First_Name, Last_Name, Grade) VALUES(3, 'Tom', 'Stark', 5);
SELECT First_Name, Last_Name FROM Student;

-- Please create a program which queries three tables using a semantical equivalent query. Be sure to use ENGINE=InnoDB.
-- This program should use three different queries:
--   SELECT First_Name, Last_Name FROM Student ORDER BY Last_Name; -- SELECT and then ORDER by Last_Name. You should sort the rows by the Last_Name column. Note: You don't have to return two columns (as you're already doing in the first case).
--   SELECT Student_ID, First_Name FROM Student WHERE Grade = 4; -- SELECT and then WHERE Statement. Use WHERE Grade = 4; to retrieve a row where Grade = 4.
--   SELECT Student_ID, First_Name FROM Student WHERE Grade <> 9; -- SELECT and then WHERE Statement. Use WHERE Grade <> 9; to retrieve a row where Grade <> 9.

-- You may test the program with the following queries but be warned that the same query may generate different results:
SELECT First_Name, Last_Name FROM Student ORDER BY Last_Name;
SELECT Student_ID, First_Name FROM Student WHERE Grade = 9;
SELECT Student_ID, First_Name FROM Student WHERE Grade <> 4;
-- The result returned by these three queries should not include duplicate rows. You can filter the rows to make sure that it is a complete result set - that is, should have no rows that have the same first name as another row.

SELECT Student_ID, First_Name, Grade FROM Student WHERE Grade = 8;
SELECT Student_ID, First_Name FROM
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS Student;
CREATE TABLE Student (First_Name  VARCHAR(20), Last_Name CHAR(20), Grade   INT);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('John',  'Smith',     8);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('Jane',   'Lee',       9);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('Tom',    'Stark',     5);
SELECT
  First_Name,
  Last_Name,
  Grade
FROM Student
WHERE
  Grade >= 7
ORDER BY
  First_Name;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS student;
CREATE TABLE student(ID INT UNSIGNED AUTO_INCREMENT, FIRST_NAME VARCHAR(20),
LAST_NAME CHAR(20), GRADE INT)ENGINE=INNODB; INSERT INTO student VALUES(1,'John', 'Smith', 8); INSERT INTO student VALUES(2,'Jane', 'Lee', 9); INSERT INTO Student_Graded VALUES(1,2);
DROP TABLE IF EXISTS student_graded;
CREATE TABLE student_graded(student_first_name VARCHAR(20), student_last_name CHAR(20), grade INT);
DROP INDEX IF EXISTS student_first_name;
DROP INDEX IF EXISTS student_last_name;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS Student;
CREATE TABLE Student (First_Name  VARCHAR(20), Last_Name CHAR(20), Grade   INT);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('John',  'Smith',     8);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('Jane',   'Lee',       9);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('Tom',    'Stark',     5);
SELECT
  First_Name,
  Last_Name,
  Grade
FROM Student
WHERE
  Grade >= 7
ORDER BY
  First_Name;
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS Student;
CREATE TABLE Student (First_Name  VARCHAR(20),
	Last_Name CHAR(20),
	Grade   INT);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('John',  'Smith',     8);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('Jane',   'Lee',       9);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('Tom',    'Stark',     5);
SELECT
  First_Name,
  Last_Name,
  Grade
FROM Student
WHERE
  Grade >= 7;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS Student;
CREATE TABLE Student (
  First_Name  VARCHAR(20),
  Last_Name   CHAR(20),
  Grade       INT,
  PRIMARY KEY (First_Name, Last_Name) );
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('John',  'Smith',     8);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('Jane',   'Lee',       9);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('Tom',    'Stark',     5);
SELECT
  First_Name,
  Last_Name,
  Grade
FROM Student
WHERE
  Grade >= 7
ORDER BY
  First_Name;
-- Please do your tests in the following scenario.
-- 
-- 1)	Create the table which has a Primary Key that is not a part of the order in which it is being ordered.
-- 2)	Select from the table without its primary key.
-- 3)	Insert new record in the table which is equivalent to the previous one.
-- 4)	Select from the table but the record with the primary key that is not the same as the previous one.
-- 5)	Update the record with the PRIMARY KEY and test if the update will work if the record is deleted.
-- 6)	Delete the record with the PRIMARY KEY and the record with other columns that are not part of the PRIMARY KEY column and update the row again and again.
-- 7)	Let the queries return.
-- 8)	Verify the results using any program that you write. You should be able to run the program from 1 through 9 and check the output.
-- 
-- The expected output should be: 
-- 
-- The first query should return the record, but the second should return NULL.
-- The first query should update the record and should work again, but should return NULL.
-- The first query should select without its primary key and should return three records.
-- The first query should insert
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS student;
CREATE TABLE student (first_name    VARCHAR(20), last_name     CHAR(20), grade  INT);
INSERT INTO student (first_name, last_name, grade) VALUES ('John',    'Smith',     8);
INSERT INTO student (first_name, last_name, grade) VALUES ('Jane',     'Lee',       9);
INSERT INTO student (first_name, last_name, grade) VALUES ('Tom',      'Stark',     5);
INSERT INTO student (first_name, last_name, grade) VALUES ('Amy',      'Stark',     9);
-- Please replace the previous program that uses JOIN to fetch ALL students having a minimum grade of 7.
USE sampleDB;
SHOW TABLES;
CREATE TABLE IF NOT EXISTS student_grades (student_id INT UNSIGNED, grade       INT);
INSERT INTO student_grades values (1, 5);
INSERT INTO student_grades values (2, 9);
INSERT INTO student_grades values (3, 3);
INSERT INTO student_grades values (4, 7);
INSERT INTO student_grades values (5, 1);
INSERT INTO student_grades values (6, 8);
INSERT INTO student_grades values (7, 2);
SELECT
  student.first_name,
  student.last_name,
  student_grades.grade
FROM student
JOIN student_grades ON
  student_grades.grade >= 7 AND
  student.id = student_grades.student_id
ORDER BY
  student.first_name;
-- Your new program should display results similar to the ones below from the previous generation.
USE sampleDB;
SHOW TABLES;
CREATE TABLE IF NOT EXISTS student_grades (student_id INT UNSIGNED, grade       INT);
INSERT INTO student_grades values (1, 5);
INSERT INTO student_grades values (2, 9);
INSERT INTO student_grades values (3, 3);
INSERT INTO student_grades
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS Student;
CREATE TABLE Student (First_Name  VARCHAR(20), Last_Name CHAR(20),
  Grade   INT);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('John',   'Smith',     8);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('Jane',   'Lee',       9);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('Tom',    'Stark',     5);
SELECT
First_Name,
Last_Name,
Grade
FROM Student
WHERE
Grade >= 7
ORDER by first_Name;


-- 
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS Student;
CREATE TABLE Student (First_Name  VARCHAR(20), Last_Name CHAR(20), Grade BOOLEAN);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('John',  'Smith',     true);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('Jane',   'Lee',       false);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('Tom',    'Stark',     true);
SELECT
  First_Name,
  Last_Name,
  Grade
FROM Student
WHERE
  Grade >= 7
ORDER BY
  First_Name;
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS Student;
CREATE TABLE Student (First_Name  VARCHAR(20), Last_Name CHAR(20), Grade BOOLEAN);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('John',  'Smith',     true);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('Jane',   'Lee',       false);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('Tom',    'Stark',     true);
SELECT
  First_Name,
  Last_Name,
  Grade
FROM Student
WHERE
  Grade >= 7
ORDER BY
  First_Name;
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS Student;
CREATE TABLE Student (First_Name  VARCHAR(20), Last_Name CHAR(20), Grade BOOLEAN);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('John',  'Smith',     true);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('Jane',   'Lee',       false);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('Tom',    'Stark',     true);
SELECT
  Count(*),
  Grade
FROM Student
GROUP BY
  Grade
ORDER BY
  Grade DESC;
 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS Student;
CREATE TABLE Student (First_Name  VARCHAR(20), Last_Name CHAR(20), Grade BOOLEAN);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('John',  'Smith',     true);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('Jane',   'Lee',       false);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('Tom',    'Stark',     true);
SELECT
  Count(*),
  Group_concat(Grade order by Grade  SEPARATOR '|'  )
FROM Student
GROUP BY
  Grade
HAVING
  Count(*) > 1;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS Student;
CREATE TABLE Student (First_Name  VARCHAR(20), Last_Name CHAR(20), Grade BOOLEAN);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('John',  'Smith',     true);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('Jane',   'Lee',       false);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('Tom',    'Stark',     true);
SELECT
  First_Name,
  Last_Name,
  Grade
FROM Student
WHERE
  Grade >= 7
ORDER BY
  First_Name;


[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS Student;
 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS Student;
CREATE TABLE Student (First_Name  VARCHAR(20), Last_Name CHAR(20), Grade BOOLEAN);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('John',  'Smith',     true);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('Jane',   'Lee',       false);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('Tom',    'Stark',     true);
SELECT
  First_Name,
  Last_Name,
  Grade
FROM Student
WHERE
  Grade >= 7
ORDER BY
  First_Name;
```


[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS Student;
CREATE TABLE Student (First_Name  VARCHAR(20), Last_Name CHAR(20), Grade BOOLEAN);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('John',  'Smith',     true);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('Jane',   'Lee',       false);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('Tom',    'Stark',     true);
UPDATE
  Student
SET
  Grade = false
WHERE
  Grade = true;
SELECT
  First_Name,
  Last_Name,
  Grade
FROM Student
WHERE
  Grade >= 7
ORDER BY
  First_Name;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS Student;
CREATE TABLE Student (First_Name  VARCHAR(20), Last_Name CHAR(20), Grade boolean);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('John',  'Smith',     true);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('Jane',   'Lee',       false);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('Tom',    'Stark',     true);
SELECT
  First_Name,
  Last_Name,
  Grade
FROM Student
WHERE
  Grade is TRUE
ORDER BY
  First_Name;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS Student;
CREATE TABLE Student (First_Name  VARCHAR(20), Last_Name CHAR(20), Grade boolean);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('John',  'Smith',     true);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('Jane',   'Lee',       false);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('Tom',    'Stark',     true);
SELECT
  First_Name,
  Last_Name,
  Grade
FROM Student
WHERE
  Grade is TRUE
ORDER BY
  First_Name;
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS Student;
CREATE TABLE Student (First_Name  VARCHAR(20), Last_Name CHAR(20), Grade boolean);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('John',  'Smith',     true);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('Jane',   'Lee',       false);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('Tom',    'Stark',     true);
SELECT
  First_Name,
  Last_Name,
  Grade
FROM Student,
  (SELECT First_Name,
           Last_Name,
           Grade
  FROM Student
) AS student2
WHERE
  Student.Last_Name  =  student2.Last_Name
ORDER BY
  Student.Last_Name;
 
CREATE TABLE students (Student_ID serial, First_Name VARCHAR(20), Last_Name CHAR(20), Grade Boolean);

 

CREATE VIEW studentView AS SELECT First_Name,
Last_Name,
Grade
FROM Student,
(SELECT  First_Name AS School_Student_First_Name,
         Last_Name AS School_Student_Last_Name,
         Grade        AS School_Student_Grade
FROM Student
) AS student2;

/*
* Create a new query which searches for the string “Jane” in the Students table. You should then select the values of (
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS Student;
CREATE TABLE Student(First_Name  VARCHAR(20), Last_Name CHAR(20), Grade boolean, Labeled INTEGER);
INSERT INTO Student (First_Name) VALUES ('John1');
INSERT INTO Student (Last_Name) VALUES ('Smith2');
INSERT INTO Student (First_Name, Last_Name) VALUES ('Jane3',  'Lee4');
INSERT INTO Student (Grade) VALUES  ('true');
INSERT INTO Student (Labeled) VALUES ('1');
SELECT Labeled
FROM Student
WHERE Grade is TRUE
ORDER BY Grade, Labeled DESC;
DROP TABLE IF EXISTS Student;
CREATE TABLE Student(First_Name  VARCHAR(20), Last_Name CHAR(20), Grade boolean, Labeled INTEGER);
INSERT INTO Student (First_Name) VALUES ('John1');
INSERT INTO Student (Last_Name) VALUES ('Smith2');
INSERT INTO Student (First_Name, Last_Name) VALUES ('Jane3',  'Lee4');
INSERT INTO Student (Grade) VALUES  ('true');
INSERT INTO Student (Labeled) VALUES ('1');
SELECT Labeled
FROM Student
WHERE Grade is TRUE
ORDER BY Grade, Labeled DESC LIMIT 2, 2;
-- MySQL, named after co-founder <NAME>'s daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS Student;
CREATE TABLE Student (First_Name  VARCHAR(20), Last_Name CHAR(20), Grade boolean);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('John', 'Smith', TRUE);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('Jane',  'Lee', FALSE);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('Tom','Stark', TRUE);
SELECT ( SELECT First_Name From Student WHERE Grade = TRUE ) AS Name
FROM Student
WHERE
  Grade is TRUE
ORDER BY
  First_Name;
SELECT
  First_Name,
  Last_Name,
  Grade
FROM Student
WHERE
  Grade is TRUE
ORDER BY
  Last_Name;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS Class;
CREATE TABLE Class (Class_no INTEGER, Course_no INTEGER );
INSERT INTO Class (Class_no, Course_no ) VALUES (1000,  1);
INSERT INTO Class (Class_no, Course_no ) VALUES (1001,  2);
INSERT INTO Class (Class_no, Course_no ) VALUES (1002,  3);
INSERT INTO Class (Class_no, Course_no ) VALUES (1004,  4);
INSERT INTO Class (Class_no, Course_no ) VALUES (1005,  5);
INSERT INTO Class (Class_no, Course_no ) VALUES (1006,  6);
INSERT INTO Class (Class_no, Course_no ) VALUES (1007,  7);
INSERT INTO Class (Class_no, Course_no ) VALUES (1008,  8);
SELECT
  Class_no,
  Course_no
FROM Class
WHERE
  Course_no = 6
ORDER BY
  Class_no;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS Student;
CREATE TABLE Student (First_Name  varchar(20), Last_Name  varchar(20), Grade boolean);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('John', 'Smith',     true);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('Jane',  'Lee',       false);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('Tom',   'Stark',     true);

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS Student;
CREATE TABLE Student (First_Name  varchar(20), Last_Name  varchar(20), Grade boolean);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('John', 'Smith',     true);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('Jane',  'Lee',       false);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('Tom',   'Stark',     true);
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS Student;
CREATE TABLE Student (First_Name  varchar(20), Last_Name  varchar(20), Grade boolean);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('John', 'Smith',     true);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('Jane',  'Lee',       false);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('Tom',   'Stark',     true);

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS Department;
CREATE TABLE Department (dname char(30));
INSERT INTO Department VALUES ('CS');
INSERT INTO Department VALUES ('DB');
INSERT INTO Department VALUES ('ME');
INSERT INTO Department VALUES ('MGT');
INSERT INTO Department VALUES ('HR');
 
CREATE DATABASE IF NOT EXISTS sampleDB;
USE sampleDB;

 
 
CREATE DATABASE IF NOT EXISTS sampleDB; SELECT * INTO SqL_Result FROM Sample_Table;
 
CREATE TABLE IF NOT EXISTS DEPT(
    dname char(20)
);
SELECT * FROM DEPT;
CREATE TABLE IF NOT EXISTS EMP(
    eid     int(11),
    ename    text,
    empsal  int(11)
);
INSERT INTO EMP VALUES (12, 'Peter', 100);

 
CREATE DATABASE IF NOT EXISTS sampleDB; USE Sample_DB;
DROP TABLE IF EXISTS EMP;
CREATE TABLE EMP(
    eid     int(11),
    ename    text,
    empsal  int(11)
)ENGINE=InnoDB;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS Student;
CREATE TABLE Student( First_name char(20), Last_name char(20));
INSERT INTO Student VALUES ('John', 'Smith');
INSERT INTO Student VALUES ('Jane', 'Lee');
INSERT INTO Student VALUES ('Tom', 'Stark');
DROP DATABASE sampleDB;

* Run the query from your terminal to access the database
mysql -u root sampleDB

* Check if the table exists by selecting it (or by typing its name).
mysql> SHOW CREATE TABLE Student;
```
```
mysql> DESCRIBE Student;
+------------+--------------+------+-----+---------+-------+
| Field      | Type         | Null | Key | Default | Extra |
+------------+--------------+------+-----+---------+-------+
| First_Name | char(20)     | NO   |     |         |       |
| Last_Name  | char(20)     | NO   |     |         |       |
| Grade      | tinyint(1)  | NO   |     |         |       |
| PRIMARY KEY | PRIMARY KEY  | PRI  |     |         |       |
+------------+--------------+------+-----+---------+-------+
3 rows in set (0.00 sec)
```
```
mysql> SHOW INDEX FROM Student;
+--------------+-------+------+-----+---------+----------------+
| Table_Name   | Non_ unique | Key_name | Seq_in_index | Column_name | Collation |
|--------------+-------+------+-----+---------+----------------+
| Student      |         0 | PRIMARY |    1 | First_Name | A                   |
|--------------+-------+------+-----+---------+----------------+
+--------------+-------+------+-----+---------+----------------+
5 rows in set (0.00 sec)
```
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `Lecture`;
CREATE TABLE `Lecture` (
	`Lecture_ID` INT NOT NULL,
	`Course_Code` VARCHAR(40) NOT NULL,
	`Course_Name` VARCHAR(255) NULL,
	PRIMARY KEY (`Course_Code`)
);

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS Student;
CREATE TABLE Student (First_Name  varchar(20), Last_Name  varchar(20), Grade boolean);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('John', 'Smith',     true);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('Jane',  'Lee',       false);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('Tom',   'Stark',     true);
 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS Student;
CREATE TABLE Student (First_Name  varchar(20), Last_Name  varchar(20), Grade boolean);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('John', 'Smith',     true);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('Tom',   'Stark',     true);
INSERT INTO Student (First_Name, Last_Name, Grade) VALUES ('Jane',  'Lee',       false);

## Databases and Servers
In order to use the database you just created on your local machine, you need to create two more files in your MySQL client that are responsible for connecting to the database and for performing operations.

* **MySQLClient.php** : This file provides simple functions for performing database operations to your database. See below for further information. This file has one function for creating database tables.
* **server.php** : This file is required as part of the LAMP stack. It contains the configuration information about your server. You may want to create this file on your system administrator machine.


[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `Lecture`;
CREATE TABLE `Lecture` (
	`Lecture_ID` INT NOT NULL,
	`Course_Code` VARCHAR(40) NOT NULL,
	`Course_Name` VARCHAR(255) NULL,
	PRIMARY KEY (`Course_Code`)
);
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS Lecture;
CREATE TABLE Lecture (
	Lecture_ID INT NOT NULL,
	Course_Code VARCHAR(40) NOT NULL,
	Course_Name VARCHAR(255),
	PRIMARY KEY (Course_Code)
);
ALTER TABLE Lecture ADD CONSTRAINT Course_Code PRIMARY KEY (Course_Code);
-- Now write a select query which returns the count of lectures associated with the code, where Course_Code is 'CS25'
SELECT COUNT(*) FROM Lecture WHERE Course_Code="CS25"

-- What happens if the value inserted in the primary key column is not in the required format to uniquely identify a row?

-- Hint
ALTER TABLE Lecture CHANGE Course_ID Course_ID;
ALTER TABLE Lecture DROP PRIMARY KEY;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO `Lecture` (`Course_Code`, `Course_Name`) VALUES ("A01", "Information Systems"); -- please run these lines to see the changes.
INSERT INTO `Lecture` (`Course_Code`, `Course_Name`) VALUES ("A02", "Web Services");
INSERT INTO `Lecture` (`Course_Code`, `Course_Name`) VALUES ("A04", "Machine Learning");
INSERT INTO `Lecture` (`Course_Code`, `Course_Name`) VALUES ("A0401", "Machine Learning Algorithms");
DROP TABLE IF EXISTS `Lecture`;
 
-- If your database is empty in sampleDB, you should run the next query to create some rows.
-- Then insert the following values into sampleDB before running the query. Be sure to use ENGINE = InnoDB.
-- A01 is a valid lecture Code.
-- A10 is a second lecture Code.
INSERT INTO `Lecture` (`Course_Code`, `Course_Name`) VALUES ("A01", "Information Systems");
INSERT INTO `Lecture` (`Course_Code`, `Course_Name`) VALUES ("A02", "Web Services");
INSERT INTO `Lecture` (`Course_Code`, `Course_Name`) VALUES ("A10", "Machine Learning");
DROP TABLE IF EXISTS `Lecture`;

-- Please create a mutated program that displays course Codes A0402 through A0409 in the course Codes A0410 through A0419 in the Lecture table.
-- Please make sure you use ENGINE = InnoDB. You should use sampleDB as the database.
ALTER USER 'root'@'%' IDENTIFIED BY '<PASSWORD>';
-- Please note that if the MySQL root user was created without a password, you should use the command to see the password change.
USE sampleDB;
SHOW GRANTS FOR 'root'@'%';
DROP TABLE IF EXISTS `Lecture`;
DROP DATABASE IF EXISTS sampleDB;

-- Please write a query that adds two rows into Lecture table as mentioned in Sample DB contents.
-- You need to use ENGINE = InnoDB and if necessary, change sampleDB password.

-- Please write a
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO `Lecture`(`Course_Code`,`Course_Name`) VALUES ('PHP4', 'PHP for the Web');
INSERT INTO `Lecture` (`Course_Code`, `Course_Name`) VALUES ('PHP5', 'PHP for Dummies');
INSERT INTO `Lecture` `Course_Code` (`Lecture_ID`) `Course_Name`;
DROP TABLE IF EXISTS `Lecture`;

CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB, IF NOT EXISTS `Lecture`;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `Lecture`;
CREATE TABLE `Lecture` (
	`Lecture_ID` INT NOT NULL,
	`Course_Code` VARCHAR(40) NOT NULL,
	`Course_Name` VARCHAR(255) NULL,
	PRIMARY KEY (`Course_Code`)
);
INSERT INTO Lecture VALUES
(1, 'CS2031', "Computer Science 2031"),
(2, 'CS2041', "Computer Science 2041"),
(3, 'CS2043', "Computer Science 2043"),
(4, 'CS2044', "Computer Science 2044"),
(5, 'MATH306', "Math 306"),
(6, 'MATH307', "Math 307"),
(7, 'MATH311', "Math 311");

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

 
-- INSERT DATA;
-- DROP TABLE IF EXISTS `FirstTable`;
-- DROP TABLE IF EXISTS `SecondTable`;
 
-- SHOW TABLES;
 
-- DROP DATABASE IF EXISTS `sampleDB`;
-- DROP DATABASE IF EXISTS `anotherDB`;
-- DROP DATABASE IF EXISTS `yetAnotherDB`;
 
DROP DATABASE IF EXISTS `sampleDB`;
 
DROP DATABASE IF EXISTS `anotherDB`;

 ;
 ;
 ;
	 ;
 ;
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- INSERT DATA;
-- DROP TABLE IF EXISTS `FirstTable`;
-- DROP TABLE IF EXISTS `SecondTable`;
-- SHOW TABLES;
-- DROP DATABASE IF EXISTS `sampleDB`;
-- DROP DATABASE IF EXISTS `anotherDB`;
-- DROP DATABASE IF EXISTS `yetAnotherDB`;
DROP DATABASE IF EXISTS `sampleDB`;
DROP DATABASE IF EXISTS `anotherDB`;
 ;
 ;
 ;
	 ;
 ;
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
 
INSERT INTO `FirstTable` VALUES (1, "name1");
INSERT INTO `SecondTable` VALUES (1, "name2");
INSERT INTO `SecondTable` VALUES (2, "name3");
SELECT 1 INTO NEW.NEWCOL1 FROM `FirstTable`;
SELECT 2 INTO NEW.NEWCOL2 FROM `FirstTable`;
SELECT 3 INTO NEW.NEWCOL3 FROM `FirstTable`;
SELECT 3 INTO NEW.NEWCOL3 FROM `SecondTable`;
SELECT 1 INTO NEW.NEWCOL1 FROM `FirstTable`;
SELECT COUNT(*) into `COUNT1` from `SecondTable`;
SELECT DISTINCT `SecondTable`.`ID3` INTO `COUNT1` FROM `FirstTable`, `SecondTable` WHERE `FirstTable`.`ID1` = `SecondTable`.`ID1`;
DROP DATABASE IF EXISTS `sampleDB`;
SELECT * FROM `FirstTable`;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.


[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `FirstTable`;
DROP TABLE IF EXISTS `SecondTable`;
SHOW TABLES;
INSERT INTO `FirstTable` VALUES ('First','Last','10.000.000.99');
INSERT INTO `SecondTable` VALUES ('Second','Last','1200.00.11');
SELECT * FROM `FirstTable`, `SecondTable`;
SELECT `FirstTable`.`Name`, `FirstTable`.`Surname`, `FirstTable`.`Phone` FROM `FirstTable`;
SELECT `SecondTable`.`Name`, `SecondTable`.`Surname`, `SecondTable`.`Phone` FROM `SecondTable`;
SELECT IF (`FirstTable`.`Phone` < `SecondTable`.`Phone`, 'First', 'Second') FROM `FirstTable`, `SecondTable`;
SELECT IF(`FirstTable`.`Phone` < `SecondTable`.`Phone`, 'First', `Second`) AS `Contact`;
SELECT `FirstTable`.*, `SecondTable`.* FROM `FirstTable`, `SecondTable`;
-- Please print the following queries. Feel free to modify the query to find the smallest price.
SELECT `FirstTable`.`Price`, `SecondTable`.`Price` FROM `FirstTable`, `SecondTable`;
-- Please use one or more joins to find out how many customers spend up to $600.
-- Please print the following query.
SELECT `CustomerName`, `LastName` FROM `Customer`
JOIN `Invoices` ON `Invoices`.`CustomerName` = `Customer`.`CustomerName`
JOIN `Orders` ON `Orders`.`InvoiceNo` = `Invoices`.`InvoiceNo`;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- You should be able to successfully select a table and query results from the original table
SELECT * FROM FirstTable;
-- INSERT DATA INTO `FirstTable`
INSERT INTO FirstTable VALUES (1, 'This is just an inserted row', 26, 9, 25, 47);
INSERT INTO FirstTable VALUES (2, 'This is just an inserted row', 27, 9, 20, 44);
INSERT INTO FirstTable VALUES (3, 'This is just an inserted row', 28, 9, 15, 42);
insert into `SecondTable`
(id, category_id, title, release_date, first_aired, runtime)
VALUES (4,2, 'Inspirational Homenick', '2020-04-13', '2020-11-28', '142');
insert into `SecondTable`
(id, category_id, title, release_date, first_aired, runtime)
VALUES (4,2, 'Inspirational Homenick', '2020-04-13', '2020-11-28', '142');
SELECT * FROM `FirstTable`;
DROP TABLE IF EXISTS `FirstTable`;
DROP TABLE IF EXISTS `SecondTable`;
DROP DATABASE IF EXISTS `sampleDB`;
;
;
;
;
-- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder <NAME>' daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
UPDATE `firstTable` SET `field2`='2000/01/22' WHERE `field1`='2001/01/23';
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- INSERT DATA;
-- DROP TABLE IF EXISTS `FirstTable`;
-- DROP TABLE IF EXISTS `SecondTable`;
-- SHOW TABLES;
-- DROP DATABASE IF EXISTS `sampleDB`;
-- DROP DATABASE IF EXISTS `anotherDB`;
-- DROP DATABASE IF EXISTS `yetAnotherDB`;
DROP DATABASE IF EXISTS `sampleDB`;
DROP DATABASE IF EXISTS `anotherDB`;
 ;
 ;
 ;
	 ;
 ;
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `firstTable`;

ALTER TABLE firstTable
  ADD `lastName` varchar(30);
DROP TABLE IF EXISTS `secondTable`;

ALTER TABLE secondTable
  ADD `lastName` varchar(30);
DROP DATABASE IF EXISTS `sampleDB`;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
TRUNCATE TABLE `FirstTable`;
TRUNCATE TABLE `SecondTable`;
DROP TABLE IF EXISTS `FirstTable`;
DROP TABLE IF EXISTS `SecondTable`;
CREATE TABLE `FirstTable` (`firstColumn` TEXT);
CREATE TABLE `SecondTable` (`secondColumn` TEXT);

 
USE sampleDB; SHOW tables; DESC sys.innodb_table_stats `FirstTable`;

INSERT INTO sys.innodb_table_stats(`name`, `table_id`, `index_id`, `stats_id`, `heap_data_file_id`, `num_read`, `num_key_reads`, `num_write`, `bytes_read`, `bytes_read_ahead`, `bytes_written`, `index_read`, `index_read_ahead`, `index_write`, `index_write_ahead`, `bytes_stored`, `rows_inserted`, `rows_updated`, `bytes_inserted`, `bytes_deleted`, `bytes_tested`, `bytes_freed`) VALUES ('FirstTable', '0', NULL, NULL, '0', 1, 0, 0, 17, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0);

SELECT `firstColumn`, sys.innodb_table_stats(`firstColumn`, 'FirstTable', 'FirstColumn', 'FirstColumnStats', '0', 1, 0, 0, 17, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 16) AS `FirstTable` from `FirstTable` WHERE sys.innodb_table_stats(`firstColumn`, 'FirstTable', 'FirstColumn', 'FirstColumnStats', '0', 1, 0,
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

-- INSERT DATA;
-- DROP TABLE IF EXISTS `FirstTable`;
-- DROP TABLE IF EXISTS `SecondTable`;
-- SHOW TABLES;
-- DROP DATABASE IF EXISTS `sampleDB`;
-- DROP DATABASE IF EXISTS `anotherDB`;
-- DROP DATABASE IF EXISTS `yetAnotherDB`;
DROP DATABASE IF EXISTS `sampleDB`;
DROP DATABASE IF EXISTS `anotherDB`;
 ;
 ;
 ;
	
-- PLEASE USE ENGINE=InnoDB instead of INNODB
DROP DATABASE IF EXISTS `sampleDB`;
DROP DATABASE IF EXISTS `anotherDB`;
DROP DATABASE IF EXISTS `yetAnotherDB`;
 ;
 ;

SELECT *
FROM  mysql.user; SELECT *
FROM sqlite_master;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP DATABASE IF EXISTS `sampleDB`;
CREATE DATABASE IF NOT EXISTS sampleDB (DEFAULT CHARACTER SET = utf8); 
DROP DATABASE IF EXISTS `sampleDB`;
DROP DATABASE IF EXISTS `anotherDB`;
DROP DATABASE IF EXISTS `yetAnotherDB`;
;
 ;
 CREATE DATABASE IF NOT EXISTS `anotherDB`  ;
CREATE DATABASE IF NOT EXISTS `sampleDB`  ;
CREATE DATABASE IF NOT EXISTS `yetAnotherDB`  ;
USE `sampleDB`
CREATE TABLE firstTable (id VARCHAR (255) NOT NULL);
SHOW TABLES;
INSERT INTO `firstTable` (id) VALUES ('FirstRow');
INSERT INTO `firstTable` (id) VALUES ('SecondRow');
SELECT * FROM firstTable;
# Now we need to load the database in memory.
-- Now let's load the sampleDB database in memory as a table.
SELECT * FROM sampleDB.firstTable;
 -- Now load the sampleDB database in memory again. 
SELECT * FROM sampleDB.firstTable;
DROP TABLE `sampleDB`.firstTable;
 SELECT * FROM sampleDB.firstTable;
 -- Now drop the test table which is not part of sampleDB. 
DROP TABLE `sampleDB`.firstTable;
 SHOW TABLES;
-- Also there should be no table named sampleTable anymore.
;

SHOW TABLE STATUS FROM sampleDB;
;
SHOW TABLE STATUS FROM sampleTable;
;
CREATE TABLE secondTable (id INT(11) NOT NULL, name VARCHAR(255) NOT NULL);
CREATE TABLE thirdTable (id INT(11) NOT NULL, name VARCHAR(255) NOT NULL);
INSERT INTO `secondTable` (id, name) Values (2, 'This is a Second row');
INSERT INTO `secondTable` (id, name) VALUES (3, 'Third row');
INSERT INTO `thirdTable` (id, name) VALUES (2, 'This is a third row');
INSERT INTO `thirdTable` (id, name) VALUES (3, 'Third row');
SELECT * FROM `secondTable`;
SELECT * FROM `thirdTable`;
DROP TABLE IF EXISTS `secondTable`;

# Using UNION operator on two table is the same as the normal UNION query and gives you the common row or columns
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO `FirstTable` VALUES ('Aaa'), ('Bbb'), ('Ccc');
SELECT * FROM `FirstTable`;
SELECT name, score FROM `FirstTable` ORDER BY score DESC LIMIT 5;
UPDATE `FirstTable` SET score = 100 WHERE name = 'Xyz';
SELECT id, score FROM `FirstTable`;
SHOW TABLES;
DROP DATABASE IF EXISTS `sampleDB`;
DROP DATABASE IF EXISTS `anotherDB`;
DROP DATABASE IF EXISTS `yetAnotherDB`;
;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- INSERT DATA;
-- DROP TABLE IF EXISTS `FirstTable`;
-- DROP TABLE IF EXISTS `SecondTable`;
-- SHOW TABLES;
-- DROP DATABASE IF EXISTS `sampleDB`;
-- DROP DATABASE IF EXISTS `anotherDB`;
-- DROP DATABASE IF EXISTS `yetAnotherDB`;
DROP DATABASE IF EXISTS `sampleDB`;
DROP DATABASE IF EXISTS `anotherDB`;
 ;
 ;
 ;
	 ;
 ;
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP DATABASE IF EXISTS `sampleDB`;
 ;
 ;
 -- show tables; use the below queries
 -- show tables;
-- create new table with a foreign key constraint
-- DROP TABLE IF EXISTS `FirstTable`;
-- DROP TABLE IF EXISTS `SecondTable`;
-- ALTER TABLE `FirstTable` CHANGE COLUMN `id` `id` INT NOT NULL;
-- ALTER TABLE `SecondTable` CHANGE COLUMN `id` `id` INT NOT NULL;
-- ALTER TABLE `FirstTable` ADD CONSTRAINT `fk_FirstTable_SecondTable` FOREIGN KEY (`SecondTable_id`) REFERENCES `SecondTable` (`id`) ON DELETE SET NULL ON UPDATE CASCADE;
-- ALTER TABLE `SecondTable` ADD CONSTRAINT `fk_SecondTable_FirstTable` FOREIGN KEY (`FirstTable_id`) REFERENCES `FirstTable` (`id`) ON DELETE SET NULL ON UPDATE CASCADE;
-- CREATE TABLE IF NOT EXISTS `users` (
     `id` INT NOT NULL AUTO_INCREMENT,
     `fullname` varchar(255) DEFAULT NULL COMMENT 'the user\'s fullname (max: 255 characters)',
     `age` INT DEFAULT NULL COMMENT 'the user\'s age, the range in (0,700), null if not known. This is also known as the "height" of a person.',
     `salary` INT DEFAULT NULL COMMENT'salary for the user.',
     PRIMARY KEY (`id`)
 )ENGINE=InnoDB;
-- INSERT DATA
INSERT INTO `firsttable` (id,name,age,salary) VALUES (11,"John","18","50000"), (21,"Paul","2","10000");
INSERT INTO `secondtable` (id,name,age,salary,secondtable_id) VALUES (11,"Andrew","19","120000", 11);
-- show tables
-- use a normal query with SQL
SELECT* FROM firsttable;
-- update a value using a normal query with SQL
UPDATE `firsttable` SET `age`=5.5 WHERE `age`=5.5;
-- DELETE from a table with a normal query with SQL
DELETE FROM `firsttable` WHERE `salary`=10;
-- select columns from a table with a normal query with SQL
SELECT `age` FROM `firsttable`;
-- SELECT multiple columns from a table with a normal query with SQL
SELECT `firstname` AS `
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `FirstTable`;
DROP TABLE IF EXISTS `SecondTable`;
DROP TABLE IF EXISTS `ThirdTable`;
DROP TABLE `FirstTable`;
DROP TABLE `SecondTable`;
SHOW TABLES;
CREATE TABLE `FirstTable` (`id` INT, `name` VARCHAR(64), `email` VARCHAR(128));
CREATE TABLE `SecondTable` (`id` INT, `firstName` VARCHAR(64), `lastName` VARCHAR(64), `age` INT);
CREATE TABLE `ThirdTable` (`id` INT, `city` VARCHAR(100), `country` VARCHAR(80), `zipcode` VARCHAR(10));
 -- INSERT DATA;
-- SELECT INTO TABLE `ThirdTable`;
-- INSERT INTO TABLE `ThirdTable`;
 -- INSERT INTO TABLE `ThirdTable`;
CREATE TABLE `SecondTable`(`id`INT, `name` VARCHAR(64), PRIMARY KEY (`id`));
INSERT INTO TABLE FirstTable VALUES(1, 'Bob', 'Smith');
INSERT INTO TABLE SecondTable SELECT id + 1, 'Bob';
INSERT INTO TABLE ThirdTable VALUES(1, 'Woodstock', 'United States', '59997');
SELECT * FROM ThirdTable;
SELECT * FROM SecondTable;
ALTER TABLE SECONDTABLE CHANGE COLUMN `id` `firstname` VARCHAR(20);

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
 -- INSERT DATA;
 -- DROP TABLE IF EXISTS `table1`;
 ALTER TABLE `table1` CHANGE `col1` `col2` TINYINT(1);
 ALTER TABLE `table1` CHANGE `col1` `col2` TINYINT(2);
 ALTER TABLE `table1` CHANGE `col2` `col1` TINYINT(1);
 ALTER TABLE `table1` CHANGE `col1` `col2` TINYINT(3);
 ALTER TABLE `table1` CHANGE `col2` `col1` TINYINT(2);
 ALTER TABLE `table1` CHANGE `col1` `col2` TINYINT(5);

 -- DROP TABLE IF EXISTS `table2`;
 ALTER TABLE `table2` CHANGE `col1` `col2` TINYINT(1);
 ALTER TABLE `table2` CHANGE `col1` `col2` TINYINT(2);
 -- ALTER TABLE `table2` CHANGE `col2` `col1` TINYINT(2);
 ALTER TABLE `table2` CHANGE `col2` `col1` TINYINT(1);
  ALTER TABLE `table2` CHANGE `col2` `col1` TINYINT(3);
 ALTER TABLE `table2` CHANGE `col1` `col2` TINYINT(2);
 ALTER TABLE `table2` CHANGE `col1` `col2` TINYINT(4);
 ALTER TABLE `table2` CHANGE `col1` `col2` TINYINT(6);
 ALTER TABLE `table2` CHANGE `col1` `col2` TINYINT(1);
 
 -- DROP TABLE IF EXISTS `table3`;
 ALTER TABLE `table3` CHANGE `col1` `col2` TINYINT(1);
 ALTER TABLE `table3` CHANGE `col1` `col2` TINYINT(2);
 ALTER TABLE `table3` CHANGE `col1` `col2` TINYINT(3);
 ALTER TABLE `table3` CHANGE `col1` `col2` TINYINT(4);
 ALTER TABLE `table3` CHANGE `col1` `col2` TINYINT(5);
 
 -- DROP TABLE IF EXISTS `table4`;
 ALTER TABLE `table4` CHANGE `col1` `col2
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `FirstTable`;
DROP TABLE IF EXISTS `SecondTable`;
CREATE TABLE `FirstTable` ( `Name` varchar(20) NOT NULL)ENGINE=InnoDB DEFAULT CHARSET=utf8;
CREATE TABLE `SecondTable` ( `ID` INT NOT NULL AUTO_INCREMENT, `Name` varchar(200) NOT NULL, `Address` varchar(200) NOT NULL, `Birthdate` DATETIME NOT NULL, `Gender` ENUM('MALE','FEMALE','UNDISCLOSED','NA'), `Type` ENUM('PERSON','COMPANY'), `Phone` VARCHAR(10) NOT NULL, PRIMARY KEY(`ID`));
INSERT INTO `FirstTable` (`Name`) VALUES 
    ('Name1'), ('Name2'), ('Name3'), ('Name4');
INSERT INTO `SecondTable`(`Name`,`Address`,`Birthdate`,`Gender`,`Type`,`Phone`) VALUES
    (NULL,'Address','Birthdate','Gender','Type','Phone'),
    (NULL,'Address','Birthdate','Gender','Type','Phone'),
    (NULL,'Address','Birthdate','Gender','Type','Phone'),
    (NULL,'Address','Birthdate','Gender','Type','Phone'),
    (NULL,'Address','Birthdate','Gender','Type','Phone'),
    (NULL,'Address','Birthdate','Gender','Type','Phone'),
    (NULL,'Address','Birthdate','Gender','Type','Phone'),
    (NULL,'Address','Birthdate','Gender','Type','Phone'),
    (NULL,'Address','Birthdate','Gender','Type','Phone'),
    (NULL,'Address','Birthdate','Gender','Type','Phone'),
    (NULL,'Address','Birthdate','Gender','Type','Phone'),
    (NULL,'Address','Birthdate','Gender','Type','Phone'),
    (NULL,'Address','Birthdate','Gender','Type','Phone'),
    (NULL,'Address','Birthdate','Gender','Type','Phone'),
    (NULL,'Address','Birthdate','Gender','Type','Phone'),
    (NULL,'Address','Birthdate','Gender','Type','Phone'),
    (NULL,'Address','Birthdate','Gender','Type','Phone'),
    (NULL,'Address','Birthdate','Gender','Type','Phone'),
    (NULL,'Address','Birthdate','Gender','Type','Phone'),
    (NULL,'Address','Birthdate','Gender','Type','Phone'),
    (NULL,'Address','Birthdate','Gender','Type','Phone'),
    (NULL,'Address','Birthdate','Gender','Type
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- Insert data in the existing tables
INSERT INTO `firstTable` (Id, firstName, lastName) VALUES (2, 'Sam', 'Smith');
INSERT INTO `firstTable` (Id, firstName, lastName) VALUES (3, 'Ben', 'Green');
INSERT INTO `secondTable` (Id, lastName) VALUES ('Walsh');
INSERT INTO `secondTable` (Id, lastName) VALUES ('Watts');
INSERT INTO `thirdTable` (firstId, nextId) VALUES (2, 2);
INSERT INTO `thirdTable` (firstId, nextId) VALUES (3, 2);
INSERT INTO `thirdTable` (firstId, nextId) VALUES (3, 1);
INSERT INTO `thirdTable` (firstId, nextId) VALUES (2, 1);
INSERT INTO `thirdTable` (firstId, nextId) VALUES (3, 3);
INSERT INTO `thirdTable` (firstId, nextId) VALUES (1, NULL);
INSERT INTO `thirdTable` (firstId, nextId) VALUES (NULL, NULL);
INSERT INTO `thirdTable` (firstId) VALUES (1);
INSERT INTO `thirdTable` (firstId, nextId) VALUES (1, 1);
INSERT INTO `thirdTable` (firstId, nextId) VALUES (NULL, NULL);
INSERT INTO `thirdTable` (firstId, nextId) VALUES (NULL, NULL);
INSERT INTO `thirdTable` (firstId) VALUES (3);
INSERT INTO `thirdTable` (firstId, nextId) VALUES (3, 2);
INSERT INTO `thirdTable` (firstId, nextId) VALUES (NULL, NULL);
INSERT INTO `thirdTable` (firstId, nextId) VALUES (2, 3);
INSERT INTO `thirdTable` (firstId, nextId) VALUES (3, 3);
INSERT INTO `thirdTable` (firstId, nextId) VALUES (C);
INSERT INTO `thirdTable` (firstId) VALUES (2);
DROP TABLE IF EXISTS `sampleDB``.FirstTable`;
-- Drop the tables completely
DROP TABLE IF EXISTS `sampleDB``.FirstTable`;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- INSERT DATA;
-- DROP TABLE IF EXISTS `FirstTable`;
-- DROP TABLE IF EXISTS `SecondTable`;
-- SHOW TABLES;
-- DROP DATABASE IF EXISTS `sampleDB`;
-- DROP DATABASE IF EXISTS `anotherDB`;
-- DROP DATABASE IF EXISTS `yetAnotherDB`;
DROP DATABASE IF EXISTS `sampleDB`;
DROP DATABASE IF EXISTS `anotherDB`;
 ;
 ;
 ;
	 ;
 ;
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
 -- ALTER TABLE `FirstTable` MODIFY `FirstColumn` VARCHAR (20) NULL;
 
-- ALTER TABLE `SecondTable` MODIFY `SecondColumn` INTEGER NULL;
 

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
 
CREATE TABLE IF NOT EXISTS `FirstColumn` (
	`FirstColumn_PK` INT(4),
	`FirstColumn_Name` VARCHAR(20)
);
 ;
 ;
 ;
	 ;
 ;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `FirstTable`;
DROP TABLE IF EXISTS `SecondTable`;
CREATE TABLE `FirstTable` (
 id INT(32) UNSIGNED AUTO_INCREMENT,
 id2 INT(32) UNSIGNED NOT NULL,
 constraint PKFirst unique KEY (id),
 constraint PKSecond unique KEY (id2)
);
DECLARE a INT(32);
DECLARE b INT(32);
DECLARE c INT(32);
DECLARE d INT(32);
DECLARE e INT(32);
DECLARE f INT(32);
DECLARE g INT(32);
DECLARE h INT(32);
DECLARE i INT(32);
DECLARE j INT(32);
DECLARE k INT(32);
DECLARE l INT(32);
DECLARE m INT(32);
DECLARE n INT(32);
DECLARE o INT(32);
DECLARE p INT(32);
DECLARE q INT(32);
DECLARE r INT(32);
DECLARE s INT(32);
DECLARE t INT(32);
DECLARE u INT(32);
DECLARE v INT(32);
DECLARE w INT(32);
DECLARE x INT(32);
DECLARE y INT(32);
DECLARE z INT(32);
DECLARE a2 INT(32) DEFAULT 1;
DECLARE b3 CHAR(32);
DECLARE c4 DEFAULT 'one';
DECLARE d5 DEFAULT 4;
DECLARE e6 TEXT;
DECLARE g7 DATE;
DECLARE m8 DATETIME;
DECLARE e19 FLOAT;
DECLARE e20 REAL;
DECLARE d25 DOUBLE DEFAULT 4.555;
DECLARE d26 FLOAT(5) DEFAULT 4.555;
DECLARE f27 BLOB;
DECLARE f28 CHAR(50) BINARY;
DECLARE a22 TEXT;
DECLARE b23 TEXT;
DECLARE c24 TEXT;
DECLARE c26 TEXT;
DECLARE e27 TEXT;
DECLARE c29 BINARY;
DECLARE d30 TEXT;
DECLARE c25 TEXT;
DECLARE e32 TEXT;
DECLARE c35 BLOB;
DECLARE e42 TEXT;
DECLARE d37 TEXT;
DECLARE d36 BLOB;
DECLARE e38 TEXT;
DECLARE b32 TEXT;
DECLARE a41 TEXT;
DECLARE d50 TEXT;
DECLARE
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- Insert data into both tables and store the ID in a new
-- temporary table. You need to create a second table from scratch.
-- Drop the old table
DROP TABLE IF EXISTS `FirstAndSecondTable`;

CREATE TABLE `FirstAndSecondTable` ( `id` int(11) NOT NULL PRIMARY KEY, `data` varchar(300) CHARACTER SET utf8);

-- INSERT 10 records
INSERT INTO `FirstAndSecondTable`
  VALUES (10, 'Washout'), (11, 'Cleaning'), (12, 'Watching TV'), (13, 'Walking'), (14, 'Teaching Others'), (15, 'Teaching Together'), (16, 'Making Movies'), (17, 'Buying Books'), (18, 'Walking In'), (19, 'Teaching Together');

-- INSERT 5 records
INSERT INTO `FirstAndSecondTable`
  VALUES (20, 'Teaching Together'), (21, 'Teaching Together'), (22, 'Teaching Together'), (23, 'Teaching Together'), (24, 'Teaching Together');

-- INSERT 2 records again
INSERT INTO `FirstAndSecondTable`
  VALUES (25, 'Teaching Together'), (26, 'Teaching Together');

-- INSERT 2 records
INSERT INTO `FirstAndSecondTable`
  VALUES (27, 'Teaching Together'), (28, 'Teaching Together');

-- INSERT 5 records
INSERT INTO `FirstAndSecondTable`
  VALUES (29, 'Teaching Together'), (30, 'Teaching Together'), (31, 'Teaching Together'), (32, 'Teaching Together'), (33, 'Teaching Together');

-- DROP TABLE IF EXISTS `FirstAndSecondTable`;
-- DROP TABLE IF EXISTS `FirstAndSecondTable`;
-- DROP TABLE IF EXISTS `FirstAndSecondTable`;
-- DROP TABLE IF EXISTS `FirstAndSecondTable`;
-- DROP TABLE IF EXISTS `FirstAndSecondTable`;


;
 
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- Insert data into both tables and store the ID in a new
-- temporary table. You need to create a second table from scratch.
-- Drop the old table
DROP TABLE IF EXISTS `FirstAndSecondTable`;
CREATE TABLE `FirstAndSecondTable` ( `id` int(11) NOT NULL PRIMARY KEY, `data` varchar(300) CHARACTER SET utf8);
-- INSERT 10 records
INSERT INTO `FirstAndSecondTable`
  VALUES (10, 'Washout'), (11, 'Cleaning'), (12, 'Watching TV'), (13, 'Walking'), (14, 'Teaching Others'), (15, 'Teaching Together'), (16, 'Making Movies'), (17, 'Buying Books'), (18, 'Walking In'), (19, 'Teaching Together');
-- INSERT 5 records
INSERT INTO `FirstAndSecondTable`
  VALUES (20, 'Teaching Together'), (21, 'Teaching Together'), (22, 'Teaching Together'), (23, 'Teaching Together'), (24, 'Teaching Together');
-- INSERT 2 records again
INSERT INTO `FirstAndSecondTable`
  VALUES (25, 'Teaching Together'), (26, 'Teaching Together');
-- INSERT 2 records
INSERT INTO `FirstAndSecondTable`
  VALUES (27, 'Teaching Together'), (28, 'Teaching Together');
-- INSERT 5 records
INSERT INTO `FirstAndSecondTable`
  VALUES (29, 'Teaching Together'), (30, 'Teaching Together'), (31, 'Teaching Together'), (32, 'Teaching Together'), (33, 'Teaching Together');
-- DROP TABLE IF EXISTS `FirstAndSecondTable`;
-- DROP TABLE IF EXISTS `FirstAndSecondTable`;
-- DROP TABLE IF EXISTS `FirstAndSecondTable`;
-- DROP TABLE IF EXISTS `FirstAndSecondTable`;
-- DROP TABLE IF EXISTS `FirstAndSecondTable`;
;
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

 

CREATE TABLE IF NOT EXISTS `FirstAndSecondTable` ( `id` INT(11) NOT NULL PRIMARY KEY, `data` VARCHAR(300) CHARACTER SET UTF8);

/* Use a temporary table to keep track of the ID.
 *
Note that the temporary table has no
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- Create a new table called `FirstAndSecondTable` with columns for `id`
  -- and `data`
CREATE TABLE `FirstAndSecondTable` ( `id` int(11) NOT NULL PRIMARY KEY, `data` varchar(300) CHARACTER SET utf8);
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- Insert data into both tables and store the ID in a new
-- temporary table. You need to create a second table from scratch.
-- Drop the old table
DROP TABLE IF EXISTS `FruitDB`;
CREATE TABLE `FruitDB` ( `id` int(11) NOT NULL PRIMARY KEY, `data` varchar(300) CHARACTER SET utf8);
-- INSERT 10 records
INSERT INTO `FruitDB`
  VALUES
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
 -- INSERT 5 lines
INSERT INTO `FirstAndSecondTable`
  VALUES (34, 'Teaching Together'), (35, 'Teaching Together'), (36, 'Teaching Together'), (37, 'Teaching Together'), (38, 'Teaching Together');
 -- INSERT 3 lines
INSERT INTO `FirstAndSecondTable`
  VALUES (39, 'Teaching Together'), (40,
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- INSERT data into both tables and store the ID in a new
-- temporary table. You need to create a second table from scratch.
-- Drop the old table
DROP TABLE IF EXISTS `FirstAndSecondTable`;
CREATE TABLE `FirstAndSecondTable` ( `id` int(11) NOT NULL PRIMARY KEY, `data` varchar(300) CHARACTER SET utf8);
;
INSERT INTO `FirstAndSecondTable`
  VALUES (6
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `FirstAndSecondTable` ( `id` INT(11) NOT NULL PRIMARY KEY, `data` VARCHAR(300) CHARACTER SET UTF8);
/* Use a temporary table to keep track of the ID.
 *
Note that the temporary table has no
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `FirstAndSecondTableTemporary` ( `id` INT(11) NOT NULL PRIMARY KEY, `data` VARCHAR(300) DATA COMPRESSED) ENGINE=MEMORY;
INSERT INTO `FirstAndSecondTableTemporary` (data) VALUES ('First Value');
INSERT INTO `FirstAndSecondTableTemporary` (data) VALUES ('Second Value');
SELECT data
FROM `FirstAndSecondTableTemporary`; */
DROP TABLE IF EXISTS `FirstAndSecondTableTemporary`;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `FirstTable` ( `id` INT(11) NOT NULL PRIMARY KEY AUTO_INCREMENT, `num` INT(11), `data` VARCHAR(300) CHARACTER SET UTF8);

INSERT INTO `FirstTable` ( `num`, `data` ) VALUES ( 1, 'Testing' );
SELECT id, num, data FROM `FirstTable` ORDER BY num;
 <fim_middle> */
 
SHOW DATABASES;
DROP DATABASE IF EXISTS `sampleDB`;
SHOW TABLES;
CREATE TABLE IF NOT EXISTS `ThirdTable` ( `id` INT NOT NULL PRIMARY KEY AUTO_INCREMENT, `name` VARCHAR(20) CHARACTER SET UTF8);
-- Create the users for your web service
CREATE USER 'testUser'@'localhost' IDENTIFIED BY '<PASSWORD>';
GRANT ALL PRIVILEGES ON sampleDB.* TO 'testUser';# -- Grant all privileges to the testUser
FLUSH PRIVILEGES;
USE sampleDB;
UPDATE `ThirdTable` SET `name` = 'Tom' WHERE `id` = 1; # Show a row and update it where the id is 1.
 
FLUSH PRIVILEGES;
CREATE TABLE IF NOT EXISTS `FourthTable` ( `id` INT NOT NULL PRIMARY KEY AUTO_INCREMENT, `name` VARCHAR(20) CHARACTER SET UTF8);
ALTER TABLE `FourthTable` ADD COLUMN `time_of_birth` TIMESTAMP WITHOUT TIME ZONE NULL;
ALTER TABLE `FourthTable` ADD FULLTEXT `tags` (`name`);
UPDATE `FourthTable` SET `time_of_birth` = '2001-02-22 10:29:43.869' WHERE `id` = 1
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `FirstAndSecondTable` ( `primaryID` INT(11)+NOT NULL PRIMARY KEY, `data` VARCHAR(300) CHARACTER SET UTF8);
-- The previous program is semantically equivalent to the current one. But in this case, the IDs were assigned to rows in the temporary table by nextval(primaryID). But this has the disadvantage that the
-- Please write the full SQL query
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TEMPORARY TABLE IF NOT EXISTS `FirstAndSecondTable_temp` ( `id` INT(11) NOT NULL PRIMARY KEY, `data` VARCHAR(300) CHARACTER SET UTF8);
-- Note that the IDs remain in the previous table even though the temporary table does not reference them anymore. In this case, this change is transparent to the user.
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `FirstAndSecondTable` ( `primaryID` INT(11)+NOT NULL PRIMARY KEY, `data` VARCHAR(300) CHARACTER SET UTF8);
-- The temporary table contains a new integer ID but it references the original primary ID (or rather, is linked to the same primary ID as the original table).
-- The temporary table is named by using a temporal keyword (temp) to differentiate it from the original table.
*/

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `FirstAndSecondTable` ( `id` INT(11) NOT NULL PRIMARY KEY, `data` VARCHAR(300) CHARACTER SET UTF8);
*/
 
 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `FirstAndSecondTable` ( `id` INT(11) NOT NULL PRIMARY KEY, `data` VARCHAR(300) CHARACTER SET UTF8);

 
 
DROP TABLE IF EXISTS FirstAndSecondTable;
DROP DATABASE IF EXISTS sampleDB;


[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `FirstAndSecondTable` ( `id` INT(11) NOT NULL PRIMARY KEY, `data` VARCHAR(300) NO COLLATE latin1_swedish_ci);
*/
DROP TABLE IF EXISTS my_longer_table;
*/

 

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `FirstAndSecondTable` ( `id` INT(11) NOT NULL PRIMARY KEY, `data` VARCHAR(300) CHARACTER SET UTF8);
/* Use a temporary table to keep track of the ID.
 *
Note that the temporary table has no
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
 CREATE TEMPORARY TABLE IF NOT EXISTS `IDTrack` ( `id` INT(11) NOT NULL PRIMARY KEY, `data` VARCHAR(3) CHARACTER SET UTF8);
 INSERT INTO `IDTrack` ( `id`, `data` ) VALUES ( 0, 'A' );
 SELECT * FROM `IDTrack` LIMIT 1;
 */

SELECT * FROM `FirstAndSecondTable`;
# create an array of the first 10
arrayA = ( select ( data ) from firsttable );
lengthA = rowcount( arrayA );
SELECT arrayA AS dataName, COUNT(data) AS dataCount FROM arrayA;
SELECT arrayA[2] AS dataName FROM arrayA WHERE rowcount(arrayA) > 3;
SELECT arrayA[2] AS dataName, COUNT(data) AS dataCount FROM arrayA GROUP BY arrayA[2];
SELECT arrayA[2,3] AS dataName, COUNT(data) AS COUNT FROM arrayA GROUP BY arrayA[2,3];
-- update data on the fly

ALTER DATABASE sampleDB CHARACTER SET = latin1;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TEMPORARY TABLE IF NOT EXISTS `FirstAndSecondTable` (id INT(11) NOT NULL, data TEXT CHARACTER SET UTF8);
INSERT INTO `FirstAndSecondTable` (`id`, data) VALUES (0, "1");
INSERT INTO `FirstAndSecondTable` (`id`, data) VALUES (1, "0");
SELECT COUNT(*) FROM `FirstAndSecondTable`;
DROP TEMPORARY TABLE `FirstAndSecondTable`;
*/
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS FirstAndSecondTable
(
  `id` INT(11) NOT NULL PRIMARY KEY,
  `data` VARCHAR(300) CHARACTER SET UTF8,
  KEY `idxFirstAndSecondTable`
  (`data`)
);
USE sampleDB;
CREATE TABLE IF NOT EXISTS temp (
  `id` INT(11) NOT NULL PRIMARY KEY,
  `data` VARCHAR(300) CHARACTER SET UTF8,
  KEY `idxFirstAndSecondTable`
  (`data`)
);
INSERT INTO temp VALUES (1, 'Hi!'), (2, 'Bye!'), (3, 'Hello!'), (4, 'What\'s good?');
INSERT INTO FirstAndSecondTable (id, data)
  SELECT id, data FROM temp;
SELECT * FROM FirstAndSecondTable;
SELECT id, data FROM first_and_second_table;
DELETE FROM FirstAndSecondTable WHERE id = 1;
LOCK TABLES test LOCK IN SHARE MODE;
SELECT * FROM FirstAndSecondTable;
UNLOCK TABLES;
 */

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP DATABASE IF EXISTS sampleDB;
DROP TABLE IF EXISTS FirstAndSecondTable; INSERT INTO FirstAndSecondTable (id, data) VALUES (1, 'Hello, World!');
UPDATE FirstAndSecondTable SET data = 'Hello, there!' WHERE id = 1;
SELECT * FROM FirstAndSecondTable WHERE id = 1;
DROP TABLE IF EXISTS sampleDB; */

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `FirstAndSecondTable` ( `personId` INT(11) NOT NULL PRIMARY KEY, `firstname` VARCHAR(30) CHARACTER SET UTF8, `lastname` VARCHAR(30) CHARACTER SET UTF8);
 *
 * We will test both the SQL statements and then move to use the data within the temporary table.

Note that it is not possible to use a "FOR UPDATE" command in MySQL 5.5 or earlier versions before 10.0.5. In MySQL 10.0.5 MySQL uses SQL_ATTR_READ_DEFAULT_LENGTH and will fall back to the standard character length for ASCII strings. This will allow the temporary table to work with any string type of data. */
CREATE TEMPORARY TABLE IF NOT EXISTS TestDB.tmp (id INT);


INSERT INTO TestDB.tmp values(7);

UPDATE t1 SET s = s + 10 where s = 4;

INSERT INTO TestDB.tmp SELECT `id`, `id` + 10 FROM TestDB.tmp;

UPDATE TestDB.tmp SET id = `id` + 10 WHERE id = 7;

UPDATE t1 SET s = s - 20 where s = 30;
-- Please read all the previous commands to execute and to understand what they are doing in each case.
-- Then, let's recreate the above data to try the UPDATE command.
UPDATE TestDB.tmp SET id = `id` + 10, s = s + 20 WHERE id = 7;

DROP TABLE TestDB.tmp;
DROP DATABASE IF EXISTS sampleDB;
-- Please read all the commands you created to understand what they have to do. Once you have understood their actions, run them.
-- We need to stop the server properly, otherwise we will get some of the temporary table data. Then, restart the server before continuing.
mysqladmin stop sampleDB;
mysql -uroot -p < file1.sql;
mysql -uroot -p < file2.sql;



[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `FirstAndSecondTable` ( `id` INT(11) NOT NULL PRIMARY KEY, `data` VARCHAR(300) CHARACTER SET UTF8);
/* Use a temporary table to keep track of the ID.
 *
Note that the temporary table has no
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `FirstAndSecondTable2` ( `id` INT(11) NOT NULL, `data` VARCHAR(300) CHARACTER SET UTF8);
SELECT COUNT(*) FROM FirstAndSecondTable2; DROP TABLE IF EXISTS FirstAndSecondTable2, FirstAndSecondTable;
    */


```
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `FirstAndSecondTable` ( `id` INT(11) NOT NULL PRIMARY KEY AUTOINCREMENT, `data` VARCHAR(300) CHARACTER SET UTF8);
*/

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS tmp_table;
CREATE TEMPORARY TABLE tmp_table AS select * from FirstAndSecondTable;
 

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TEMPORARY TABLE IF NOT EXISTS temptbl (id INT(11));
INSERT INTO `temptbl` VALUES (1);
DELETE FROM `temptbl`;
SELECT COUNT(*) FROM `temptbl`;
DROP TABLE `temptbl`

INSERT INTO `sampleDB`.`FirstAndSecondTable` (`id`, `data`) VALUES (1, "Hello, world");
*/

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `NewTempTable` ( `id` INT(11) NOT NULL PRIMARY KEY, `data` STRING);
*/
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `FirstAndSecondTable` ( `id` INT(11) NOT NULL PRIMARY KEY, `data` VARCHAR(300) CHARACTER SET UTF8);
/* Use a temporary table to keep track of the ID.
 *
Note that the temporary table has no
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
*
ALTER TABLE `FirstAndSecondTable` ADD UNIQUE(`id`);*/
INSERT INTO table1 (id, data)
VALUES ('1', 'a'), ('2', 'b');
 
SELECT id,  * FROM FirstAndSecondTable;
DROP TABLE table1;

 
SELECT * FROM  FirstAndSecondTable;
INSERT INTO FirstAndSecondTable(id, data)
VALUES ('3','b');
 
DELETE FROM FirstAndSecondTable WHERE id = '3'; 
DELEte FROM FirstAndSecondTable;
DROP TABLE FirstAndSecondTable;
DROP DATABASE;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS ID_TEMP;
CREATE TEMPORARY TABLE ID_TEMP SELECT id+1 FROM FirstAndSecondTable;
INSERT INTO ID_TEMP VALUES
 
DROP TABLE IF EXISTS ID_UNIQUE;
CREATE UNIQUE INDEX ID_UNIQUE ON ID_TEMP( id );
SELECT * FROM ID_UNIQUE;
SELECT id FROM ID_UNIQUE WHERE id > 100;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `FirstAndSecondTable` ( `ID` INT(11) PRIMARY KEY AUTO_INCREMENT, `Data` VARCHAR(300) CHARACTER SET UTF8); */

FLUSH PRIVILEGES;  
SELECT * FROM `FirstAndSecondTable`;
DROP DATABASE;

SELECT * FROM `FirstAndSecondTable`;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `FirstAndSecondTable` ( `id` INT(11) INT UNIQUE NOT NULL AUTO_INCREMENT PRIMARY KEY, `data` VARCHAR(300));
 */

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `FirstAndSecondTable` ( `id` INT(11) NOT NULL PRIMARY KEY, `data` VARCHAR(300) CHARACTER SET UTF8);
COPY `FirstAndSecondTable` ( id, data) FROM '/tmp/FirstAndSecondTable.sql';
 -- Please change the name of variable TEMP_TABLE to match the name of the temporary table.
*/
# Please drop the created tables
DROP TABLE IF EXISTS `FirstAndSecondTable`;
DROP DATABASE IF EXISTS sampleDB;
/

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `FirstAndSecondTable` ( `id` INT(11) NOT NULL PRIMARY KEY, `data` VARCHAR(300) CHARACTER SET UTF8);
/* Use a temporary table to keep track of the ID.
 *
Note that the temporary table has no
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
create temporary table IF NOT EXISTS `ID_Gen` ( `id` INT(11) NOT NULL PRIMARY KEY );
select id from `ID_Gen` as ID where id < 105;

You can also run UPDATE and DELETE queries using those two tables in order to maintain a consistency in the record. */

CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `FirstAndSecondTable` ( `id` INT(11) NOT NULL PRIMARY KEY, `data` VARCHAR(300) CHARACTER SET UTF8);
DROP TABLE IF EXISTS `FirstAndSecondTable`;
SET @ID_Gen_ID = 26;
INSERT INTO `ID_Gen` ( `id` ) VALUES ( @ID_Gen_ID ');
COMMIT;
USE sampleDB;




[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TEMPORARY TABLE IF NOT EXISTS `FirstAndSecondTable` ( `id` TINYINT(4) UNSIGNED NOT NULL PRIMARY KEY, `data` TEXT CHARACTER SET UTF8);
-- Now insert 3 rows using some data which will be reused all the time, without affecting subsequent values.
INSERT INTO `FirstAndSecondTable` VALUES (1,'hello'), (2,'world'), (3,'howdy'), (4,'what'), (5,'are'), (6,'u');
SHOW DATA STATUS LIKE 'FirstAndSecondTable';
SELECT * FROM `FirstAndSecondTable`;
DROP TABLE `FirstAndSecondTable`;
*/

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

CREATE TEMPORARY TABLE IF NOT EXISTS `FirstAndSecondTable` ( `id` INT(11) NOT NULL PRIMARY KEY, `data` VARCHAR(300) CHARACTER SET UTF8);

SELECT * FROM `FirstAndSecondTable` LIMIT 5;

INSERT INTO `FirstAndSecondTable` (`id`, `data`) VALUES (1, "a");
INSERT INTO `FirstAndSecondTable` (`id`, `data`) VALUES (2, "b");
INSERT INTO `FirstAndSecondTable` (`id`, `data`) VALUES (3, "c");
INSERT INTO `FirstAndSecondTable` (`id`, `data`) VALUES (4, "d");
INSERT INTO `FirstAndSecondTable` (`id`, `data`) VALUES (5, "e");
SELECT * FROM `FirstAndSecondTable` LIMIT 5;
*/

DROP TABLE IF EXISTS `FirstAndSecondTable`;
 
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `FirstAndSecondTable2` ( `id` INT(11) NOT NULL PRIMARY KEY, `data` VARCHAR(300) CHARACTER SET UTF8);
*/
INSERT INTO `FirstAndSecondTable` ( `data` ) VALUES ( "Some Data" );
 
CREATE VIEW `FirstAndSecondTable2` AS SELECT `FirstAndSecondTable`.`data` FROM `FirstAndSecondTable`. WHERE `id` = ANY(SELECT `id` FROM `FirstAndSecondTable`). You can drop the table once you have a view.
 
SELECT * FROM `FirstAndSecondTable`. WHERE `id` = ANY(SELECT `id` FROM `FirstAndSecondTable`).

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `FirstAndSecondTable` ( `id` BIGINT(20) NOT NULL PRIMARY KEY, `data` VARCHAR(300) CHARACTER SET UTF8); */
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `FirstAndSecondTable` ( `id` INT(11) NOT NULL PRIMARY KEY, `data` VARCHAR(300) CHARACTER SET UTF8);
/* Use a temporary table to keep track of the ID.
 *
Note that the temporary table has no
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `FirstAndSecondTable` ( `id` INT(11) NOT NULL PRIMARY KEY, `data` VARCHAR(300) CHARACTER SET UTF8, `ID` INT(11) NULL);
INSERT INTO `FirstAndSecondTable` (`data`, `ID`) VALUES ("Test Data 1", 1);
INSERT INTO `FirstAndSecondTable` (`data`, `ID`) VALUES ("Test Data 2", 2);
INSERT INTO `FirstAndSecondTable` (`data`, `ID`) VALUES ("Test Data 3", 3);
INSERT INTO `FirstAndSecondTable` (`data`, `ID`) VALUES ("Test Data 4", 4);
INSERT INTO `FirstAndSecondTable` (`data`, `ID`) VALUES ("Test Data 5", 5);
INSERT INTO `FirstAndSecondTable` (`data`, `ID`) VALUES ("Test Data 6", 6);
INSERT INTO `FirstAndSecondTable` (`data`, `ID`) VALUES ("Test Data 7", 7);
SELECT * FROM `FirstAndSecondTable` ORDER BY `id`;
/* Here you can create views by means of SQL syntax, as I did when I explained the general syntax on the previous day.
Note that now the view has no

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

CREATE TABLE IF NOT EXISTS `IDTable` ( `ID` INT(11) NOT NULL, `ID2` INT(11), `Description` VARCHAR(300) CHARACTER SET UTF8),

USE sampleDB;
CREATE TABLE IF NOT EXISTS `FirstAndSecondTable` ( `id` SET(INT(11), INT(56)) NOT NULL PRIMARY KEY, `data` VARCHAR(300) CHARACTER SET UTF8);
SELECT * FROM FirstAndSecondTable, IDTable;
SELECT * FROM FirstAndSecondTable, IDTable WHERE FirstAndSecondTable.id = IDTable.ID OR SecondAndSecondTable.id = IDTable.ID2 OR SecondAndSecondTable.id = IDTable.ID2;
UPDATE FirstAndSecondTable
SET data ='Data changed' WHERE id = (SELECT id FROM IDTable WHERE ID = (SELECT id FROM IDTable WHERE ID2=(SELECT id FROM IDTable WHERE data='Data changed'))));

DROP TABLE IF EXISTS FirstAndSecondTable; DROP TABLE IF EXISTS IDTable;
DROP DATABASE IF EXISTS sampleDB;
*/

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `SecondTable`;
CREATE TABLE IF NOT EXISTS `SecondTable` ( `id` INT NOT NULL PRIMARY KEY, `data` VARCHAR(300) CHARACTER SET "UTF8");
 *
Note that the temporary table and the table do
-- Please create a semantically equivalent program to the previous version
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `FirstAndSecondTable`;
CREATE TABLE IF NOT EXISTS `FirstAndSecondTable` ( `id` INT NOT NULL PRIMARY KEY, `data` VARCHAR(300) CHARACTER SET "UTF8", `SecondId` INT NOT NULL, `SecondData` VARCHAR(300) CHARACTER SET "UTF8");
UPDATE `FirstAndSecondTable` SET `SecondData` = "";
DROP TABLE IF EXISTS `SecondTable`;
CREATE TABLE IF NOT EXISTS `SecondTable` ( `id` INT NOT NULL PRIMARY KEY, `data` VARCHAR(300) CHARACTER SET "UTF8");
*/
-- Create a new table. Please test that the new table is created and
-- then truncate it.
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `DataForSecondTable`;
CREATE TABLE IF NOT EXISTS `DataForSecondTable` ( `id` INT NOT NULL PRIMARY KEY, `data` VARCHAR(300) CHARACTER SET "UTF8", `SecondId` INT NOT NULL, `SecondData` VARCHAR(300) CHARACTER SET "UTF8");
INSERT INTO `DataForSecondTable` (`data`) VALUES ("TEST");

DELETE FROM `DataForSecondTable`;
DROP TABLE IF EXISTS `DataForSecondTable`;
DROP TABLE IF EXISTS `SecondTable`;
DROP TABLE IF EXISTS `FirstAndSecondTable`;

INSERT INTO `FirstAndSecondTable` (`SecondId`, `SecondData`) VALUES (1, "Hello");

SELECT * FROM `DataForSecondTable`;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `FirstAndSecondTable` ( ID INT(11) NOT NULL PRIMARY KEY, data TEXT);
CREATE TABLE IF NOT EXISTS `TempTable` ( ID INT(11) NOT NULL PRIMARY KEY, data TEXT);
 
REPLACE INTO `TempTable` SELECT * FROM `FirstAndSecondTable`;
 
REPLACE INTO `FirstAndSecondTable` SELECT *, data FROM `TempTable`;
DROP TABLE `TempTable`;
DROP DATABASE `sampleDB`;

</pre></p>

<p>Thank you.</p>

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `Temp_idFirstAndSecondId` ( `id` INT(11) PRIMARY KEY, `data` VARCHAR(300) CHARACTER SET UTF8);
CREATE TABLE IF NOT EXISTS `TableWithId` ( `id` INT(11) NOT NULL PRIMARY KEY, `data` VARCHAR(300) CHARACTER SET UTF8);
*/
INSERT INTO TableWithId VALUES (2, "one data");
INSERT INTO `FirstAndSecondTable` VALUES (5, "five data");
INSERT INTO `FirstAndSecondTable` VALUES (6, "six data");
INSERT INTO `FirstAndSecondTable` VALUES (5, "data six");
SHOW TABLES;
DROP TABLE IF EXISTS `Temp_idFirstAndSecondId`;
DROP TABLE IF EXISTS TableWithId;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `FirstAndSecondTable` ( `id` INT(11) NOT NULL PRIMARY KEY, `data` VARCHAR(300) CHARACTER SET UTF8);
/* Use a temporary table to keep track of the ID.
 *
Note that the temporary table has no
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS idseq (`id` INT(11) NOT NULL AUTO_INCREMENT, `seq` INT(11) NOT NULL, PRIMARY KEY (`id`));
-- Here is the code which reads all record from table firstTable
 -- First, select * from `FirstTable`
 -- Now join the temporary table with the main table using an intertable using `seq` as the join key
 SELECT s.id `id`, data
 FROM `FirstTable` s
    LEFT JOIN idseq i ON s.id = i.id;
*/

 




[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS tmpID ( `tmp_ID` INTEGER(11));
INSERT INTO tmpID (tmp_ID)
-- Please check whether the temporary table is in use or not */
SELECT COUNT(id) FROM tmpID; SELECT COUNT(id) 6 FROM tmpID;
DROP TABLE tmpID;

 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS newTable (id INTEGER NOT NULL PRIMARY KEY, data TEXT);
 
CREATE DATABASE IF NOT EXISTS sampleDB_two; USE sampleDB_two; CREATE TABLE IF NOT EXISTS new_table (id INTEGER NOT NULL PRIMARY KEY, data TEXT);
DROP TABLE new_table;
DROP DATABASE sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `TableWithID` ( `id` INT(11) NOT NULL PRIMARY KEY, `data` VARCHAR(300) CHARACTER SET UTF8);
DROP TABLE `TableWithID`; CREATE TABLE `TableWithID` ( `id` INT(11) NOT NULL PRIMARY KEY, `data` VARCHAR(300) CHARACTER SET UTF8, `name` VARCHAR(100) CHARACTER SET UTF8);
INSERT INTO `TableWithID` ( `DATA`, `NAME`) VALUES ('New Name', 'Name'); INSERT INTO `TableWithID` ( `DATA`, `ID`) VALUES ('New Name', 4);

UPDATE `TableWithID` SET `name`='Old Name' WHERE `id` = 4

DELETE FROM `TableWithID` where id=4 ; SELECT name, id FROM sampleDB.TableWithID WHERE name = 'Name'; DROP TABLE `TableWithID`; DROP TABLE `FirstAndSecondTable`;
*/
```
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS FirstAndSecondTable; CREATE TABLE IF  NOT EXISTS FirstAndSecondTable(id INT(11) NOT NULL PRIMARY KEY, data VARCHAR(300) CHARACTER SET UTF8);
*/
 

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `FirstAndSecondTable`;
CREATE TABLE IF NOT EXISTS `FirstAndSecondTable`
(
`id` INT(11) NOT NULL PRIMARY KEY, 
`data` VARCHAR(300) CHARACTER SET UTF8);
 */
/*

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `FirstAndSecondTable` ( `id` INT(11) NOT NULL PRIMARY KEY, `data` VARCHAR(300) CHARACTER SET UTF8);
/* Use a temporary table to keep track of the ID.
 *
Note that the temporary table has no
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `first_and_second_table` ( `id` int(11) not null primary key, `data` varchar(300) character set utf8);
 */
 

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `People` ( `id` INT(11) NOT NULL PRIMARY KEY, `name` VARCHAR(200) CHARACTER SET UTF8, `age` INT(4) NOT NULL);

CREATE TABLE IF NOT EXISTS `CompanyInfo` ( `id` INT(11) NOT NULL PRIMARY KEY, `name` VARCHAR(100) CHARACTER SET UTF8, `employees` INT(11) NOT NULL);
SELECT id FROM FirstAndSecondTable;
 
*/

DROP TABLE IF EXISTS FirstAndSecondTable;
DROP TABLE IF EXISTS People;
DROP TABLE IF EXISTS CompanyInfo;
DELIMITER ;

 

 

SET @MYSQL_PWD="<PASSWORD>";

* The password is hashed using MD5. You should use 12 digits for MySQL

GRANT ALL PRIVILEGES ON sampleDB.* TO 'root'@'%';
FLUSH PRIVILEGES;

CREATE TABLE IF NOT EXISTS `Test` ( `id` UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY, `data` TEXT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL)

CREATE TABLE IF NOT EXISTS `Users` ( `id` UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY, `username` TEXT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL, `password` TEXT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL)

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `FirstAndSecondTable` ( `id` INT(11) NOT NULL PRIMARY KEY, `name` VARCHAR(50) CHARACTER SET UTF8, `age` INT);
INSERT INTO `FirstAndSecondTable` (`id`, `name`, `age`) VALUES (1, 'David', 39);
INSERT INTO `FirstAndSecondTable` (`id`, `name`, `age`) VALUES (2, 'Joe', 50);
SELECT * FROM `FirstAndSecondTable` WHERE `Age` = "50" LIMIT 1;
SELECT * FROM `FirstAndSecondTable` WHERE `Age` = "33" LIMIT 1;*/

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `FirstAndSecondTable` ( `id` INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY, `data` VARCHAR(300) CHARACTER SET UTF8);
INSERT INTO `FirstAndSecondTable` (id, data) VALUES (200, 'test data 2'), (202, 'test data 2');
CREATE TABLE IF NOT EXISTS `FirstAndLastTable` ( `id` INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY, `data` VARCHAR(300) CHARACTER SET UTF8);
 
UPDATE `FirstAndLastTable` SET `data` = CONCAT('test data', '2') Where `data` = 'test data';
 
SELECT * FROM `FirstAndLastTable` ORDER BY `id` LIMIT 2; USE `sampleDB`;
SELECT * FROM `FirstAndSecondTable` ORDER BY `id` LIMIT 2;
 
INSERT INTO `FirstAndLastTable` (id, data) VALUES IF NOT EXISTS (201, 'test data 2');
 
UPDATE `FirstAndLastTable` SET data = 'Changed test data' WHERE id = 202;
SELECT * FROM `FirstAndLastTable` ORDER BY `data`;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `FirstAndSecondTable` ( `id` INT(11) NOT NULL PRIMARY KEY, UNIQUE INDEX, `data` VARCHAR(300) CHARACTER SET UTF8);
*/
/* Use a temporary table to keep track of the ID.
 *
Note that the temporary table has no

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `FirstAndSecondTable` ( `id` INT(11) NOT NULL PRIMARY KEY, `data` VARCHAR(300) CHARACTER SET UTF8);
/* Use a temporary table to keep track of the ID.
 *
Note that the temporary table has no
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `FirstAndSecondTable` ( `id` INT(11) NOT NULL PRIMARY KEY, `data` TEXT CHARACTER SET UTF8);
-- Please create a query which is semantically equivalent to the program on the previous generation. Your answer to this query should be similar to the ones from the previous question. */

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `id` ( id INT(11) NOT NULL PRIMARY KEY, data TEXT );
*/

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TEMPORARY TABLE tempTable LIKE FirstAndSecondTable USING ENGINE=InnoDB;

INSERT INTO tempTable SELECT * FROM FirstAndSecondTable;
SELECT COUNT(data) FROM tempTable;
DROP TABLE tempTable;
--
-- This is just for your information, the above statement has no effect.
CREATE TABLE IF NOT EXISTS FCT1(
  fct1_id INT NOT NULL AUTO_INCREMENT,
  fct1_data1 VARCHAR(300),
  fct1_data2 VARCHAR(300),
  PRIMARY KEY (fct1_id)
);

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SELECT 103;
CREATE TABLE tmp_id ( `id` INT(11) NOT NULL PRIMARY KEY, `data` VARCHAR(300) CHARACTER SET UTF8);
INSERT INTO tmp_id(id, data) VALUES(RANDOM(), 'Hello, world!!');
DROP TABLE IF EXISTS tmp_id;
*/

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TEMPORARY TABLE IF NOT EXISTS `tmp_tbl` ( `id` INT(11) NOT NULL PRIMARY KEY, `data` VARCHAR(300) CHARACTER SET UTF8) ENGINE = INNODB;
INSERT INTO `sampleDB`.`FirstAndSecondTable` VALUES( 1, 'abc' );
SELECT * FROM `tmp_tbl` INNER JOIN `FirstAndSecondTable` ON `tmp_tbl`.`id` = `FirstAndSecondTable`.`id`;
DROP TABLE IF EXISTS `tmp_tbl`
DROP DATABASE IF EXISTS `sampleDB`
*/
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `FirstAndSecondTable` ( `id` INT(11) NOT NULL PRIMARY KEY, `data` TEXT CHARACTER SET UTF8);
-- Please create a query which is semantically equivalent to the program on the previous generation. Your answer to this query should be similar to the ones from the previous question. */
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
ALTER TABLE IF EXISTS `FirstAndSecondTable` ADD FOREIGN KEY (`id`) REFERENCES `SomeOtherTable`;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `FirstAndSecondTable` ( `id` INT(11) NOT NULL PRIMARY KEY, `data` TEXT CHARACTER SET UTF8);
DROP TABLE IF EXISTS `FirstAndSecondTable`;
 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `FirstAndSecondTable` ( `id` INT(11) NOT NULL PRIMARY KEY, `data` TEXT CHARACTER SET UTF8);

 

-- You should only use sampleDB as the database and assume no other table exist.
 
DROP TABLE IF EXISTS `FirstAndSecondTable`;
USE sampleDB;
CREATE TABLE IF NOT EXISTS `FirstAndSecondTable` ( `id` INT(11) NOT NULL PRIMARY KEY, `data` TEXT CHARACTER SET UTF8);

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `FirstAndSecondTable` ( `id` INT(11) NOT NULL PRIMARY KEY, `data` TEXT CHARACTER SET UTF8);
GRANT ALL PRIVILEGES ON sampleDB.* to'sol_user';
-- Please create a query which is semantically equivalent to the program on the previous generation. Your answer to this query should be similar to the ones from the previous question. */
-- We shall show to you more queries with different database and table names. Try to understand and see if you can get an idea of how these work and what they are used for. You can also use this information to determine what should be used instead of a specific query.

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `FirstAndSecondTable` ( `id` INT(11) NOT NULL PRIMARY KEY, `data` TEXT CHARACTER SET UTF8);

INSERT INTO `FirstAndSecondTable` ( `id`, `data` )
VALUES ('1','1','111');
INSERT INTO `FirstAndSecondTable` ( `id`, `data` )
VALUES ('2','2','222');

SELECT `id`, `data`
FROM `FirstAndSecondTable`
ORDER BY id;

DROP TABLE `FirstAndSecondTable`;

#
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SET GLOBAL local_infile= 1;

# -- Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SET GLOBAL local_infile= 1;
# -- Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `person`;
CREATE TABLE IF NOT EXISTS `person` (
id INT UNSIGNED AUTO_INCREMENT,
first_name LONGBLOB,
last_name VARCHAR(255),
PRIMARY KEY (id)
);

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users(id integer PRIMARY KEY AUTO_INCREMENT, login, password);
CREATE TABLE IF NOT EXISTS users(id integer AUTO_INCREMENT, login, password);
CREATE TABLE IF NOT EXISTS users(id integer AUTO_INCREMENT, login, password);
INSERT INTO users(login, password) VALUES ('test_user','password');
SET GLOBAL local_infile= 1;
CREATE TABLE users(id integer PRIMARY KEY AUTO_INCREMENT, login, password);
CREATE TABLE users(id integer AUTO_INCREMENT, login, password);
CREATE TABLE users(id integer AUTO_INCREMENT, login, password);
INSERT INTO users(id, login, password) values(2, 'test_user', 'password');
SET GLOBAL local_infile= 1;
DROP TABLE IF EXISTS users;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users (user_name varchar(30), user_pwd varchar(30));
INSERT INTO users (user_name, user_pwd) VALUES ('wade', '<PASSWORD>');

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SET GLOBAL local_infile=1;
# -- Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */ 
DROP TABLE IF EXISTS table1; 
CREATE TABLE IF NOT EXISTS table1 (
col1 int(11) PRIMARY KEY,
col2 varchar(20) NOT NULL,
col3 varchar(20),
col4 varchar(20),
col5 int(11),
col6 datetime,
col7 text,
col8 text);
# Please create a highly semantically equivalent query as a result of the  previous creation
DELETE FROM table1; 
INSERT INTO table1 (col1,col2,col3,col4,col5,col6,col7,col8) VALUES (2,'Col1', 'value1', NULL, 2,'2012-05-16','Lorem Ipsum', 'This is my text data!');
INSERT INTO table1 (col1,col4,col3,col7) VALUES (1,'Col1', 'value1',NULL);
SELECT * FROM table1;
SELECT `col1`,`col4`,`col3`,`col7`,`col1`,`col3` FROM table1;
SELECT `col1`,COUNT(*) FROM table1;
# If statement (simple way)
SELECT IF(`col3`='Val1'||`col2`=CONCAT('value ',`col4`),'I love this text but its content is not so good.',`col2`);
SELECT IF(`col3`='Val1'||`col2`=CONCAT('value ',`col4`),'I love this text but its content is not so good.',CONCAT('test',`col4`));
SELECT IF(`col3`='Val1'||`col2`=CONCAT('value ',`col4`),'I love this text but its content is not so good.',CONCAT('t1',`col4`));
SELECT IF(`col3`='Val1'||`col2`='value 1', 'yes', 'no');
SELECT IF(`col3`='Val1'||`col2`='value 1', 'yes', CONCAT('yes',`col4`));
SELECT IF(`col3`='Val1'||`col2`='value 1', CONCAT('yes','value 1'),'
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SELECT * INTO OUTFILE '/tmp/query.sql' LINES TERMINATED BY "\n";
LOAD DATA LOCAL INFILE '/tmp/query.sql' 
    STARTING LINE 1
INTO TABLE mytable2;

SELECT COUNT(*) FROM mytable2;
DROP TABLE IF EXISTS mytable2;

-- -- Please create this program first, then create additional tables. In the end, drop all of them.
-- -- See this link for more information: http: 
-- CREATE DATABASE IF NOT EXISTS someDB;

-- CREATE TABLE IF NOT EXISTS someTable LIKE someTable;
-- use someDB;

-- SELECT * INTO OUTFILE '/tmp/sampleData.sql' LINES TERMINATED BY "$;" FROM someTable;

-- LOAD DATA LOCAL INFILE '/tmp/sampleData.sql'
--         LINES TERMINATED BY "$;"
--       FROM someTable
--     INTO TABLE someTable;

-- -- You should now have 5 rows in your newly created tables and 5 columns. You need to fill the newly created tables
-- # -- with some real data.
-- INSERT INTO someTable(someCol1)
--         VALUES ('Hello');

-- INSERT INTO someTable(someCol2)
--         VALUES (2.1);

-- INSERT INTO someTable(someCol3)
--         VALUES (true);

-- INSERT INTO someTable(someCol4)
--         VALUES ('Hello,');

-- -- SELECT * FROM someTable;

-- -- You can also create a table in which you specify several rows at once.

-- INSERT INTO someTable (someCol1, someCol2)
--   VALUES ('Hello', 2.2),
--   ('Hello this', 2.3); 

-- SELECT * FROM someTable;

-- IF EXISTS (SELECT table_name FROM information_schema.tables WHERE table_schema = DATABASE() AND table_name ='someTable') THEN
--  DROP TABLE IF EXISTS someTable;
-- END IF;


-- SELECT COUNT(*) FROM someTable;

DROP DATABASE IF EXISTS someDB;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users (user_name varchar(30), user_pwd varchar(30));
INSERT INTO users (user_name, user_pwd) VALUES ('wade', '<PASSWORD>');
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users (user_name varchar(30), user_pwd varchar(30));
INSERT INTO users (user_name, user_pwd) VALUES ('test', '<PASSWORD>');
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users (user_name varchar(30), user_pwd varchar(30));
INSERT INTO users (user_name, user_pwd) VALUES ('matt', 'b');

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users (user_name varchar(30), user_pwd varchar(30));
INSERT INTO users (user_name, user_pwd) VALUES ('wade', '<PASSWORD>');

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users (user_name varchar(30), user_pwd varchar(30));
INSERT INTO users (user_name, user_pwd) VALUES ('wade', '<PASSWORD>');

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users (user_name varchar(30), user_pwd varchar(30));
INSERT INTO users (user_name, user_pwd) VALUES ('wade', '<PASSWORD>');

DROP DATABASE sampleDB; USE sampleDB;
*/
mysql>

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users (user_name varchar(30), user_pwd varchar(30));
INSERT INTO users (user_name, user_pwd) VALUES ('matt', 'b');
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SELECT * FROM users;
CREATE TABLE IF NOT EXISTS users (user_name varchar(30) NOT NULL, user_pwd varchar(30) NOT NULL);
 

CREATE TABLE IF NOT EXISTS `users` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_name` varchar(30) NOT NULL,
  `user_pwd` varchar(30) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS users;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SELECT * FROM users;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users (user_name varchar(30), user_pwd varchar(30));
INSERT INTO users (user_name, user_pwd) VALUES ('m', 'b');
DROP DATABASE sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS users;
DROP DATABASE sampleDB;
-- End of test cases

-- Please use the test case below to verify the results of your program. Do not modify the program in any way.
USE mysql_sampleDB;
SET @username = 'barty';
SET @pwd = '<PASSWORD>';
SELECT IF(EXISTS(INSERT INTO users (user_name, user_pwd) VALUES (@username, @pwd)),
"The user exists in table", "The user doesn't exist in table");
-- End of program verify

USE mysql_sampleDB;

--Please use the following query to verify if the database exists
SELECT DB.NAME, TABLE_NAME FROM information_schema.tables WHERE TABLE_SCHEMA='mysql_sampleDB';

-- Please run the following query and write an explanation for each question.
CREATE TABLE IF NOT EXISTS testTable (
	myid INT AUTO_INCREMENT PRIMARY KEY,
	myDescription VARCHAR(1024),
	lastUpdated DATETIME,
	lastUserUpdated DATETIME
);

CREATE TABLE IF NOT EXISTS testChild table (
	c_id INT AUTO_INCREMENT PRIMARY KEY,
	c_desc VARCHAR(1024),
	parent_id INTEGER,
	CONSTRAINT fkTest_Parent
	FOREIGN KEY (parent_id)
	REFERENCES testTable(myid)
);

SELECT * FROM testTable;

DELETE FROM testChild WHERE c_id LIKE '1%';

-- Please run the following command and modify your query if necessary.
SELECT COUNT(*) FROM testChild WHERE parent_id = (SELECT myid FROM testTable WHERE myDescription = '2');

-- Please ask Barty create the following commands, then describe the output produced.
-- SELECT myid FROM testTable WHERE myDescription = '2';
-- INSERT INTO testChild (parent_id, c_desc) VALUES(2, 'barty');
-- SHOW TABLE STATUS LIKE 'testChild';
SELECT CATEGORY,SUM(price) AS AMOUNT FROM ORDERS
GROUP BY CATEGORY
ORDER BY AMOUNT DESC
LIMIT 2;

select * from user where user_pwd = 'b';
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users (user_name varchar(30), user_pwd varchar(30));
INSERT INTO users (user_name, user_pwd) VALUES ('m', 'b');
DROP DATABASE sampleDB;
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE users (user_name varchar(30), user_pwd varchar(30));
INSERT INTO users (user_name, user_pwd) VALUES ('m', 'b');
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users
(
  user_name       varchar(30) not null,
  user_pwd        varchar(30) not null,
  primary key(user_name)
);
INSERT INTO users (user_name, user_pwd) VALUES ('m', 'b');
COMMIT;

mysql> select * from users;
+-------+------+
| user_name | user_pwd |
+-------+------+
| m      | B      |
+-------+------+
1 row in set (0.00 sec)
```

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
GRANT usage, SELECT ON ALL TABLES TO'sampleDB';
GRANT EXECUTE ON ALL FUNCTIONS TO'sampleDB';
# Create a new table to demonstrate how to create indexes
CREATE TABLE demo_indexes (a int, b varchar(30), c date, d DATETIME);
use sampleDB
CREATE INDEX idx_demo_indexes_a ON demo_indexes(a);
CREATE INDEX idx_demo_indexes_b ON demo_indexes(b);
CREATE INDEX idx_demo_indexes_c ON demo_indexes(c);
CREATE INDEX idx_demo_indexes_d ON demo_indexes(d);

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users (user_name VARCHAR(30));
INSERT INTO users (user_name) VALUES ('m');
DROP DATABASE sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

DROP TABLE users;

 <fim_middle>DROP DATABASE sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE users (user_name varchar(30), user_pwd varchar(30));
INSERT INTO users (user_name, user_pwd) VALUES ('m', 'b');
DROP DATABASE sampleDB;
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE users2 (user_name varchar(30), user_pwd varchar(30));
INSERT INTO users2 (user_name, user_pwd) VALUES ('joe', 'b');
UPDATE users2 SET user_pwd = 'h' WHERE user_name = 'joe';
DROP DATABASE sampleDB;
 

CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE users2 (user_name varchar(30), user_pwd varchar(30));
 
INSERT INTO users2 (user_name, user_pwd) VALUES ('joe', 'b');  
UPDATE users2 SET user_pwd = 'h' WHERE user_name = 'j';  
DROP DATABASE sampleDB;
 

UPDATE users2 SET user_pwd = 'h' WHERE user_name = 'j'; -- ORDER BY user_score desc LIMIT 5

DROP DATABASE sampleDB;
*/
DROP TABLE users;
DROP TABLE users2;
DROP DATABASE sampleDB;
`
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
UPDATE users SET user_pwd = NULL WHERE user_name = 'g';
-- please create a mutated program that modifies the previous generation.
 
  
INSERT INTO users (user_name, user_pwd) VALUES ('n', 'c');
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS users;
CREATE TABLE users (user_name varchar(30), user_pwd varchar(30));

-- You can drop a table using 'DROP TABLE tablename'
DROP TABLE users;

-- If you try to delete a table that does not exist, MySQL returns an error
-- If you try to drop a table (without DROP statements) you will get an error
DROP TABLE IF EXISTS users;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS users;
CREATE TABLE users (user_name varchar(30), user_pwd varchar(30));
INSERT INTO users (user_name, user_pwd) VALUES ('m', 'b');
UPDATE users SET user_pwd = SHA1(MD5('$3y$10$A09nJ5R189j5J7p1z621Q.047sJ9B5yH.Q36J.zV.360dM/6B73uH'));
SELECT * FROM user_pwd
DROP TABLE users;
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE users (user_name varchar(30), user_pwd varchar(30));
INSERT INTO users (user_name, user_pwd) VALUES ('m', 'B');
UPDATE users
    SET user_pwd = '<PASSWORD>'
WHERE user_name = 'j'
UNION ALL
UPDATE users
    SET user_pwd = '<PASSWORD>'
WHERE user_name =  'k';
DROP DATABASE sampleDB;
-- Please create a mutated query that returns only users who are in groups 1 & 4.
SELECT * FROM users
WHERE user_pwd = '<PASSWORD>' AND user_name IN ('i', 'j');
DROP DATABASE sampleDB;
 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE persons (name varchar(30), password  varchar(30));
INSERT INTO persons (name, password) VALUES ('i',  '<PASSWORD>');
INSERT INTO persons (name, password) VALUES ('j', '<PASSWORD>');
INSERT INTO persons (name, password) VALUES ('k', '<PASSWORD>');
DROP DATABASE sampleDB;


[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS users;
CREATE TABLE users (user_name varchar(30), user_pwd varchar(30));
-- You can drop a table using 'DROP TABLE tablename'
DROP TABLE users;
-- If you try to delete a table that does not exist, MySQL returns an error
-- If you try to drop a table (without DROP statements) you will get an error
DROP TABLE IF EXISTS users;
DROP DATABASE IF EXISTS sampleDB;
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS users;
CREATE TABLE users (user_name varchar(30), user_pwd varchar(30));
-- Please drop the table. There are no errors when you use "DROP TABLE tablename".
-- But you can't use "DROP TABLE IF EXISTS tablename" because it will not work
 DROP TABLE users;
-- Please create a program that is equivalent to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS users;
CREATE TABLE users (user_name varchar(30), user_pwd varchar(30));
DROP TABLE users;
DROP DATABASE IF EXISTS sampleDB;
```

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS users;
CREATE TABLE users (user_id int(10), user_name varchar(30), user_pwd varchar(30));
DROP TABLE users;
DROP DATABASE IF EXISTS sampleDB;

Thanks :).

***

Please see the file LICENSE in the project root for license information.

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE users (user_name varchar(30), user_pwd varchar(30));
USE sampleDB;
DROP TABLE IF EXISTS users;
CREATE TABLE users (user_name varchar(30), user_pwd varchar(30));
INSERT INTO users
VALUES ('Bob', 'Bob');
INSERT INTO users
VALUES ('John', 'John');
-- The next statement will return no results as all rows were inserted!
SELECT * FROM users WHERE user_name = 'Bob';
  
 SELECT * FROM users WHERE user_name = 'Bob';
-- Use IN and NOT IN to select all rows whose user_name field is not Bob and Jane but neither Alice, Mary, Jack or Eddie.
-- Note the quotes in the 'IN' clause will change the interpretation of the literal value.
SELECT * FROM users WHERE user_name IN ('Bob', 'Jane', 'Alice', 'Mary', 'Jack', 'Eddie');
\q


[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS users_test;
CREATE TABLE users_test (user_name varchar(30), user_pwd varchar(30));
-- Write an efficient SQL statement using appropriate JOIN or UNION syntax
-- We only need to write two queries and make sure you test them at least on a few scenarios where UNION is available or when you are working with a single table. Otherwise it may be difficult and tricky when debugging.
-- We can use a case statement to test the functionality of the SQL and test the correctness of the logic as well.
CREATE TABLE test_tbl_name (company_name varchar(30), customer_name varchar(30));
 -- Create an additional table on top of all existing tables and add a row on top
 CREATE TABLE users_test (user_name varchar(30), user_pwd varchar(30), user_email varchar(30));
 -- You need to test the INSERT functionality of the SQL statement or you will get no results, in this case, you can directly access the table without any problem.
 -- In this situation, use SELECT query.
 -- You can use UNION instead of JOIN syntax. In this case, UNION will run its tests first and get you the results instead of a single row.
 -- It is very important that this query works only with the two tables you created.

 -- We can use multiple if where expressions to test the JOIN and UNION syntax in a more efficient manner and the results will be the same.
 -- If you are working with large data sets, we can use JOIN to build multiple separate tables and then UNION them together at the end to get the desired results. This allows us to speed up the tests as much as possible.
 -- Since this syntax is simple, it may be less error-prone in some situations than using a case statement. In other cases, using if and where statements may cause an error.

 CREATE TABLE users_temp (user_name varchar(30), user_pwd varchar(30));
 -- Create a temporary table for storing the results we get during the testing
 CREATE TABLE IF NOT EXISTS users_test (user_name varchar(30), user_pwd varchar(30), user_email varchar(30));
 -- INSERT INTO into the new table and we are sure to get the data after
 INSERT INTO users_test (user_name, user_pwd) VALUES ('user1', '<PASSWORD>'),
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP DATABASE IF EXISTS sampleDB;
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
UPDATE employee SET ManagerID = NULL WHERE department = 'CEO';
UPDATE employee SET ManagerID = NULL WHERE department = 'Managing Director';
UPDATE employee SET ManagerID = NULL WHERE (ManagerID = 'Kevin');
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP DATABASE IF EXISTS sampleDB;
DROP TABLE IF EXISTS personTable;
DROP TABLE IF EXISTS customerTable;
DROP TABLE IF EXISTS ordersTable;
DROP TABLE IF EXISTS ordersDetailTable;
DROP TRGAN TABLE IF EXISTS `cityTable`;
DROP TRGAN INDEX IF EXISTS `personTable_age`;
DROP TRGAN INDEX IF EXISTS `ordersTable_lastname`;
DROP TRGAN TABLE IF EXISTS `ordersDetailTable`;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
UPDATE DATABASE
-- You must not run a statement like this (mysql>use database);
USE sampleDB;
-- You must not use database before setting its use flag (mysql>set database "database_to_set_use_flag_to")
SET DATABASE "sampleDB";
-- Drop the mutated table that has been made using INNODb engine (mysql>use mutated_table)
DROP TABLE IF EXISTS mutated_table; 
-- Add a column using a MUTATE (mysql>alter table mutated_table add column added_column ENUM(123)), 
-- then create a table using that column
CREATE TABLE if not exists mutated_table ( col1 int(10) default 0, col2 int(10), coln text)
-- Test if it was successfully mutated
SELECT * from mutated_table
-- Drop the column from the table with the mutated column and DROP COLUMN (mysql>alter table mutated_table DROP column coln),
-- then try using coln to see the column has been dropped
SELECT * from mutated_table
-- Try dropping a column which is in a constraint
ALTER TABLE mutated_table DROP CONSTRAINT fk_mutated_table_id
-- Create an undo table of mutated tables and INSERT data to the undo table (mysql>create table undo_mutated_table like mutated_table)
DROP TABLE mutated_table; 
-- Add a column using a NO MUTATE (mysql>alter table mutated_table add column added_column ENUM(123)),
-- then create a table using that column and add the column in a separate statement 
-- (mysql>alter table sampleDB.mutated_table add column added_column ENUM(123)), ADD COLUMN with other values
SELECT col1 from mutated_table, col2 from mutated_table 
-- Drop the mutated table that has been made using INNODb engine and then use SHOW INDEXES to see if 
-- the column is still included or not (mysql>alter table mutated_table DROP column added_column),
-- then use SHOW COLUMNS to see if col1 and coln are still included
SELECT col1 from mutated_table, col2 from mutated_table ; 
-- Try dropping a column which is in a constraint
ALTER TABLE mutated_table DROP CONSTRAINT fk_mutated_table_id
-- Create an undo table of mutated tables and INSERT data to the undo table (mysql>create table undo_mutated_table like mutated_table)
DROP TABLE mutated_table; 
-- Add a column using a MUTATE (ALTER TABLE mutated_table MODIFY column added_column ENUM(123)), 
-- then create a table using
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO user (id, name, passwd) VALUES (0, 'admin', '<PASSWORD>'), (1,'someperson1', '<PASSWORD>');
INSERT INTO person (id, name) VALUES (0, 'person'), (1, 'fred'), (2, 'amy'), (3, 'john'), (4, 'bob'), (5, 'jill'), (6, 'alice');
INSERT INTO post (id, content) VALUES (0, 'hello world!'), (1, 'I am a mutation'), (2, '';
insert into address (id, city, streetNumber) values (1, 'Wolfsburg', 3), (2, 'Cologne', 2), (3, 'Aachen', 2), (4, 'Hamburg', 8), (5, 'Braunschweig', 2), (6, 'Augsburg', 2), (7, 'Aachen', 2), (8, 'Aachen', 2), (9, 'Düsseldorf', 2), (10, 'München', 2);
 
UPDATE person set name = 'Updated Person' where name = 'bob';
 
UPDATE person set name = 'Updated Person'
WHERE name IN('amy','bob');
 
UPDATE person set name = 'Updated Person'
INNER JOIN person2
ON person.id = person2.id
WHERE person.id IN (5);
 
UPDATE person set name = 'Updated Person'
INNER JOIN person2
ON person.id = person2.id
WHERE name IN ('amy','bob')
ORDER BY name;
 
UPDATE person set name ='myupdate'
WHERE name ='something old';
 
UPDATE person set name ='myupdate'
WHERE name ='something other';

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS person;
CREATE TABLE person (ID INT NOT NULL AUTO_INCREMENT PRIMARY KEY, lastName VARCHAR(255), firstName VARCHAR(255), birthday DATE, sex TINYINT(1), city VARCHAR(255), country VARCHAR(255));
INSERT INTO person (ID, lastName, firstName, birthday, sex, city, country) VALUES (1, 'Smith', 'Bob', '09-09-1989', 4, 'Amsterdam', 'Netherlands');
INSERT INTO person (ID, lastName, firstName, birthday, sex, city, country) VALUES (2, 'Jones', 'Chuck', '18-08-1992', 1, 'Paris', 'France');
SELECT * FROM person WHERE lastName='Jones';
SELECT * FROM person WHERE ID=1;
DROP TABLE IF EXISTS person;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS person;
CREATE TABLE person (ID INT NOT NULL AUTO_INCREMENT PRIMARY KEY, lastName VARCHAR(255), firstName VARCHAR(255), birthday DATE, sex TINYINT(1), city VARCHAR(255), country VARCHAR(255));
INSERT INTO person (ID, lastName, firstName, birthday, sex, city, country) VALUES (1, 'Smith', 'Bob', '09-09-1989', 4, 'Amsterdam', 'Netherlands');
INSERT INTO person (ID, lastName, firstName, birthday, sex, city, country) VALUES (2, 'Jones', 'Chuck', '18-08-1992', 1, 'Paris', 'France');
SELECT * FROM person WHERE lastName='Jones';
SELECT * FROM person WHERE ID=1;
DROP TABLE IF EXISTS person;
DROP DATABASE IF EXISTS sampleDB;
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS student;
CREATE TABLE student(ID INT NOT NULL AUTO_INCREMENT PRIMARY KEY, firstName VARCHAR(255), lastName VARCHAR(255), gender TINYINT(1), age INT);

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS person;
CREATE TABLE person (ID INT NOT NULL AUTO_INCREMENT PRIMARY KEY, lastName VARCHAR(255), firstName VARCHAR(255), birthday DATE, sex TINYINT(1), city VARCHAR(255), country VARCHAR(255));
INSERT INTO person (ID, lastName, firstName, birthday, sex, city, country) VALUES (1, 'Smith', 'Bob', '09-09-1989', 4, 'Amsterdam', 'Netherlands');
INSERT INTO person (ID, lastName, firstName, birthday, sex, city, country) VALUES (2, 'Jones', 'Chuck', '18-08-1992', 1, 'Paris', 'France');
SELECT * FROM person WHERE ID=1;
DROP TABLE IF EXISTS person;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS person;
CREATE TABLE person (ID INT PRIMARY KEY, name VARCHAR(200), birthdate DATE);
INSERT INTO person (id, name, birthdate) VALUES(1, '<NAME>', '1996-06-24');
INSERT INTO person (id, name, birthdate) VALUES(2, '<NAME>', '2013-07-30');
SELECT * FROM person WHERE birthdate='2013-07-30';
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS person;
CREATE TABLE person (ID INT NOT NULL AUTO_INCREMENT PRIMARY KEY, lastName VARCHAR(255), firstName VARCHAR(255), birthday DATE, sex TINYINT(1), city VARCHAR(255), country VARCHAR(255));
INSERT INTO person (ID, lastName, firstName, birthday, sex, city, country) VALUES (1, 'Smith', 'Bob', '09-09-1989', 4, 'Amsterdam', 'Netherlands');
INSERT INTO person (ID, lastName, firstName, birthday, sex, city, country) VALUES (2, 'Jones', 'Chuck', '18-08-1992', 1, 'Paris', 'France');
SELECT * FROM person INNER JOIN person ON person.city = person2.city WHERE ID=1;
DROP TABLE IF EXISTS person;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS person;
CREATE TABLE IF NOT EXISTS person (ID INT NOT NULL AUTO_INCREMENT PRIMARY KEY, lastName VARCHAR(255), firstName VARCHAR(255), birthday DATE, sex TINYINT(1), city VARCHAR(255), country VARCHAR(255));
INSERT INTO person (ID, lastName, firstName, birthday, sex, city, country) VALUES (1, 'Smith', 'Bob', '09-09-1989', 4, 'Amsterdam', 'Netherlands');
INSERT INTO person (ID, lastName, firstName, birthday, sex, city, country) VALUES (2, 'Jones', 'Chuck', '18-08-1992', 1, 'Paris', 'France');
SELECT * FROM person WHERE lastName='Jones';
SELECT * FROM person WHERE ID=1;
DROP TABLE IF EXISTS person;
SELECT * FROM person WHERE sex=4;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS person;
CREATE TABLE person (ID INT PRIMARY KEY, name VARCHAR(200), birthdate DATE);
INSERT INTO person (id, name, birthdate) VALUES(1, '<NAME>', '1996-06-24');
INSERT INTO person (id, name, birthdate) VALUES(2, '<NAME>', '2013-07-30');
SELECT * FROM person WHERE birthdate='2013-07-30';
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DELETE FROM person Where birthdate>='2013-07-30';
-- Please create a program to perform complex join between two tables
-- Please read the documentation and check with the help of examples
USE sampleDB; DROP TABLE IF EXISTS user; 
CREATE TABLE user (id INT, name VARCHAR(200)); 
INSERT INTO user (id, name) VALUES(1, 'Lee');
INSERT INTO user (id, name) VALUES(2, 'John');
INSERT INTO user (id, name) VALUES(3, 'Rahul');
INSERT INTO user (id, name) VALUES(4, 'Vinay');
DROP TABLE IF EXISTS usertemp;
CREATE TABLE usertemp (u VARCHAR(200), u1 VARCHAR(200)); 
DROP TABLE IF EXISTS emp;
CREATE TABLE emp (id INT, u VARCHAR(200)); 
DROP TABLE IF EXISTS emptemp;
CREATE TABLE emptemp (e1 VARCHAR(200), e2 VARCHAR(200)); 
-- Please use SQL commands to join user table and emp table with data having same u and e
-- Please create a program that reads inputted SQL queries and runs them through an intelligent processor. If the query is valid, then the output should be the results of the query. If the query is invalid then the output should be the SQL queries that caused the invalidity
-- Please use INSERT, UPDATE and DELETE commands to modify a database
-- Please do not use the SQL commands except SELECT
-- Please use multiple threads to test SQL performance while selecting and joining two tables
-- Please create a small program to insert a large number of rows in an unsorted table in MySQL
-- Please use MySQL dumper to create a.sql file in MySQL
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees;
CREATE TABLE employees (ID INT PRIMARY KEY, name VARCHAR(200), address VARCHAR(200), city varchar(200)); 
INSERT INTO employees (id, address) VALUES(1, '1985118');
INSERT INTO employees (id, address, city) VALUES(2, '4', 'Kolkata');
INSERT INTO employees (id, address, city) VALUES(3, '5', 'Bathinda');
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS person;
 
CREATE TABLE person (ID INT PRIMARY KEY, address VARCHAR(200), birthdate DATE);
INSERT INTO person (id, address, birthdate) VALUES(1, 'The City of Los Angeles', '1996-06-24');
INSERT INTO person (id, address, birthdate) VALUES(2, 'The City of San Diego', '2015-08-01');

DELETE FROM person WHERE birthdate='2013-07-30';
UPDATE person SET name='<NAME>', birthdate='1987-07-06' WHERE birthdate='1987-07-06' AND id=1;


-- 1. Write code to retrieve all records from the "person" table.
 
 
-- 4. Write a query which finds the date of the 2nd employee in the "person" table.

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
UPDATE person SET name='<NAME>', birthdate='1994-09-11' WHERE id = 1;
SELECT * FROM person WHERE id=1;

-- END

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- Please create another mutated program that inserts a record into the sampleDB table
CREATE TABLE IF NOT EXISTS person (ID INT PRIMARY KEY, name VARCHAR(200), birthdate DATE, a_long_text TEXT, a_long_long_text TEXT, some_binary LONGBINARY);
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS person;
CREATE TABLE person (ID INT PRIMARY KEY, name VARCHAR(200), birthdate DATE, hobbies TEXT);
INSERT INTO person (id, name, birthdate, hobbies) VALUES(1, '<NAME>', '1996-06-24', 'Reading Reading Reading');
INSERT INTO person (id, name, birthdate, hobbies) VALUES(2, '<NAME>', '2013-07-30', 'Reading Reading Reading Reading');
SELECT * FROM person WHERE birthdate='2013-07-30' AND hobbies REGEXP '\breading[\s]?reading[\s]?reading';
SELECT ID, name FROM person WHERE birthdate<'2016-01-01' AND hobbies LIKE '%ing';
-- Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created.
-- You need to answer all my questions here.
```

## 15 - Migrating from MySQL to PostgreSQL

PostgreSQL is a free, open source, advanced relational database management system. It is the most used database system in the world. PostgreSQL uses a SQL dialect called SQL Language that is supported by more than 316 languages. It features extensive array functions and a language called PL/pgSQL that is supported by 23 languages. PostgreSQL is very easy to operate, although, PostgreSQL is not able to do everything offered by MySQL. PostgreSQL was developed in 2010 by the former PostgreSQL community. At the time of writing, is open-source, there were not any big announcements since 2010 and is still used by many companies.

PostgreSQL works by utilizing a relational approach to database management, where the database is built according to the tables, then using the SQL commands to access and modify the data. When you store a table, for example, in a database, the server creates a relational schema (schema) of that table. You create a schema through CREATE SCHEMA, which creates a table called schema where the information about that schema will be stored.
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS person;
CREATE TABLE person (ID INT PRIMARY KEY, name VARCHAR(200), birthdate DATE);
INSERT INTO person (id, name, birthdate) VALUES(1, '<NAME>', '1996-06-24');
INSERT INTO person (id, name, birthdate) VALUES(2, '<NAME>', '2013-07-30');
SELECT * FROM person WHERE birthdate='2013-07-30';
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS person_old;
CREATE TABLE person_old (ID INT PRIMARY KEY, name VARCHAR(200), birthdate DATE);
INSERT INTO person_old (id, name, birthdate) VALUES(1, '<NAME>', '1996-06-24');
INSERT INTO person_old (id, name, birthdate) VALUES(2, '<NAME>', '2013-07-30');
SELECT name FROM person_old WHERE birthdate='2013-07-30';
DROP TABLE IF EXISTS person_old;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DO
BEGIN
UPDATE person SET name=CONCAT(SUBSTRING(id,1,1), '.',name);
END;

-- Please create a program that uses the table created by DO. You should insert values into the tables. Then you need to get all names which are under the first letter of the id.
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DO
BEGIN
INSERT INTO person (id, name, birthdate) VALUES(1,'<NAME>', '1996-06-24');
INSERT INTO person (id, name, birthdate) VALUES(2,'<NAME>', '2015-07-16');
END;

SELECT * FROM person WHERE birthdate = '2015-07-16';
SELECT name FROM person WHERE name LIKE 'A%';
SELECT name FROM person WHERE birthdate > '1996-06-24';

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS person (ID INTE PRIMARY KEY, name VARCHAR(200), birthdate DATE)
    ENGINE=InnoDB;
UPDATE person SET birthdate = '2014-08-02' WHERE name='Kostya';
SELECT * FROM person LIMIT 1;
 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS person (ID INTE PRIMARY KEY, name VARCHAR(200), birthdate DATE)
    ENGINE=InnoDB;
CREATE TRIGGER IF NOT EXISTS person_birth date_update
    AFTER UPDATE on person
    FOR EACH ROW
    DELETE FROM person WHERE id < OLD.id;
INSERT INTO person (id, name, birthdate) VALUES(1, '<NAME>', '1996-06-24');
INSERT INTO person (id, name, birthdate) VALUES(2, '<NAME>', '2013-08-13');
 
CREATE DATABASE IF NOT EXISTS parentageDB; USE parentageDB;
CREATE TABLE IF NOT EXISTS parentage (ID INT PRIMARY KEY, name VARCHAR(200), father INT UNSIGNED, mother INT UNSIGNED);
CREATE TABLE IF NOT EXISTS child (ID INT PRIMARY KEY, fatherid INT UNSIGNED, motherid INT UNSIGNED, babymum INT UNSIGNED, babysitter INT UNSIGNED);
CREATE TABLE IF NOT EXISTS boy_child (ID INT PRIMARY KEY, father INT UNSIGNED, mother INT UNSIGNED, babymum INT UNSIGNED, babysitter INT UNSIGNED);
CREATE TABLE IF NOT EXISTS girl_child (ID INT PRIMARY KEY, father INT UNSIGNED, mother INT UNSIGNED, babymum INT UNSIGNED, babysitter INT UNSIGNED);
CREATE TABLE IF NOT EXISTS family (ID INT UNSIGNED PRIMARY KEY AUTO_INCREMENT, parentage_id INT, child_id INT);
 
/* Now insert values in the below parentage table
0 -> Kostya
father -> 0
mother
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
UPDATE person SET name='<NAME>' WHERE birthdate='2013-07-30';
SELECT * FROM person WHERE birthdate='2013-07-30';
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS person;
CREATE TABLE person (ID INT PRIMARY KEY, name VARCHAR(200), birthdate DATE);
INSERT INTO person (id, name, birthdate) VALUES(1, '<NAME>', '2005-06-24');
UPDATE person SET name='Hulk' WHERE id=2;
SELECT * FROM person WHERE id=1;
SELECT * FROM person WHERE birthdate='2013-07-30';
SELECT * FROM person WHERE name='Hulk';
DROP TABLE IF EXISTS person;
CREATE TABLE person (ID INT PRIMARY KEY, name VARCHAR(200), gender CHAR(1));
INSERT INTO person (ID, name, gender) VALUES(1, '<NAME>', 'F');
INSERT INTO person (ID, name, gender) VALUES(2, '<NAME>', 'M');
UPDATE person SET gender='M' WHERE id=1;
SELECT * FROM person WHERE ID=1;
SELECT * FROM person WHERE name='Hulk';
DROP TABLE IF EXISTS person;
CREATE TABLE person (ID INT PRIMARY KEY, name VARCHAR(200), father VARCHAR(200), mother VARCHAR(200), spouse varchar(200), daughter VARCHAR(200), bday DECIMAL(9,2), bmonth CHAR(2), byear INT);
INSERT INTO person (ID, name, father, mother, spouse, daughter, bdate, bmonth, byear) VALUES(2, '<NAME>', '', '', '', '', '2009-09-01', 'Nov', '1921');
INSERT INTO person (ID, name, father, mother, spouse, daughter, bdate, bmonth, byear) VALUES(3, '<NAME>', '', '', '', '', '1993-09-03', 'Dec', '1913');
SELECT * FROM person WHERE mother='Mauro';
DROP TABLE IF EXISTS person;
CREATE TABLE person (ID INT PRIMARY KEY, name VARCHAR(200), father VARCHAR(200), mother VARCHAR(200), spouse varchar(200), daughter VARCHAR(200), bday DECIMAL(9,2), bmonth CHAR(2), byear INT);
INSERT INTO
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS person_old;
CREATE TABLE person_old (ID INT PRIMARY KEY, name VARCHAR(200), birthdate DATE);
INSERT INTO person_old (id, name, birthdate) VALUES(1, '<NAME>', '1996-06-24');
INSERT INTO person_old (id, name, birthdate) VALUES(2, '<NAME>', '2013-07-30');
SELECT name FROM person_old WHERE birthdate='2013-07-30';
DROP TABLE IF EXISTS person_old;
DROP DATABASE IF EXISTS sampleDB;
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS person;
CREATE TABLE person( firstname VARRINT(10), lastname VARCHAR(200) PRIMARY KEY, birthdate DATE);
INSERT INTO person (firstname, lastname, birthdate) VALUES('Kate', '<NAME>', '1996-06-24');
INSERT INTO person (firstname, lastname, birthdate) VALUES('Steven', '<NAME>', '2013-07-30');
SELECT lastname FROM person WHERE birthdate='1996-06-24';
DROP TABLE IF EXISTS person;
DROP DATABASE IF EXISTS sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SELECT * FROM person LIMIT 1;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS animal_new (id INT, name VARCHR(20), sex VARCHR(10), PRIMARY KEY (id), UNIQUE(name, sex));
INSERT INTO animal_new (id, name, sex) VALUES(1, 'Lion', 'Female');
INSERT INTO animal_new (id, name, sex) VALUES(2, 'Tiger', 'Male');
INSERT INTO animal_new (id, name, sex) VALUES(3, 'Tiguan', 'Male');
INSERT INTO animal_new (id, name, sex) VALUES(4, 'Falcon', 'Male');
SELECT id, name, sex FROM animal_new WHERE sex = 'Male';
DROP TABLE IF EXISTS animal_new;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS person_old;
CREATE TABLE person_old (id INT PRIMARY KEY, name VARCHAR(200), birthdate DATE);
INSERT INTO person_old (id, name, birthdate) VALUES(1, '<NAME>', '1996-06-24');
INSERT INTO person_old (id, name, birthdate) VALUES(2, '<NAME>', '2013-07-30');
SELECT name FROM person_old WHERE birthdate <= CURRENT_DATE();
DROP TABLE IF EXISTS person_old;
DROP DATABASE IF EXISTS sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS company;
CREATE TABLE company (ID INT PRIMARY KEY, name VARCHAR(50), description VARCHAR(100));
INSERT INTO company (id, name, description) VALUES(1, 'ACME Enterprises', 'Cooperation with more than 2,500 companies across the United States. Companies can manage employees, staff, and clients. Each employee gets benefits. Companies become very popular as companies grow');
INSERT INTO company (id, name, description) VALUES(2, 'Acme Bank', 'Acme Bank, Inc. is a bank of the USA, a division of the Washington State, DC. The bank receives mortgage interests when the money they offer goes into a bank account belonging to the firm');
INSERT INTO company (id, name, description) VALUES(3, 'Apple, Inc.', 'Apple, Inc. is the company that develops and produces technology that is mobile and portable');
INSERT INTO company (id, name, description) VALUES(4, 'Adobe', 'Adobe is an evolving multinational technology company with an affiliate. They develop software to transform the way our visual arts work');
INSERT INTO company (id, name, description) VALUES(5, 'ABC Bank', 'ABC Bank Limited is a bank by the UK in the United Kingdom which is the largest bank in the country');
INSERT INTO company (id, name, description) VALUES(6, 'Accenture', 'Accenture is a technology development company with a partnership with Bank of America');
INSERT INTO company (id, name, description) VALUES(7, 'Alphabet Inc.', 'Alphabet, Inc. is a sports-based music giant with a partnership with New Orleans Lakers');
INSERT INTO company (id, name, description) VALUES(8, 'Asus', 'Asus was founded by <NAME>, but has since grown with a strong passion for technology for the last century');
INSERT INTO company (id, name, description) VALUES(9, 'Atlassian', 'Atlassian is an American company headquartered at San Jose, CA');
INSERT INTO company (id, name, description
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS person_old;
CREATE TABLE person_old (id INT PRIMARY KEY, name VARCHAR(200), birthdate DATE);
INSERT INTO person_old (id, name, birthdate) VALUES(1, '<NAME>', '1996-06-24');
INSERT INTO person_old (id, name, birthdate) VALUES(2, '<NAME>', '2013-07-30');
SELECT name FROM person_old WHERE birthdate <= CURRENT_DATE();
DROP TABLE IF EXISTS person_old;
DROP DATABASE IF EXISTS sampleDB;
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS person_old;
CREATE TABLE person_old (id INT PRIMARY KEY, name VARCHAR(200), birthdate DATE);
INSERT INTO person_old (id, name, birthdate) VALUES(1, '<NAME>', '1996-06-24');
INSERT INTO person_old (id, name, birthdate) VALUES(2, '<NAME>', '2013-07-30');
SELECT name FROM person_old WHERE birthdate <= '2003-05-20';
DROP TABLE IF EXISTS person_old;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS person_new;
CREATE TABLE person_new (id INT NOT NULL AUTO_INCREMENT, name VARCHAR(200), birthdate DATE, a_fk INT, FOREIGN KEY (a_fk) REFERENCES person_old(id));
INSERT INTO person_new (name, birthdate) VALUES('<NAME>', '1996-06-24');
INSERT INTO person_new (name, birthdate) VALUES('<NAME>', '2018-03-20');
DROP TABLE IF EXISTS person_old;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS person_old;
CREATE TABLE person_old (id INT PRIMARY KEY, name VARCHAR(200), birthdate DATE);
INSERT INTO person_old (id, name, birthdate) VALUES(1, '<NAME>', '1996-05-24');
INSERT INTO person_old (id, name, birthdate) VALUES(2, '<NAME>', '2012-07-28');
SELECT name FROM person_old WHERE birthdate < CURRENT_DATE();
DROP TABLE IF EXISTS person_old;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS people;
CREATE TABLE people (id INT PRIMARY KEY, name VARCHAR(200));
CREATE TABLE people2 (
    id INT PRIMARY KEY NOT NULL,
    name VARCHAR(200) NOT NULL
);
DROP TABLE IF EXISTS people_pk;
CREATE TABLE people_pk (id INT NOT NULL, PRIMARY KEY (id));
DROP TABLE IF EXISTS people_pk2;
CREATE TABLE people_pk2 (id INT NOT NULL, PRIMARY KEY (id));
DROP TABLE IF EXISTS people2_pk;
CREATE TABLE people2_pk (id INT NOT NULL, PRIMARY KEY (id));
DROP TABLE IF EXISTS people_pk3;
CREATE TABLE people_pk3 (id INT NOT NULL, PRIMARY KEY (id));
DROP TABLE IF EXISTS people2_pk3;
CREATE TABLE people2_pk3 (id INT NOT NULL, PRIMARY KEY (id));
DROP TABLE IF EXISTS people_pk4;
CREATE TABLE people_pk4 (id INT NOT NULL, PRIMARY KEY (id));
DROP TABLE IF EXISTS people2_pk4;
CREATE TABLE people2_pk4 (id INT NOT NULL, PRIMARY KEY (id));
DROP TABLE IF EXISTS people_pk5;
CREATE TABLE people_pk5 (id INT NOT NULL, PRIMARY KEY (id));
DROP TABLE IF EXISTS people2_pk5;
CREATE TABLE people2_pk5 (id INT NOT NULL, PRIMARY KEY (id));
DROP TABLE IF EXISTS people_pk6;
CREATE TABLE people_pk6 (
    id INT NOT NULL,
    PRIMARY KEY (id)
);
DROP TABLE IF EXISTS people2_pk6;
CREATE TABLE people2_pk6 (id INT NOT NULL, PRIMARY KEY (id));
DROP TABLE IF EXISTS people_pk7;
CREATE TABLE people_pk7 (
    id INT NOT NULL,
    PRIMARY KEY (id)
);
DROP TABLE IF EXISTS people2_pk7;
CREATE TABLE people2_pk7 (id INT NOT NULL, PRIMARY KEY (id));
DROP
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS person_tmp;
CREATE TABLE person_tmp (id INT PRIMARY KEY, name VARCHAR(200), birthdate DATE);
INSERT INTO person_tmp (id, name, birthdate) VALUES(3, '<NAME>', '1995-01-20');
INSERT INTO person_tmp (id, name, birthdate) VALUES(4, '<NAME>', '2013-05-17');
DROP TABLE IF EXISTS person_tmp;
DROP DATABASE IF EXISTS sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS person_tmp;
CREATE TABLE person_tmp (id INT PRIMARY KEY, name VARCHAR(200), birthdate DATE);
INSERT INTO person_tmp (id, name, birthdate) VALUES(3, '<NAME>', '1995-01-20');
INSERT INTO person_tmp (id, name, birthdate) VALUES(4, '<NAME>', '2013-05-17');
DROP TABLE IF EXISTS person_tmp;
DROP DATABASE IF EXISTS sampleDB;
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS person_tmp;
CREATE TABLE person_tmp (id INT NOT NULL AUTO_INCREMENT, name VARCHAR(200), birthdate DATE);
INSERT INTO person_tmp (name, birthdate) VALUES (
    '<NAME>',
    '1995-01-20'
);
INSERT INTO person_tmp (name, birthdate) VALUES (
    '<NAME>',
    '2013-05-17'
);
DROP TABLE IF EXISTS person_tmp;
DROP DATABASE IF EXISTS sampleDB;
 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS person_tmp;
CREATE TABLE person_tmp (id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY, name VARCHAR(200), birthdate DATE);
INSERT INTO person_tmp (name, birthdate) VALUES (
    '<NAME>',
    '1995-01-20'
);
INSERT INTO person_tmp (name, birthdate) VALUES (
    '<NAME>',
    '2013-05-17'
);
 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS person_tmp;
CREATE TABLE person_tmp (
    id INT UNSIGNED NOT NULL AUTO_INCREMENT,
    name VARCHAR(200),
    surname VARCHAR(200),
    birthdate DATE,
    created_at TIMESTAMP NOT NULL DEFAULT GETDATE(),
    INDEX (created_at),
    INDEX (birthdate, name, surname)
);
INSERT
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS person;
CREATE TABLE person (id INT, name VARCHAR(200), birthdate DATE, PRIMARY KEY(id));

INSERT INTO person (id, name, birthdate) VALUES(1, '<NAME>', '1982-08-15'), (2, '<NAME>', '2010-08-15');
UPDATE person SET birthdate='2001-08-15' WHERE id=1;
DELETE FROM person WHERE id=1;
DROP TABLE IF EXISTS person;
DROP DATABASE IF EXISTS sampleDB;
 
CREATE TABLE test(id INTEGER, name TEXT, birthdate DATE, PRIMARY KEY (id, birthdate));

 
SELECT count(*) FROM test;
TRUNCATE test;
SELECT count(*) FROM test;

-- There are several versions of PHP that are available. I recommend that you use version 5.4.16 as this is the default version on Debian. There were some minor issues with PHP 7 and MySQL 5.7 that needed to be worked around.

php -d default_socket=/usr/local/mysql/mysql.sock
php -f 07-mysql-04-simple-update.php<fim_middle>CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE test_tbl (id INT, name TEXT, birthdate DATE, PRIMARY KEY (id, birthdate), UNIQUE(name));
INSERT INTO test_tbl (id, name, birthdate) VALUES(3, "<NAME>", '2011-05-23');
INSERT INTO test_tbl (id, name, birthdate) VALUES(2, "<NAME>", '2010-01-26');
INSERT INTO test_tbl (id, name, birth
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS person_tmp;
CREATE TABLE person_tmp (id INT, name VARCHAR(200), birthdate DATE, PRIMARY KEY(id));
INSERT INTO person_tmp (id, name, birthdate) VALUES(3, '<NAME>', '1995-01-20');
INSERT INTO person_tmp (id, name, birthdate) VALUES(4, '<NAME>', '2013-05-17');
DROP TABLE IF EXISTS person_tmp;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS person_tmp;
CREATE TABLE person_tmp (id INT PRIMARY KEY, name VARCHAR(200), age INT);
INSERT INTO person_tmp (id, name, age) VALUES(3, '<NAME>', 31);
INSERT INTO person_tmp (id, name, age) VALUES(4, '<NAME>', 25);
DROP TABLE IF EXISTS person_tmp;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS person_tmp;
ALTER TABLE person_tmp ADD FILLFACTOR INT;
DELETE FROM person_tmp;
insert into person_tmp
values
(
    1, 'foo', '2000-01-04'
   ),
   (
      2, 'bar', '2001-05-15'
   ),
   (
      3, 'baz', '2001-05-25',
      4, 'qux', '2001-05-25');
 
 
<commit_msg>updated the query<commit_after> 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS person_tmp;
CREATE TABLE person_tmp (id INT PRIMARY KEY, name VARCHAR(200), birthdate DATE);
INSERT INTO person_tmp (id, name, birthdate) VALUES(3, '<NAME>', '1995-01-20');
INSERT INTO person_tmp (id, name, birthdate) VALUES(4, '<NAME>', '2013-05-17');
/* Please create a very short query which uses SQL features in a complex way. Be sure to use
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS person_tmp;
CREATE TABLE person_tmp (id INT PRIMARY KEY, name VARCHAR(200), age INT);
INSERT INTO person_tmp (id, name, age) VALUES(3, '<NAME>', 31);
INSERT INTO person_tmp (id, name, age) VALUES(4, '<NAME>', 25);
DROP TABLE IF EXISTS person_tmp;
DROP DATABASE IF EXISTS sampleDB;
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS person;
CREATE TABLE person (id INT PRIMARY KEY, name VARCHAR(200));
INSERT INTO person (id, name) VALUES(3, '<NAME>');
INSERT INTO person (id, name) VALUES(4, '<NAME>');
DROP TABLE IF EXISTS person;
DROP DATABASE IF EXISTS sampleDB;

-- If you run some SQL like the following:
SELECT * FROM person;
-- In MySQL, you must put your query inside a single quote, this way the result will not be interpreted as a query.
SELECT * FROM 'person';
-- If you don't have to create the required tables, you could use a subquery
SELECT * FROM (SELECT * FROM person) d;
-- However this generates a JOIN query, which is not performance very good.

-- We have just done a brief review of Databases and their use at different stages of the development lifecycle. In the next tutorial, we will take a hands-on look at database query optimization which is the process to reduce the overall query response time.
-- MySQL is still the most popular database server in the world, with 6.2 billion customers and a new version is out in the pipeline this coming week.
-- In the following lesson, we will take a look at how to reduce the overall query responsiveness on a production level MySQL database.
-- If you have never used SQLite or any other DBMS, there are a lot of tutorials available out there that will guide you how to design your application using SQL queries and MySQL. In the end, the key points to remember while programming with the help of the examples I have shown here is to be conscious of the amount of data and what you should optimize for. If you ever try to figure the root cause of a production database out of a small example like I did here, then it will become quite difficult or even impossible to trace what could be the problem. You are to be careful in order to make sure that you optimize your DB schema.
-- Thank you very much for your time, in this tutorial, I have just briefly described how to implement a very simple schema where users could easily modify one or more of their names. The query below will add more data to the person table which allows the users to modify their name at a later point in time.

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE if exists person; DROP TABLE if exists person_old; DROP TABLE if exists player; DROP TABLE if exists team;
CREATE TABLE person (id INT PRIMARY KEY, name VARCHAR(200) UNIQUE, age INT, heightInCm INT);
CREATE TABLE player (id INT, name VARCHAR(200) UNIQUE, age INT, heightInCm INT, PRIMARY KEY(id)) ENGINE=InnoDB;
CREATE TABLE team (id INT, name VARCHAR(200) UNIQUE, PRIMARY KEY(id)) ENGINE=InnoDB;
ALTER TABLE person ADD CONSTRAINT fk_team_id FOREIGN KEY (teamId) REFERENCES team (id);
UPDATE person SET teamId = team.id WHERE teamId = DEFAULT;
-- How many people are in team A?
SELECT COUNT(*) FROM person_old WHERE teamId = 1;
UPDATE person SET teamId = 101 WHERE teamId = DEFAULT;
-- How many people still are in team A?
SELECT COUNT(*) FROM person_old WHERE teamId = DEFAULT;
-- What are their names?
SELECT name, CONCAT('#', teamId) AS "teamId#personId" FROM person_old;
-- How many people with height more than 300 cm are in team A?
SELECT COUNT(*) FROM person_old WHERE (heightInCm > 300);
-- How many people in team A still have more than 40 cm height?
SELECT COUNT(*) FROM person_old WHERE (heightInCm > 40);

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS person_tmp;
CREATE TABLE person_tmp (id INT PRIMARY KEY, name VARCHAR(200), age INT);
INSERT INTO person_tmp (id, name, age) VALUES(3, '<NAME>', 28);
INSERT INTO person_tmp (id, name, age) VALUES(4, '<NAME>', 22);
DROP TABLE IF EXISTS person_tmp;
DROP DATABASE IF EXISTS sampleDB;
INSERT INTO person_tmp (id, name, age) VALUES(3, '<NAME>', 26);
INSERT INTO person_tmp (id, name, age) VALUES(5, '<NAME>', 23);
DROP DATABASE IF EXISTS database;
 
CREATE DATABASE IF NOT EXISTS database; USE database;
DROP TABLE IF EXISTS person_tmp;
CREATE TABLE person_tmp (id INT PRIMARY KEY, name VARCHAR(100), age INT);
DROP TABLE IF EXISTS person_tmp;
DROP DATABASE IF EXISTS database;
INSERT INTO person_tmp (id, name, age) VALUES(999, 'Kalle', 33);
INSERT INTO person_tmp (id, name, age) VALUES(888, 'Gina', 22);
DROP TABLE IF EXISTS person_tmp;
DROP DATABASE IF EXISTS database;
 
CREATE DATABASE IF NOT EXISTS database; USE database;
DROP TABLE IF EXISTS person_tmp;
CREATE TABLE person_tmp (id INT PRIMARY KEY, name VARCHAR(200), age INT);
INSERT INTO person_tmp (id, name, age) VALUES(999, 'Meier', 33);
DROP TABLE IF EXISTS person_tmp;
DROP DATABASE IF EXISTS database;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS movie;
CREATE TABLE movie (id INT PRIMARY KEY, name VARCHAR(200), title VARCHAR(200), rating INT, plot_num INT, PRIMARY KEY(id));
INSERT INTO movie (id, name, title, rating, plot_num) VALUES(71, 'Aliens', 'Pulp Fiction', 7, 9);
INSERT INTO movie (id, name, title, rating, plot_num) VALUES(72, 'Aliens II', 'Pulp Fiction II', 4, 4);

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS person_tmp;
CREATE TABLE person_tmp (id INT PRIMARY KEY, name VARCHAR(200), age INT);
INSERT INTO person_tmp (id, name, age) VALUES(3, '<NAME>', 31);
INSERT INTO person_tmp (id, name, age) VALUES(4, '<NAME>', 25);
SELECT * FROM person_tmp;
SELECT * FROM person_tmp ORDER BY age;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS person_tmp;
CREATE TABLE person_tmp (id INT PRIMARY KEY, name VARCHAR(200), age INT);
INSERT INTO person_tmp (id, name, age) VALUES(3, '<NAME>', 31);
INSERT INTO person_tmp (id, name, age) VALUES(4, '<NAME>', 25);
SELECT * FROM person_tmp;
SELECT * FROM person_tmp ORDER BY age;
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS persons;
CREATE TABLE persons (id INT PRIMARY KEY, name VARCHAR(200), age INT);
INSERT INTO persons (id, name, age) VALUES(1, '<NAME>', 4);
INSERT INTO persons (id, name, age) VALUES(2, '<NAME>', 5);
INSERT INTO persons (id, name, age) VALUES(3, '<NAME>', 6);
SELECT * FROM persons;
SELECT * FROM persons ORDER BY age;
DROP TABLE IF EXISTS persons;
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS person_tmp;
CREATE TABLE person_tmp (id INT PRIMARY KEY, name VARCHAR(200), age INT);
INSERT INTO person_tmp (id, name, age) VALUES(3, '<NAME>', 31);
INSERT INTO person_tmp (id, name, age) VALUES(4, '<NAME>', 25);
SELECT * FROM person_tmp;
SELECT * FROM person_tmp ORDER BY age;
-- MySQL and Oracle have different way of managing queries. You can use select query with LIMIT keyword.
SELECT * FROM person_tmp LIMIT 3;
-- MySQL supports multiple queries in one INSERT statement, they have to be separated by semi-colon.
INSERT INTO person_tmp (id, name, age) VALUES(3, '<NAME>', 31);
INSERT INTO person_tmp (id, name, age) VALUES(4, '<NAME>', 25);
INSERT INTO person_tmp (id, name, age) VALUES(5, '<NAME>', 29);
SELECT * FROM person_tmp;
 
 
CREATE TABLE IF NOT EXISTS test (name VARCHAR(100), price INT(100));
INSERT INTO test (name, price) VALUES('<NAME>','$122');
INSERT INTO test (name, price) VALUES('<NAME>','$230');
INSERT INTO test (name, price) VALUES('<NAME>','$370');
INSERT INTO test (name, price) VALUES('<NAME>','$100');
INSERT INTO test (name, price) VALUES('<NAME>','$230');
INSERT INTO test (name, price) VALUES('<NAME>','$370');

SELECT * FROM test;
SELECT * FROM test ORDER BY name;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS emp_tmp;
CREATE TABLE emp_tmp (department CHAR(10), designation CHAR(10), salary DECIMAL(7,2), manager INT, PRIMARY KEY (department, designation));
INSERT INTO emp_tmp (department, designation,salary,manager) VALUES('IT','Engineer',9000.00,3);
INSERT INTO emp_tmp (department, designation,salary,manager) VALUES('IT','Engineer',10000.00,3);
SELECT * FROM emp_tmp ORDER BY id;
SELECT * FROM emp_tmp ORDER BY manager DESC;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS person_tmp;
CREATE TABLE IF NOT EXISTS person_tmp (id INT PRIMARY KEY, name VARCHAR(200), age INT);
INSERT INTO person_tmp (id, name, age) VALUES(3, '<NAME>', 31);
INSERT INTO person_tmp (id, name, age) VALUES(4, '<NAME>', 25);
SELECT * FROM person_tmp;
SELECT * FROM person_tmp ORDER BY age;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS person_tmp;
CREATE TABLE person_tmp (id INT PRIMARY KEY, name VARCHAR(200), age INT);
INSERT INTO person_tmp (id, name, age) VALUES(3, '<NAME>', 31);
INSERT INTO person_tmp (id, name, age) VALUES(4, '<NAME>', 25);
SELECT * FROM person_tmp;
SELECT * FROM person_tmp ORDER BY age DESC;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS person_tmp;
CREATE TABLE person_tmp (id INT PRIMARY KEY, name VARCHAR(200), age INT);
INSERT INTO person_tmp (id, name, age) VALUES(3, '<NAME>', 31);
INSERT INTO person_tmp (id, name, age) VALUES(4, '<NAME>', 25);
SELECT * FROM person_tmp;
SELECT * FROM person_tmp ORDER BY age DESC;
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- Using the MySQL shell, make the INSERT to person_tmp statement as equivalent to the following statement:
TRUNCATE TABLE person_tmp;
INSERT INTO person_tmp (name, age) VALUES ('<NAME>', 31), ('<NAME>', 25);
-- Please create a program which insert rows to person_tmp before you run a query like
SELECT * FROM person_tmp ORDER BY age DESC LIMIT 10;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS order_tbl;
CREATE TABLE order_tbl (name VARCHAR(200), description TEXT, priority INT);
INSERT INTO order_tbl (name, description, priority) VALUES('<NAME>', 'Order name should not be empty', 4);
INSERT INTO order_tbl (name, description, priority) VALUES('<NAME>', 'Order name should not be empty', 5);
INSERT INTO order_tbl (name, description, priority) VALUES('<NAME>', 'Order name should not be empty', 6);
SELECT name, * FROM person_tmp LIMIT 2;
SELECT name, COUNT(*) FROM person_tmp WHERE age > 17 ORDER BY priority DESC;
SELECT name FROM employee_tmp;
DROP DATABASE IF EXISTS sampleDB;
*/

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS person_tmp (id INT PRIMARY KEY, name VARCHAR(200), age INT);
INSERT INTO person_tmp VALUES(3, '<NAME>', 31);
INSERT INTO person_tmp VALUES(4, '<NAME>', 25);
SELECT id, name, age FROM person_tmp ORDER BY age DESC;
SELECT id, name, age FROM person_tmp ORDER BY age ASC;

 

DROP TABLE IF EXISTS person_tmp;

SELECT * FROM person_tmp;
SELECT name, id FROM person_tmp;
SELECT name, id FROM person_tmp ORDER BY id DESC;
DROP TABLE IF EXISTS person_tmp;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE person_tmp;
CREATE TABLE IF NOT EXISTS person_tmp (id INT, name VARCHAR(200));
INSERT INTO person_tmp VALUES (3, '<NAME>'), (4, '<NAME>');
INSERT INTO person_tmp VALUES (5, '<NAME>');
INSERT INTO person_tmp VALUES (10, '<NAME>');
SELECT * FROM person_tmp;
SELECT * FROM person_tmp WHERE age = 25;
SELECT * FROM person_tmp ORDER BY id DESC;
DROP TABLE person_tmp;
CREATE TABLE person_tmp (id INT, name VARCHAR(200), age);
INSERT INTO person_tmp VALUES (3, '<NAME>', 31), (5, '<NAME>', 25), (4, '<NAME>', 25);
INSERT INTO person_tmp VALUES (10, '<NAME>', 19);
SELECT age FROM person_tmp;
SELECT name FROM person_tmp WHERE id = 5;
SELECT name, age FROM person_tmp ORDER BY id;
DROP TABLE person_tmp;
CREATE TABLE person_tmp (id INT, name VARCHAR(200), age);
INSERT INTO person_tmp VALUES (3, '<NAME>', 31), (5, '<NAME>', 25), (4, '<NAME>', 25);
INSERT INTO person_tmp VALUES (10, '<NAME>', 19);
SELECT age, name, id FROM person_tmp HAVING age < 20;
SELECT name, id FROM person_tmp WHERE age > 25;
SELECT name, birthdate, id FROM person_tmp ORDER BY age, name;
DROP TABLE person_tmp;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE person_tmp (id INT PRIMARY KEY, name VARCHAR(200));
INSERT INTO person_tmp (id, name) VALUES(3, '<NAME>');
INSERT INTO person_tmp (id, name) VALUES(4, '<NAME>');
SELECT * FROM person_tmp ORDER BY id DESC;
DROP TABLE IF EXISTS person_tmp;
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS person_tmp;
CREATE TABLE person_tmp (id INT PRIMARY KEY, name VARCHAR(200));
INSERT INTO person_tmp (id, name) VALUES(3, '<NAME>');
INSERT INTO person_tmp (id, name) VALUES(4, '<NAME>');
SELECT * FROM person_tmp ORDER BY (id DESC) LIMIT 1;
DROP TABLE IF EXISTS person_tmp;
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS person_tmp;
CREATE TABLE person_tmp (id INT PRIMARY KEY, name VARCHAR(200));
INSERT INTO person_tmp (id, name) VALUES(3, '<NAME>');
INSERT INTO person_tmp (id, name) VALUES(4, '<NAME>');
SELECT name FROM person_tmp WHERE id > 4 ORDER BY id DESC LIMIT 1;
DROP TABLE IF EXISTS person_tmp;
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS person_tmp;
CREATE TABLE person_tmp (id INT PRIMARY KEY, name VARCHAR(200));
INSERT INTO person_tmp (id, name) VALUES(3, '<NAME>');
INSERT INTO person_tmp (id, name) VALUES(4, '<NAME>');
SELECT name FROM person_tmp INNER JOIN person_tmp ppt1 ON ppt1.id = person_tmp.id WHERE name = 'Tom' ORDER BY ppt1.id LIMIT 1;
DROP TABLE IF EXISTS person_tmp;
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS person_tmp;
CREATE TABLE person_tmp (id INT PRIMARY KEY, name VARCHAR(200));
INSERT INTO person_tmp (id, name) VALUES(3, '<NAME>');
INSERT INTO person_tmp (id, name) VALUES(4, '<NAME>');
SELECT name FROM person_tmp LEFT JOIN person_tmp lpt1 ON ppt1.
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS person_tmp;
CREATE TABLE person_tmp (id INT PRIMARY KEY, name VARCHAR(200), age INT);
INSERT INTO person_tmp (id, name, age) VALUES(3, '<NAME>', 31);
INSERT INTO person_tmp (id, name, age) VALUES(4, '<NAME>', 25);
SELECT * FROM person_tmp;
SELECT * FROM person_tmp ORDER BY age DESC;
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS person_tmp;
CREATE TABLE person_tmp (id INT PRIMARY KEY, name VARCHAR(200), age INT);
INSERT INTO person_tmp (id, name, age) VALUES(3, '<NAME>', 25);
INSERT INTO person_tmp (id, name, age) VALUES(4, '<NAME>', 31);
SELECT * FROM person_tmp;
SELECT * FROM person_tmp ORDER BY age;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SHOW databases;
USE sampleDB;
DROP TABLE IF EXISTS person_tmp;
CREATE TABLE person_tmp (id INT PRIMARY KEY, name VARCHAR(200), age INT);
INSERT INTO person_tmp (id, name, age) VALUES(4, '<NAME>', 37);
INSERT INTO person_tmp (id, name, age) VALUES(3, '<NAME>', 30);
SELECT * FROM person_tmp ORDER BY age DESC;
-- Please add the following line in mysql.conf

show variables like 'basedir';

select concat(username, " ", host) from mysql.user;

DROP DATABASE IF EXISTS sampleDB;
-- END

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS person_tmp;
CREATE TABLE person_tmp (id INT PRIMARY KEY, name VARCHAR(200), age INT);
INSERT INTO person_tmp (id, name, age) VALUES(3, '<NAME>', 31);
INSERT INTO person_tmp (id, name, age) VALUES(4, '<NAME>', 25);
SELECT name, age FROM (SELECT id, name, age FROM person_tmp WHERE id>=1) as p ORDER BY age DESC

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS person;
CREATE TABLE person (id INT PRIMARY KEY, name VARCHAR(200), age INT);
INSERT INTO person (id, name, age) VALUES(5, '<NAME>', 27);
INSERT INTO person (id, name, age) VALUES(6, '<NAME>', 49);
SELECT * FROM person;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS person_tmp;
CREATE TABLE person_tmp (id INT PRIMARY KEY, name VARCHAR(200));
ALTER TABLE person_tmp MODIFY name VARCHAR(200) CHARACTER SET ISO_8859_9 COLLATE ISO_8859_9_CI;
SELECT * FROM person_tmp;
-- Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created.

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS person;
CREATE TABLE person (id INT PRIMARY KEY, name VARCHAR(200), age INT);
INSERT INTO person (id, name, age) VALUES(5, '<NAME>', 27);
INSERT INTO person (id, name, age) VALUES(6, '<NAME>', 49);
SELECT * FROM person;
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- The mutation algorithm you will be using will only
-- work if all the rows match the condition on insert.
CREATE TABLE IF NOT EXISTS human (id INT NOT NULL AUTO_INCREMENT, name VARCHAR(200) not null, primary key (id)) ENGINE=Memory;
INSERT into human (id, name) VALUES(1, "<NAME>");
UPDATE human SET name='<NAME>';

 
DROP TABLE human USE NAMES sampleDB;

DROP DATABASE sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE person (id INT PRIMARY KEY, name VARCHAR(200), age INT);
INSERT INTO person (id, name, age) VALUES(5, '<NAME>', 27);
INSERT INTO person (id, name, age) VALUES(6, '<NAME>', 49);
SELECT max(age) FROM person;
UPDATE person SET last_name = 'Newton' WHERE age = 5;
SELECT * FROM person; SELECT max(age) FROM person; -- Let us get the most-agreed-upon answer :)
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS person;
CREATE TABLE person (id INT AUTO_INCREMENT, name VARCHAR(200), age INT);
INSERT INTO person (id, name, age) VALUES(5, "<NAME>", 27);
INSERT INTO person (id, name, age) VALUES(6, "<NAME>", 49);
INSERT INTO person (id, name, age) VALUES(7, "<NAME>", 29);
SELECT * FROM person;
-- Please write a program that inserts 2000000 rows of data into a new table named person. Your program shall: generate data on the fly, and: insert that data into the database.
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS person;
CREATE TABLE IF NOT EXISTS person (id INT, name VARCHAR(255), age INT);
INSERT IGNORE INTO person (id, "name", age) VALUES (1, "Tom", 25);
INSERT IGNORE INTO person (id, "name", age) VALUES (2, "Jerry", 35);
INSERT IGNORE INTO person (id, "name", age) VALUES (3, "Kate", 26);
SELECT * FROM person;
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS person;
CREATE TABLE person (id INT PRIMARY KEY, name VARCHAR(200), age INT);
INSERT INTO person (id, name, age) VALUES (5, '<NAME>', 27);
UPDATE person set age = age + 10 where id=3;
SELECT * FROM person;
DROP TABLE IF EXISTS person;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS person;
CREATE TABLE person (id INT PRIMARY KEY, name VARCHAR(200), age INT);
INSERT INTO person (id, name, age) VALUES(5, '<NAME>', 27);
ALTER TABLE person MODIFY (id INT);
SELECT * FROM person;
DROP TABLE IF EXISTS person;
CREATE TABLE person (id INT PRIMARY KEY, name VARCHAR(200), age INT);
INSERT INTO person (id, name, age) VALUES(5, '<NAME>', 27);
DROP TABLE IF EXISTS person;
CREATE TABLE person (id INT PRIMARY KEY, name VARCHAR(200), age INT);
INSERT INTO person (id, name, age) VALUES(5, '<NAME>', 27);
CREATE TABLE person (id INT PRIMARY KEY, name VARCHAR(200), age INT, idB INT);
INSERT INTO person (id, name, age, idB) VALUES(5, '<NAME>', 27, 12);
DROP TABLE IF EXISTS person;
CREATE TABLE person (id INT PRIMARY KEY, name VARCHAR(200), age INT, idB INT);
INSERT INTO person (id, name, age, idB) VALUES(5, '<NAME>', 27, 12);
DROP TABLE IF EXISTS person;
CREATE TABLE person (id INT PRIMARY KEY, name VARCHAR(200), age INT, idB INT);
INSERT INTO person (id, name, age, idB) VALUES(5, '<NAME>', 27, 12);
DROP TABLE IF EXISTS person;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS person;
CREATE TABLE person (id INT PRIMARY KEY, name VARCHAR(200), age INT);
INSERT INTO person (id, name, age) VALUES (5, '<NAME>', 27);
UPDATE person set age = age + 10 where id=3;
SELECT * FROM person;
DROP TABLE IF EXISTS person;
DROP DATABASE IF EXISTS sampleDB;
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE person (id INT, name VARCHAR(200), age TINYINT);
INSERT INTO person (id, name, age) VALUES (5, '<NAME>', 27);
UPDATE person set age = age + 10 where id=3;
SELECT * FROM person;
DELETE FROM person WHERE age > 30;
SELECT * FROM person;
DROP TABLE IF EXISTS person;
DROP DATABASE IF EXISTS sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS person;
CREATE TABLE person (id INT PRIMARY KEY, name VARCHAR(200), age INT);
INSERT INTO person (id, name, age) VALUES (5, '<NAME>', 27);
UPDATE person set age = age + 10 where id=3;
SELECT * FROM person;
DROP TABLE IF EXISTS person;
UPDATE person set age = age + 1 where id=4;
SELECT * FROM person;
DROP TABLE IF EXISTS person;
DROP DATABASE IF EXISTS sampleDB;


[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS user;
CREATE TABLE IF NOT EXISTS user (name VARCHAR(200), last_name VARCHAR(200), phone CHAR(10));
INSERT INTO user (name, last_name, phone) VALUES ('John','Smith', '989-098-098');
SELECT * FROM user;
DROP TABLE IF EXISTS user;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

-- This SELECT statement should result in the same result no matter if the table name or the column name is case sensitive
SELECT * from Person;
SELECT * FROM person;
-- Here we create both a table with capital letters in the name and then try to select from both, to see how MySQL does this in its indexing.
CREATE TABLE person_cap (id INT primary key, name text, age text);
CREATE TABLE Person_Cap (id INT primary key, name text, age text);
SELECT * from Person_Cap;

-- Please create a table with data which contains the word "apple" twice in the name field.
CREATE TABLE apple(id INT PRIMARY KEY, a TEXT);
INSERT INTO apple SET a = 'apple';
INSERT INTO apple SET a ='apple';
SELECT * FROM apple;
DROP TABLE IF EXISTS apple;

-- Please select * from the apple table in which age is greater than 15 and whose age is divisible by 3.
 
SELECT * from apple where age > 15 and age % 3 = 0;

-- A table contains data from which another table is formed. In our example, let's call it apple_people, also a table, containing the name of each person in the country that contains the word'mango' in the name field.
CREATE TABLE apple_people(id INT PRIMARY KEY, a TEXT, personName TEXT);
INSERT INTO apple_people SET a = 'apple', personName = '<NAME>';
INSERT INTO apple_people SET a ='strawberry', personName = '<NAME>';
INSERT INTO apple_people SET a = 'pineapple', personName = '<NAME>';
INSERT INTO apple_people SET a ='mango', personName = '<NAME>';
INSERT INTO apple_people SET a = 'cherry', personName = '<NAME>';
INSERT INTO apple_people SET a = 'blueberry', personName = '<NAME>';
INSERT INTO apple_people SET a = 'yellowfruit', personName = '<NAME>';
INSERT INTO apple_people SET a ='mandarin', personName = '<NAME>';
INSERT INTO apple_people SET a = 'grapes', personName = '<NAME>';
INSERT INTO apple_people SET a = 'orange', personName = 'Angelina';
INSERT INTO apple_people SET a ='strawberry', personName = '<NAME>';
INSERT INTO
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS person;
CREATE TABLE person (id INT PRIMARY KEY, name VARCHAR(200), age INT);
INSERT INTO person (id, name, age) VALUES (5, '<NAME>', 27);
UPDATE person set age = age + 10 where id=3;
SELECT * FROM person;
DROP TABLE IF EXISTS person;
DROP DATABASE IF EXISTS sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS user;
CREATE TABLE IF NOT EXISTS user (name VARCHAR(200), last_name VARCHAR(200), phone CHAR(10));
INSERT INTO user (name, last_name, phone) VALUES ('John','Smith', '989-098-098');
SELECT * FROM user;
DROP TABLE IF EXISTS user;
DROP DATABASE IF EXISTS sampleDB;
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS user;
CREATE TABLE IF NOT EXISTS user (name VARCHAR(200), last_name VARCHAR(200), phone CHAR(10));
INSERT INTO user(name, last_name, phone) VALUES('<NAME>', 'Squire','989-099-010');
INSERT INTO user(name, last_name, phone) VALUES('<NAME>', 'Jacks','989-099-011');
SELECT * FROM user;
DROP TABLE IF EXISTS user;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS user;
CREATE TABLE IF NOT EXISTS user (name VARCHAR(200), last_name VARCHAR(200), phone CHAR(10), address CHAR(200), email CHAR(200));
INSERT INTO user (name, last_name, phone, address, email) VALUES ('John','Smith', '989-098-098', 'Boston, MA', '<EMAIL>');
INSERT INTO user (name, last_name, phone, address, email) VALUES ('Mike','Kowalewski', '899-089-089', 'Boston, MA', '<EMAIL>');
INSERT INTO user (name, last_name, phone, address, email) VALUES ('Mike','Graham', '909-090-090', 'Boston, MA', '<EMAIL>');
SELECT * FROM user;
DROP TABLE IF EXISTS user;
DROP DATABASE IF EXISTS sampleDB;
-- Please create a query using SQL features in a complex way (like JOIN operator) and in a way which you would not use in real life. Create a table user which contains all the employees to demonstrate how it would look like in memory. Add a column of employee number in the same table. For now, you can insert employee data into that column. Insert also an employee number 1 in the same table. Then select these two rows and their details. Finally sum up the employee numbers.
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS user;
CREATE TABLE IF NOT EXISTS user (employee_number INT, name VARCHAR(200), last_name VARCHAR(200), phone CHAR(10), address CHAR(200), email CHAR(200));
INSERT INTO user (employee_number, name, last_name, phone, address, email) VALUES (1, 'John', 'Smith', '989-098-098', 'Boston, MA', '<EMAIL>');
INSERT INTO user (employee_number, name, last_name, phone, address, email) VALUES (2, 'Mike', 'Kowalewski', '899-089-089', 'Boston, MA', '<EMAIL>');
INSERT INTO user (employee_number, name, last_name, phone, address, email) VALUES
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS user;
CREATE TABLE IF NOT EXISTS user (name VARCHAR(200), last_name VARCHAR(200), phone CHAR(100));
INSERT INTO user (name, last_name, phone) VALUES ('John','Smith', '989-098-098');
SELECT * FROM user;
DROP TABLE IF EXISTS user;
DROP DATABASE IF EXISTS sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS user;
CREATE TABLE IF NOT EXISTS user (name VARCHAR(200), last_name VARCHAR(200), phone CHAR(10));
INSERT INTO user (name, last_name, phone) VALUES ('John','Smith', '989-098-098');
SELECT * FROM user;
DROP TABLE IF EXISTS user;
-- Drop the database and recreate it using MySQL Workbench;

DROP DATABASE IF EXISTS sampleDB;
USE sampleDB;
-- 5.)
-- Please create a statement to create the table and INSERT some rows to the created table.

DROP TABLE IF EXISTS user;
CREATE TABLE IF NOT EXISTS user (name VARCHAR(200),
last_name VARCHAR(200),
phone CHAR(10),
salary DECIMAL(10,2)
);
INSERT INTO user (name, last_name, phone, salary) VALUES('John','Smith', '989-098-098',5000);
INSERT INTO user (name, last_name, phone, salary) VALUES('John','Smith', '989-098-098',7500);
SELECT * FROM user;
DROP TABLE IF EXISTS user;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS user;
CREATE TABLE IF NOT EXISTS user (name VARCHAR(200), last_name VARCHAR(200), phone CHAR(10));
INSERT INTO user (name, last_name, phone) VALUES ('John','Smith', '989-098-098');
SELECT * FROM user;
DROP TABLE IF EXISTS user;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS user;
CREATE TABLE IF NOT EXISTS user (name VARCHAR(200), last_name VARCHAR(200), phone CHAR(100));
INSERT INTO user (name, last_name, phone) VALUES ('John','Smith', '989-098-098');
SELECT * FROM user;
DROP TABLE IF EXISTS user;
DROP DATABASE IF EXISTS sampleDB;
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS user;
CREATE TABLE IF NOT EXISTS user (
name VARCHAR(200),
last_name VARCHAR(200),
phone CHAR(100),
CONSTRAINT name_uc UNIQUE(name)
);
INSERT INTO user (name,last_name,phone) VALUES ('John','Smith','989-098-098');
INSERT INTO user (name,last_name,phone) VALUES ('Dane','Williams','0987-777-098');
SELECT * FROM user;
DROP TABLE IF EXISTS user;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS user;
CREATE TABLE IF NOT EXISTS user (user_id INT, firstname VARCHAR(200), lastname VARCHAR(200), PRIMARY KEY(user_id));
INSERT INTO user VALUES (1, 'John', 'Smith');
SELECT name, lastname, phone FROM user;
DROP TABLE IF EXISTS user;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
USE sampleDB;
DROP TABLE IF EXISTS user;
CREATE TABLE IF NOT EXISTS user (name VARCHAR(200), last_name VARCHAR(200), phone CHAR(100));
INSERT INTO user (name, last_name, phone) VALUES ('John','Smith', '989-098-098');
SELECT * FROM user;
DROP TABLE IF EXISTS user;
DROP DATABASE IF EXISTS sampleDB;
*/
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SELECT * FROM USERS;
DROP TABLE IF EXISTS USERS;
DROP DATABASE IF EXISTS sampleDB;
-- Please create an equivalent schema to the previous
create table user (
id int primary key auto_increment,
name varchar(225) not null,
last_name varchar(100) not null,
phone char(32));
insert into usr
set name='John',last_name='Smith',mobile='80154923';
-- Please verify the query is executed correctly.
select * from user;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

DROP TABLE IF EXISTS user;
CREATE TABLE IF NOT EXISTS user (id INT, "name" VARCHAR(200), "last-name" VARCHAR(200), phone CHAR(100));
INSERT INTO user (id, "name", "last-name", phone) VALUES (10, 'John', 'Smith', '989-098-098');

SELECT id, "name", "last-name", phone
FROM user
WHERE "name" = 'John';
DROP TABLE IF EXISTS user;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS user;
CREATE TABLE IF NOT EXISTS user (id INT, "name" VARCHAR(200), "last-name" VARCHAR(200), phone CHAR(100));
INSERT INTO user (id, "name", "last-name", phone) VALUES (10, 'John', 'Smith', '989-098-098');
SELECT id, "name", "last-name", phone
FROM user
WHERE "name" = 'John';
DROP TABLE IF EXISTS user;
DROP DATABASE IF EXISTS sampleDB;
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS user;
CREATE TABLE IF NOT EXISTS user (id INT, user_name VARCHAR(200), user_last_name VARCHAR(200), user_phone CHAR(100));
INSERT INTO user (user_name, user_last_name, user_phone) VALUES ('John', 'Smith', '989-098-098');
SELECT id, user_name, phone
FROM user WHERE id >=10;
DROP TABLE IF EXISTS user;
DROP DATABASE IF EXISTS sampleDB;
 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS user;
CREATE TABLE IF NOT EXISTS user (id INT, user_name VARCHAR(200), user_last_name VARCHAR(200), user_phone CHAR(100));
INSERT INTO user (user_name, user_last_name, user_phone) VALUES ('John', 'Smith', '989-098-098');
INSERT INTO user (user_name, user_last_name, user_phone) VALUES ('John', 'Cassil', '787-989-098');
INSERT INTO user (user_name, user_last_name, user_phone) VALUES ('John', 'Vincent', '434-589-098');
INSERT INTO user (user_name, user_last_name, user_phone) VALUES ('John', 'Pierre', '787-989-123');
INSERT INTO user (user_name, user_last_name, user_phone) VALUES ('John', 'Tony', '787-989-234');
INSERT INTO user (user_name, user_last_name, user_
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS table1;
DROP TABLE IF EXISTS tab1e;
CREATE TABLE IF NOT EXISTS table1 (id INT, field1 BIGINT);
CREATE TABLE IF NOT EXISTS tab1e (id INT, field1 BIGINT);
 
create table IF NOT EXISTS table2 (id INT, field1 BIGINT, user_id_tbl BIGINT);
 
select *
from table1 a
join table2 b
on a.id = b.id
and b.user_id_tbl =3
;
drop table table2;
drop table IF EXISTS table1;
drop table IF EXISTS tab1e;
drop database if exists sampledb;

-- To test the user is able to access the tables created earlier
-- go to http: 
-- select * from user; and go back to http: 

-- https: 
-- https: 
-- https: 
-- https: 
-- https: 
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS user;
CREATE TABLE IF NOT EXISTS user (id INT AUTO_INCREMENT PRIMARY KEY, "name" VARCHAR(200), "last-name" VARCHAR(200), phone CHAR(100));
INSERT INTO user (id, "name", "last-name", phone) VALUES (10, 'John', 'Smith', '989-098-098');
SELECT id, "name", "last-name", phone
FROM user
WHERE "name" < 'John';

-- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder <NAME>. My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS user;
CREATE TABLE IF NOT EXISTS user (id INT, "name" VARCHAR(200), "last-name" VARCHAR(200));
INSERT INTO user (id, "name", "last-name") VALUES (10, 'John', 'Smith');
INSERT INTO user (id, "name", "last-name") VALUES (20, 'Paul', 'Jones');
SELECT id, "name", "last-name"
FROM user
WHERE "name" = 'John';
DROP TABLE IF EXISTS user;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS user (id INT, "name" VARCHAR, "last-name" VARCHAR, phone CHAR);
INSERT INTO user (id, "name", "last-name", phone) VALUES (10, 'John', 'Smith', '989-098-098');
SELECT id, "name", "last-name", phone, "name" AS "name-reverse"
FROM user
WHERE "name"='John';
DROP TABLE IF EXISTS user;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS user;
CREATE TABLE IF NOT EXISTS user (id INT, "name" VARCHAR(200), "last-name" VARCHAR(200));
INSERT INTO user (id, "name", "last-name") VALUES (10, 'John', 'Smith');
INSERT INTO user (id, "name", "last-name") VALUES (20, 'Paul', 'Jones');
SELECT id, "name", "last-name"
FROM user
WHERE "name" = 'John';
DROP TABLE IF EXISTS user;
DROP DATABASE IF EXISTS sampleDB;
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS user;
CREATE TABLE IF NOT EXISTS user (id INT, "name" VARCHAR, "last-name" INT);
INSERT INTO user (id, "name", "last-name") VALUES (10, 'John', NULL);
INSERT INTO user (id, "name", "last-name") VALUES (20, 'Paul', 18);
SELECT id, "name", "last-name"
FROM user
WHERE "name" = 'John';
DROP TABLE IF EXISTS user;
DROP DATABASE IF EXISTS sampleDB;
CREATE DEFAULT CHARACTER SET utf8;
 -- Try to create a table with different database columns that are of different data types
 CREATE TABLE IF NOT EXISTS user (
id         INT NOT NULL UNIQUE,
name        TEXT    NOT NULL,
birth_day   DATE    NOT NULL) ;
-- Create a table with different database columns that are of different data types

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS user;
CREATE TABLE user
(
  id INT AUTO_INCREMENT,
  "name" VARCHAR(200),
  "lastName" VARCHAR(200)
);
INSERT INTO user(name, "lastName") VALUES ('John', 'Smith');
INSERT INTO user(name, "lastName") VALUES ('Paul', 'Jones');
SELECT * FROM user;
DROP TABLE user;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- Now create an empty table
CREATE TABLE IF NOT exists students(student_id INT, first_name VARCHAR(100), last_name VARCHAR(100), school_year INT, grade VARCHAR(20));
-- And update it with some data
INSERT INTO students(student_id, first_name, last_name, school_year, grade) VALUES(12345, 'Ronald', 'Evans', 201912, 'A+');
INSERT INTO students(student_id, first_name, last_name, school_year, grade) VALUES(99999, 'Marie', 'Garcia', 202005, 'B');
SELECT student_id, first_name, last_name, school_year, grade
FROM students
WHERE grade = 'A+';
DROP TABLE IF EXISTS students;
DROP DATABASE IF EXISTS sampleDB;
-- Please recreate the SQL that I used previously to reproduce the results using the above table
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS students;
CREATE TABLE IF NOT EXISTS students(student_id INT, first_name VARCHAR(100), last_name VARCHAR(100), school_year INT, grade VARCHAR(20));
INSERT INTO students(student_id, first_name, last_name, school_year, grade) VALUES(12345, 'Ronald', 'Evans', 201912, 'A+');
INSERT INTO students(student_id, first_name, last_name, school_year, grade) VALUES(99999, 'Marie', 'Garcia', 202005, 'B');
SELECT student_id, first_name, last_name, school_year, grade
FROM students
WHERE grade = 'A+';
DROP TABLE IF EXISTS students;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS user;
CREATE TABLE IF NOT EXISTS user (id INT, "firstName" VARCHAR(200), "lastName" VARCHAR(200));
INSERT INTO user (id, "firstName", "lastName") VALUES(10, 'John', 'Smith');
INSERT INTO user (id, "firstName", "lastName") VALUES(20, 'Paul', 'Jones');
SELECT id, "firstName", "lastName"
FROM user
WHERE "firstName" = 'John';
DROP TABLE IF EXISTS user; 
DROP DATABASE IF EXISTS sampleDB;
-- The following statement uses the FROM clause. However, the same logic applies to the FROM and WHERE clause.
SELECT *
FROM (
  SELECT id, "name", "last-name"
  FROM user) t
WHERE t. "firstName" = 'John';
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS user;
CREATE TABLE IF NOT EXISTS user (id INT PRIMARY KEY, "name" VARCHAR(200), "last-name" VARCHAR(200));
INSERT INTO user (id, "name", "last-name") VALUES (10, 'John', 'Smith');
INSERT INTO user (id, "name", "last-name") VALUES (20, 'Paul', 'Jones');
SELECT id, "name", "last-name"
FROM user
WHERE "last-name" = 'Jones';
DROP TABLE IF EXISTS user;
DROP DATABASE IF EXISTS sampleDB;
-- Please give the database dump and compare it to a previously created program
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS user;
CREATE TABLE IF NOT EXISTS user (id INT PRIMARY KEY, "name" VARCHAR(200), "last-name" VARCHAR(200));
INSERT INTO user (id, "name", "last-name") VALUES (10, 'John', 'Smith');
INSERT INTO user (id, "name", "last-name") VALUES (20, 'Paul', 'Jones');
SELECT * FROM user WHERE id = 10;
SELECT * FROM user WHERE "last-name" = 'Jones';
DROP TABLE IF EXISTS user;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS user;
CREATE TABLE IF NOT EXISTS user (id INT PRIMARY KEY, "name" VARCHAR(200), "last-name" VARCHAR(200));
INSERT INTO user (id, "name", "last-name") VALUES (10, 'John', 'Smith');
INSERT INTO user (id, "name", "last-name") VALUES (20, 'Paul', 'Jones');
SELECT id, "name", "last-name"
FROM user
WHERE "last-name" = 'Jones';
DROP TABLE IF EXISTS user;
DROP DATABASE IF EXISTS sampleDB;
-- Please give the database dump and compare it to a previously created program
DROP TABLE IF EXISTS user;
CREATE TABLE IF NOT EXISTS user (id INT PRIMARY KEY, "name" VARCHAR(200), "last-name" VARCHAR(200));
INSERT INTO user (id, "name", "last-name") VALUES (10, 'John', 'Smith');
INSERT INTO user (id, "name", "last-name") VALUES (20, 'Paul', 'Jones');
SELECT * FROM user WHERE id = 10;
SELECT * FROM user WHERE "last-name" = 'Jones';
DROP TABLE IF EXISTS user;
DROP DATABASE IF EXISTS sampleDB;
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS user_address;
CREATE TABLE IF NOT EXISTS user_address (id INT PRIMARY KEY AUTO_INCREMENT, "address" text, "city" text);
INSERT INTO user_address(id, "address", city) VALUES (1, '123 Street', 'New York');
CREATE TABLE IF NOT EXISTS user_company (id INT PRIMARY KEY AUTO_INCREMENT, "company-name" text);
INSERT INTO user_company(id, "company-name") VALUES (2, 'Apple Inc.');
SELECT * FROM user_address
WHERE city = 'New York';
SELECT * FROM user_company
ORDER BY id DESC
LIMIT 1;
DROP TABLE IF EXISTS user_address;
DROP TABLE IF EXISTS user_company;
DROP TABLE IF EXISTS user_contact_last_name;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS user;
CREATE TABLE IF NOT EXISTS user (id INT PRIMARY KEY, "name" VARCHAR(200), balance INT);
INSERT INTO user (id, "name", balance) VALUES (10, 'John', 1000);
INSERT INTO user (id, "name", balance) VALUES (20, 'Paul', 1000);
SELECT id, "name", balance
FROM user WHERE balance = 1000;
UPDATE user SET balance = balance + 50 WHERE id = 20;
UPDATE user SET balance = balance - 100 WHERE id = 10;
UPDATE user SET balance = balance * 2 WHERE id > 10;
UPDATE user SET balance = balance / 5 WHERE balance < 200;
DROP TABLE IF EXISTS user;
DROP DATABASE IF EXISTS sampleDB;
-- Please give the database dump and compare it to a previously created program

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS address;
CREATE TABLE IF NOT EXISTS address (id INT PRIMARY KEY, "address" VARCHAR(200));
INSERT INTO address (id, "address") VALUES (10, 'Address 10');
INSERT INTO address (id, "address") VALUES (20, 'Address 20');
SELECT id, "address"
FROM address
WHERE "address" = 'Address 10';
DROP TABLE IF EXISTS address;
DROP DATABASE IF EXISTS sampleDB;
-- Please give the database dump and compare it to a previously created program
DROP TABLE IF EXISTS address;
CREATE TABLE IF NOT EXISTS address (id INT PRIMARY KEY, "address" VARCHAR(200));
INSERT INTO address (id, "address") VALUES (10, 'Address 10');
INSERT INTO address (id, "address") VALUES (20, 'Address 20');
SELECT * FROM address WHERE id = 10;
SELECT * FROM address WHERE "address" = 'Address 20';
DROP TABLE IF EXISTS address;
DROP DATABASE IF EXISTS sampleDB;
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS user;
CREATE TABLE IF NOT EXISTS user (id INT PRIMARY KEY, "name" VARCHAR(200), "last-name" VARCHAR(200));
INSERT INTO user (id, "name", "last-name") VALUES (10, 'John', 'Smith');
INSERT INTO user (id, "name", "last-name") VALUES (20, 'Paul', 'Jones');
SELECT id, "name", "last-name" FROM user WHERE name = "John";
DROP TABLE IF EXISTS user;
DROP DATABASE IF EXISTS sampleDB;
 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS user1;
DROP TABLE IF EXISTS user2;
DROP TABLE IF EXISTS user3;
DROP TABLE IF EXISTS user4;
DROP TABLE IF EXISTS user5;
CREATE TABLE IF NOT EXISTS user1 (id INT PRIMARY KEY, "first-name" VARCHAR(200), "last-name" VARCHAR(200), "date" DATE);
CREATE TABLE IF NOT EXISTS user2 (id INT PRIMARY KEY, "first-name" VARCHAR(200), "last-name" VARCHAR(
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS user;
CREATE TABLE IF NOT EXISTS user (id INT PRIMARY KEY, "name" VARCHAR(200), "last-name" VARCHAR(200));
INSERT INTO user (id, "name", "last-name") VALUES (10, 'John', 'Smith');
INSERT INTO user (id, "name", "last-name") VALUES (20, 'Paul', 'Jones');
SELECT id, "name", "last-name" FROM user;
DROP TABLE IF EXISTS user;
DROP DATABASE IF EXISTS sampleDB;
USE root;
-- Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS user;
CREATE TABLE IF NOT EXISTS user (id INT PRIMARY KEY, "name" VARCHAR(200), "last-name" VARCHAR(200));
INSERT INTO user (id, "name", "last-name") VALUES (10, 'John', 'Smith');

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS user;
CREATE TABLE IF NOT EXISTS user (id INT PRIMARY KEY, "name" VARCHAR(200), balance INT);
INSERT INTO user (id, "name", balance) VALUES (10, 'John', 1000);
INSERT INTO user (id, "name", balance) VALUES (20, 'Paul', 1000);
SELECT id, "name", balance
FROM user WHERE balance = 1000;
UPDATE user SET balance = balance + 50 WHERE id = 20;
UPDATE user SET balance = balance - 100 WHERE id = 10;
UPDATE user SET balance = balance * 2 WHERE id > 10;
UPDATE user SET balance = balance / 5 WHERE balance < 200;
DROP TABLE IF EXISTS user;
DROP DATABASE IF EXISTS sampleDB;
-- Please give the database dump and compare it to a previously created program
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS user_db_personality;
CREATE TABLE user_db_personality (id INT PRIMARY KEY, level INT, "name" VARCHAR(200), type INT, UNIQUE(id));
INSERT INTO user_db_personality (id, level, "name", type) VALUES (10, 50,'<NAME>', 'Mind');
INSERT INTO user_db_personality (id, level, "name", type) VALUES (20, 45,'<NAME>', 'Conscientiousness');
INSERT INTO user_db_personality (id, level, "name", type) VALUES (30, 40,'<NAME>', 'Athleticism');
INSERT INTO user_db_personality (id, level, "name", type) VALUES (40, 30,'<NAME>', 'Competitiveism');
INSERT INTO user_db_personality (id, level, "name", type) VALUES (50, 20,'<NAME>', 'Hardworking');
INSERT INTO user_db_personality (id, level, "name", type) VALUES (60, 1,'<NAME>', 'Intelligence');
INSERT INTO user_db_personality (id, level, "name", type) VALUES (70, 6000, '<NAME>', 'Sophistication');
INSERT INTO user_db_personality (id, level, "name", type) VALUES (80, 5,'<NAME>', 'Inquisitive');
SELECT id, "name", type
FROM user_db_personality WHERE id in (20,10);
DROP TABLE IF EXISTS user_db_personality;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- We assume here that the same program can be created by the previous generation version
DROP TABLE IF EXISTS user;
CREATE TABLE IF NOT EXISTS user (id INT PRIMARY KEY, "name" VARCHAR(200), balance INT);
INSERT INTO user (id, "name", balance) VALUES (10, 'John', 1000);
INSERT INTO user (id, "name", balance) VALUES (20, 'Paul', 1000);
SELECT id, "name", balance
FROM user WHRE (balance IN (50,100));
UPDATE user SET balance = balance + 50 WHERE id = 20;
UPDATE user SET balance = balance - 100 WHERE id = 10;
UPDATE user SET balance = balance * 2 WHERE id > 10;
UPDATE user SET balance = balance IN (5) WHERE balance IN (20,100,300)
DROP TABLE IF EXISTS user;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS user;
CREATE TABLE IF NOT EXISTS user (id INT PRIMARY KEY, "name" VARCHAR(200), balance INT);
INSERT INTO user (id, "name", balance) VALUES (10, 'John', 1000);
INSERT INTO user (id, "name", balance) VALUES (20, 'Paul', 1000);
SELECT id, "name", balance
FROM user WHERE balance = 1000;
UPDATE user SET balance = balance + 50 WHERE id = 20;
UPDATE user SET balance = balance - 100 WHERE id = 10;
UPDATE user SET balance = balance * 2 WHERE id > 10;
UPDATE user SET balance = balance / 5 WHERE balance < 200;
DROP TABLE IF EXISTS user;
DROP DATABASE IF EXISTS sampleDB;

 
mysqldump  -u <user_name> <pass>
<table_name_1>
<table_name_2>
...
<table_name_n>

<?php
 
header( "content-type: text/HTML; charset=utf-8" );

 
$command = 'create database a2_lab1';
$return = shell_exec($command."\n");
echo 'RETURN: '.$return."\n";
$exitCode = 0;

 
$command = 'use a2_lab1; create table users (id INT PRIMARY KEY, name VARCHAR(200));';
$return = shell_exec($command."\n");
echo 'RETURN: '.$return."\n";
$exitCode = $return;
$return = "";


[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS user;
CREATE TABLE IF NOT EXISTS user (id INT PRIMARY KEY, "name" VARCHAR(200), balance INT);
INSERT INTO user (id, "name", balance) VALUES (10, 'John', 1000);
INSERT INTO user (id, "name", balance) VALUES (20, 'Paul', 1000);
SELECT id, "name", balance
FROM user WHERE balance = 1000;
UPDATE user SET balance = balance + 50 WHERE id = 20;
UPDATE user SET balance = balance - 100 WHERE id = 10;
UPDATE user SET balance = balance * 2 WHERE id > 10;
UPDATE user SET balance = balance / 5 WHERE balance < 200;
DROP TABLE IF EXISTS user;
DROP DATABASE IF EXISTS sampleDB;
-- Please give the database dump and compare it to a previously created program

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS user;
CREATE TABLE IF NOT EXISTS user (id INT PRIMARY KEY, "name" VARCHAR(200), balance INT);
INSERT INTO `user` (`id`, `"name"`, `balance`) VALUES (10, 'John', 1000);
INSERT INTO `user` (`id`, `"name"`, `balance`) VALUES (20, 'Paul', 1000);
SELECT `id`, `"name"`, `balance`
FROM `user` WHERE `balance` = 1000;
UPDATE `user` SET `balance` = `balance` + 50 WHERE `id` = 20;
UPDATE `user` SET `balance` = `balance` - 100 WHERE `id` = 10;
UPDATE `user` SET `balance` = `balance` * 2 WHERE `id` > 10;
UPDATE `user` SET `balance` = `balance` / 5 WHERE `balance` < 200;
DROP TABLE `user`;
DROP DATABASE `sampleDB`;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS user_db_personality;
CREATE TABLE user_db_personality (id INT PRIMARY KEY, level INT, "name" VARCHAR(200), type INT, UNIQUE(id));
INSERT INTO user_db_personality (id, level, "name", type) VALUES (10, 50,'<NAME>', 'Mind');
INSERT INTO user_db_personality (id, level, "name", type) VALUES (20, 45,'<NAME>', 'Conscientiousness');
INSERT INTO user_db_personality (id, level, "name", type) VALUES (30, 40,'<NAME>', 'Athleticism');
INSERT INTO user_db_personality (id, level, "name", type) VALUES (40, 30,'<NAME>', 'Competitiveism');
INSERT INTO user_db_personality (id, level, "name", type) VALUES (50, 20,'<NAME>', 'Hardworking');
INSERT INTO user_db_personality (id, level, "name", type) VALUES (60, 1,'<NAME>', 'Intelligence');
INSERT INTO user_db_personality (id, level, "name", type) VALUES (70, 6000, '<NAME>', 'Sophistication');
INSERT INTO user_db_personality (id, level, "name", type) VALUES (80, 5,'<NAME>', 'Inquisitive');
SELECT id, "name", type
FROM user_db_personality WHERE id in (20,10);
DROP TABLE IF EXISTS user_db_personality;
DROP DATABASE IF EXISTS sampleDB;
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE user_db_personality(id INT NOT NULL AUTO_INCREMENT, level INT NOT NULL, "name" VARCHAR(200) NOT NULL, type INT NOT NULL, PRIMARY KEY (id))ENGINE=InnoDB; INSERT INTO user_db_personality VALUES(10,50,'<NAME>',1);INSERT INTO user_db_personality VALUES(20,45,'<NAME>',2);INSERT INTO user_db_personality VALUES(30,40,'<NAME>',3);INSERT INTO user_db_personality VALUES(40,30,'<NAME>',4);INSERT INTO user_db_personality VALUES(50,20,'<NAME>',5);INSERT INTO user_db_personality VALUES(60,1,'<NAME>',6);INSERT INTO user_db_personality VALUES(70,6000, '<NAME>',7);INSERT INTO user_db_personality VALUES(80,5,'<NAME>',8);SELECT id,'name',type
FROM user_
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS user_db_personality;
CREATE TABLE user_db_personality (id INT PRIMARY KEY, level INT, "name" VARCHAR(200), type INT, UNIQUE(id));
INSERT INTO user_db_personality (id, level, "name", type) VALUES (20, 45,'<NAME>', 'Inquisitive);
SELECT id, "name", type
FROM user_db_personality WHERE id in (3,10);
ALTER TABLE user_db_personality MODIFY(type TINYINT);
ALTER TABLE user_db_personality MODIFY("name" DATETIME);
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- Here are some tables that illustrate the data types used in MySQL:
-- Here are some tables that illustrate the data types used in MySQL:
CREATE TABLE IF NOT EXISTS demo_personality (id INT, year INT);
CREATE TABLE IF NOT EXISTS demo_personality_test (id INT, year INT);
INSERT INTO demo_personality (id, year) VALUES (10, 2007);
INSERT INTO demo_personality_test (id, year) VALUES (10, 2007);
-- Here are some tables that illustrate the data types used in MySQL:

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
UPDATE user_db_personality SET level = 25 WHERE level > 30 AND (id = 40 OR id = 20) AND type = 14;
CREATE TABLE IF NOT EXISTS user_db_personality (id INT PRIMARY KEY, level INT, "name" VARCHAR(200), type INT, UNIQUE(id));
INSERT INTO user_db_personality (id, level, "name", type) VALUES (10, 50,'<NAME>', 'Mind');
INSERT INTO user_db_personality (id, level, "name", type) VALUES (20, 45,'<NAME>', 'Conscientiousness');
INSERT INTO user_db_personality (id, level, "name", type) VALUES (30, 40,'<NAME>', 'Athleticism');
INSERT INTO user_db_personality (id, level, "name", type) VALUES (40, 30,'<NAME>', 'Competitiveism');

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS user_db_personality;
CREATE TABLE user_db_personality (id INT PRIMARY KEY, level INT, "name"VARCHAR(200), type INT, UNIQUE(id));
INSERT INTO user_db_personality (id, level, "name", type) VALUES (10, 50,'<NAME>', 'Mind');
INSERT INTO user_db_personality (id, level, "name", type) VALUES (20, 45,'<NAME>', 'Conscientiousness');
INSERT INTO user_db_personality (id, level, "name", type) VALUES (30, 40,'<NAME>', 'Athleticism');
INSERT INTO user_db_personality (id, level, "name", type) VALUES (40, 30,'<NAME>', 'Competitiveism');
INSERT INTO user_db_personality (id, level, "name", type) VALUES (50, 20,'<NAME>', 'Hard
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
UPDATE user_db_personality SET level = 25 WHERE level > 30 AND (id = 40 OR id = 20) AND type = 14;
CREATE TABLE IF NOT EXISTS user_db_personality (id INT PRIMARY KEY, level INT, "name" VARCHAR(200), type INT, UNIQUE(id));
INSERT INTO user_db_personality (id, level, "name", type) VALUES (10, 50,'<NAME>', 'Mind');
INSERT INTO user_db_personality (id, level, "name", type) VALUES (20, 45,'<NAME>', 'Conscientiousness');
INSERT INTO user_db_personality (id, level, "name", type) VALUES (30, 40,'<NAME>', 'Athleticism');
INSERT INTO user_db_personality (id, level, "name", type) VALUES (40, 30,'<NAME>', 'Competitiveism');
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
UPDATE user_db_personality SET level = 25 WHERE level > 30 AND (id = 40 OR id = 20) AND type = 14;
CREATE TABLE IF NOT EXISTS user_db_personality (id INT PRIMARY KEY, level INT, "name" VARCHAR(200), type INT, UNIQUE(id));
INSERT INTO user_db_personality (id, level, "name", type) VALUES (10, 50,'<NAME>', 'Mind');
INSERT INTO user_db_personality (id, level, "name", type) VALUES (20, 45,'<NAME>', 'Conscientiousness');
INSERT INTO user_db_personality (id, level, "name", type) VALUES (30, 40,'<NAME>', 'Athleticism');
INSERT INTO user_db_personality (id, level, "name", type) VALUES (40, 30,'<NAME>', 'Competitiveism');

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
 
CREATE FUNCTION dbfunc (arg_array ARRAY(INT)) RETURNS ARRAY(INT) AS $$
BEGIN

RETURN arg_array * 10;

END; $$

 
UPDATE user_db_personality SET "name" = '<NAME>', level = 30, type = 3 WHERE id = 20;
SELECT * FROM user_db_personality;
 
DROP FUNCTION dbfunc;
SELECT * FROM user_db_personality;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
update user_db_personality set level = 20;
DELIMITER ;

DROP DATABASE IF EXISTS `sampleDB`;


[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
UPDATE user_db_personality SET level = 25 WHERE level > 30 AND (id = 40 OR id = 20) AND type = 14;
CREATE TABLE IF NOT EXISTS user_db_personality (id INT PRIMARY KEY, level CHAR(2), "name" VARCHAR(200), type INT, UNIQUE(id));
INSERT INTO user_db_personality (id, level, "name", type) VALUES (10, 'M', '<NAME>', 'Mind');
INSERT INTO user_db_personality (id, level, "name", type) VALUES (20, 'N', '<NAME>', 'Conscientiousness');
INSERT INTO user_db_personality (id, level, "name", type) VALUES (30, 'M', '<NAME>', 'Athleticism');
INSERT INTO user_db_personality (id, level, "name", type) VALUES (40, 'G', '<NAME>', 'Competitiveism');
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
UPDATE user_db_personality SET level = 30 WHERE type = 2 OR type = 3;
CREATE TABLE IF NOT EXISTS user_db_personality (id INT PRIMARY KEY, level INT, "name" VARCHAR(200), type INT, UNIQUE(id));
INSERT INTO user_db_personality (id, level, "name", type) VALUES (61, 50,'<NAME>', 'Mind');
INSERT INTO user_db_personality (id, level, "name", type) VALUES (21, 30,'<NAME>', 'Competitiveism');
INSERT INTO user_db_personality (id, level, "name", type) VALUES (70, 35,'<NAME>', 'Athleticism');
UPDATE user_db_personality SET level = 35 WHERE level > 30 AND (type = 11 OR type = 12) AND id < 70;
UPDATE user_db_personality SET level = 25 WHERE type = 3 AND id = 10;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
update user_db_personality set level = 20;
DELIMITER ;
DROP DATABASE IF EXISTS `sampleDB`;
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS user_db_personalities (
name VARCHAR(32), age INT UNSIGNED, phone VARCHAR(21), email VARCHAR(32), PRIMARY KEY (name)
);
CREATE TABLE IF NOT EXISTS user_db_personality_history (
name VARCHAR(32), old_level INT UNSIGNED, new_level INT UNSIGNED, PRIMARY KEY (name)
) engine = innodb; 
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
update user_db_personality set level = 20;
DELIMITER ;
DROP DATABASE IF EXISTS `sampleDB`;


DROP DATABASE IF EXISTS sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
update user_db_personality set level = 1;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
update user_db_personality set level = 20;
DELIMITER ;
DROP DATABASE IF EXISTS `sampleDB`;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
update user_db_personality set level = 20;
DELIMITER ;
DROP DATABASE IF EXISTS `sampleDB`;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS user_db_personalities (
name VARCHAR(32), age INT UNSIGNED, phone VARCHAR(21), email VARCHAR(32), PRIMARY KEY (name)
);
CREATE TABLE IF NOT EXISTS user_db_personality_history (
name VARCHAR(32), old_level INT UNSIGNED, new_level INT UNSIGNED, PRIMARY KEY (name)
) engine = innodb;
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS user_db_personalities (
name VARCHAR(32), age INT UNSIGNED, phone VARCHAR(21), email VARCHAR(32), PRIMARY KEY (name)
);
CREATE TABLE IF NOT EXISTS user_db_personality_history (
name VARCHAR(32), old_level INT UNSIGNED, new_level INT UNSIGNED, PRIMARY KEY (name)
) engine = innopad;
# Insert query with a long string
insert into user_db_personalities (name, age, phone, email) values ('<NAME>', 25, '5555555555', '<EMAIL>');
# Insert query with large amount of chars
insert into user_db_personalities (name, age, phone, email) values ('<NAME>', 25, '5555555555', '<EMAIL>' || chr(13) || ':' || chr(13) || chr(13) || 'and I love this string!');
# Delete query
delete from user_db_personality_history where name = '<NAME>';
# Update query
update user_db_personality_history set new_level=35 where old_level=35 and name = '<NAME>';
# Show query result
select * from user_db_personalities;
# Show query status

UPDATE `user_db_personalities` SET `name` = "<NAME>" WHERE `user_db_personalities`.`name` = "<NAME>";
UPDATE `user_db_personalities` SET `name` = "<NAME>" WHERE `user_db_personality_history`.`name` = "<NAME>";
# Drop query
DROP TABLE IF EXISTS sampleDB.user_db_personality_history;
DROP TABLE IF EXISTS sampleDB.user_db_personalities;

create table t1 as select * from user_db_personalities as p1 order by age desc limit 1;
SHOW INDEX FROM `t1` WHERE `Key_name` = 'idx_personality_name';
SELECT GROUP_CONCAT(name SEPARATOR ','), COUNT(*) FROM `user_db_personality_
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS user_db_personality_history (
name VARCHAR(32), old_level INT UNSIGNED, new_level INT UNSIGNED,
PRIMARY KEY (name, new_level)
);
CREATE TABLE IF NOT EXISTS user_db_personality (
name VARCHAR(32), phone VARCHAR(21), email VARCHAR(32), PRIMARY KEY (name)
);
CREATE TABLE IF NOT EXISTS user_db_personities (
name VARCHAR(32), age INT UNSIGNED, phone VARCHAR(21), email VARCHAR(32), PRIMARY KEY (name)
);
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS user_db_personalities;
DROP TABLE IF EXISTS user_db_personality_history;
DROP DATABASE IF EXISTS sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS user_db_skills (
label VARCHAR(32), PRIMARY KEY (label)
);
CREATE TABLE IF NOT EXISTS user_db_skill_history (
label VARCHAR(32), change_amount DECIMAL(5, 2), PRIMARY KEY (label)
) engine = innodb;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SHOW DATABASES; USE sampleDB;
SHOW TABLES
DROP DATABASE IF EXISTS `sampleDB`

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS user_db_skills (
label VARCHAR(32), PRIMARY KEY (label)
);
CREATE TABLE IF NOT EXISTS user_db_skill_history (
label VARCHAR(32), change_amount DECIMAL(5, 2), PRIMARY KEY (label)
) engine = innodb;
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
ALTER TABLE user_db_skills MODIFY label varchar(16);  
-- Please create a more complex query and modify it
 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE user_db_skills;
SET GLOBAL innodb_lock_wait_timeout = 5;  
INSERT INTO user_db_skills VALUES ('Developer'), ('Software Engineer'), ('Data Analyst');
ALTER TABLE user_db_skills ADD CONSTRAINT CHK_label CHECK LABEL(label), ADD CONSTRAINT CHK_label2 SIZE 3;
 
DELETE FROM user_db_skills WHERE label = ‘Developer’;  
ALTER TABLE user_db_skills ADD FULLTEXT INDEX (`label`), ADD FULLTEXT INDEX (`label`  ), ADD FULLTEXT INDEX (`label`, `label2`);  
-- Add a new index to SKILLS
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE if NOT EXISTS skills_db_skills (
label VARCHAR(20), PRIMARY KEY (label)
);
CREATE TABLE if NOT EXISTS skills_db_skill_history (
label VARCHAR(20), change_amount DECIMAL(5, 2), PRIMARY KEY (label)
) engine = innodb;
 
INSERT INTO skills_db_skills VALUES ('Developer'), ('Software Engineer'), ('Data Analyst'), ('Engineer'), ('Lawyer');
 
 
 
/* INSERT INTO skill_change_log SELECT *, 'added'
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users (
user_name VARCHAR(32), user_id INTEGER, PRIMARY KEY (user_name, user_id)
);

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS user_db_skills (
label VARCHAR(32), PRIMARY KEY (label)
);
CREATE TABLE IF NOT EXISTS user_db_skills_2 (
label VARCHAR(32), PRIMARY KEY (label)
);
ALTER TABLE user_db_skills_2 ADD FOREIGN KEY (label) REFERENCES user_db_skills(label);
-- You will need to modify this to work with multiple tables
DO BEGIN
DECLARE v_temp table
(
t_id    INTEGER AUTO_INCREMENT NOT NULL
, skill_id    VARCHAR(32)
, skill VARCHAR(32)
, PRIMARY KEY(t_id)
, KEY skill_id(skill_id)
)ENGINE = InnoDB DEFAULT CHARSET = binary;
INSERT INTO v_temp
SELECT skill_id, skill, label
FROM `user_db_skills`;
INSERT INTO `user_db_skills_2` SELECT skill_id, skill, label
FROM `user_db_skills`;
INSERT INTO user_db_skills SELECT * FROM v_temp;
DROP TABLE IF EXISTS v_temp;
END
 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS user_db_skills (
label VARCHAR(32), PRIMARY KEY (label)
);
CREATE TABLE IF NOT EXISTS user_db_skills_2 (
label VARCHAR(32), PRIMARY KEY (label)
);
ALTER TABLE user_db_skills_2 ADD FOREIGN KEY (label) REFERENCES user_db_skills(label);
DO BEGIN
DECLARE v_temp table
(
t_id    INTEGER AUTO_INCREMENT NOT NULL
, skill_id    VARCHAR(32)
, skill VARCHAR(32)
, PRIMARY KEY(t_id)
, KEY skill_id(skill_id)
)ENGINE = InnoDB DEFAULT CHARSET = binary;
INSERT INTO v_temp
SELECT skill_id, skill, label
FROM `user_db_skills`;
INSERT INTO `user_db_skills_2` SELECT skill_id, skill, label
FROM `
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS user_db_skills (
label VARCHAR(32), PRIMARY KEY (label)
) ENGINE=INNODB;
SELECT * FROM user_db_skills;
DROP TABLE IF EXISTS user_db_skills;
-- You can also use an external engine, which can handle a large number of small tables such as the following:
-- https: 
CREATE DATABASE IF NOT EXISTS samplesDB; USE samplesDB;
CREATE TABLE IF NOT EXISTS user_db_skills (
skill_id INT, PRIMARY KEY (skill_id)
);
SELECT * FROM user_db_skills;
DROP TABLE IF EXISTS user_db_skills;
DROP TABLE IF EXISTS user_db_skill_history;
DROP DATABASE IF EXISTS sampleDB;
DROP DATABASE IF EXISTS samplesDB;
DROP DATABASE IF EXISTS user_db_skills;
DROP DATABASE IF EXISTS user_db_skill_history;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO user_db_skills (label) values ('PHP');
CREATE TABLE IF NOT EXISTS user_db_skills (
label VARCHAR(32), PRIMARY KEY (label)
);

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO user_db_skills (label) values ('PHP');
CREATE TABLE IF NOT EXISTS user_db_skills (
label VARCHAR(32), PRIMARY KEY (label)
);
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO user_db_skills (label) values ('SQL');
CREATE TABLE IF NOT EXISTS user_db_skills (
label VARCHAR(32), PRIMARY KEY (label)
);

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO user_db_skills (label) values ('PHP');
CREATE TABLE IF NOT EXISTS user_db_skills
    (
    label VARCHAR(32), 
    PRIMARY KEY (label)
);

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO user_db_skills (label) values ('PHP');
CREATE TABLE IF NOT EXISTS user_db_skills (
label VARCHAR(32), PRIMARY KEY (label)
);

```
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO user_db_skills (label) values ('PHP');
-- Drop all tables and databases.
DROP DATABASE user_db_skills;
DROP DATABASE sampleDB;<commit_msg>add a short and unusual query<commit_after>-- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO user_db_skills (label) values ('Python');
CREATE TABLE IF NOT EXISTS user_db_skills (
label VARCHAR(32), PRIMARY KEY (label)
);

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO user_db_skills (label) values ('Python');
CREATE TABLE IF NOT EXISTS user_db_skills (
label VARCHAR(32), PRIMARY KEY (label)
);
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

DROP TABLE user_db_skills;
 
SELECT COUNT(*) FROM user_db_skills;

DROP table user_db_skills;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- In a very short query, modify the data in the user_db_skills table to use SQL features within a complex way.

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
UPDATE user_db_skills
SET label = 'Perl'
WHERE label = 'PHP';
SELECT * FROM user_db_skills;
-- There are lots of operators in SQL to filter/modify rows. You can also do JOIN queries and perform an INNER JOIN to get all the row related entries in a data set, for example:
SELECT user_name as 'Username', company as 'Company'
FROM database_user
INNER JOIN database_user_skills AS dus ON
    user_id = dus.user_id;
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS user_name (id INT, name VARCHAR(250), PRIMARY KEY (id));
CREATE TABLE IF NOT EXISTS database_user (id INT PRIMARY KEY, password VARCHAR(45));
CREATE TABLE IF NOT EXISTS database_user_skills (user_id INT NOT NULL, skill_id INT NOT NULL, PRIMARY KEY (user_id,skill_id));
INSERT INTO user_name (id, name) values (1, 'Peter');
INSERT INTO database_user (id, password) values (1, '<PASSWORD>');
INSERT INTO database_user_skills (user_id, skill_id) values  (1, 3);
	
 
	BEGIN;
	DROP TABLE IF EXISTS `user_name`;
	CREATE TABLE `user_name`
	(
		`id` INT UNSIGNED AUTO_INCREMENT,
		`name` VARCHAR(255) NOT NULL,
		PRIMARY KEY (`id`)
	);
	DROP TABLE IF EXISTS `user`;
	CREATE TABLE `user`
	(
	   `id` INT UNSIGNED Auto_INCREMENT,
	   `name` VARCHAR(100) not null,
	   `company` VARCHAR(255) not null,
	   `email` VARCHAR(30),
	   UNIQUE (`email`)
	);
	DROP TABLE IF EXISTS `skills`;
	CREATE TABLE `skills`
	(
	   `id` INT UNSIGNED Auto_INCREMENT,
	   `name` VARCHAR(255) UNIQUE NOT NULL,
	   `description` TEXT,
	   PRIMARY KEY (`id`)
	);
	DROP TABLE IF EXISTS `database_user`;
	CREATE TABLE `database_user`
	(
	   `id` INT UNSIGNED Auto_INCREMENT,
		`password`
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
UPDATE user_db_skills SET label = 'JavaScript' WHERE label='Python';
USE sampleDB;
DROP TABLE user_db_skills;
DROP DATABASE IF EXISTS sampleDB

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- This should not alter the previous data.

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- This should not alter the previous data.
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS mytable (
	id int,
	name varchar(255),
	age smallint(5)
);

-- Add some records.
INSERT INTO mytable (id, name, age) VALUES (1,'Bob',15);
INSERT INTO mytable (id, name, age) VALUES (2,'Sara',18);
INSERT INTO mytable (id, name, age) VALUES (3,'Patton',18);
INSERT INTO mytable (id, name, age) VALUES (4,'Nakamoto',18);
INSERT INTO mytable (id, name, age) VALUES (10,'Amy',37);
INSERT INTO mytable (id, name, age) VALUES (20,'Jess',28);
INSERT INTO mytable (id, name, age) VALUES (100,'Paul',54);
INSERT INTO mytable (id, name, age) VALUES (101,'Michael',31);
SET @firstId := 50;
SET @counter := (@counter + 1) % 100;
INSERT IGNORE INTO mytable (id, name, age) VALUES (@firstId,@firstId,'@counter');
SET @firstId := (@firstId + 1) % 100;
SET @counter := (@counter + 1) % 100;
INSERT IGNORE INTO mytable (id, name, age) VALUES (@firstId,@firstId,'@counter');
SET @firstId := (@firstId + 1) % 100;
SET @counter := (@counter + 1) % 100;
INSERT IGNORE INTO mytable (id, name, age) VALUES (@firstId,@firstId,'@counter');

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP DATABASE sampleDB;
--
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS sampleTable;
-- CREATE NEW TABLE
SELECT 'ALTER TABLE' AS query;

-- You can use the system's database management command to modify your system tables.
mysql> drop table sampleTable;
mysql> drop table IF EXISTS sampleTable;
select * from database.information_schema.columns where table_name ='sampleTable';
ALTER TABLE `sampleTable` 
  CHANGE `userId` `userId` INT NULL,
  CHANGE `userLastName` `userLastName` VARCHAR(15) NULL;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

DROP TABLE IF EXISTS employees;

 
CREATE TABLE employees(employee_id INT, employee_name VARCHAR(255),
    country_code VARCHAR(20), country_name VARCHAR(255));

 
DELIMITER $$
CREATE PROCEDURE insert_employee(OUT employee_id INT, 
    OUT employee_name VARCHAR(255), OUT country_code VARCHAR(20), 
    OUT country_name VARCHAR(255))
BEGIN
SELECT employee_id, employee_name, country_code, country_name
    INTO employee_id, employee_name, country_code, country_name
    WHERE employee_id = 1;
END $$
DELIMITER ;

 
CALL insert_employee(employee_id, employee_name, country_code, country_name);
-- This should also run fine because the stored procedures have been executed successfully.

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
UPDATE users SET firstname = 'Roman', lastname = 'Ivanov' WHERE user_name = 'admin';
UPDATE users SET firstname = 'Rome', lastname = 'Roman' WHERE user_name = 'roman';
-- Please modify the previous genereated program to
-- Create a new table and perform operations.
CREATE TABLE IF NOT EXISTS users(user_name varchar(45) PRIMARY KEY, firstname varchar(60), lastname varchar(60), username varchar(45), password varchar(45));
-- This should not alter the previous data.
-- Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created.
DROP DATABASE IF EXISTS sampleDB;
create database if not exists sampledb;use sampledb;
# MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity. MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP DATABASE sampleDB;
--
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP DATABASE sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP DATABASE sampleDB;
--
-- Please replace: sampleDB with whatever you will need for the assignment.
--
CREATE DATABASE IF NOT EXISTS alex_db;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
--
-- Please create a different database and make this one the current database. Use sampleDB as the table name prefix.
CREATE DATABASE IF NOT EXISTS sampleDB AS DEFAULT CHARACTER SET utf8;
--
-- The `DATABASE` name must be case insensitive and consist of letters or numbers only.
--

--
-- Please create your own tables in the sampleDB database
CREATE TABLE  `sampleTable` (
  `id` INT NOT NULL auto_increment,
  `userName` CHAR(50) NOT NULL,
  `company` VARCHAR(80),
  `salary` INT,
  `email` VARCHAR(50),
  `lastLogin` DATETIME,
  `createDate` DATETIME,
  `modifyDate` DATETIME,
  --
  PRIMARY KEY (`id`)
)ENGINE=InnoDB DEFAULT CHARSET=utf8
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP DATABASE IF EXISTS sampleDB;
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP DATABASE IF EXISTS sampleDB;

```

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP DATABASE IF EXISTS sampleDB;

CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SET PASSWORD FOR'mysql_user'@'localhost' <- new
SET PASSWORD FOR'mysql_user'@'localhost' = PASSWORD('<PASSWORD>');  -- old

CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP DATABASE IF EXISTS sampleDB;<commit_msg>Update 2019-01-17-SQL-Database.md<commit_after>---
layout: post
title:      "SQL Database "
date:       2019-01-16 21:18:45 +0000
permalink:  sql_database
---





Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
<pre>

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP DATABASE IF EXISTS sampleDB;

ALTER DATABASE  sampleDB MODIFY NAME = NEW.sampleDB_06202003;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP DATABASE IF EXISTS sampleDB;
-- Write your code in a file called "my-first-query.sql" as a single SQL statement
-- The query is expected to make use the MySQL functionality such as CREATE TABLE.
-- The first table created in this tutorial is a single row table. Add the same table to the second database, add data to the third table and try to answer the query in the fourth database as the first database.
DROP TABLE IF EXISTS test_table;
CREATE TABLE test_table (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, text_name VARCHAR(255) NOT NULL, phone_number INT, email VARCHAR(255), address TEXT, created_dates TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, modified_dates TIMESTAMP  NULL DEFAULT NULL, password VARCHAR(50));
INSERT INTO test_table(text_name,phone_number,email,address,created_dates,modified_dates,password) VALUES ('<NAME>','2112050227', '<EMAIL>', '123, Albany St', '2018-11-15 20:17:22','2018-11-16 20:28:16','$7$1w9s7kJ0K4wM4.i9xmydIOA.0nS3l7zJ4dP2wC0y.6oU1JbyQFWMs');
DROP TABLE IF EXISTS test_table; ALTER TABLE test_table CHANGE phone_number phone_number INT UNSIGNED;
DROP TABLE IF EXISTS test_table; ALTER TABLE test_table CHANGE password password VARCHAR(255);
DROP TABLE IF EXISTS test_table; ALTER TABLE test_table CHANGE email email VARCHAR(255);
DROP TABLE IF EXISTS test_table; ALTER TABLE test_table CHANGE modified_dates modified_dates TIMESTAMP NULL DEFAULT NULL;
DROP TABLE IF EXISTS test_table; ALTER TABLE test_table CHANGE created_dates created_dates TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP;
DROP TABLE IF EXISTS test_table;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP DATABASE sampleDB;
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP DATABASE IF EXISTS sampleDB;
 
CREATE TABLE IF NOT EXISTS student( s_sid int, s_fname text, s_lname text, s_age text, s_gender text);
CREATE TABLE IF NOT EXISTS studentview( s_sid int, s_lname text);
CREATE VIEW studentview AS SELECT s_lname as s_lname FROM student;  
INSERT INTO student (s_sid, s_fname, s_lname, s_age, s_gender) VALUES (156, 'Thomas', 'Thomas', '25', 'Man');
INSERT INTO studentview(s_lname) VALUES ('Jones');
SELECT s_lname, s_sid FROM studentview WHERE s_sid IN (55, 168);
DROP TABLE student;
DROP VIEW studentview;

 
CREATE TABLE IF NOT EXISTS student( s_sid int, s_fname text, s_lname text, s_age text, s_gender text);
USE sampleDB; CREATE TABLE IF NOT EXISTS studentView (s_sid int, s_lname text); INSERT INTO student (s_sid, s_fname, s_lname, s_age, s_gender) VALUES (156,'Thomas', 'Thomas', '25', 'Man'); INSERT INTO studentview (s_lname) VALUES ('Jones') ; SELECT s_lname, s_sid FROM studentView WHERE s_sid IN (55, 168); -- Please use ENGINE=Innodb, replace sampleDB and the previous statements with the ones we discussed in class. If you did use ENGINE=InnoDB, replace the sampleDB and the previous statements with the ones we discussed in class.

SELECT s_lname, s_sid FROM student WHERE s_sid IN (156, 25);

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SET GLOBAL max_allowed_packet=500M;; CREATE TABLE IF NOT EXISTS students(
studentid VARCHAR(10),
firstname VARCHAR(25),
lastname VARCHAR(25),
admissiondate INT
);
LOAD DATA INFILE './students.dat' IGNORE INTO TABLE students;
INSERT INTO students VALUES ('00001','Martin','Martin','1999-05-04');
INSERT INTO students VALUES ('00277','Yevgeniy','Petrov','1995-02-09');
INSERT INTO students VALUES ('00037','Ivan','Petrov','1989-12-09');
INSERT INTO students VALUES ('00054','Marijoan','Angelov','1993-11-17');
LOAD DATA INFILE './students.dat' IGNORE INTO TABLE students
SET AUTOCOMMIT=0;; INSERT INTO students VALUES ('00220','Ivan','Petrov','1994-05-10');
ALTER TABLE students ADD UNIQUE INDEX(ID);
COMMIT;
DROP DATABASE IF EXISTS table_sampleDB
-- Please create a semantically equivalent program to the table_sampleDB.
USE table_sampleDB; SELECT * FROM students
ALTER TABLE students ADD UNIQUE INDEX(ID);
-- MySQLi is a C client library written in PHP and MySQLi is intended to be used primarily by developers. It is not designed or intended for use by database programmers and requires a server to be running. It is not designed for massive data loads as the PHP version.
 
-- Please create a semantically equivalent program.
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
 
-- Please create a semantically equivalent program.
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SET GLOBAL max_allowed_packet=500M;

CREATE TABLE classrooms (
category_id INT,
category_name VARCHAR(10)
);

INSERT INTO classrooms VALUES

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees;
DROP TABLE IF EXISTS salaries;
DROP TABLE IF EXISTS dept_manager;
DROP TABLE IF EXISTS dept_emp;
DROP TABLE IF EXISTS dept;
DROP TABLE IF EXISTS staff;
DROP TABLE IF EXISTS salaries;
DROP TABLE IF EXISTS employees;
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
BEGIN
BEGIN TRANSACTION;
-- INSERT a lot of records to populate sampleDB
COMMIT;

SELECT * FROM products;
DROP DATABASE sampleDB;

-- This database is a result of running the query above.
```

## [Exercise - 30](https: 
You are given a CSV file with the following columns:

```no-highlight
Product_Name,Description,Price(In-Currency)
iPhone,51 in. (32 Bits),30.16
iPhone 11 Pro,iPad Pro (2,6),63.56
```

Task

> Please print a report, named "iPhones-price.txt", which shows the name and price of all iPhones in the sample CSV file.

```no-highlight
iPhone,30.16
iPhone 11 Pro,63.56
```

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

-- Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
SET sql_mode="NO_AUTO_PREPARE";
DROP TABLE IF EXISTS `person`;
DROP TABLE IF EXISTS `address`;
DROP TABLE IF EXISTS `city`;
DROP TABLE IF EXISTS `state`;
DROP TABLE IF EXISTS `country`;
DROP TABLE IF EXISTS `contact`;
DROP TABLE IF EXISTS `company`;
DROP TABLE IF EXISTS `project`;
DROP TABLE IF EXISTS `task`;
DROP TABLE IF EXISTS `projectperson`;
DROP TABLE IF EXISTS `projectcontact`;
DROP TABLE IF EXISTS `companyperson`;
 
CREATE TABLE IF NOT EXISTS `projectcontact` (
  `ID` INT(11) NOT NULL AUTO_INCREMENT,
  `projectID` INT(11) NOT NULL,
  `contactID` INT(11) NOT NULL,
  `position` TINYINT(3) NULL DEFAULT NULL,
  `salary` DECIMAL(10,2) NULL DEFAULT NULL,
  `hourlyRate` TINYINT(3) NULL DEFAULT NULL,
  PRIMARY KEY (ID)
) ENGINE=InnoDB AUTO_INCREMENT=88 DEFAULT CHARSET=latin1;
INSERT INTO `person` (`name`, `address`, `city`, `state`, `country`, `email`, `phone`, `position`)
  VALUES ('<NAME>', '20 Chatham Street, New York City, New York', 'Brooklyn', 'NY', 'US', '<EMAIL>', '555-111-2222', 2), ('<NAME>', '9109 N Pine Ave, Los Angeles, CA', 'Oakland', 'CA', 'US', '<EMAIL>', '608-555-3333', 1), ('<NAME>', '133 Dowry Ave, Washington D.C.', 'Seattle', 'WA', 'US', '<EMAIL>', '415-888-5555', 2), ('<NAME>', '3069 Mary Wood St, Dublin, N.I.', 'Dublin', 'IE', 'GB', '<EMAIL>', '444-777-8888', 1), ('<NAME>', '7015 Riverside St, London, England', 'London', 'GB', 'UK', '<EMAIL>', '2063452598', 1), ('<NAME>', '2
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees;
DROP TABLE IF EXISTS salaries;
DROP TABLE IF EXISTS dept_manager;
DROP TABLE IF EXISTS dept_emp;
DROP TABLE IF EXISTS dept;
DROP TABLE IF EXISTS staff;
DROP TABLE IF EXISTS salaries;
DROP TABLE IF EXISTS employees;
DROP DATABASE sampleDB;
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

CREATE TABLE departments (
	did INT AUTO_INCREMENT PRIMARY KEY,
	dept_name VARCHAR(20) NOT NULL
);

CREATE TABLE employees (
	eid INT AUTO_INCREMENT,
	emp_name VARCHAR(30),
	job_desc VARCHAR(50),
	PRIMARY KEY (eid)
);

CREATE TABLE dept_manager (
	did INT,
	mid INT,
	PRIMARY KEY (did, mid)
);

CREATE TABLE staff (
	sid INT AUTO_INCREMENT PRIMARY KEY,
	sn INT,
	en VARCHAR(20),
	job_desp VARCHAR(50)
);

CREATE TABLE dept_emp (
	did INT,
	eid INT,
	PRIMARY KEY (did, eid)
);

CREATE TABLE salaries (
	sid INT,
	salary INT,
	PRIMARY KEY (sid)
);


 
SELECT eid,emp_name,job_desc FROM employees;
UPDATE employees SET job_desc = "Software Developer" WHERE emp_name = "Mr.Raj";
 
SELECT emp_name,job_desc,did,emp_ID,emp_name,emp_name, sid
FROM employees
INNER JOIN salaries
ON employees.sid = salaries.sid
INNER JOIN dept_emp
ON salaries.sid = dept_emp.eid
INNER JOIN staff
ON staff.sid = dept_emp.eid
INNER JOIN dept
ON dept.did = dept_emp.did
WHERE job_desc = "Software Developer" AND emp_ID = 2475;



 
DELETE FROM employees WHERE emp_name = "Mr.Rahman";

/* Please make 6 simple SELECT operations. Create 7 tables for the above
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

 
select a.* from employees a left join dept_emp b on a.staff_id=b.staff_id ;




select * from employees e, salary_history h where e.dept_no=h.emp_dept_no and h.year>=2010 and h.salary>1000000 and h.salary<2000000 ;

insert ignore into employees (staff_id, emp_no, first_name, last_name, sex, birth_year, hire_date, sal, comm, dept_no)
values(1,"2617", "Shaylee", "Wong", "M", "1964", "01-09-1980",300000, "60%");

insert into dept_emp (dept_no, emp_no, dept_id, from_date, to_date)
value(100,1,"HR","01-09-2009","25-09-2009");

insert into dept_emp (dept_no, emp_no, dept_id, from_date, to_date)
value(100,1,"HR","01-09-2009","29-09-2009");

insert into dept_emp (dept_no, emp_no, dept_id, from_date, to_date)
value(100,1,"HR","01-09-2009","23-10-2009");

insert into dept_emp (dept_no, emp_no, dept_id, from_date, to_date)
value(200,1,"SAL","01-09-2009","29-09-2009");

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
TRUNCATE employees, salaries;
ALTER TABLE employees ADD salary float DEFAULT 10000.00, ADD deptid int DEFAULT 10,  ADD dept char(5) DEFAULT 'IT';
ALTER TABLE salaries ADD empname char(100);
SELECT * FROM employees;
SELECT * FROM salaries;
DROP TABLE employees, salaries;
DROP DATABASE;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE employees ( id INT AUTO_INCREMENT, emp_no INTEGER PRIMARY KEY, fname VARCHAR(20) NOT NULL, mname VARCHAR(30), lname VARCHAR(20), sex CHAR(1), hire_date DATE);
INSERT INTO employees (emp_no, fname, mname, lname, sex, hire_date) VALUES (1, 'Jacob', 'Joe', 'Blankenship', 'F', '1970-01-01'),
                                             (2, 'Paul', 'William', 'Jones', 'M', '1980-01-01'),
                                             (3, 'Jon', 'Paul', 'Blankenship', 'M', '1992-01-01');
SELECT * FROM employees;

SELECT first_name, last_name FROM employees;
SELECT * FROM salaries;


DROP TABLE IF EXISTS salary;

CREATE TABLE salary(emp_no INT, salary INT NOT NULL);
use sampleDB;
CREATE TABLE dept(dept_no INT, dept_name VARCHAR(10));
SHOW tables;
/* 0. Please create a fully mutated database program with employees, salaries, and dept.
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE employees ( id INT AUTO_INCREMENT, emp_no INTEGER PRIMARY KEY, fname VARCHAR(20) NOT NULL, mname VARCHAR(30), lname VARCHAR(20), sex CHAR(1), hire_date DATE);
CREATE TABLE salaries ( salary INT AUTO_INCREMENT);
CREATE TABLE dept (dept_no INT, dept_name VARCHAR(10));
INSERT INTO employees (emp_no, fname, mname, lname, sex, hire_date) VALUES (1, 'Jacob', 'Joe', 'Blankenship', 'F', '1970-01-01'),
                                             (2, 'Paul', 'William', 'Jones', 'M', '1980-01-01'),
                                             (3, 'Jon', 'Paul', 'Blankenship', 'M', '1992-01-01');
SHOW tables;
INSERT INTO dept (dept_no, dept_name) VALUES (1, 'Software');
INSERT INTO dept (dept_no, dept_name) VALUES (2, 'Sales');
INSERT INTO dept (dept_no, dept_name
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- This command will create both employee table and departments table in the employee table.
CREATE TABLE employees (
    emp_no INTEGER,
    last_name VARCHAR,
    first_name VARCHAR,
    sex VARCHAR,
    title VARCHAR,
    birth_date DATE,
    hire_date DATE,
    address VARCHAR,
    district VARCHAR,
    country VARCHAR,
    phone VARCHAR,
    salaray decimal(10,2) DEFAULT 0.00
);
CREATE TABLE dept_emp (
    emp_no INTEGER,
    dept_no INTEGER,
    PRIMARY KEY(emp_no, dept_no)
);
ALTER TABLE dept_emp ADD CONSTRAINT dept_emp_fk FOREIGN KEY (emp_no) REFERENCES employees(emp_no);
ALTER TABLE dept_emp ADD CONSTRAINT dept_emp_fk2 FOREIGN KEY (dept_no) REFERENCES dept(dept_no);
 
CREATE TABLE dept_manager (
    emp_no INTEGER NOT NULL,
    dept_no INTEGER NOT NULL,
    PRIMARY KEY(emp_no, dept_no),
    CONSTRAINT dept_emp_fk FOREIGN KEY (emp_no) REFERENCES employees(emp_no);
    CONSTRAINT dept_emp_fk2 FOREIGN KEY (dept_no) REFERENCES dept(dept_no);
);
INSERT INTO employees (emp_no, last_name, first_name, sex, title, birth_date, hire_date, address, district, country, phone, salaray)
VALUES
(1,'Smith','John','F','Sales Representative', '1984-05-26', '1988-03-23','33 S Central Avenue', 'Greencay', 'Tennessee', NULL, 11100.00),
(2,'Donald','Edward', 'M', 'Sales Representative', '1992-03-13', '2000-03-09','57 N 9th Street', 'Oakland', 'California', '123-456-7890','39859.35'),
(3,'Brown', 'Jones', 'M', 'Sales Representative', '1985-06-14', '2000-05-26','7467 W Broad 55th Ave', 'Louisville', '
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees;
DROP TABLE IF EXISTS salaries;
DROP TABLE IF EXISTS dept_manager;
DROP TABLE IF EXISTS dept_emp;
DROP TABLE IF EXISTS dept;
DROP TABLE IF EXISTS staff;
DROP TABLE IF EXISTS salaries;
DROP TABLE IF EXISTS employees;
DROP DATABASE sampleDB;
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE salaries(
emp_no INT NOT NULL, sal DECIMAL(7,2),
start_date DATE NOT NULL, end_date DATE NOT NULL,
 PRIMARY KEY (emp_no)
);

CREATE TABLE employees(
    emp_no INT NOT NULL AUTO_INCREMENT,
    emp_name VARCHAR(15), birth_date DATE, start_date DATE, end_date DATE,
    address VARCHAR(30), city VARCHAR(80),
    state_prov VARCHAR(100), zip_code INT,
    job_title VARCHAR(50), salary DECIMAL(9,2), manager_emp_no INT,
    primary key (emp_no)
);

CREATE TABLE dept(
    dept_no INTEGER, dept_name VARCHAR(20),
    PRIMARY KEY (dept_no)
);

CREATE TABLE dept_manager(
    dept_no INTEGER DEFAULT NULL,
    emp_no INTEGER DEFAULT NULL,
    from_date DATE DEFAULT NULL, to_date DATE DEFAULT NULL,
    PRIMARY KEY (dept_no),
    
    FOREIGN KEY (dept_no) REFERENCES dept(dept_no)
    FOREIGN KEY (emp_no) REFERENCES employees(emp_no)
    ON UPDATE NO ACTION,
    CHECK (from_date <= to_date),
    CHECK (emp_no <> NULL),
    CHECK (dept_no <> NULL AND dept_name <> '')
);

CREATE TABLE dept_emp(
    dept_no INTEGER, emp_no INTEGER, from_date DATE DEFAULT NULL, to_date DATE DEFAULT NULL,
    FROM_DATE_1 DATETIME DEFAULT NULL, TO_DATE_1 DATETIME DEFAULT NULL,
    PRIMARY KEY (dept_no, emp_no),
    
    FOREIGN KEY (dept_no) REFERENCES dept(dept_no)
    FOREIGN KEY (emp_no) REFERENCES employees(emp_no)
    ON UPDATE NO ACTION,
    CHECK (from_date <= to_date),
    CHECK (emp_no <> NULL),
    CHECK (dept_no <> NULL)
);

CREATE TABLE staff (
    staff_no INT NOT NULL AUTO_INCREMENT,
    first_name VARCHAR(20), last_name VARCHAR(20),
    gender CHAR(1), start_date DATE,
    marital_status VARCHAR(10), salary DECIMAL(9,2),
    job_title VARCHAR(15), manager_staff_no INT,
    UNIQUE KEY(staff_no),
    
    FOREIGN KEY (manager_staff_no) REFERENCES staff (staff_no)
    ON DELETE SET NULL,
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees;
CREATE TABLE employees (employee_id INT AUTO_INCREMENT PRIMARY KEY, employee_first_name VARCHAR(25) NOT NULL, employee_last_name VARCHAR(25) NOT NULL, employee_title CHAR(3) NOT NULL DEFAULT 'DR', birth_date DATE, birth_city VARCHAR(25), birth_state CHAR(2), employee_salary INT NOT NULL, manager_id INT, FOREIGN KEY(manager_id) REFERENCES employees(employee_id));
INSERT INTO employees (employee_first_name, employee_last_name, employee_title, birth_date, birth_city, birth_state, employee_salary, manager_id) VALUES ("Bill", "Chan", "DR", "1974-07-19", "London", "New York", 65000, NULL);
INSERT INTO employees (employee_first_name, employee_last_name, employee_title, birth_date, birth_city, birth_state, employee_salary, manager_id) VALUES ("Clint", "Sutter", "DR", "1974-08-09", "London", "Pennsylvania", 140000, NULL);
INSERT INTO employees (employee_first_name, employee_last_name, employee_title, birth_date, birth_city, birth_state, employee_salary, manager_id) VALUES ("Damon", "Chou", "DR", "1975-04-15", "London", "New York", 100000, 7);
INSERT INTO employees (employee_first_name, employee_last_name, employee_title, birth_date, birth_city, birth_state, employee_salary, manager_id) VALUES ("Jenna", "Schoon", "DR", "1973-07-01", "London", "New York", 130000, 2);
INSERT INTO employees (employee_first_name, employee_last_name, employee_title, birth_date, birth_city, birth_state, employee_salary, manager_id) VALUES ("Lewis", "Lloyd", "DR", "1979-04-26", "London", "New York", 40000, 6);
INSERT INTO employees (employee_first_name, employee_last_
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SELECT * FROM employees;
SELECT * FROM staff;

CREATE TABLE IF NOT EXISTS users ( id INT NOT NULL AUTO_INCREMENT, 
    name VARCHAR (100), role ENUM (\"manager\", \"senior\", \"employee\"),
    primary key(id));
INSERT INTO users (name, role) VALUES ('<NAME>', \"manager\");
INSERT INTO users (name, role) VALUES ('<NAME>', \"manager\");
INSERT INTO users (name, role) VALUES ('<NAME>', \"manager\");
INSERT INTO users (name, role) VALUES ('<NAME>', \"senior\");
INSERT INTO users (name, role) VALUES ('<NAME>', \" senior\");
INSERT INTO users (name, role) VALUES ('<NAME>', \"senior\");
INSERT INTO users (name, role) VALUES ('<NAME>', \"senior\");
INSERT INTO users (name, role) VALUES ('<NAME>', \"senior\");
INSERT INTO users (name, role) VALUES ('<NAME>', \"employee\");
INSERT INTO users (name, role) VALUES ('<NAME>', \"emploee\");
INSERT INTO users (name, role) VALUES ('<NAME>', \"manager\");
INSERT INTO users (name, role) VALUES ('<NAME>', \"manager\");
INSERT INTO users (name, role) VALUES ('<NAME>', \"manager\");
INSERT INTO users (name, role) VALUES ('<NAME>', \"manager\");
INSERT INTO users (name, role) VALUES ('<NAME>', \"manager\");
INSERT INTO users (name, role) VALUES ('<NAME>', \"manager\");
CREATE TABLE IF NOT EXISTS dept_emp ( deptnum INT NOT NULL, empnum INT NOT NULL, PRIMARY KEY (deptnum, empnum));
 
CREATE TABLE IF NOT EXISTS dept ( dptemp INT NOT NULL PRIMARY KEY, dptint INT NOT NULL);
 
INSERT INTO dept (dptemp, dptint) VALUES (101, 20000);
INSERT INTO dept (dptemp, dptint) VALUES (102, 4000);
INSERT INTO dept (dptemp, dptint) VALUES (101, 1000);
INSERT INTO dept (dptemp, dptint) VALUES (101, 
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
ALTER TABLE employees ADD CONSTRAINT employees_pk PRIMARY KEY (emp_no);
ALTER TABLE dept_emp ADD CONSTRAINT dept_emp_pk PRIMARY KEY (dept_no, emp_no);
ALTER TABLE dept ADD CONSTRAINT dept_pk PRIMARY KEY (dept_no);
ALTER TABLE staff ADD CONSTRAINT staff_PK PRIMARY KEY (emp_no);
ALTER TABLE department_manager ADD CONSTRAINT department_manager_pk PRIMARY KEY (dm_no, emp_no);
ALTER TABLE dept_manager ADD CONSTRAINT dept_manager_pk PRIMARY KEY (dept_no, emp_no);
ALTER TABLE salary ADD CONSTRAINT salary_pk PRIMARY KEY (emp_no, position); 
ALTER TABLE salaries ADD CONSTRAINT salaries_pk PRIMARY KEY (emp_no, salary);

-- Please create a mutated program which adds 2 columns to the table dept. You can consider these for all operations that will be performed on this table. Make sure to add a foreign key constraint to the table dept_emp that allows linking between the table empolyees and the table dept. You must have an initial value for these new column beforehand for all column name, the name of the foreign key column and the first value of foreign key column. You do not need to add the constraint for the column emp_no as the table is being added in the begining. 
CREATE DATABASE IF NOT EXISTS sampleDB;
USE sampleDB;
ALTER TABLE dept 
ADD COLUMN dept_name VARCHAR(50) NULL AFTER dept_no, 
ADD CONSTRAINT dept_fk 
FOREIGN KEY (dept_no)
REFERENCES dept (dept_no)
ON DELETE CASCADE;

-- Please create a mutated program which modifies the above program to use all tables as the database for its own work and to drop the database when the program has finished.
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP DATABASE sampleDB;

-- Please create a program called find_salary.sql, which queries the table salary for each row for employee whose salary was greater than 5000.

-- Please create a program called view_salary.sql that queries the table salary and presents salaries according to their employees.

-- Please create a program called view_department_manager.sql that queries the table department_manager to display the department managers for each department that has a salary > 50,000.

-- Please create a program called view_employees_salary_hist from employees_salary_hist.

-- Please create a program called view_department_manager
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
 
RENAME TABLE employees TO staff; DROP TABLE employees;
INSERT INTO emp VALUES ('<NAME>',50000);
INSERT INTO emp VALUES ('<NAME>',200000);
INSERT INTO employees TABLE staff;
SELECT s.emp_num,e.emp_name
FROM staff as s
left outer join employees as e on s.emp_num = e.emp_num;
 
SELECT s.emp_num,e.email_adress
FROM staff as s
left outer join employees as e on s.emp_num = e.emp_num
WHERE e.dept_no = '01';

 
CREATE TABLE dept (dep_no VARCHAR(5), dept_name VARCHAR(50));
INSERT INTO dept VALUES ('03','HR');
INSERT INTO dept VALUES ('03','Marketing');
INSERT INTO dept VALUES ('06','IT');
INSERT INTO dept VALUES ('05','IT Support');

SELECT * FROM dept;

 
CREATE TABLE employees (emp_no VARCHAR(5), first_name VARCHAR(50), last_name VARCHAR(50), emp_salary DECIMAL(10, 2));
INSERT INTO employees VALUES ('06','Steve','Blount','9000',100000);
INSERT INTO employees VALUES ('05','George','Gordon','7766',110000);

select * from employees;
select * from employees where emp_no='06';
SELECT emp_name, dept_name FROM dept_emp WHERE emp_no='05';

--
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees;
DROP TABLE IF EXISTS salaries;
DROP TABLE IF EXISTS dept_manager;
DROP TABLE IF EXISTS dept_emp;
DROP TABLE IF EXISTS dept;
DROP TABLE IF EXISTS staff;
DROP TABLE IF EXISTS salaries;
DROP TABLE IF EXISTS employees;
DROP DATABASE sampleDB;
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE salaries(salID int AUTO_INCREMENT PRIMARY KEY, name varchar(20), rate DECIMAL(5,2)) ENGINE=InnoDB;
INSERT INTO salaries(name, rate) VALUES ('<NAME>', 71);
INSERT INTO salaries(name, rate) VALUES ('<NAME>', 62);
INSERT INTO salaries(name, rate) VALUES ('<NAME>', 83);
INSERT INTO salaries(name, rate) VALUES ('<NAME>', 19);
-- Please create two new rows into the new table
INSERT INTO employees(emp_no, emp_name, hire_date) VALUES(10, '<NAME>', '1993-11-06'), (12, '<NAME>', '1992-09-04'), (12, '<NAME>', '1992-09-04'), (14, '<NAME>', '1991-12-01'), (14, '<NAME>', '1992-08-17'), (18, '<NAME>', '1992-09-08'), (20, '<NAME>', '1993-06-14');
SELECT * FROM employees;
-- Please create a new table called address
CREATE TABLE address(ad_id int AUTO_INCREMENT PRIMARY KEY, address_line1 varchar(120), address_line2 varchar(120), city varchar(10), state varchar(2), zip varchar(9), phone varchar(20), employee_id int);
INSERT INTO address (address_line1, address_line2, city, state, zip, phone, employee_id) VALUES ('20100 Dana Point Blvd.', 'Suite B', 'Hayward', 'CA', '92343', (1010), 12), ('10200 Bridgetown Pl.', 'Suite 4', 'Bristol', 'CO', '02524', (1441), 112), ('9600 Northfield Ln', 'Suite F', 'Huntsville', 'AL', '66123', (7), 112), ('7400 Chambers St', 'Suite C', 'Chattanooga', 'TN', '37305', (2364), 41), ('
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE employees (
id INT(100) NOT NULL AUTO_INCREMENT,
empName VARCHAR(20),
jobTitle VARCHAR(30),
salary VARCHAR(20),
FROM department (sampleDB.dept_emp)   
);

 

-- Create a sample table from a file in the current directory.
CREATE TABLE employees (id int NOT NULL AUTO_INCREMENT, empName varchar(20), jobTitle varchar(30), salary varchar(20), deptName varchar(20));
LOAD DATA LOCAL INFILE "employees.csv"
INTO TABLE employees
FIELDSterminated BY ","
enclosed BY "\""
LINES terminated BY "\n"
IGNORE 1 LINES;

CREATE TABLE dept(deptName varchar(20))


-- Please create a mutated program that generates query using sampleDB database.
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE employees (
id INT(100) NOT NULL AUTO_INCREMENT,
empName VARCHAR(20),
jobTitle VARCHAR(30),
salary VARCHAR(20),
FROM department (sampleDB.dept_emp)   
);

SELECT e.id,d.deptName, e.jobTitle FROM employees e 
JOIN department d ON e.deptName=d.deptName;

-- Please update query by editing existing table.
DROP TABLE sampleDB.employees;
-- Create a new table and perform a complex query on it.
DROP TABLE demoDB2.dept_emp;

CREATE TABLE demoDB2.dept_emp (
dept no primary key, emp no, position varchar(30), salary decimal(10,2));

INSERT INTO demoDB2.dept_emp (dept, emp, position, salary)
VALUES
("Manhattan",2002,"Manager","400001.00" ), 
("Manhattan",2001,"Senior Clerk","400020.50" ), 
("Man
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE employees (
employee_id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
first_name VARCHAR(24) NOT NULL,
last_name VARCHAR(24) NOT NULL,
gender CHAR(1) NOT NULL,
birth_date DATE NOT NULL,
hire_date DATE NOT NULL,
salary FLOAT(11,2) NOT NULL
);
CREATE TABLE dept (
dept_no INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
dept_name VARCHAR(10) NOT NULL
);
CREATE TABLE salaries (
emp_no INT NOT NULL,
salary FLOAT(11,2) NOT NULL,
from_date DATE,
to_date DATE DEFAULT NULL,
CONSTRAINT fk_emp
FOREIGN KEY emp_no(emp_no)
REFERENCES employees(employee_id)
);

CREATE TABLE dept_manager (
dept_no INT NOT NULL,
manager_no INT NOT NULL,
CONSTRAINT fk_dept
FOREIGN KEY dept_no(dept_no)
REFERENCES departments(dept_no),
CONSTRAINT fk_manager
FOREIGN KEY manager_no(manager_no)
REFERENCES employees(employee_id)
);

CREATE TABLE dept_emp (
dept_no INT NOT NULL,
emp_no INT NOT NULL,
from_date DATE,
to_date DATE DEFAULT NULL,
CONSTRAINT fk_dept
FOREIGN KEY dept_no(dept_no)
REFERENCES departments(dept_no),
CONSTRAINT fk_emp
FOREIGN KEY emp_no(emp_no)
REFERENCES employees(employee_id)
);

CREATE TABLE staff (
staff_no INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
first_name VARCHAR(24) NOT NULL,
last_name VARCHAR(24) NOT NULL,
department_no INT NOT NULL,
MANAGER_staff_no INT DEFAULT NULL,
CONSTRAINT fk_dept
FOREIGN KEY department_no(department_no)
REFERENCES departments(dept_no),
constraints fk_manager
FOREIGN KEY manager_no(MANAGER_staff_no)
REFERENCES employees(employee_id)
);


SET autocommit = 0;
COMMIT;

-- Please create a mutated program which shows how to read in all
-- tables of the system's current database instance. Show the
-- following fields:  employee_id, first_name, last_name,
-- gender, birth_date and hire_date. Show the following
-- fields (
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE employees (
  emp_no INT,
  birth_date VARCHAR(10)
);
CREATE TABLE salaries (
  emp_no INT,
  salary INT
);
INSERT INTO employees VALUES (100, '1968-01-10'), (200, '1968-03-25');
INSERT INTO salaries VALUES (100, 3000);
CREATE TABLE dept_emp (
  emp_no INT,
  dept_no INT
);
CREATE TABLE dept (
  dept_no INT,
  dept_name VARCHAR(25)
);
CREATE TABLE dept_manager (
  dept_no INT,
  emp_no INT
);
CREATE TABLE staff (
  staff_no INT,
  first_name VARCHAR(20),
  last_name VARCHAR(25)
);
INSERT INTO staff VALUES (1, 'John', 'Doe');
INSERT INTO staff VALUES (2, 'Joe', 'Doe');
INSERT INTO staff VALUES (3, 'Steve', 'Jobs');
INSERT INTO staff VALUES (4, 'Lisa', 'Jones');
INSERT INTO staff VALUES (5, 'William', 'Knowles');
CREATE TABLE dept (
	dept_no INT NOT NULL PRIMARY KEY,
	dept_name VARCHAR(25) UNIQUE NOT NULL
);
CREATE TABLE dept_emp (
	emp_no INT NULL,
	dept_no INT NOT NULL,
	FOREIGN KEY (emp_no) REFERENCES employees (emp_no) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (dept_no) REFERENCES dept (dept_no) ON DELETE CASCADE ON UPDATE CASCADE
);
SELECT e.emp_no, e.birth_date FROM employees e;
SELECT s.emp_no, s.salary FROM salaries s;
SELECT d.dept_no, d.dept_name FROM dept d;
SELECT de.emp_no, de.dept_no
FROM dept_emp de;
SELECT de.emp_no, de.dept_no 
FROM staff s join dept_emp de
ON s.staff_no = de.emp_no AND de.staff_no = 3;
SELECT dm.dept_no, dm.emp_no
FROM dept_manager dm;
-- Select a list of all employees in each department. 
SELECT s.staff_no, s.first_name, d.dept_name FROM staff s 

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees;
DROP TABLE IF EXISTS salaries;
DROP TABLE IF EXISTS dept_manager;
DROP TABLE IF EXISTS dept_emp;
DROP TABLE IF EXISTS dept;
DROP TABLE IF EXISTS staff;
DROP TABLE IF EXISTS salaries;
DROP TABLE IF EXISTS employees;
DROP DATABASE sampleDB;
-- Please create a program which inserts data in different database and then uses 
-- queries to print the data
CREATE DATABASE IF NOT EXISTS sampleDB;
USE sampleDB;
DROP TABLE IF EXISTS employees;
DROP TABLE IF EXISTS salaries;
DROP TABLE IF EXISTS dept_manager;
DROP TABLE IF EXISTS dept_emp;
DROP TABLE IF EXISTS dept;
DROP TABLE IF EXISTS staff;
DROP TABLE IF EXISTS salaries;
DROP TABLE IF EXISTS employees;
DROP DATABASE sampleDB;
-- Please create a program which fetches data from specific tables in the sampleDB database.
-- The tables to use are employees, salaries, dept_manager, dept_emp, dept, staff. Use the
-- appropriate table names where applicable. Also show the data in a meaningful way.
CREATE DATABASE IF NOT EXISTS sampleDB;
USE sampleDB;
DROP TABLE IF EXISTS employees;
DROP TABLE IF EXISTS salaries;
DROP TABLE IF EXISTS dept_manager;
DROP TABLE IF EXISTS dept_emp;
DROP TABLE IF EXISTS dept;
DROP TABLE IF EXISTS staff;
DROP TABLE IF EXISTS salaries;
DROP TABLE IF EXISTS employees;
DROP DATABASE sampleDB;
CREATE DATABASE IF NOT EXISTS sampleDB;
USE sampleDB;
DROP TABLE IF EXISTS employees;
DROP TABLE IF EXISTS salaries;
DROP TABLE IF EXISTS dept_manager;
DROP TABLE IF EXISTS dept_emp;
DROP TABLE IF EXISTS dept;
DROP TABLE IF EXISTS staff;
DROP TABLE IF EXISTS salaries;
DROP TABLE IF EXISTS employees;
DROP DATABASE sampleDB;
-- Please write the MySQL DROP DATABASE statement in the comment section below.
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees;
DROP TABLE IF EXISTS salaries;
DROP TABLE IF EXISTS dept_manager;
DROP TABLE IF EXISTS dept_emp;
DROP TABLE IF EXISTS dept;
DROP TABLE IF EXISTS staff;
DROP TABLE IF EXISTS salaries;
DROP TABLE IF EXISTS employees;
DROP DATABASE sampleDB;
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees;
DROP TABLE IF EXISTS salaries;
DROP TABLE IF EXISTS dept_manager;
DROP TABLE IF EXISTS dept_emp;
DROP TABLE IF EXISTS dept;
DROP TABLE IF EXISTS staff;
DROP TABLE IF EXISTS salaries;



[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
REPLACE INTO employees (dept, name, salary, comm, mgr) values ('Managment', 'Managment', '10000', '100', 5100000);
REPLACE INTO employees (dept, name, salary, comm) values ('Accounting', 'Accounting', '10000', '10');
REPLACE INTO employees (dept, name, salary, comm) values ('Engineering', 'Engineering', '9000', '5');
REPLACE INTO employees (dept, name, salary, comm) values ('Marketing', 'Marketing', '8000', '5');
REPLACE INTO employees (mgr, name) values ('5100000');
REPLACE INTO employees (dept, name) values ('HR', 'HR');
DROP TABLE employees;
DROP TABLE salaries;
DROP TABLE dept_manager;
DROP TABLE dept_emp;
DROP TABLE dept;
DROP TABLE staff;
DROP TABLE employees;
DROP DATABASE sampleDB;
-- Please create a very simple program that performs a select operation, then executes an UPDATE statement on an empty table
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
REPLACE INTO employees (dept, name, salary, comm) values ('Accounting', 'Accounting', '10000', '10');
INSERT INTO employees;
SELECT * FROM employees LIMIT 10;
UPDATE employees set name = 'New Name';
-- Please create a modifiable program which takes an input that represents the employee’s id. It prints the employee name and his/her basic information. For the purpose of demonstration, there are 10 employees, 7 of them is hired. The second and the third hire new employees. The name of the second employee should be “<NAME>”, which is already taken. The third employee should be “<NAME>”. After the data is printed, perform the following:
1. Insert a new row for his/her record in the employees data table.
2. Now update the data for the second employee, in the same table, then print the data.
3. Next, perform the similar operations on the third employee in the same table.
Please update your program.
Please create a modifiable program which takes an input that represents the id of the employee. It prints the last name of the employee followed by his basic information. For the purpose of demonstration, there are 8 employees: <NAME> and <NAME>, and <NAME> is employed by <NAME
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- CREATE TABLE ONLY employees;
-- CREATE TABLE ONLY salaries;
-- CREATE TABLE employees ( first_name character(10), last_name character(10), department char(3) );
-- CREATE TABLE salaries ( first_name character(5), last_name character(5), salary int );
INSERT INTO employees

SELECT DISTINCT first_name, last_name, department

FROM employees, dept_emp

WHERE employees.last_name = dept_emp.emp_last_name
  AND employees.department = dept_emp.emp_department

ORDER BY last_name, first_name;

-- Drop all tables you created and leave the database alone.  Make sure you drop the database at the end of every operation.
DROP TABLE IF EXISTS employees;
DROP TABLE IF EXISTS salaries;
DROP TABLE IF EXISTS dept_manager;
DROP TABLE IF EXISTS dept_emp;
DROP TABLE IF EXISTS dept;
DROP TABLE IF EXISTS staff;
DROP TABLE IF EXISTS salaries;
DROP TABLE IF EXISTS employees;
DROP DATABASE sampleDB;


[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO employees(firstname, lastname, salary) VALUES ("John-Smith", "Doe", 98765),
    ("Jane", "Doe", 1000),
    ("Mary-Smith", "Smith", 57654),
    ("David", "Williams", 42424);
 
CREATE TABLE IF NOT EXISTS employees (
  emp_no int, 
  first_name varchar(13), 
  last_name varchar(13),
  gender char(1), 
  hire_date date, 
  sal_date date);
INSERT INTO employees (emp_no, first_name, last_name, gender, hire_date, sal_date) VALUES (1111, "Glenn", "Bacon", "M", '2000-07-28', '2002-04-01');
INSERT INTO employees
  (emp_no, first_name, last_name, gender, hire_date, sal_date)
  VALUES (2112, "Tina", "Williams", "F", '2002-10-22', '1998-07-07'),
    (1113, "Lance", "Jones", "M", '2002-12-01', '1995-07-03'),
    (1114, "Nancy", "Bacon", "F", '2003-03-01', '2001-08-01'),
    (1212, "John", "Smith", "M", '2003-11-24', '2000-01-01'),
    (2213, "Marian", "Miller", "F", '2004-01-22', '2003-07-12'),
    (1213, "Susan", "Jones", "F", '2004-04-18', '2005-07-13')
    INTO employees(emp_no, first_name, last_name, gender, hire_date, sal_date);

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
 
CREATE TABLE IF NOT EXISTS employees (id INT PRIMARY KEY NOT NULL, emp_name VARCHAR(255), gender VARCHAR(10), birthdate DATE, hire_date DATE, sal salary);
CREATE TABLE IF NOT EXISTS dept (id int PRIMARY KEY NOT NULL, dept_name VARCHAR(250));
CREATE table IF NOT EXISTS dept_emp(dept_id INT NOT NULL, emp_id INT NOT NULL, INDEX dept_emp_depid_idx (dept_id), INDEX dept_emp_empid_idx (emp_id), CONSTRAINT dept_emp_fk FOREIGN KEY (dept_id) REFERENCES dept (id) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT dept_emp_fk2 FOREIGN KEY (emp_id) REFERENCES employees (id) ON DELETE CASCADE ON UPDATE CASCADE
    );
CREATE TABLE IF NOT EXISTS dept_manager (dept_id int NOT NULL, emp_id int NOT NULL, INDEX dept_manager_depid_idx (dept_id), INDEX dept_manager_empid_idx (emp_id), CONSTRAINT dept_manager_fk FOREIGN KEY (dept_id) REFERENCES dept (id) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT dept_manager_fk2 FOREIGN KEY (emp_id) REFERENCES employees (id) ON DELETE CASCADE ON UPDATE CASCADE
    );
CREATE TABLE IF NOT EXISTS salaries (emp_id INT NOT NULL, sal_date DATE, INDEX sal_date_idx (sal_date), CONSTRAINT sal_date_fk FOREIGN KEY (emp_id) REFERENCES employees (id) ON DELETE CASCADE ON UPDATE CASCADE
    );
-- This is a sample query that displays all the employees from the employees table.
SELECT * FROM emp_1;
-- This will add a new employee to the employees table.
INSERT INTO employees (emp_id, emp
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees;
DROP TABLE IF EXISTS salaries;
DROP TABLE IF EXISTS dept_manager;
DROP TABLE IF EXISTS dept_emp;
DROP TABLE IF EXISTS dept;
DROP TABLE IF EXISTS staff;
DROP TABLE IF EXISTS salaries;
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees;
DROP TABLE IF EXISTS salaries;
DROP TABLE IF EXISTS dept_manager;
DROP TABLE IF EXISTS dept_emp;
DROP TABLE IF EXISTS dept;
DROP TABLE IF EXISTS staff;
DROP TABLE IF EXISTS salaries;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

 
CREATE TABLE employees (eId INT, first_name VARBINARY(100), last_name VARBINARY(100), gender CHAR(1), hire_date DATETIME, office_location VARBINARY(100), CONSTRAINT employees_pk PRIMARY KEY (eId));
INSERT INTO employees (eId,first_name,last_name,gender,hire_date,office_location) VALUES('0404681','Raphael','Vaillant','M',2008-06-03 18:38:38.142213,'Nairobi');
INSERT INTO employees VALUES('126067','Raphael','Hobbes','M',2012-02-07 18:38:38.142213,'Lagos');
INSERT INTO employees VALUES('1260678452','Billy','Hobbes','M',2012-02-07 18:38:38.142213,'Beaumont');
INSERT INTO employees (eId,first_name,last_name,gender,hire_date,office_location) VALUES('124509', 'Douglas', 'Taylor', 'M', 2013-06-04 20:09:52.903689, 'Belane');
INSERT INTO employees (eId,first_name,last_name,gender,hire_date,office_location) VALUES('1260671', 'Douglas', 'Taylor', 'M', 2012-02-07 18:38:38.142213, 'Beaumont');
INSERT INTO employees (eId,first_name,last_name,gender,hire_date,office_location) VALUES('923033', 'Douglas', 'Taylor', 'M', 2009-06-05 1
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

<commit_msg>add mysql 5.7 support for php<commit_after>Apache + MySQL + PHP + Apache is a small web server which is designed for fast, flexible and secure Internet access. With support for PHP and Apache, the PHP developers can develop highly scalable and maintainable web applications by using this technology within their own website.

PHP is a popular server-side programming language based on the procedural model. It is one of the most popular open-source PHP framework for developing fast and reliable websites. It offers the wide range and speed at which you can create and build websites from the core of a framework. It is the most popular PHP framework for small web sites.

PHP 5 is a large update compared to PHP 4 and is still in general beta release (2008). PHP 5 still has some open questions, but it has better stability and performance than PHP 4.

MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Additionally, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.

Additionally, version 5.7 is supported
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees;
DROP TABLE IF EXISTS salaries;
DROP TABLE IF EXISTS dept_manager;
DROP TABLE IF EXISTS dept_emp;
DROP TABLE IF EXISTS dept;
DROP TABLE IF EXISTS staff;
DROP TABLE IF EXISTS salaries;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees;
DROP TABLE IF EXISTS salaries;
DROP TABLE IF EXISTS dept_manager;
DROP TABLE IF EXISTS dept_emp;
DROP TABLE IF EXISTS dept;
DROP TABLE IF EXISTS staff;
DROP TABLE IF EXISTS salaries;

DROP TABLE IF EXISTS employees;
DROP TABLE IF EXISTS salaries;





[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees;
DROP TABLE IF EXISTS salaries;
DROP TABLE IF EXISTS dept_manager;
DROP TABLE IF EXISTS dept_emp;
DROP TABLE IF EXISTS dept;
DROP TABLE IF EXISTS staff;
DROP TABLE IF EXISTS salaries;
DROP TABLE IF EXISTS employees;
DROP TABLE IF EXISTS salaries;
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees;
DROP TABLE IF EXISTS dept_manager;
DROP TABLE IF EXISTS dept_emp;
DROP TABLE IF EXISTS dept;
DROP TABLE IF EXISTS staff;
DROP TABLE IF EXISTS salaries;
DROP TABLE IF EXISTS employees;
DROP TABLE IF EXISTS salaries;
-- Please create a new table and add data
CREATE TABLE employees(emp_no int PRIMARY KEY, emp_name varchar(100), emp_title varchar(30), salary double);
INSERT INTO employees(emp_no, emp_name, emp_title, salary)
VALUES(1,'Emmanuel', 'CEO',50000.00),
(2,'Mark','CTO',30000.00),
(3,'Mike', 'CFO', 250000.00);
-- Please drop your table and see its modifications in sampleDB.
DROP TABLE IF EXISTS employees;
-- Please create a second table with another column
CREATE TABLE employees(emp_no int PRIMARY KEY, username varchar(100), emp_name varchar(100), emp_title varchar(30), manager varchar(100), salary double);
INSERT INTO employees(emp_no, username, emp_name, emp_title, manager, salary)
VALUES(1,'Emmanuel', 'Emmanuel','CEO', 10000.00,30000.00),
(2,'Mark','Mark','CTO', 10000.00,20000.00),
(3,'Mike', 'Mike','CFO', 80000.00,20000.00);
-- Please drop your table and add another column in that table.
DROP TABLE IF EXISTS employees;
ALTER TABLE employees ADD department varchar(20) NULL;
-- Please remove all duplicates from the manager column.
UPDATE employees SET manager = manager1 WHERE manager = manager2 AND manager = manager3;
-- Please create a fourth table and add data
CREATE TABLE employees(emp_no int PRIMARY KEY, username varchar(100), emp_name varchar(100), emp_title varchar(30), manager varchar(100), department varchar(20), salary double);
INSERT INTO employees(emp_no, username, emp_name, emp_title, manager, department, salary)
VALUES(1,'
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees;
DROP TABLE IF EXISTS salaries;
DROP TABLE IF EXISTS dept_manager;
DROP TABLE IF EXISTS dept_emp;
DROP TABLE IF EXISTS dept;
DROP TABLE IF EXISTS staff;
DROP TABLE IF EXISTS salaries;
DROP TABLE IF EXISTS employees;
DROP TABLE IF EXISTS salaries;
CREATE TABLE staff LIKE employees;
INSERT INTO employees(ename, empid, deptid)
SELECT employee, employee, id_dept from employees;
UPDATE employees
SET sal = sal + 50
FROM salaries
WHERE empid IN(16,18,40);
DELETE FROM employees
WHERE empid IN(10,9,8);


[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- Some sample data
DELETE FROM employees;
INSERT INTO employees VALUES
( 101, 'Bill',   'Gates',
    '368146', '1', '4724.6', '5327.5', 100000.00,
    '<EMAIL>', '65002', '200', 'R',
    null ),
(202, 'George', 'Washington',
    '536417', '2', '3213.1', '4119', 200000.00,
    '<EMAIL>', '45351', '200', 'R',
    null ),
(404, 'John',   'Smith',
    '321214', '4', '5132.5', '4523.3', 300000.00,
    '<EMAIL>', '32429', '400', 'RD',
    null ) ;
-- End of sample data


DROP DATABASE IF EXISTS my_db;
CREATE DATABASE my_db;  
USE my_db;
SHOW TABLES;
 
CREATE TABLE `employees` (
  `emp_no`      int(11)     UNSIGNED NOT NULL AUTO_INCREMENT,
  `first_name`  varchar(100) CHARACTER SET latin1 COLLATE latin1_swedish_ci NOT NULL,
  `last_name`   varchar(100) CHARACTER SET latin1 COLLATE latin1_swedish_ci NOT NULL,
  `birth_date`  date         NOT NULL;
-- */
-- End table definition
 
CREATE TABLE `salaries` (
  `emp_no` int(11) NOT NULL,
  `salary` double(8,2) DEFAULT NULL,
  PRIMARY KEY (`emp_no`)
);
-- */
-- End table definition
 
CREATE TABLE `dept_manager` (
  `dept_no`     int(11)   NOT NULL,
  `emp_no`      int(11)   NOT NULL,
  `from_dept`   int(11)   NOT NULL,
  `to_dept`     int(
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
UPDATE employee SET Salary = Salary + 1 WHERE Emp_Number in
(
SELECT Emp_Number FROM employees WHERE Manager_Number=108
);

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE employees (first_name VARCHAR(25), last_name VARCHAR(26), title VARCHAR(30));
CREATE TABLE salaries (salary DECIMAL(7, 2), emp_no INT);
INSERT INTO employees (first_name, last_name, title) VALUES ("Lily", "White", "CEO");
INSERT INTO employees (first_name, last_name, title) VALUES ("Rose", "Tolstoy", "Marketing Manager");
INSERT INTO employees (first_name, last_name, title) VALUES ("Raven", "Kubo", "Sales Director");
INSERT INTO employees (first_name, last_name, title) VALUES ("Terry", "Williams", "Employee");
INSERT INTO salaries (salary, emp_no) VALUES (200000, 1);
INSERT INTO salaries (salary, emp_no) VALUES (300000, 1);
INSERT INTO salaries (salary, emp_no) VALUES (250000, 3);
INSERT INTO salaries (salary, emp_no) VALUES (290000, 1);
INSERT INTO dept_emp (emp_no, dept_no) VALUES (1, 1);
INSERT INTO dept_emp (emp_no, dept_no) VALUES (1, 2);
INSERT INTO dept_manager (dept_no,  manager) VALUES (2, 2);
INSERT INTO dept (dept_no, dept_name) VALUES (1, 'SALES');
INSERT INTO dept (dept_no, dept_name) VALUES (2, 'ACCOUNTING');
-- The new SQL will not update if there are no updates. MySQL does an update when a transaction is done.
-- This is a good hint for future developers.
UPDATE salaries SET salary = salary + 500
WHERE emp_no IN (2);
UPDATE salaries SET salary = salary + 1000
WHERE emp_no IN (3);
UNLOCK TABLES;
FLUSH TABLES;
LOCK TABLES employees WRITE;
UPDATE employees
SET first_name = 'George'
WHERE emp_no = 1;
UPDATE employees
SET last_name = 'Williams'
WHERE emp_no = 3;
UPDATE salary
SET salary = salary + 1500
WHERE emp_no = 1;
UNLOCK TABLES;
UNLOCK TABLES;
COMMIT;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees;
DROP TABLE IF EXISTS salaries;
DROP TABLE IF EXISTS dept_manager;
DROP TABLE IF EXISTS dept_emp;
DROP TABLE IF EXISTS dept;
DROP TABLE IF EXISTS staff;
DROP TABLE IF EXISTS salaries;
DROP TABLE IF EXISTS employees;
DROP TABLE IF EXISTS salaries;
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO employees VALUES ("Cynthia", "<EMAIL>", 6543);
INSERT INTO staff VALUES ("Bob", 1234);
INSERT INTO employees VALUES ("Vernon", "<EMAIL>", 6598, 1);
INSERT INTO departments VALUES ("IT", 1);
INSERT INTO departments VALUES ("Sales", 2);
INSERT INTO dept_emp VALUES (1, 1);
INSERT INTO dept_emp VALUES (2, 2);
INSERT INTO dept_emp VALUES (3, 3);
INSERT INTO dept_emp VALUES (4, 4);
-- Please create a mutated program that uses the previous code
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SELECT * FROM employees;
SELECT * FROM staff;
SELECT * FROM departments;
SELECT * FROM dept_emp;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees;
DROP TABLE IF EXISTS salaries;
DROP TABLE IF EXISTS dept_manager;
DROP TABLE IF EXISTS dept_emp;
DROP TABLE IF EXISTS dept;
DROP TABLE IF EXISTS staff;
DROP TABLE IF EXISTS salaries;
-- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.
#
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

INSERT INTO dept (deptno, deptname) VALUES (1101,'English-language courses'), (1201,'Science and maths'), (1301,'Arabic/Hebrew'), (1401,'Other');
INSERT INTO dept (deptno, deptname) VALUES (2331,'Engineering'), (2332,'Humanities'), (2333,'Arts and humanities'), (2334,'Social sciences');
INSERT INTO dept_manager (deptno, empno, desc, sal, comm, loc, hiredate) VALUES (1101, 1025,  '<NAME> 1025', 260000, 30000,  'Abuja, Niger',  '2012-06-14');
INSERT INTO dept_manager (deptno, empno, desc, sal, comm, loc, hiredate) VALUES (1101, 1030, '<NAME> 1030', 260000, 28000, 'Abuja, Niger',  '2012-06-29');
INSERT INTO dept_manager (deptno, empno, desc, sal, comm, loc, hiredate) VALUES (1101, 1032, '<NAME> 1032', 260000, 19000, 'Abuja, Niger',  '2012-06-29');
INSERT INTO dept_manager (deptno, empno, desc, sal, comm, loc, hiredate) VALUES (1201, 2025, 'Dr. <NAME> 2025', 350000, 30000, 'Mogadishu, Niger', '2012-06-15');
INSERT INTO dept_manager (deptno, empno, desc, sal, comm, loc, hiredate) VALUES (1201, 2030, 'Mr. <NAME> 2030', 350000, 40000, 'Mogadishu, Niger', '2012-06-28');
INSERT INTO dept_manager (
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

CREATE TABLE employees (emp_no INT NOT NULL, 
    emp_name VARCHAR(25),
    sex CHAR(1),
    hire_date DATE,
    mgr_no INT,
    dept_no INT,
    roles_id CHAR(10)
);

CREATE TABLE dept (dept_no INT NOT NULL, 
    dept_name VARCHAR(10),
    location TEXT
);

CREATE TABLE dept_manager (dept_no INT, 
    mgr_no INT
); 

INSERT INTO employees (emp_no,emp_name,sex,hire_date,mgr_no,dept_no,roles_id) VALUES 
(1, '<NAME>', 'M', '01-05-2037',1,1, 'PRES'),
(2, '<NAME>', 'F', '05-01-2038',1,2, 'PRES');

INSERT INTO dept (dept_no,dept_name,location) VALUES
(2,'Engineering', 'Dallas'),
(1,'Marketing', 'Dallas'),
(3, 'Human Resources', 'San Francisco'),
(4, 'Reception', 'Dallas'),
(5, 'Sales', 'San Francisco');

INSERT INTO employees (emp_no,emp_name,sex,hire_date,mgr_no,dept_no,roles_id) VALUES 
(3, '<NAME>', 'M','01-07-2039',2,3, 'PRES'),
(4, '<NAME>', 'F','28-12-2039',3,4, 'PRES'),
(5, '<NAME>', 'M','12-12-2032',3,5, 'PRES'),
(6, '<NAME>', 'F','25-03-2040',5,5, 'PRES'),
(7, '<NAME>', 'M','31-09-2040',5,5, 'PRES'),
(8, '<NAME>', 'F','10-12-2031',5,5, 'PRES'),
(9, '<NAME>', 'M','24-01-2041',5,5, 'PRES'),
(10, '<NAME>', 'F','22-01-2038',5,5, 'PRES');

INSERT INTO dept
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees;
DROP TABLE IF EXISTS salaries;
DROP TABLE IF EXISTS dept_manager;
DROP TABLE IF EXISTS dept_emp;
DROP TABLE IF EXISTS dept;
DROP TABLE IF EXISTS staff;
DROP TABLE IF EXISTS salaries;
DROP TABLE IF EXISTS employees;
DROP TABLE IF EXISTS salaries;
 

CREATE TABLE dept(
d no(10)
, dName varchar(10)
);
INSERT INTO dept values (1, 'Marketing');
INSERT INTO dept values (2, 'Data Analytics');
INSERT INTO dept values (1, 'HR');
INSERT INTO dept values (4, 'IT');

CREATE TABLE staff(
 staffno(10)
, fname varchar(20)
, lname varchar(20)
, gender char
, salary double
);
INSERT INTO staff values (1, 'John', 'Doe', 'M', 750000);
INSERT INTO staff values (2, 'Andrea', 'Milanini', 'M', 900000);
INSERT INTO staff values (3, 'Rina', 'S', 'M', 1200000);
INSERT INTO staff values (4, 'Josephine', 'H', 'F', 800000);
INSERT INTO staff values (5, 'Patrick', 'L', 'F', 1050000);

CREATE TABLE employees(
 empno(10)
, ename varchar(20)
, job varchar(20)
, mgr no(10)
, hiredate date
, sal double
, comm double
);
INSERT INTO employees values (1223,
 'Kevin ', 'HR officer', 2, '1997/01/01',
  800000.00, 2386000.00);
INSERT INTO employees values (1224,
 'John', 'Programmer', 3, '1994/01/01',
  1200000.00, 3668000.00);
INSERT INTO employees values (1225,
 'Cindy', 'Programmer', 1, '1995/01/01',
  100
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees;
DROP TABLE IF EXISTS salaries;
DROP TABLE IF EXISTS dept_manager;
DROP TABLE IF EXISTS dept_emp;
DROP TABLE IF EXISTS dept;
DROP TABLE IF EXISTS staff;
DROP TABLE IF EXISTS salaries;
-- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.
#
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
#
-- Update employees table in the sampleDB database
CREATE TABLE IF NOT EXISTS employees(first_name TEXT,
    LAST_NAME TEXT,
    JOB_TITLE TEXT,
    HIRE_DATE TEXT,
    SALARY NUMBER(10,2));
INSERT INTO employees(first_name, LAST_NAME, JOB_TITLE, HIRE_DATE, SALARY)
    VALUES
        ('John', 'Doe', 'Sales Manager', '1/2/2011','10000'),
        ('Tom', 'Smith', 'President', '1/31/2010','12500'),
        ('Mike', 'Bob', 'VP Marketing', '1/21/2006','25000'),
        ('Mike', 'Donald', 'Senior Vice President', '2/8/2004','35000'),
        ('John', 'Bowling', 'Staff', '1/30/1998','5000.00');

-- Please complete this statement using multiple queries as needed.
#
-- What is the maximum number of people who manage more than three departments, as a result of the merge?
--
SELECT COUNT(emp_no) AS NumberManagerEmployees FROM dept_emp
GROUP BY dept_no
HAVING COUNT(emp_no) > 3;
#
-- Do employees who work for all departments report to Manager?
SELECT COUNT(*) AS ManagerEmployees FROM dept_emp d, employees e
WHERE d.emp_no = e.emp_no
AND d.dept_emp_no = d.emp_number
GROUP BY d.dept_no
HAVING COUNT(*) > 1;
#
-- How many times are employees assigned to their own departments?
SELECT COUNT(e.emp_no) AS EmployeeEmployees FROM employees e, dept_emp de
WHERE e.emp_no = de.emp_no
GROUP BY emp_no
HAVING e.emp_no = ANY (SELECT emp_no FROM dept_emp);
#
-- How many times are employees hired by more than one
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees;
CREATE TABLE employees
(
emp_no        INT(3) UNSIGNED      NOT NULL,
emp_name      VARCHAR(20)          NOT NULL,
emp_title     CHAR(10),
from_date     DATE,
to_date       DATE,
job_title     CHAR(10),
salary        DECIMAL(9,2),
mgr           INT(3) UNSIGNED,
hire_date     DATE,
comm_rat      DECIMAL(3,1),
DEPT_NO       INT(3),
PRIMARY KEY(DEPT_NO, emp_no)
);
-- Please create a program that prints each department's manager's name.
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS dept_emp;
DROP TABLE IF EXISTS dept_manager;
SET @query = "SELECT DISTINCT DEPT_NO, CONCAT(first_name,'', last_name) AS Manager
             FROM  dept_emp
             INNER JOIN
             (SELECT DEPT_NO,emp_no
             FROM employees
             WHERE job_title = 'HR Manager')  a
             ON a.emp_no = dept_emp.emp_no ";
EXEC (@query);
-- Please modify the program in such a way that the employees of each department report their titles, salary averages, company names and department names in a table (see tables above). Make it work even better.

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees;
DROP TABLE IF EXISTS salaries;
DROP TABLE IF EXISTS dept_manager;
DROP TABLE IF EXISTS dept_emp;
DROP TABLE IF EXISTS dept;
DROP TABLE IF EXISTS staff;
DROP TABLE IF EXISTS salaries;
#
# The "EMPLOYEES" table contains the following columns:
#
# emp_no	  INTEGER PRIMARY KEY
# last_name	  VARCHAR(50)   NOT NULL
# first_name	  VARCHAR(50)   NOT NULL
# sex		  CHAR(1)       NOT NULL DEFAULT 'M'  -- 0=male, 1=female, 2=unknown
# job_title	  VARCHAR(20)   NOT NULL
# mgr_emp_no	  INTEGER
# hire_date	  DATE  
# sal		  	  INTEGER
# comm		  	  INTEGER
# delinq		  INTEGER
# tenure		  INTEGER
--
# The "SALARIES" table contains the following columns:
#
# emp_no		INTEGER
# sal		  	  INTEGER
--
# The "STAFF" table contains the following columns:
#
# staff_no		INTEGER PRIMARY KEY
# staff_title		VARCHAR (20)
# birth_date		DATE  
# hire_date		DATE  
# pay		  	  INTEGER
--
# The "DEPARTMENT" table contains the following columns:
#
-- department_no	INTEGER PRIMARY KEY
# department_name	  VARCHAR(20)   NOT NULL
--
# The "DEPARTMENT_MANAGER" table contains the following columns:
#
-- department_no		INTEGER
# department_manager	  INTEGER
--
# The "DEPT_MANAGER" table contains the following columns:
--
-- dept_no		INTEGER
# dept_name		VARCHAR(20)   NOT NULL
--
-- The "DEPT_EMP" table contains the following columns:
--
-- dept_no			INTEGER
# emp_no			INTEGER
# from_date		DATE
# to_date			DATE
--
# We want to add the following
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees;
DROP TABLE IF EXISTS salaries;
DROP TABLE IF EXISTS dept_manager;
DROP TABLE IF EXISTS dept_emp;
DROP TABLE IF EXISTS dept;
DROP TABLE IF EXISTS staff;
DROP TABLE IF EXISTS salaries;
-- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

0

-- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.
```

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees;
DROP TABLE IF EXISTS salaries;
DROP TABLE IF EXISTS dept_manager;
DROP TABLE IF EXISTS dept_emp;
DROP TABLE IF EXISTS dept;
DROP TABLE IF EXISTS staff;
DROP TABLE IF EXISTS salaries;
-- You need to use a schema to perform operations. A schema is a collection of constraints, data definitions and indexes stored together in a tab-separated data file. They are used to describe a database. You can create one or more databases and load these schema files into that specific database.
#
# Please create a SQL table and perform several operations on it such as updating the data.
-- You can also get the data from a table into an array.
-- You can compare the records of the two tables on the basis of their ID.
-- For instance, if a particular employee has many other employees, create a foreign key constraint named `EMP` of the type `FOREIGN KEY` and set the reference type to `NO ACTION`. In case of 2 records having the same value in the reference column, which in this case is the ID column, you will get an error. The solution is to use the `ON DELETE CASCADE` feature i.e., `DELETE FROM salaries WHERE ID = x`).
-- MySQL schema files usually have.sql extension whereas other DBMS schema files are.sql.gz. It cannot be changed after tables have been created on a database.
#
-- Create a new table, add columns and populate some records and show the columns.
-- You can also add columns to existing tables from the command prompt.
#
-- How to get the data of a table from MySQL?
#
-- You can also get the records from a table into JavaScript.
#
# Please use foreign keys to access an existing data.
-- MySQL allows you to specify a field that should be unique, e.g., an employee is usually associated with one person with the `PRIMARY KEY` constraint. Also, MySQL supports the `UNIQUE KEY` constraint, which allows you to create unique indexes on columns or part of the key. MySQL has support for 10 foreign key indexes, but only a small set of foreign keys is supported per table. You need to create a schema file and specify the foreign keys as
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees;
DROP TABLE IF EXISTS salaries;
DROP TABLE IF EXISTS dept_manager;
DROP TABLE IF EXISTS dept_emp;
DROP TABLE IF EXISTS dept;
DROP TABLE IF EXISTS staff;
DROP TABLE IF EXISTS salaries;
-- You need to use a schema to perform operations. A schema is a collection of constraints, data definitions and indexes stored together in a tab-separated data file. They are used to describe a database. You can create one or more databases and load these schema files into that specific database.
#
# Please create a SQL table and perform several operations on it such as updating the data.
-- You can also get the data from a table into an array.
-- You can compare the records of the two tables on the basis of their ID.
-- For instance, if a particular employee has many other employees, create a foreign key constraint named `EMP` of the type `FOREIGN KEY` and set the reference type to `NO ACTION`. In case of 2 records having the same value in the reference column, which in this case is the ID column, you will get an error. The solution is to use the `ON DELETE CASCADE` feature i.e., `DELETE FROM salaries WHERE ID = x`).
-- MySQL schema files usually have.sql extension whereas other DBMS schema files are.sql.gz. It cannot be changed after tables have been created on a database.
#
-- Create a new table, add columns and populate some records and show the columns.
-- You can also add columns to existing tables from the command prompt.
#
-- How to get the data of a table from MySQL?
#
-- You can also get the records from a table into JavaScript.
#
# Please use foreign keys to access an existing data.
-- MySQL allows you to specify a field that should be unique, e.g., an employee is usually associated with one person with the `PRIMARY KEY` constraint. Also, MySQL supports the `UNIQUE KEY` constraint, which allows you to create unique indexes on columns or part of the key. MySQL has support for 10 foreign key indexes, but only a small set of foreign keys is supported per table. You need to create a schema file and specify the foreign keys as
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- We will first create a sample table, `departments` and then we will fill this table with employees and store it in the `employees` table. By default, the `departments` table has a foreign key constraint that refers to the `employees` table using the `REFERENCES` keyword.
CREATE TABLE IF NOT EXISTS departments (id      INT     AUTO_INCREMENT, 
                                               title   VARCHAR(255), 
                                               PRIMARY KEY (id)
#You need to add a constraint for each field i.e., `foreign key(column) references table(column)`. You can add a constraint of the `UNIQUE KEY` type
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
#
# Example 23:
#
DROP TABLE IF EXISTS dept_manager;
CREATE TABLE `dept_manager` (
  `deptno` int(11) NOT NULL,
  `manager` int(11) NOT NULL,
  PRIMARY KEY (`deptno`,`manager`),
  CONSTRAINT `deptmanager_ibfk_1` FOREIGN KEY (`deptno`) REFERENCES `dept` (`deptno`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `deptmanager_ibfk_2` FOREIGN KEY (`manager`) REFERENCES `staff` (`staffno`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=latin1
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees;
DROP TABLE IF EXISTS salaries;
DROP TABLE IF EXISTS salaries;
DROP TABLE IF EXISTS dept_manager;
DROP TABLE IF EXISTS dept_emp;
DROP TABLE IF EXISTS dept;
DROP TABLE IF EXISTS staff;
DROP TABLE IF EXISTS salaries;

# CREATE TABLE IF NOT EXISTS dept_manager (
#     dept_id INT NOT NULL PRIMARY KEY,
#     role_id INT NOT NULL,
#     manager_id INT NOT NULL
# );
# Create the employees table
CREATE TABLE IF NOT EXISTS employees (
	emp_id INT NOT NULL PRIMARY KEY,
   
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
START TRANSACTION;
CREATE TABLE employee (ID INT(10), NAME VARCHAR(20), JOB_DESC VARCHAR(50), PHONE_NUM VARCHAR(11), SALARY DECIMAL(7,2));
INSERT INTO employee VALUES (1, 'Sachin', 'Sr. Director', '9664395493', '11800.00');
INSERT INTO employee VALUES (2, 'Pramod', 'Assistant Director', '9662106427', '97200.00');
INSERT INTO employee VALUES (3
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SET NAMES UNICODE;
-- Your code here
DROP TABLE IF EXISTS emp_dept;
DROP TABLE IF EXISTS employee;
DROP TABLE IF EXISTS dept;
DROP TABLE IF EXISTS team;
DROP TABLE IF EXISTS salary;
DROP TABLE IF EXISTS department_manager;
DROP TABLE IF EXISTS employee_salary;
DROP TABLE IF EXISTS department;
DROP TABLE IF EXISTS role;
DROP TABLE IF EXISTS office;
DROP TABLE IF EXISTS staff;
DROP TABLE IF EXISTS company;

CREATE TABLE office(
ID INT PRIMARY KEY AUTO_INCREMENT UNIQUE,
name varchar(30) UNIQUE NOT NULL,
location varchar(50) UNIQUE
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees;
DROP TABLE IF EXISTS salaries;
DROP TABLE IF EXISTS dept_manager;
DROP TABLE IF EXISTS dept_emp;
DROP TABLE IF EXISTS dept;
DROP TABLE IF EXISTS staff;
DROP TABLE IF EXISTS salaries;
-- You need to use a schema to perform operations. A schema is a collection of constraints, data definitions and indexes stored together in a tab-separated data file. They are used to describe a database. You can create one or more databases and load these schema files into that specific database.
#
# Please create a SQL table and perform several operations on it such as updating the data.
-- You can also get the data from a table into an array.
-- You can compare the records of the two tables on the basis of their ID.
-- For instance, if a particular employee has many other employees, create a foreign key constraint named `EMP` of the type `FOREIGN KEY` and set the reference type to `NO ACTION`. In case of 2 records having the same value in the reference column, which in this case is the ID column, you will get an error. The solution is to use the `ON DELETE CASCADE` feature i.e., `DELETE FROM salaries WHERE ID = x`).
-- MySQL schema files usually have.sql extension whereas other DBMS schema files are.sql.gz. It cannot be changed after tables have been created on a database.
#
-- Create a new table, add columns and populate some records and show the columns.
-- You can also add columns to existing tables from the command prompt.
#
-- How to get the data of a table from MySQL?
#
-- You can also get the records from a table into JavaScript.
#
# Please use foreign keys to access an existing data.
-- MySQL allows you to specify a field that should be unique, e.g., an employee is usually associated with one person with the `PRIMARY KEY` constraint. Also, MySQL supports the `UNIQUE KEY` constraint, which allows you to create unique indexes on columns or part of the key. MySQL has support for 10 foreign key indexes, but only a small set of foreign keys is supported per table. You need to create a schema file and specify the foreign keys as
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees;
DROP TABLE IF EXISTS employees_payroll;
CREATE TABLE employees(empid varchar(4) PRIMARY KEY, name varchar(20));
CREATE TABLE employees_payroll(empID varchar(4) Foreign Key REFERENCES employees(empID))ENGINE=InnoDB;
# Please enter a value for empid and then perform a create statement (i.e., create entry in employees table)
INSERT INTO employees VALUES("1","<NAME>"),("2","<NAME>"),("3","<NAME>"),("4","<NAME>");
# Please do the same for name (i.e., update
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SET sql_mode = "NO_AUTO_VALUE_ON_ZERO";
SET FOREIGN_KEY_CHECKS = 0;
#
# Here are the types of foreign key constraints. In case of unique index, it is the same as the primary key constraint. For composite keys it allows you to identify which column are the primary keys, which would allow you to create a `ON UPDATE CASCADE` rule to ensure that all rows which have the matching value in one of those columns will be affected.
#
# You can use the foreign key command to query a particular table through a foreign key, i.e., get some information about the column
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees;
CREATE TABLE IF NOT EXISTS employees (
    id INT NOT NULL AUTO_INCREMENT,
    first_name VARCHAR ( 50 ) NOT NULL,
    last_name VARCHAR ( 50 ) NOT NULL,
    manager_id INT NOT NULL,
    PRIMARY KEY ( id ),
    FOREIGN KEY ( manager_id )
        REFERENCES employees
        ( id ),
    CONSTRAINT emp_manager CHECK ( manager_id IS NULL OR manager_id <= id )
        ) ENGINE=InnoDB;

# A schema must contain the data and the constraints that apply to the schema.
# You can give the database a name and you can create
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
#
-- You need to use schema to perform operations. A schema is a collection of constraints, data definitions and indexes stored together in a tab-separated data file. They are used to describe a database. You can create one or more databases and load these schema files into that specific database.
DROP TABLE IF EXISTS employees;
DROP TABLE IF EXISTS dept_manager;
DROP TABLE IF EXISTS dept_emp;
DROP TABLE IF EXISTS dept;
DROP TABLE IF EXISTS staff;
DROP TABLE IF EXISTS salaries;
CREATE TABLE employees (
  eid INT UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT PRIMARY KEY,
  empname CHAR(20)
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

#
# Please use a schema to perform operations. A schema is a collection of constraints, data definitions and indexes stored together in a table-separated data file. They are used to describe a database. A schema allows you to create tables within the specific database and also for manipulating the data within the table. You can change the schema data by updating a schema for the specific database. An existing schema can be replaced with a new schema as any table created as a result of the update will be copied. In addition, you can create new tables as a result of the schema. You can define one or more constraints on the columns involved in adding a constraint.
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
#
# Please use a schema to perform operations. A schema is a collection of constraints, data definitions and indexes stored together in a table-separated data file. They are used to describe a database. A schema allows you to create tables within the specific database and also for manipulating the data within the table. You can change the schema data by updating a schema for the specific database. An existing schema can be replaced with a new schema as any table created as a result of the update will be copied. In addition, you can create new tables as a result of the schema. You can define one or more constraints on the columns involved in adding a constraint.
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS test;
DROP TABLE IF EXISTS customer;
CREATE TABLE test (id NVARCHAR(5), name NVARCHAR(20), gender TEXT DEFAULT NULL, address NVARCHAR(50), countryid NVARCHAR(3));
DELIMITER #
INSERT INTO test (id, name, gender, countryid) VALUES ('1', '<NAME>', 'M', '7011');
INSERT INTO test (id, name, gender, countryid) VALUES ('2', '<NAME>', 'F', '2222');
INSERT INTO test (id, name, gender, countryid) VALUES ('3', '<NAME>', 'M', '48');
INSERT INTO test (id, name, gender, countryid) VALUES ('4', '<NAME>', 'M', '88');
DELIMITER ;
--
-- Here you can create a table and a derived table
CREATE TABLE customer (id NVARCHAR(5), firstname NVARCHAR(20), lastname NVARCHAR(20), gender TEXT DEFAULT NULL, address NVARCHAR(50));
--
#
# Now you try to use the derived table as a view - the table will work and you can work with it. But that is not good, because it is not used as the view at all. This is why the view is created. 
CREATE VIRTUAL TABLE customer_derived (firstname NVARCHAR(20), lastname NVARCHAR(20));
--
#
# You can create a view based on a table. A view is a collection of rows of data. You can use the view to access the data of other tables and to perform calculations on the data in other tables.
#
# A view is often used to combine and perform operations on two or more views. It is usually used in conjunction with the ORDER BY and LIMIT clauses.
#
# The derived table created in Example 9.3 illustrated how to create a view and use it.
--
--
# Create a derived table to demonstrate the principle of using views
CREATE VIEW department AS SELECT countryid as id, departmentname as name FROM countryorder, countryorder2;
--
# The view in Example 9.4 shows the use of the virtual table created with Example 9
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS students
(name  VARCHAR(30) NOT NULL UNIQUE,
email VARCHAR(100) UNIQUE,
address  VARCHAR(100));
COMMENT ON COLUMN students.address IS 'This is the address of the student';

comment on column `student`.`name` is 'This is the name of the student';

CREATE INDEX idx_name ON students(name);
comment on index idx_name is 'This is the index name';
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
 

CREATE TABLE IF NOT EXISTS person (
  pid serial PRIMARY KEY,
  pname text NOT NULL,
  psalary numeric NOT NULL,
  pphone char(12) NOT NULL,
  paddress text DEFAULT NULL,
  pdate date DEFAULT GETDATE() NOT NULL
);
CREATE TABLE IF NOT EXISTS emplyee (
  eid serial PRIMARY KEY,
  ename text NOT NULL,
  ename2 text DEFAULT NULL,
  ephone char(11),
  esalary numeric DEFAULT NULL,
  eaddress text NOT NULL,
  enote text DEFAULT NULL,
  etag bigint NOT NULL
);
ALTER TABLE person ADD CONSTRAINT pfkPerson FOREIGN KEY(pname) REFERENCES emplyee(ename);
ALTER TABLE emplyee ADD CONSTRAINT enfkEployee FOREIGN KEY(ename2) REFERENCES emplyee(ename);
 
CREATE TABLE IF NOT EXISTS company (
  companyid bigint PRIMARY KEY,
  name varchar(100),
  contactname varchar(100),
  companyaddress text,
  number_of_employees int DEFAULT NULL,
  managerid bigint DEFAULT NULL,
  phone varchar(50),
  companycity varchar(25),
  active_deactivated bit DEFAULT NULL,
  CONSTRAINT fkC_Manager FOREIGN KEY (managerid) REFERENCES person(pid),
  CONSTRAINT fkC_Contact FOREIGN KEY (contactname) REFERENCES person(pname)
);
CREATE TABLE IF NOT EXISTS branch (
  branchID bigint PRIMARY KEY,
  branch_name varchar(50),
  business_id varchar(50),
  branch_manager bigint,
  branch_managername varchar(50) DEFAULT NULL
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employee10;
DROP DATABASE IF EXISTS sampleDB;
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB; #

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

CREATE TABLE T1(Col_1 INT, Col_2 STRING);

CREATE TABLE T2
(
	Col_1 INT,
	Col_2 STRING
);

CREATE TABLE T3
(
	Col_1 INT,
	Col_2 STRING,
	Col_3 DECIMAL(3,1)
);

CREATE TABLE T4(Col_1 INT, Col_2 STRING);

CREATE TABLE T5 (Col1 INT, Col2 CHAR(2), Col3 STRING, Col4 UNSIGNED INTEGER, Col5 INT UNSIGNED, Col6 INT, Col7 STRING);

CREATE TABLE T6 (Col1 INT, Col2 CHAR(200), Col3 STRING, Col4 UNSIGNED INTEGER, Col5 INT UNSIGNED, Col6 INT, Col7 STRING);

CREATE TABLE T7 (Col1 INT, Col2 CHAR(2), Col3 STRING, Col4 UNSIGNED INTEGER, Col5 INT UNSIGNED, Col6 INT, Col7 STRING);

CREATE TABLE T8 (Col1 INT, Col2 CHAR(2)),
(1, 1), (2, 2), (3, 3), (4, 4), (5, 5);

CREATE TABLE T9 (Col1 INT, Col2 INT),
(1, 1), (1, 2), (1, 3), (1, 4), (2, 1), (2, 2), (2, 3), (2, 4), (3, 1), (3, 2), (3, 3), (3, 4), (4, 1), (4, 2), (4, 3), (4, 4);

CREATE TABLE T10 (Col1 INT, Col2 INT, Col3 INT),
(2, 2, 1), (2, 2, 2), (2, 2, 3), (2, 2, 4), (2, 1, 1), (2, 1, 2), (2, 1, 3), (2, 1, 4), (2, 3, 1), (2,
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employee10;
DROP DATABASE IF EXISTS sampleDB;
 #
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employee10;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SET character_set_client = "utf8";
SET character_code = "utf8";
SET collation_connection = "utf8_general_ci";
 CREATE TABLE employee10 (
   empID INT PRIMARY KEY AUTO_INCREMENT,
   empName VARCHAR(50) NOT NULL,
   empSal INT NULL
 )ENGINE=MEMORY;
INSERT INTO employee10 VALUES ('9999989','<NAME>',120000),('9999993','<NAME>',124000),('9999996','<NAME>',110000),('9999998','<NAME>',146000),('9999999','<NAME>',90000);

#

INSERT IGNORE INTO employee10 VALUES ('2','Aleksii','515000');

#

SELECT * FROM employee10;

#

SELECT empName FROM employee10 WHERE empSal>500000;

DROP DATABASE IF EXISTS sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
UPDATE employee SET employee.address2 = 'New York' WHERE employee.address = 'California';
UPDATE employee2 SET employee2.address2 = 'California' WHERE employee2.address = 'New York';
UPDATE employee3 SET employee3.address2 = 'New York' WHERE employee3.address = 'New York';
UPDATE employee4 SET address3 = 'California' WHERE address = 'New York';
UPDATE employee6 SET address1 = 'California' WHERE address1 = 'California';
UPDATE employee7 SET address3 = 'California' WHERE address3 = 'California';
UPDATE employee8 SET address = 'New York' WHERE address = 'California';
UPDATE employee9
-- The name "address" would be used in a "JOIN" clause.
SET address2= 'California' WHERE employee.address = 'California';
UPDATE employee1 SET address = 'newYork' WHERE address = 'NewYork';
UPDATE employee2 SET address = 'newYork' WHERE address = 'NewYork';
UPDATE employee4 SET address = 'Houston' WHERE address = 'Houston';
UPDATE employee5 SET address = 'Houston' WHERE address = 'Houston';
SELECT * FROM employee;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE employee10(
Id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
LastName CHAR(30) NOT NULL,
Salary INT UNSIGNED NOT NULL,
ManagerName CHAR(30),
Direct ReportName CHAR(30),
FOREIGN KEY(managerName) REFERENCES employee (LastName)
);
INSERT INTO employee10 (LastName,Salary,ManagerName,Direct ReportName) VALUES ('Smith', 1000, 'Bob','James');
INSERT INTO employee10 (LastName,Salary,ManagerName,Direct ReportName) VALUES ('Jackson', 1000, 'Anthony', 'Roberts');
SELECT * FROM employee10;
#
-- Please create a mutated program that inserts data into a table not in the same database as the modified query.
#
USE sampleDB; CREATE TABLE IF NOT EXISTS employee20 (
Id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
LastName CHAR(30) NOT NULL,
Salary INT UNSIGNED NOT NULL,
ManagerName CHAR(30),
Direct ReportName CHAR(30),
FOREIGN KEY (managerName) REFERENCES employee10 (LastName)
); INSERT INTO employee20 (LastName,Salary,ManagerName,Direct ReportName) VALUES ('Rogers', 1000, 'Nadime', 'Bob');
SELECT * FROM employee20; #
#
-- Please create a mutated program that inserts data into an existing table in the same database as the modified query.
#
USE sampleDB; ALTER TABLE employee20 ADD MANAGERNAME CHAR(30);
INSERT INTO employee20 (LastName,Salary,ManagerName,Direct ReportName) VALUES ('Stark', 1000, 'Nadime','James');
SELECT * FROM employee20; #
#
-- Please create and mutate such an INSERT statement:
USE sampleDB;CREATE TABLE IF NOT EXISTS department (
Id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
DepartmentName CHAR(30)
);INSERT INTO department (departmentName) values ('Sales');INSERT INTO department (departmentName) values ('Engineering'); #
#
#
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
ALTER TABLE employee20 MODIFY firstName VARCHAR(450);
ALTER TABLE employee20 MODIFY lastName VARCHAR(450);
ALTER TABLE employee20 MODIFY dateOfBirth DATE;
ALTER TABLE employee20 MODIFY status TINYINT(2) UNSIGNED;
#

\c sampleDB2013032222
#
# We need to execute this query in a different database because our sampleSQL only accepts database name as a first argument!
SELECT * FROM employee20;
\c $sampleDB2013032222

ALTER DATABASE $sampleDB2013032222 OWNER TO root;

exit;


[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employee10;
DROP DATABASE IF EXISTS sampleDB;
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SET GLOBAL sql_mode=TRADITIONAL;
DROP TABLE IF EXISTS employee10;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employee10;
DROP DATABASE IF EXISTS sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employee10;
DROP DATABASE IF EXISTS sampleDB;
 
 
DROP TABLE IF EXISTS employee10;
CREATE TABLE employee10 (
  employeeID int NOT NULL AUTO_INCREMENT PRIMARY KEY,
  salaries varchar(50),
  empname char(100),
  employeeDepartmentID int NOT NULL
);


INSERT INTO employee10 (employeeID, salaries, empname, employeeDepartmentID) VALUES ('1', '20000', 'Mohamed', '1'), ('2', '21000', 'Rahul', '1'), ('3', '16000', '<NAME>', '1'), ('4', '20000', '<NAME>', '1'), ('5', '22000', 'Zakaria', '1'), ('6', '25000', 'Amin', '1'), ('7', '22000', 'Abdul', '1'), ('8', '23000', 'Fawaz', '1'), ('9', '20000', 'Abdur', '1'), ('10', '23000', 'Nasrul', '1');

-- Create a table for employee10
DROP TABLE IF EXISTS employee10;
CREATE TABLE employee10 (
  employeeID int NOT NULL AUTO_INCREMENT PRIMARY KEY,
  salaries varchar(50),
  empname char(100),
  employeeDepartmentID int NOT NULL
);

-- Insert table employee10
INSERT INTO employee10 (employeeID, salaries, empname, employeeDepartmentID)
VALUES ('1', '20000', 'Mohamed', '1'), ('2', '21000', 'Rahul', '1'), ('3', '16000', '<NAME>', '1'), ('4', '20000', '<NAME>', '1'), ('5', '22000', 'Zakaria', '1'), ('6', '25000', 'Amin', '1'), ('7', '22000', 'Abdul', '1'), ('8', '23000', 'Fawaz', '1'), ('9', '20000
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employee10;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employee10;
DROP DATABASE IF EXISTS sampleDB;


[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SET GLOBAL sql_mode=TRADITIONAL;
DROP TABLE IF EXISTS employee10;
DROP DATABASE IF EXISTS sampleDB;
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SET GLOBAL sql_mode=TRADITIONAL;
DROP TABLE IF EXISTS employee5;
DROP DATABASE IF EXISTS sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SET GLOBAL sql_mode=TRADITIONAL;
UPDATE employee10 SET salary = 100 WHERE id = 2;
SELECT MAX(salary) FROM employee10;
UPDATE employee10 SET salary = 100 WHERE id = 1;
SELECT MAX(salary) FROM employee10;

update employee10 set  salary = salaries.value where  id = employees.id;




select * from employee10;

SELECT salary, COUNT(salary), COUNT(id) FROM employee10 GROUP BY salaries.value;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SET GLOBAL sql_mode=TRADITIONAL;
DROP TABLE IF EXISTS worker;
create table employee10(employeeID int,  name varchar(30),  salary decimal(10,2),  department varchar(50));
insert into employee10(employeeID,name,salary,department) values (1,'Mr. <NAME> - Manager',100000,'Office Management');
insert into employee10(employeeID,name,salary,department) values (2,'Mr. <NAME>',50000,'Human Resources');
insert into employee10(employeeID,name,salary,department) values (3,'Sr. <NAME>',200000,'Sales');
insert into employee10(employeeID,name,salary,department) values (4,'<NAME>',50000,'Human Resources');
insert into employee10(employeeID,name,salary,department) values (5,'Md. <NAME>',300000,'Office Management');
update employee10 set employeeID=7, salary=125000 where employeeID=1;
update employee10 set employeeID=7, salary=150000 where employeeID=10;
delete from employee10 where employeeID = 6;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

REPLACE INTO employee10 (EmpNo, Func, Salary, Dns1, Dns2, Dns3) values
( 1000, 'Salesperson', 60000, 'Sales Support', '786', 'Dover', '43');

mysql> select * from employee10;
+----+-------+--------+-----------+-----------+----------------+
| EmpNo| Func | Salary | Dns1      | Dns2      | Dns3           |
+----+-------+--------+-----------+-----------+----------------+
|   1000|Salesperson| 60000 | Sales Support| None      | None           |
+----+-------+--------+-----------+-----------+----------------+
```

We can apply this same principle to INSERT, UPDATE, and DELETE statements too. The first operation in a data management language should be either SELECT or UPDATE but it is not required to use them.

A common complaint with MySQL is that you can never know if data in a table will be overwritten with a newer record. We are going to learn more about how to deal with this problem in a future lesson. Here are two ways you can solve your problem effectively: (1) Make the query case insensitive i.e., use the INGRESE and ERASE statements to insert and remove records. (2) Use MERGE instead of REPLACE (for MySQL, use the UPDATENI and DELETE FROM statements).
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
 <commit_msg>Added new article: MySQL (1)<commit_after>title: MySQL
description: MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder <NAME>'s daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.

MySQL 5 now is available as a community version which offers support for MySQL 5.0 as well as MySQL 5.1, 5.5, and MariaDB 10.3. MySQL 5 is a community supported version. If you are using a version older than this it is highly recommended to upgrade to a newer version such as MySQL 5.5.

MySQL has come to be a hot database in the world, and has earned more than 250 million visits per month. By using MySQL, you have one choice, it’s a choice you must make and don’t have to worry about it later. It brings together both the best of MySQL and better than everything else in the industry. We also hope it will allow you to move your company's data to a cloud friendly server that handles all of your traffic.

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SET GLOBAL sql_mode=TRADITIONAL;
DROP TABLE IF EXISTS worker;
create table employee10(employeeID int,  name varchar(30),  salary decimal(10,2),  department varchar(50));
insert into employee10(employeeID,name,salary,department) values (1,'Mr. <NAME> - Manager',100000,'Office Management');
insert into employee10(employeeID,name,salary,department) values (2,'Mr. <NAME>',50000,'Human Resources');
insert into employee10(employeeID,name,salary,department) values (3,'Sr. <NAME>',200000,'Sales');
insert into employee10(employeeID,name,salary,department) values (4,'<NAME>',50000,'Human Resources');
insert into employee10(employeeID,name,salary,department) values (5,'Md. <NAME>',300000,'Office Management');
update employee10 set employeeID=7, salary=125000 where employeeID=1;
update employee10 set employeeID=7, salary=150000 where employeeID=10;
delete from employee10 where employeeID = 6;
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
 
CREATE TABLE  INDEX_TEST(
  indexID int DEFAULT '0' AUTO_INCREMENT,
  indexName varchar(32) DEFAULT NULL,
  employeeID int DEFAULT 'NULL',
  INDEX_TEST_UNIQUE (employeeID)
);
INSERT INTO INDEX_TEST VALUES (null,'<NAME>',1), (null,'Rajan',45),(null,'Rajan1',45),(null,'Rajan2',45);
CREATE
 
PARTITION BY RANGE (employeeID) (
  SUBPARTITION BY RANGE (employeeID) (
    SUBPARTITION employeeID_sub0 VALUES (0),
      PARTITION employeeID_sub2(employeeID),
    COMMIT PRESERVE 3
  ),
  COMMIT PRESERVE 3
);
CREATE INDEX idx1 ON INDEX_TEST  (employeeID);
CREATE INDEX idx2 ON INDEX_TEST(employeeID);
CREATE INDEX idx3 ON INDEX_TEST(employeeID);
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SET GLOBAL sql_mode=TRADITIONAL;
DROP TABLE IF EXISTS worker;
create table employee(employeeID int, name varchar(30), salary decimal(10,2), department varchar(50));
insert into employee(employeeID,name,salary,department) values (1,'Mr. <NAME>',100000,'Office Management');
insert into employee(employeeID,name,salary,department) values (2,'Mr. <NAME>',50000,'Human Resources');
insert into employee(employeeID,name,salary,department) values (3,'Sr. <NAME>',200000,'Sales');
insert into employee(employeeID,name,salary,department) values (4,'<NAME>',50000,'Human Resources');
insert into employee(employeeID,name,salary,department) values (5,'Md. <NAME>',300000,'Office Management');
update employee set employeeID=7, salary=125000 where employeeID=1;
update employee set employeeID=7, salary=150000 where employeeID=10;
delete from employee where employeeID = 6;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

DROP TABLE IF EXISTS worker;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
select employeeID,name,salary,department from employee10;
 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
create table employee11(employeeID int, name varchar(30), salary decimal(10,2), department varchar(50));
insert into employee11(employeeID,name,salary,department) values (1,'Mrs. <NAME> - President',350000,'IT');
insert into employee11(employeeID,name,salary,department) values (2,'Mr. <NAME>',45000,'IT');
insert into employee11(employeeID,name,salary,department) values (3,'Sr. <NAME>',300000,'Marketing');
insert into employee11(employeeID,name,salary,department) values (4,'Mr. <NAME>',40000,'IT');
insert into employee11
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SET GLOBAL sql_mode=TRADITIONAL;
DROP TABLE IF EXISTS worker;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SET GLOBAL sql_mode=TRADITIONAL;
DROP TABLE IF EXISTS worker;
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

UPDATE worker
SET country = "Spain"
WHERE name = "John";
 

SELECT * FROM worker;

DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SET GLOBAL sql_mode=TRADITIONAL;
DROP TABLE IF EXISTS worker;
CREATE TABLE worker (
  id BIGINT PRIMARY KEY IDENTITY(1,1),
  email VARCHAR(255) UNIQUE DEFAULT '',
  phonenumber BIGINT UNIQUE DEFAULT 0,
  salary bigint,
  bonus bigint DEFAULT 0,
);

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

SET GLOBAL sql_mode=ANSI_QUOTES;
DROP TABLE IF EXISTS worker;

DROP DATABASE IF EXISTS `sampleDB`;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SET GLOBAL sql_mode=NO_AUTO_VALUE_ON_ZERO,NO_ENGINE_SUBSTITUTION;
DROP TABLE IF EXISTS worker;
DROP TABLE IF EXISTS puppy;
CREATE TABLE worker (
    ID smallint(7),
    name varchar(20),
    surname varchar(20),
    age int, 
    sons int,
    daughters int
);

CREATE TABLE puppy (
    ID mediumint(7),
    name varchar(40),
    birthdate date
);
SELECT * FROM worker;
SELECT * FROM puppy;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE worker (
    id INT NOT NULL PRIMARY KEY,
    name VARCHAR(20) NOT NULL,
    number STRING,
    address1 VARCHAR(255) NOT NULL,
    address2 VARCHAR(255) NULL,
    hiring_date DATE NULL,
    phone VARCHAR(25),
    job_title VARCHAR(255),
    department VARCHAR(20));
 
CREATE TABLE employee (
    employeeNumber INT NOT NULL PRIMARY KEY,
    name VARCHAR(20) NOT NULL,
    salary DOUBLE NOT NULL,
    division INT,
    department INT);
 
CREATE TABLE customer (
    customerID INT NOT NULL PRIMARY KEY,
    customerName VARCHAR(50) NOT NULL,
    customerType INT NOT NULL,
    employeeNumber INT,
    CONSTRAINT CHECK_employeeNumber CHECK (employeeNumber >= 0, employeeNumber <= 100));
 
INSERT INTO worker
(
    name,
    number,
    address1,
    address2,
    hiring_date,
    job_title,
    department)
VALUES ("Jeff", "1234567890", "Address 1", "Address 2", "1990-01-19", "Senior Engineer", 2);
INSERT INTO worker
(
    name,
    number,
    address1,
    address2,
    hiring_date,
    job_title,
    department)
VALUES ("Jeff", "7890123456", "Address 9", "Address 6", "2001-12-01", "Engineer", 3);
INSERT INTO worker
(
    name,
    number,
    address1,
    address2,
    hiring_date,
    job_title,
    department)
VALUES ("Michael", "2147483646", "Address 8", "Address 4", "2000-01-01", "Manager", 1);
INSERT INTO worker
(
    name,
    number,
    address1,
    address2,
    hiring_date,
    job_title,
    department)
VALUES ("Tanner", "1322356925", "Address 3", NULL, "1994-03-22", "Manager", 1);
INSERT INTO worker
(
    name,
    number,
    address1,
    address2,
    hiring_date,
    job_title,
    department)
VALUES ("Brendan", "12012534567", "Address 7", "Address 2", "19
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SET GLOBAL sql_mode=ANSI_QUOTES;
DROP TABLE IF EXISTS worker;
DROP DATABASE IF EXISTS `sampleDB`;
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SET GLOBAL sql_mode=ANSI_QUOTES;

CREATE TABLE `worker` (
  `no_worker` INT NOT NULL AUTO_INCREMENT,
  `nama_lengkap` VARCHAR(50) NOT NULL,
  `kode_lokasi` VARCHAR(50) NOT NULL,
  `username` VARCHAR(50) NOT NULL,
  `password` VARCHAR(50) NOT NULL,
  `tgl_masuk` DATETIME NOT NULL,
  `id_level` INT NOT NULL,
  `id_status` INT NOT NULL,
  `id_kota_asal` INT NOT NULL,
  `id_kota_tujuan` INT NOT NULL,
  `no_tlp` INT NULL,
  PRIMARY KEY (`no_worker`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=latin1 AUTO_INCREMENT=5;




[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SET GLOBAL sql_mode=ANSI_QUOTES;
DROP TABLE IF EXISTS worker;
DROP DATABASE IF EXISTS `sampleDB`;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SET GLOBAL sql_mode=ANSI_QUOTES;
DROP TABLE IF EXISTS worker;
DROP DATABASE IF EXISTS `sampleDB`;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP DATABASE IF EXISTS `sampleDB`;

 
SELECT COUNT(*) FROM `sampleDB`.worker;


[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SET GLOBAL sql_mode=ANSI_QUOTES,character_set_character_set="utf8mb4", character_set_connection=LATIN1, character_set_results=LATIN1

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SET GLOBAL sql_mode=ANSI_QUOTES;
CREATE TABLE `worker` (
  `no_worker` INT NOT NULL AUTO_INCREMENT,
  `nama_lengkap` VARCHAR(50) NOT NULL,
  `kode_lokasi` VARCHAR(50) NOT NULL,
  `username` VARCHAR(50) NOT NULL,
  `password` VARCHAR(50) NOT NULL,
  `tgl_masuk` DATETIME NOT NULL,
  `id_level` INT NOT NULL,
  `id_status` INT NOT NULL,
  `id_kota_asal` INT NOT NULL,
  `id_kota_tujuan` INT NOT NULL,
  `no_tlp` INT NULL,
  PRIMARY KEY (`no_worker`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=latin1 AUTO_INCREMENT=5;
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SET GLOBAL sql_mode=ANSI_QUOTES;
CREATE TABLE `worker` (
  `no_worker` INT,
  `nama_lengkap` VARCHAR(50),
  `kode_lokasi` VARCHAR(50),
  `username` VARCHAR(50),
  `password` VARCHAR(50),
  `tgl_masuk` DATETIME,
  `id_level` INT,
  `id_status` INT,
  `id_kota_asal` INT,
  `id_kota_tujuan` INT,
  `no_tlp` INT
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=latin1 AUTO_INCREMENT=5;


[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
ALTER TABLE `mng_mstr_jabatan` ADD `no_jabatan` INT NULL DEFAULT NULL AFTER `nama_jabatan`; 
ALTER TABLE `mng_mstr_jabatan` ADD `is_active_status` TINYINT(1) NULL AFTER `id_level`;
ALTER TABLE `mng_mstr_jabatan` DROP `id_status`;
ALTER TABLE `mng_mstr_jabatan` DROP `id_kota_asal`;
ALTER TABLE `mng_mstr_jabatan` DROP `id_kota_tujuan`;
-- Please do the same for the previous table.
ALTER TABLE `mng_mstr_golongan` ADD `no_golongan` INT NULL DEFAULT NULL AFTER `nama_golongan`; 
ALTER TABLE `mng_mstr_golongan` ADD `is_active_status` TINYINT(1) NULL AFTER `id_level`;
ALTER TABLE `mng_mstr_golongan` DROP `id_status`;
ALTER TABLE `mng_mstr_golongan` DROP `id_kota`;
-- Please try to re-create the program above but do NOT change the table structure. Use sampleDB for the database name and make sure you know the table list by executing sampleDB.listTables(). You should only have one table, sampleDB.worker, which will now be used for this purpose.
ALTER TABLE `mng_mstr_jabatan` MODIFY `is_active_status` TINYINT(1) NULL AFTER `id_level`;
ALTER TABLE `mng_mstr_jabatan` MODIFY `tgl_masuk` DATETIME NOT NULL AFTER `nama_jabatan`;
ALTER TABLE `mng_mstr_jabatan` MODIFY `id_level` INT NOT NULL AFTER `nama_jabatan`;
ALTER TABLE `mng_mstr_jabatan` MODIFY `id
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SET GLOBAL sql_mode=ANSI_QUOTES, MYSQL_NOTES = ON, MYSQL_LOCK_WAIT=1, MYSQL_LOG_BIN=ON, SQL_SMALL_RESULT=ON, SQL_BIG_RESULT=ON, SQL_BUFFER_SIZE=2053, SQL_CACHE=OFF, SQL_CACHED_RESULT=DEFAULT, SQL_CALC_FOUND_ROWS=DEFAULT, SQL_CALC_DETAILED_AVG=0, SQL_BIG_SELECTS=18, SQL_BIG_TABLES=1, SQL_BUFFER_ALLOCATION=1887, SQL_NO_AUTO_CREATE_USER=1, SQL_CONNECT_TIMEOUT=60;
-- INSERT INTO `worker` (`id`,`nama_lengkap`,`email`,`jk`,`password`,`alamat`,`kota`,`provinsi`,`kode_pos`,`id_level`,`id_status`,`tgl_masuk`,`id_kota_asal`,`kota_tujuan`) VALUES (3208700041586, '<NAME>', '<EMAIL>', 'L', '4450ff1e01130d1a8e4d29c14632f2065e6db4cb', 'Pasuruan', 'Tebing Tinggi', 'Jawa Barat', '17511', 4, 2, '2012-12-10 15:35:08', 6, 8, '90193');
-- END of query -----------------------------------------------------
-- INSERT INTO `worker` (`id`,`nama_lengkap`,`email`,`jk`,`password`,`alamat`,`kota`,`provinsi`,`kode_pos`,`id_level`,`id_status`,`tgl_masuk`,`id_kota_asal`,`kota_tujuan`) VALUES (5633300018768, 'Ady', '<EMAIL
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SET GLOBAL sql_mode=ANSI_QUOTES;
CREATE TABLE `worker` (
  `no_worker` int(11) NOT NULL AUTO_INCREMENT,
  `nama_lengkap` varchar(30) NOT NULL,
  `kode_lokasi` varchar(30) NOT NULL,
  `username` varchar(30) NOT NULL,
  `password` varchar(30) NOT NULL,
  `tgl_masuk` datetime NOT NULL,
  `id_level` smallint(6) NOT NULL,
  `id_status` smallint(6) NOT NULL,
  `id_kota_asal` smallint(6) NOT NULL,
  `id_kota_tujuan` smallint(6) NOT NULL,
  `no_tlp` mediumint(7) NOT NULL,
  PRIMARY KEY (`no_worker`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
SELECT @username='';select @username=username();INSERT INTO `worker` (`no_worker`, `nama_lengkap`, `kode_lokasi`, `username`, `password`, `tgl_masuk`, `id_level`, `id_status`, `id_kota_asal`, `id_kota_tujuan`, `no_tlp`) VALUES
(1, 'Marta', '<PASSWORD>', '<PASSWORD>', '<PASSWORD>', '2000-05-13 13:54:48', 1, 1, 1, 1, 2, 9999),
(2, 'Amanda', 'd4fe2dd93a9d27192df185f7e275951c9f20cb60645974028a7f0b30e5f5901936', '<PASSWORD>', '1', '2000-05-13 
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SET GLOBAL sql_mode=ANSI_QUOTES;
CREATE TABLE `worker` (
  `no_worker` INT NOT NULL AUTO_INCREMENT,
  `nama_lengkap` CHAR(50) NOT NULL,
  `kode_lokasi` CHAR(50) NOT NULL,
  `username` CHAR(50) NOT NULL,
  `password` CHAR(50) NOT NULL,
  `tgl_masuk` DATETIME NOT NULL,
  `id_level` INT NOT NULL,
  `id_status` INT NOT NULL,
  `id_kota_asal` INT NOT NULL,
  `id_kota_tujuan` INT NOT NULL,
  `no_tlp` INT NULL,
  PRIMARY KEY (`no_worker`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=latin1 AUTO_INCREMENT=5;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SET GLOBAL sql_mode=ANSI_QUOTES;
CREATE TABLE `worker` (
  `no_worker` INT,
  `nama_lengkap` VARCHAR(50),
  `kode_lokasi` VARCHAR(50),
  `username` VARCHAR(50),
  `password` VARCHAR(50),
  `tgl_masuk` DATETIME,
  `id_level` INT,
  `id_status` INT,
  `id_kota_asal` INT,
  `id_kota_tujuan` INT,
  `no_tlp` INT
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=latin1 AUTO_INCREMENT=5;
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE `worker`;
CREATE TABLE `worker` (
  `no_worker` INT,
  `nama_lengkap` VARCHAR(50),
  `kode_lokasi` VARCHAR(50),
  `username` VARCHAR(50),
  `password` <PASSWORD>(<PASSWORD>),
  `tgl_masuk` DATETIME,
  `id_level` INT,
  `id_status` INT,
  `id_kota_asal` INT,
  `id_kota_tujuan` INT,
  `no_tlp` INT
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE `worker` (
  `worker.no_worker` INT,
  `nama_lengkap` VARCHAR(50),
  `kode_lokasi` VARCHAR(50),
  `username` VARCHAR(50),
  `password` VARCHAR(50),
  `tgl_masuk` DATETIME,
  `id_level` INT,
  `id_status` INT,
  `id_kota_asal` INT,
  `id_kota_tujuan` INT,
  `no_tlp` INT
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
ALTER TABLE `worker` CHANGE COLUMN `no_worker` `id_worker` INT, CHANGE COLUMN `kode_lokasi` `id_kota_asal` INT;
ALTER TABLE `worker` CHANGE COLUMN `kode_lokasi` `id_kota_tujuan` INT;
ALTER TABLE `worker` CHANGE COLUMN `tgl_masuk` `tgl_masuk` DATETIME;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SET GLOBAL sql_mode=ANSI_QUOTES;
CREATE TABLE employee (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `first_name` varchar(250) NOT NULL,
  `last_name` varchar(250) NOT NULL,
  `gender` varchar(30) DEFAULT NULL,
  `birthdate` date NOT NULL,
  `joining_date` date NOT NULL,
  `phone` char(12) NOT NULL,
  `email` varchar(125) NOT NULL,
  `salary` decimal(10,2) NOT NULL,
  `gender_id` int(11) DEFAULT NULL,
  `position_id` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8;
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SET GLOBAL sql_mode=ANSI_QUOTES;
CREATE TABLE employee (
  `no_ktp` int(11) NOT NULL AUTO_INCREMENT,
  `nama` varchar(500) NOT NULL,
  `id_role` int(11) DEFAULT NULL,
  `alamat` varchar(100) DEFAULT NULL,
  `email` varchar(100) DEFAULT NULL,
  `id_kota_asal` int(11) DEFAULT NULL,
  `id_kota_tujuan` int(11) DEFAULT NULL,
  `id_provinsi` int(11) DEFAULT NULL,
  `telepon` varchar(15) DEFAULT NULL,
  `pendidikan` varchar(50) DEFAULT NULL,
  `pengalaman` varchar(50) DEFAULT NULL,
  PRIMARY KEY (`no_ktp`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;
*/
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SET GLOBAL sql_mode=ANSI_QUOTES;
CREATE TABLE `worker AS` (
  `no_worker` INT,
  `nama_lengkap` VARCHAR(50),
  `kode_lokasi` VARCHAR(50),
  `username` VARCHAR(50),
  `password` VARCHAR(50),
  `tgl_masuk` DATETIME,
  `id_level` INT,
  `id_status` INT,
  `id_kota_asal` INT,
  `id_kota_tujuan` INT,
  `no_tlp` INT
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=latin1 AUTO_INCREMENT=5;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SET GLOBAL sql_mode=ANSI_QUOTES;  
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SET GLOBAL sql_mode=ANSI_QUOTES;
CREATE TABLE `worker` (
  `no_worker` INT,
  `nama_lengkap` VARCHAR(50),
  `kode_lokasi` VARCHAR(50),
  `username` VARCHAR(50),
  `password` VARCHAR(50),
  `tgl_masuk` DATETIME,
  `id_level` INT,
  `id_status` INT,
  `id_kota_asal` INT,
  `id_kota_tujuan` INT,
  `no_tlp` INT
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=latin1 AUTO_INCREMENT=5; */


[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SET GLOBAL sql_mode=ANSI_QUOTES;
CREATE TABLE `worker AS` (
  `no_worker` INT,
  `nama_lengkap` VARCHAR(50),
  `kode_lokasi` VARCHAR(50),
  `username` VARCHAR(50),
  `password` VARCHAR(50),
  `tgl_masuk` DATETIME,
  `id_level` INT,
  `id_status` INT,
  `id_kota_asal` INT,
  `id_kota_tujuan` INT,
  `no_tlp` INT
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=latin1 AUTO_INCREMENT=5;
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SET GLOBAL sql_mode=ANSI_QUOTES;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SET AUTOCOMMIT = 0;
DELETE FROM `worker`;
COMMIT;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SET GLOBAL sql_mode=ANSI_QUOTES;
CREATE TABLE `worker AS` (
  `no_worker` INT AUTO_INCREMENT,
  `nama_lengkap` VARCHAR(50) NOT NULL,
  `kode_lokasi` VARCHAR(50) NOT NULL,
  `username` VARCHAR(50) NOT NULL,
  `password` VARCHAR(255) NOT NULL,
  `tgl_masuk` DATETIME NOT NULL,
  `id_level` INT NOT NULL,
  `id_status` INT NOT NULL,
  `id_kota_asal` INT NOT NULL,
  `id_kota_tujuan` INT NOT NULL,
  `no_tlp` INT,
  FOREIGN KEY (`id_kota_asal`) REFERENCES `kota_asal` (`id_kota_asal`) ON DELETE SET NULL,
  FOREIGN KEY (`id_kota_tujuan`) REFERENCES `kota_tujuan` (`id_kota_tujuan`) ON DELETE SET NULL,
  PRIMARY KEY (`no_worker`)
) ENGINE=InnoDB;
INSERT INTO `worker` (`no_worker`, `nama_lengkap`, `kode_lokasi`, `username`, `password`, `tgl_masuk`, `id_level`, `id_status`, `id_kota_asal`, `id_kota_tujuan`, `no_tlp`) VALUES
(1, 'Administrator', '20200', 'root', <PASSWORD>', '2020-04-01 00:00:00', 1, 1, NULL, NULL, NULL),
(2, '<NAME>', '20201', 'admin121', <PASSWORD>', '2020-04-01 00:00:00', 2, 1, NULL, NULL, NULL),
(3, 'Sekarang', '20201', 'admin121', '4<PASSWORD>c6b75b9464c53<PASSWORD>', '2020-04-
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SET GLOBAL sql_mode=ANSI_QUOTES;
CREATE TABLE `worker AS` (
  `no_worker` INT,
  `nama_lengkap` VARCHAR(50),
  `kode_lokasi` VARCHAR(50),
  `username` VARCHAR(50),
  `password` VARCHAR(50),
  `tgl_masuk` DATETIME,
  `id_level` INT,
  `id_status` INT,
  `id_kota_asal` INT,
  `id_kota_tujuan` INT,
  `no_tlp` INT
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
DROP TABLE worker;
-- Please drop the table. We have used ENGINE=InnoDB, so it is equivalent to a table with the same syntax (with a table definition).
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SET GLOBAL sql_mode=ANSI_QUOTES;
CREATE TABLE `worker AS` (
  `no_worker` INT,
  `nama_lengkap` VARCHAR(50),
  `kode_lokasi` VARCHAR(50),
  `username` VARCHAR(50),
  `password` VARCHAR(50),
  `tgl_masuk` DATETIME,
  `id_level` INT,
  `id_status` INT,
  `id_kota_asal` INT,
  `id_kota_tujuan` INT,
  `no_tlp` INT
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
CREATE table barang (no_nota int not null, id_user int not null, type_barang varchar(40), total_harga float not null );
CREATE table detail_nota (id_nota int not null, id_barang int not null, jumlah int not null, description varchar(30));
insert into detail_nota (id_nota,id_barang,jumlah) values (1,18,4);
insert into detail_nota (id_nota,id_barang,jumlah) values (2,29,3);
insert into detail_nota (id_nota,id_barang,jumlah) values
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;


[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SET GLOBAL sql_mode=ANSI_QUOTES;
CREATE TABLE `worker AS` (
  `no_worker` INT,
  `nama_lengkap` VARCHAR(50),
  `kode_lokasi` VARCHAR(50),
  `username` VARCHAR(50),
  `password` VARCHAR(50),
  `tgl_masuk` DATETIME,
  `id_level` INT,
  `id_status` INT,
  `id_kota_asal` INT,
  `id_kota_tujuan` INT,
  `no_tlp` INT
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=latin1 AUTO_INCREMENT=5;
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
USE sampleDB;
-- Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database. You need to create new tables to perform operations. In the end, drop all tables you created.

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE tampil(
    id INT AUTO_INCREMENT PRIMARY KEY,
    id_kota INT
);
CREATE TABLE `tampil_kota AS` (
  `id` INTEGER,
  `nama_kota` VARCHAR(128),
  `provinsi` VARCHAR(256),
  `koordinat` MEDIUMTEXT
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_general_ci;
INSERT INTO `tampil_kota` (`id`, `nama_kota`, `provinsi`, `koordinat`) VALUES
(1, 'Tanjung Karang', 'Provinsi Jawa Tengah', '{\"latitude\": -1.0040344,\"longitude\": 116.4007242}'),
(2, 'Tegalrejo', 'Provinsi Jawa Tengah', '{\"latitude\": -1.0033728,\"longitude\": 116.4007653}'),
(4, 'Tanjung Rejo', 'Provinsi Jawa Tengah', '{\"latitude\": -1.0067686,\"longitude\": 116.4003160}');
COMMIT;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS tunjangan;
CREATE TABLE tunjangan (
    `id` INT,
    `nama_jabatan` VARCHAR(50),
    `gelar_depan` VARCHAR(50),
    `gelar_belakang` VARCHAR(50),
    `gaji_bersih_pokok` BIT(1),
    `is_active` BIT(1)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

CREATE TABLE usaha (
    `id_usaha` INT,
    `nama` VARCHAR(50),
    `alamat` VARCHAR(50),
    `kode_pos` INT,
    `jenis_usaha` VARCHAR(50),
    `status_usaha` BIT(1)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

CREATE TABLE kota (
    `id_kota` INT,
    `nama_kota` VARCHAR(50),
    `id_provinsi` INT
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

SHOW TABLES;
CREATE TABLE `penggarage AS` (
  `id_penggarage` INT AUTO_INCREMENT,
  `id_pengguna` INT,
  `id_kota` INT,
  `tanggal_masuk` DATETIME,
  `total_pengambilans` INT,
  `total_selesai` INT,
  `jumlah_tansen` INT,
  `keterangan` VARCHAR(255),
  PRIMARY KEY (`id_penggarage`),
  KEY `fk_pengguna` (`id_pengguna`),
  KEY `fk_kota` (`id_kota`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

CREATE TABLE pengguna (
    `id_pengguna` INT,
    `id_level` INT,
    `username` VARCHAR(50),
    `password` VARCHAR(50),
    `date_created` DATETIME,
    `date_modified` TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
 
CREATE TABLE table_name(
  'column_name' type PRIMARY KEY; column_name...
);

DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SET GLOBAL sql_mode=ANSI_QUOTES;
 
CREATE DATABASE IF NOT EXISTS sampleDB_2; USE sampleDB_2;
SET GLOBAL sql_mode=ANSI_QUOTES;

-- In this section, you will create a simple INSERT/SELECT/UPDATE/DELETE statement that includes a JOIN and a WHERE clause (using a temporary table). You will also explore the different options to access the data.

-- Please insert the following records into worker table in the table:
-- a. no_worker, nama_lengkap, kode_lokasi, username, password, tgl_masuk, id_level, id_status, id_kota_asal, id_kota_tujuan, no_tlp.

INSERT INTO worker VALUES (1, 'Hilmi Aldana', 'Depok', 'hilmi', '92449c91bc80a757f91b6dd7f8f04ab8', '0000-00-00 00:00:00.000', 2, 4, 25, 47, 0, 0),
(2, '<NAME>', 'Depok', 'alham', 'c2001953e40b9cf24b562010ab35fc2f', '0000-00-00 00:00:00.000', 2, 4, 25, 47, 0, 0),
(3, '<NAME>', 'Depok', 'amir', '117f53586f3e5fa522893e7b7490845b', '0000-00-00 00:00:00.000', 2, 4, 25, 47, 0, 0),
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SET GLOBAL sql_mode='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';
CREATE TABLE `worker_semua` (id INT PRIMARY KEY AUTO_INCREMENT, no_worker INT, nama_lengkap DATE, kode_lokasi DATE, username DATE, password DATE, tgl_masuk DATE, id_level INT, id_status INT, id_kota_asal INT, id_kota_tujuan INT, no_tlp INT);
CREATE TABLE `kota_asal` (id INT PRIMARY KEY AUTO_INCREMENT, kode_kota_asal INT, kode_wilayah DATE, nama_kota_asal_lama DATE, nama_kota_asal INT);
CREATE TABLE `kota_tujuan` (id INT PRIMARY KEY AUTO_INCREMENT, kode_kota_tujuan INT, kode_wilayah DATE, nama_kota_tujuan_lama DATE, nama_kota_tujuan INT);
CREATE TABLE `status` (id INT PRIMARY KEY AUTO_INCREMENT, id_status INT, nama_status INT);
CREATE TABLE `level` (id INT PRIMARY KEY AUTO_INCREMENT, id_level INT, nama_level INT);
INSERT INTO `worker`(`no_worker`, `nama_lengkap`, `kode_lokasi`, `username`, `password`, `tgl_masuk`, `id_level`, `id_status`, `id_kota_asal`, `id_kota_tujuan`, `no_tlp`) VALUES ('1', '<NAME>', 'KAB', 'admin', '<PASSWORD>', '2015-08-13 14:14:21', '5', '1', '3', null, null, '081207008484');
INSERT INTO `worker`(`no_worker`, `nama_lengkap`, `kode_lokasi`, `username`, `password`, `tgl_masuk`, `id_level`, `id_status`, `id_kota_as
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
USE sampleDB;
-- Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database. You need to create new tables to perform operations. In the end, drop all tables you created.
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

DROP TABLE IF EXISTS users;
DROP TABLE IF EXISTS notes;


CREATE TABLE `users` (
    `id` INT(255) UNSIGNED AUTO_INCREMENT PRIMARY KEY NOT NULL,
    `first_name` VARCHAR(255) NOT NULL,
    `last_name` VARCHAR(255) NOT NULL,
    `password` VARCHAR(255) NOT NULL,
    `status` TINYINT(1) DEFAULT '1',
    `email` DOUBLE(10,2) NOT NULL UNIQUE,
    `contact_no` VARCHAR(13) DEFAULT NULL
);


CREATE TABLE `notes` (
    `note_id` int(11) NOT NULL PRIMARY KEY,
    `user_id` int(11) NOT NULL,
    `date` DATETIME NOT NULL,
    `content` TEXT NOT NULL
);


ALTER TABLE users MODIFY `first_name` varchar(255) default NULL;
CREATE TABLE `test` (
    `id` int (11) NOT NULL AUTO_INCREMENT,
    `user_id` int (11) NOT NULL,
    `message` varchar (50) COLLATE utf8_unicode_ci NOT NULL,
    `date` DATETIME NOT NULL,
    PRIMARY KEY (`id`),
    KEY `test_id_idx` (`id`),
    KEY `test_user_id_idx` (`user_id`)
);
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS test1 (id INT, name VARCHAR(30));
INSERT INTO test1 (id, name) VALUES
(1, 'A'),
(2, 'B'),
(3, 'C');
-- You need to create indexes, alter them, and truncate the table to show the performance.
ALTER INDEX test1_id RENAME TO renamedIndex1;
ALTER TABLE test1 ADD index1(name);
UPDATE test1 ALTER INDEX renamedIndex1 NAME to newIndex1;
UPDATE test1 SET name='D'. FORCE WHERE name = 'B';
CREATE TABLE IF NOT EXISTS test2 (id INT NOT NULL, name VARCHAR(30));
ALTER TABLE test2 ADD INDEX (name);
INSERT INTO test2 SELECT id, name FROM test1;
ALTER TABLE test2 RENAME INDEX name to index2;
-- You will notice that the change was successful only on some rows whereas it was successful on all rows (i.e., when the newIndex was used). So, you can think of a table as not changeable (i.e., readonly).


 
CREATE PROCEDURE testPro1 (IN id INT)
BEGIN
   DECLARE a INT=1;
   IF (id = 1) THEN
      INSERT INTO TABLE1 VALUES(1,'A');
      INSERT INTO TABLE1 VALUES(1,'B');
      INSERT INTO TABLE2 VALUES (id, 'AAA');
   ELSE
      INSERT INTO TABLE1 VALUES(id,'D');
      INSERT INTO TABLE2 VALUES (id, 'BB');
   END IF;
   RETURN a;
   END;
CALL testPro1(3);
-- You need to modify this program so it will only print value back to the terminal for the second call.
CREATE PROCEDURE testPro2 (IN id INT)
BEGIN
   DECLARE b INT;
   SELECT name FROM table WHERE id=id INTO b;
   RETURN b;
   END;
CALL testPro2(3);
SELECT * FROM TABLE2;
UPDATE TABLE2 SET name='A' WHERE id=3;
CREATE PROCEDURE testPro3 ()
BEGIN
   DECLARE c INT;
   SELECT name FROM table WHERE id FROM table1 INTO c;
   RETURN c;
   END;
CALL testPro3();

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employee;
CREATE TABLE IF NOT EXISTS employee (employee_id INT AUTO_INCREMENT,name VARCHAR(30),age INT,salary INT);
INSERT INTO employee;
UPDATE employ_id SET name = 'New Name';
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- The next two lines are equivalent to the previous command
CREATE TABLE IF NOT EXISTS table1 (id INT(11));
 
INSERT INTO table1 (id) VALUES (1);
 
CREATE TABLE IF NOT EXISTS table2 (id INT(11), date INT(11));
 
INSERT INTO table2 (id, date) VALUES (0,0);
 
INSERT INTO table2 (id, date) VALUES (2,4);
 
INSERT INTO table2 (id, date) VALUES (4,6);
 
SELECT * FROM table2 ORDER BY id;
 
DROP TABLE IF EXISTS table2;
 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS table1 (id INT(11));
INSERT INTO table1 (id) VALUES (1);
CREATE TABLE IF NOT EXISTS table2 (id INT(11), date INT(11));
INSERT INTO table2 (id, date) VALUES (0,NULL);
INSERT INTO table2 (id, date) VALUES (2,4);
INSERT INTO table2 (id, date) VALUES (4,6);
 
 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS table1 (id INT(11));
INSERT INTO table1 (id) VALUES (1);
CREATE TABLE IF NOT EXISTS table2 (id INT(11), date INT(11));
INSERT INTO table2 (id, date) VALUES (0,NULL);
INSERT INTO table2 (id, date) VALUES (1,NULL);
INSERT INTO table2 (id, date) VALUES (2,4);
INSERT INTO table2 (id, date) VALUES (4,6);
CREATE TABLE IF NOT EXISTS table3 (id INT(11), date INT(11));
INSERT INTO table3 (id, date) VALUES (1,NULL);
INSERT INTO table3 (id, date) VALUES (2,4);
INSERT INTO table3 (id, date) VALUES (4,6);
/* Please create a program to do the following tasks:

1. Find the date with max id, return this date.
2. Find the date with min id, return this date.
3. Find the year and max date for each day of week, in that order.
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE USER 'john'; CREATE USER 'doe'; CREATE USER'scott'; GRANT all PRIVILEGES ON ALL TABLES IN SCHEMA `sample_` to `john`; GRANT all PRIVILEGES ON ALL TABLES IN SCHEMA `sample_` to `doe`; GRANT all PRIVILEGES ON ALL TABLES IN SCHEMA `sample_` to `scott`; GRANT view on sample_db_info to `john`; GRANT select on sample_db_info to 'john'; GRANT select on sample_db_info to 'doe'; DROP USER `doe`; DROP USER `john`; DROP USER `scott`;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- The next two lines are equivalent to the previous command
CREATE TABLE IF NOT EXISTS table1 (id INT(11));
INSERT INTO table1 (id) VALUES (1);
CREATE TABLE IF NOT EXISTS table2 (id INT(11), date INT(11));
INSERT INTO table2 (id, date) VALUES (0,0);
INSERT INTO table2 (id, date) VALUES (2,4);
INSERT INTO table2 (id, date) VALUES (4,6);
SELECT * FROM table2 ORDER BY id;
DROP TABLE IF EXISTS table2;
CREATE TABLE IF NOT EXISTS table1 (id INT(11));
INSERT INTO table1 (id) VALUES (1);
CREATE TABLE IF NOT EXISTS table2 (id INT(11), date INT(11));
INSERT INTO table2 (id, date) VALUES (0,NULL);
INSERT INTO table2 (id, date) VALUES (2,4);
INSERT INTO table2 (id, date) VALUES (4,6);
CREATE TABLE IF NOT EXISTS table1 (id INT(11));
INSERT INTO table1 (id) VALUES (1);
CREATE TABLE IF NOT EXISTS table2 (id INT(11), date INT(11));
INSERT INTO table2 (id, date) VALUES (0,NULL);
INSERT INTO table2 (id, date) VALUES (1,NULL);
INSERT INTO table2 (id, date) VALUES (2,4);
INSERT INTO table2 (id, date) VALUES (4,6);
CREATE TABLE IF NOT EXISTS table3 (id INT(11), date INT(11));
INSERT INTO table3 (id, date) VALUES (1,NULL);
INSERT INTO table3 (id, date) VALUES (2,4);
INSERT INTO table3 (id, date) VALUES (4,6);
/* Please create a program to do the following tasks:
1. Find the date with max id, return this date.
2. Find the date with min id, return this date.
3. Find the year and max date for each day of week, in that order.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
 
ALTER TABLE table3 MODIFY COLUMN date INT(11);
 
INSERT INTO table3 (id,date) VALUES (1,NULL);
 

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS table1 (id INT(11));
INSERT INTO table1 (id) VALUES (1);
INSERT INTO table1 (id) VALUES (19);
INSERT INTO table1 (id) VALUES (9);
CREATE TABLE IF NOT EXISTS table2 (id INT(11), date INT(11));
INSERT INTO table2 (id, date) VALUES (0,0);
INSERT INTO table2 (id, date) VALUES
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS table3 (id INT(20));
INSERT INTO table3 (id) VALUES (1);
INSERT INTO table3 (id) VALUES (2);
INSERT INTO table3 (id) VALUES (3);
INSERT INTO table3 (id) VALUES (4);
INSERT INTO table3 (id) VALUES (5);
CREATE TABLE IF NOT EXISTS table4 (id INT(10), field1 INT(10), field2 INT
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS table1;
-- Use this table if the column already exists.
-- Use this table if you have tables which have same names or same column names.
CREATE TABLE IF NOT EXISTS table1 (id INT(11), date INT(11), name VARCHAR(20));
INSERT INTO table1 (id, date, name) VALUES (3, NULL, "Moscow");
INSERT INTO table1 (id, date, name) VALUES
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
 
CREATE TABLE IF NOT EXISTS weekdays (id INT AUTO_INCREMENT, value INT);
 
INSERT INTO weekdays (id,value) VALUES (1, 1);
INSERT INTO weekdays
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
ALTER TABLE table3 MODIFY COLUMN date INT(11);
INSERT INTO table3 (id,date) VALUES (1,NULL);
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
ALTER TABLE table3 ADD COLUMN int11 INT(11);
INSERT INTO table3 (int11) SELECT DATE_FORMAT(NOW(),"%m-%d-%Y");

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
ALTER TABLE table4 MODIFY COLUMN int2 INT;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

 
CREATE TABLE test(
id INT(11) NOT NULL AUTO_INCREMENT,
name VARCHAR(100) NOT NULL,
PRIMARY KEY(id),
CONSTRAINT fk1 FOREIGN KEY(id) REFERENCES test2(test_id)
);

CREATE TABLE test2(
test_id INTEGER PRIMARY KEY,
name1 INT(11) NOT NULL,
name2 INT(11) NOT NULL
);

INSERT INTO test2(id,name1,name2)
VALUES(1,1,3);

INSERT INTO test2(id,name1,name2)
VALUES(2,2,6);

INSERT INTO test2(test_id,name1,name2)
VALUES(1,1,3);

INSERT INTO test2(test_id,name1,name2)
VALUES(2,2,6);

CREATE TABLE table1(
id INT(11) NOT NULL AUTO_INCREMENT,
firstname VARCHAR(20) NOT NULL,
lastname VARCHAR(20) NULL,
email VARCHAR(40) NOT NULL,
phone VARCHAR(40) NULL,
address VARCHAR(40),
city VARCHAR(40),
year INT(11),
country VARCHAR(30),
zip INT(11),
PRIMARY KEY(id)
);

CREATE TABLE table2(
id INT(11) NOT NULL AUTO_INCREMENT,
name INT(11) NOT NULL,
PRIMARY KEY(id)
);

 

 
insert into table2 select country,(select max(year) from table2) from table1 where year < 2000;
select * from table2 where name=3;
update table1 set phone=NULL where email='<EMAIL>';
update table2 set name=6 where name=3;

/* Replace the max() value of year with
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
alter table table3 ADD COLUMN a INT;

 

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
ALTER TABLE table1 MODIFY column2 TINYINT(2);
INSERT INTO table1 (id,column2) VALUES (1,NULL);

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
alter table table3 ADD COLUMN a INT;
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

DROP TABLE IF EXISTS table3;



[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
alter table table3 MODIFY A INT;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE table1 (name VARCHAR(10); age INT);
INSERT INTO TABLE1 VALUES ("John", 22);
INSERT INTO TABLE1 VALUES ("Jane", 25);
INSERT INTO TABLE1 VALUES ("Mike", 35);

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
alter table table2 ADD COLUMN c CHAR(2);
drop table table2;
drop table sampleDB.table2;
drop table sampleDB.table3;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- CREATE TABLE is used in almost the same way as INSERT. You have to pass the table name first before the rest of INSERT query.
insert into table1 values(1, 9, '20 February, 1983');
insert into table1 values(2, 10, '01 January, 1980');
insert into table1 values(3, 9, '01 February, 1985');
-- The order of table column names does not matter. If the columns were not in a natural order, it may affect a result.
-- INSERT statement does not return the inserted values, but rather the rows affected.

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- CREATE TABLE is used in almost the same way as INSERT. You have to pass the table name first before the rest of INSERT query.
insert into table1 values(1, 9, '20 February, 1983');
insert into table1 values(2, 10, '01 January, 1980');
insert into table1 values(3, 9, '01 February, 1985');
-- The order of table column names does not matter. If the columns were not in a natural order, it may affect a result.
-- INSERT statement does not return the inserted values, but rather the rows affected.
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
insert into table1 (id, first_name, last_name) values(1, 'Andrew', 'Chuck');
insert into table1 (id, first_name, last_name) values(2, 'Ryan', 'Stevenson');
insert into table1 (id, first_name, last_name) values(3, 'David', 'Wilkin');
INSERT INTO user1 (user_name, first_name, last_name, email_id) VALUES ('Admin', 'Administrator', 'User', '<EMAIL>');
-- Please write a query to check if the Admin user exists in the database and display the user information.
-- Please modify the query as per question. Use JOIN to access two tables together and do SQL features and JOIN. Do not use ORDER BY statement on two tables that have the same columns.
SELECT * FROM user1 WHERE `user_name`='Admin';

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
drop table1;
create table1
(
    id integer primary key,
    name varchar(50),
    birthdate date
);
commit
set autocommit=0;
-- To delete table you will have 2 options.
-- 1. using the drop table command you can delete the data.
-- 2. You have to delete the data manually.
drop table1;
insert into table1 values(1, 'abc', '01 January, 1986');
-- Now your data should be as below.
-- 1.1 | | |
-- 1.2 | 1 | abc | 01 January, 1986
-- 1.3 | 1 | abc | 01 January, 1986
-- 1.4 | 1 | abc | 01 January, 1986
drop table1;
-- The way to drop a table is using DROP TABLE statement.
-- You have to declare the table first.
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;DROP TABLE IF EXISTS table5;
-- The DROP TABLE is quite helpful when you try to avoid data loss.
-- It can also work in case of data corruption. To avoid it, you need to commit and then drop the table and reopen it again.
create table table5
(
    id integer primary key,
    name varchar(50),
    birthdate date
);
insert into table5 values(1, 'abc', '01 January, 1989');
insert into table5 values(2, 'xyz', '01 December, 1990');
commit
set autocommit=0;
drop table table5;
create table5
(
    id integer primary key,
    name varchar(50),
    birthdate date
);
-- The data is still there.
-- Now you need to drop the entire database and reopen it.
use sampledb;
set foreign_key_checks=1;
drop database sampledb;
create database sampledb;
use sampledb;
set foreign_key_checks=0;
--
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
create table table1 like table2;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
insert into table1 (column1, column2, column3) values (3, 10, '01 Feb 1985');

-- The data type COLUMN_NAME has a very important and important purpose.
-- All the numbers are treated as strings. If you decide to use them as integers, there may be a performance penalty.
-- If you decide to use them as floating point numbers, you should consider the size of your columns. 
-- As a rule of thumb, the size should be larger or equal to the string representation.
-- A user may change COLUMN_NAME to the string representation of another value in case he/she needs to work on it. 
-- For example, when performing the addition of two floating point numbers, the two values may be in the range of the representation.
-- As a rule of thumb, a user may use the maximum size of the database, the number of characters in the numeric column, and/or the string length column. 
-- Please find the following picture to have an idea of what the data types look like.
-- In the picture, you can notice how some data types are converted to strings. 
-- Some special characters are converted and are written at the start or end of the string.

CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS table2;
DROP TABLE IF EXISTS table3;
DROP TABLE IF EXISTS table1;
DROP DATABASE IF EXISTS sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
insert into table1 values(3, 9, '01 November, 1985');
 


SELECT COUNT(*) FROM table1;
* Unnamed Result set :
+-----------+
| COUNT(*)  |
+-----------+
| 3         |
+-----------+

create table table1(id int, value int);
insert into table1 select * from temp;

SELECT COUNT(*) FROM table1;
* Unnamed Result set:
+-----------+
| COUNT(*)  |
+-----------+
| 1         |
+-----------+

SELECT value FROM table1 WHERE id=3;
* Unnamed Result set:
+-----------+
| value     |
+-----------+
| 02/01/1983 |
+-----------+

SELECT * FROM table1 WHERE id=3;
+-----+------+--------+
| id  | value | table1 |
+-----+------+--------+
| 3   | 02    |   NULL |
+-----+------+--------+
1 row in set (0.02 sec)

ALTER TABLE table1 ALTER id SET DEFAULT 0;

SELECT COUNT(*) FROM table1;
* Unnamed Result set:
+-----------+
| COUNT(*)  |
+-----------+
| 2         |
+-----------+


[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- CREATE TABLE is used in almost the same way as INSERT. You have to pass the table name first before the rest of INSERT query.
insert into table1 values(1, 9, '20 February, 1983');
insert into table1 values(2, 10, '01 January, 1980');
insert into table1 values(3, 9, '01 February, 1985');
-- The order of table column names does not matter. If the columns were not in a natural order, it may affect a result.
-- INSERT statement does not return the inserted values, but rather the rows affected.
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS table1;
CREATE TABLE table1 (num INT PRIMARY KEY, year INT, date DATE);
INSERT INTO table1 VALUES (1,2021, '29 September 1981');
INSERT INTO table1 VALUES (2,2020, '12 April 1982');
INSERT INTO table1 VALUES (3,2021, '22 July 1983');
INSERT INTO table1 VALUES (4,2020, '28 September 1990');
INSERT INTO table1 VALUES (5,2021, '21 December 1990');
UPDATE table1 SET year=2020 WHERE date='01 January 1980';
 
CREATE DATABASE IF NOT EXISTS sampleDB WITH 5 TABLESPACE.
RENAME TABLE table2 TO table_name.
CREATE TABLE sample_table (column_name VARCHAR(30));
DROP DATABASE sampleDB;

 

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE users (Id int(11), FName varchar(50), LName varchar(50), Email varchar(50));
CREATE TABLE employees (Id int(11), FName varchar(50), LName varchar(50), Email varchar(50), HireDate date, FKey int(11), MKey int(11), ManagerId int(11));

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
drop table table1;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- Create a table that is named like table2 using table1 as it's primary key
SET FOREIGN_KEY_CHECKS=0;
create table table2(
  id INT NOT NULL,
  data INT NOT NULL,
  name MEDIUMTEXT NULL,
  constraint id_pk PRIMARY KEY (id)
);
SET FOREIGN_KEY_CHECKS=1; -- To make sure that our Foreign Key constraints are enforced
INSERT INTO TABLE2 (id, data) VALUES (1,9); INSERT INTO TABLE2 (id, data) VALUES (2,10); INSERT INTO TABLE2 (id, data) VALUES (3,9);
SELECT * FROM table2; DROP TABLE IF EXISTS SAMPLE_TABLE;
-- As we do not need to create the database and tables, we drop it all at once
DROP DATABASE IF EXISTS sampleDB;


INSERT INTO TABLE2 (id, data) VALUES (4,9); INSERT INTO TABLE2 (id, data) VALUES (5,10); INSERT INTO TABLE2 (id, data) VALUES (6,9);
SELECT * FROM table2; DROP TABLE IF EXISTS sample_table;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
use mysql;
drop database test;
DROP DATABASE;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
drop table table1;
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
 
ALTER TABLE table1 MODIFY COLUMN s1 text DEFAULT '';
ALTER TABLE table1 MODIFY COLUMN s2 int DEFAULT 123456;
 
SELECT * FROM table2
 
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS table1( column1 INT, column2 INT, PRIMARY KEY (column1) );
INSERT INTO table1( column1, column2 ) VALUES( 1, 1 ), ( 2, 2 );
DROP TABLE table1;
-- Select statements use the same notation as above, but without creating any tables. You can, however, easily select a single column, for example:
SELECT column1
FROM table1
WHERE column1 = 1;
DROP TABLE table1;
-- You don't need to create a database first, but you do anyway – you can simply create tables in your other databases, but in that case you will also have to use the USE keyword before the table name.
DROP DATABASE IF EXISTS sampleDB; USE mysql;
create table table2( col1 int, col2 int);
INSERT INTO table2( col1, col2 ) VALUES( 1, 1 );
SELECT *
FROM table2;
-- In this case, we do not have to create the table first.
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO table2
values('name1', 'value1'),
('name2', 'value2');
show tables; 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO table1 (id, name, value)
values (1, 'name', 'value'),
(2, 'name', 'value'),
(3, 'name', 'value'),
(4, 'name', 'value'),
(5, 'name', 'value'),
(6, 'name', 'value');
INSERT INTO table2
values('name22', 'value31'),
('name23', 'value32');
show tables;
drop table table1;
drop table table2;
drop database sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE table1 ( a int, b int, c int);
-- INSERT some data into the table1
INSERT INTO table1 values (1,1,1), (2,3,5), (3,5,10)
-- SELECT the data stored in the table1
SELECT * FROM table1;
-- CHANGE all data in the table1, and update all the rows in the
-- table1 table to that which becomes new data
UPDATE table1 SET b=b-1;
UPDATE table1 SET c=c+5;
-- SELECT the data stored in the table1
SELECT * FROM table1;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

CREATE TABLE table1 (
    c1 INT,
    c2 VARCHAR,
    c3 INT,
    c4 INT,
    c5 INT
);

CREATE TABLE table2 (
    c1 INT KEY,
    c2 VARCHAR,
    c3 INT,
    c4 INT,
    c5 INT
);

CREATE TABLE table_3 (
    c1 INT KEY,
    c2 INT,
    c3 INT,
    c4 INT,
    c5 INT
);
CREATE TABLE table_30 (
    c1 INT,
    c2 SMALLINT,
    c3 INT,
    c4 CHAR(5),
    c5 INT,
    c6 INT,
    c7 DATE,
    c8 INT

);
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
drop table table1;
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
ALTER TABLE table1 MODIFY c1 int;
ALTER TABLE table1 MODIFY c2 INT NULL;
  ALTER TABLE table1 MODIFY c3 DECIMAL(2,1);
  
  INSERT INTO table1 (c1,c2,c3) VALUES (1,3,5.5);
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

create table table1 (
  "id" int primary key auto_increment,
  "x" int(5),
  "y" int(5)
);
INSERT INTO table1 values (20,13,86);

*-- SQL injections is one of the most common and dangerous SQL injections. Please make sure that you create a database with sufficient privileges and test the database for several different attacks. For instance: CREATE DATABASE?with?? as test. Be sure and test the database without these attack vectors. Also you must ensure that the data you want to use do get modified properly (the query shouldn't contain a table name). If you get the query wrong, it might not be the same database of course, so be careful. Last but not least, don't create databases in your production environment, so that only your devs can access it.--*/

CREATE DATABASE IF NOT EXISTS?? as test; USE test;
GRANT ALL privileges on *.* to?test@localhost?port=3306;

GRANT SELECT,INSERT,DELETE,UPDATE,UPDATE STATISTICS,CREATE TEMPORARY TABLES,EXECUTE ON sampleDB.* to?test@localhost?port=3306?max_allowed_packet=0;


















[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
create table table1 ( column1 int, column2 text DEFAULT 'default' ) ENGINE=InnoDB;
INSERT INTO table1 (column1) VALUES (1);
INSERT INTO table1 (column1, column2) VALUES (1,'new');
INSERT INTO table1 (column1, column2) VALUES (1,'new');
INSERT INTO table1 (column1, column2) VALUES (1,'new');
INSERT INTO table1 (column1) VALUES (1);
-- Please drop all tables created during mutated program.
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
create table table1 ( a date);

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
delete from table1;
drop table table1;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
delete from table1;
drop table table1;
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
create table table1 (
col1 INTEGER AUTO_INCREMENT PRIMARY KEY,
col2 CHAR(100) NOT NULL UNIQUE,
col3 MEDIUMTEXT DEFAULT NULL,
col4 MEDIUMBLOB DEFAULT NULL
);
insert into table1 values(0,'column 1',0x12,0x2321);
select * from table1;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
insert into table1 values ('Hello');


[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
create table table1 (id int not null primary key auto_increment, field1 varchar(500), field2 boolean, field3 bigint, field4 date);
-- Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created.
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS table1(id INT, name VARCHAR(40));
ALTER TABLE `table1` ADD COLUMN `a_column` SET NULL;
UPDATE `table1` SET a_column='';
ALTER TABLE `table1` DROP COLUMN `a_column`;
DROP TABLE `table1`;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
 

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
delete from table1;
drop table table1;
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- CREATE TABLE using the ALTER keyword
-- For inserting a series of data, you'll need to use IN and ADD
-- For DDL statements that do not create tables, you can skip table creation using the CREATE directive

-- It would be recommended to perform basic insert, select, update and delete operations using INSERT queries and use ALTER syntax only if you need to edit existing rows
INSERT INTO employees (emp_id, name_en, name_hi) values 
(1, 'Shankari A', 'शान्डिरी गुरु'), 
(2, 'Rajat A', 'दर्ता गुरु'),
(3, 'Parthasarathy A', 'परिचय गुरु'),
(4, 'Hariharan A', 'हरिंगारी गुरु'),
(5, 'Mayank J', 'मंगलपु गुरु'),
(6, '<NAME>', '<NAME>ुरु'), 
(7, 'Manohar', '<NAME>ुरु'),
(8, '<NAME>', '<NAME>ुरु'), 
(9, 'Himanshu', '<NAME>ुरु'),
(10, 'Pratap Sharma', '<NAME>ुरु'),
(11, 'Sree Kaur A', '<NAME>ुरु'),
(12, 'Vasun Shah A', '<NAME>ुरु'),
(13, 'Rupali Sharma', '<NAME>ुरु'), 
(14, 'Ashwini', '<NAME>ुरु'), 
(15, 'Parthasarathy Sharma', '<NAME>ुरु');

INSERT INTO employees (emp_id, name_en, name_hi) values 
(1001, 'Abhinav Kumrane', 'बिज्ञणकर्ती कुमीन'),
(1002, 'Ajay', 'अजय'),
(1003, 'Avish', 'एवंस्थको'),
(1004, 'Abhinav', 'बिज्ञणकर्ती'),
(1005, 'Kiran',
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
 
CREATE TABLE IF NOT EXISTS "sampleDB".UserTable(user_id int, PRIMARY KEY(user_id)); SELECT * from UserTable; 
 
CREATE TABLE IF NOT EXISTS "sampleDB".UserTable(user_id int, PRIMARY KEY(user_id)); SELECT * from UserTable;
/*
Please create a new table with name: sampleDB.UserTable whose size: 2. Create the following data in this table:user.user_id
1
user.user_id
2
user.user_id
3
user.user_id
4
user.user_id
5
user.user_id
6
user.user_id
7
user.user_id
8
user.user_id
9
user.user_id
10
user.user_id
11
user.user_id
12
user.user_id
13
user.user_id
14
user.user_id
15
user.user_id
16
user.user_id
17
user.user_id
18
user.user_id
19
user.user_id
20
user.user_id
21
user.user_id
22
user.user_id
23
user.user_id
24
user.user_id
25
user.user_id
26
user.user_id
27
user.user_id
28
user.user_id
29
user.user_id
30
user.user_id
31
user.user_id
32
user.user_id
33
user.user_id
34
user.user_id
35
user.user_id
36
user.user_id
37
user.user_id
38
user.user_id
39
user.user_id
40
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
create table table1 (
    `user_id` int NOT NULL AUTO_INCREMENT,
    `username` varchar(50) NOT NULL,
    `password` varchar(255) NOT NULL,
    `email` varchar(255) NOT NULL,
    `user_type` varchar(10) NOT NULL,
    `profile_pic` varchar(100) NULL DEFAULT NULL,
    PRIMARY KEY (`user_id`),
    UNIQUE KEY `user_id` (`user_id`,`username`)
);
flush;
update table1 set username = 'rahil' where username = 'r';
truncate table1;
update table1 set username = 'rahil' where username = 'r';
truncate table1;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

CREATE TABLE If Not Exists users(user_id TEXT NOT NULL, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT NOT NULL, created_at TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY(user_id)
);


[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE If Not Exists users(user_id TEXT NOT NULL, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT NOT NULL, created_at TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY(user_id)
);
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE If Not Exists items(item_id TEXT NOT NULL, quantity INTEGER NOT NULL, cost_per_unit DECIMAL(10,2) NOT NULL, PRIMARY KEY(item_id)
);
INSERT INTO users(user_id, first_name, last_name, email, created_at) VALUES(1, 'Bob', 'Smith', '<EMAIL>', '2018-02-02 10:48:01');
INSERT INTO users(user_id, first_name, last_name, email, created_at) VALUES(2, 'Bob', 'Smith', '<EMAIL>', '2018-02-02 10:48:01');
INSERT INTO users(user_id, first_name, last_name, email, created_at) VALUES(3, 'Bob', 'Smith', '<EMAIL>', '2018-02-02 10:48:01');
INSERT INTO users(user_id, first_name, last_name, email, created_at) VALUES(4, 'Bob', 'Smith', '<EMAIL>', '2018-02-02 10:48:01');
INSERT INTO users(user_id, first_name, last_name, email, created_at) VALUES(5, 'Bob', 'Smith', '<EMAIL>', '2018-02-02 10:48:01');
INSERT INTO users(user_id, first_name, last_name, email, created_at) VALUES(5, 'Bob', 'Smith', '<EMAIL>', '2018-02-02 10:48:01');
INSERT INTO users(user_id, first_name, last_name, email, created_at) VALUES(5, 'Bob', 'Smith', '<EMAIL>', '2018-02-02 10:48:01');
INSERT INTO users(user_id, first_name, last_name, email, created_at) VALUES(5, 'Bob', 'Smith', '<EMAIL>', '2018-02-02 10:48:0
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SELECT User_Id FROM users WHERE email='<EMAIL>' AND User_Id='sampleUser'; CREATE TABLE test_table(var INT NOT NULL); INSERT INTO test_table SELECT ROUND(RAND() * 100); PRINT 'TEST1'; DROP TABLE test_table; PRINT 'TEST2'; -- Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created.
\query <copy>UPDATE users set first_name='Sample', last_name='User', email='<EMAIL>'  where user_id='sampleUser';</copy>

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT Exists users(user_id TEXT NOT NULL, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT NOT NULL, created_at TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY(user_id)
);


[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF Not Exists projects(project_id TEXT NOT NULL, year_name TEXT NOT NULL, project_type TEXT NOT NULL, project_location TEXT NOT NULL, created_at TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY(project_id)    
);
select * from projects;
select * from users;
select * from roles;
select * from projects;
 
create user 'test'@'%' identified by 'test';
grant all privileges on sampleDB.sampleDB to 'test'@'%';
flush privileges;
*
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE If Not Exists users(user_id INT NOT NULL AUTO_INCREMENT, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT NOT NULL, created_at TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY(user_id)
);

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE If Not Exists users(user_id INT NOT NULL AUTO_INCREMENT, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT NOT NULL, created_at TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY(user_id)
);
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users(user_id INT NOT NULL AUTO_INCREMENT, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT NOT NULL, created_at TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY(user_id)
);

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users(user_id INT NOT NULL AUTO_INCREMENT, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT NOT NULL, created_at TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY(user_id)
);

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT Exists customers(customer_id INT NOT NULL AUTO_INCREMENT, phone_number INT NOT NULL, user_id INT NOT NULL, FOREIGN KEY(user_id) REFERENCES users(user_id), PRIMARY KEY(customer_id));


[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE If Not Exists users(user_id INT NOT NULL AUTO_INCREMENT, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT NOT NULL, created_at TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY(user_id)
);
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT Exists users(user_id INT NOT NULL AUTO_INCREMENT, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT NOT NULL, created_at TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY(user_id)
);

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT Exists users(user_id INT NOT NULL AUTO_INCREMENT, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT NOT NULL, created_at TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY(user_id)
);
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

CREATE TABLE IF NOT Exists users(user_id INT NOT NULL AUTO_INCREMENT, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT NOT NULL, created_at TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY(user_id)
);

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT Exists users(user_id INT NOT NULL AUTO_INCREMENT, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT NOT NULL, created_at TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY(user_id)) ENGINE=InnoDB;



[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT Exists users(user_id INT NOT NULL AUTO_INCREMENT, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT NOT NULL, created_at TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY(user_id)
);

USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT Exists users(user_id INT NOT NULL AUTO_INCREMENT, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT NOT NULL, created_at TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY(user_id)
);<commit_msg>Update 007-create-mysql-database.md<commit_after>---
layout: post
title: "Create MySQL Databases"
categories: MySQL
---

> Tutorial for MySQL and MySQL CLI


[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT Exists users(user_id INT NOT NULL AUTO_INCREMENT, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT NOT NULL, created_at TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY(user_id)
);
#
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT Exists users(user_id INT NOT NULL AUTO_INCREMENT, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT NOT NULL, created_at TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY(user_id)
);
#
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS books(book_id INT NOT NULL AUTO_INCREMENT,  title TEXT NOT NULL, author TEXT NOT NULL, published_at TIMESTAMP NULL, created_at TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY(author) REFERENCES users(user_id) ON DELETE CASCADE ON UPDATE CASCADE, PRIMARY KEY(book_id)
);
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT Exists users(user_id INT NOT NULL AUTO_INCREMENT, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT NOT NULL, created_at TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY(user_id)
);
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT Exists users(user_id INT NOT NULL AUTO_INCREMENT, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT NOT NULL, created_at TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY(user_id)
);
DROP TABLE IF Exists users;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO users (user_id, first_name, last_name, email, created_at) values (1, 'Rahul', '<NAME>', '<EMAIL>', '2020-12-08 12:51:09');
INSERT INTO users (user_id, first_name, last_name, email, created_at) values (2, 'Manu', '<NAME>', '<EMAIL>', '2020-12-08 18:22:54');
INSERT INTO users (user_id, first_name, last_name, email, created_at) values (1, 'Rahul', '<NAME>', '<EMAIL>', '2020-12-21 06:38:09');
INSERT INTO users (user_id, first_name, last_name, email, created_at) values (3, 'Kshantam', 'Barthel', '<EMAIL>', '2020-12-22 12:32:27');
INSERT INTO users (user_id, first_name, last_name, email, created_at) values (2, 'Sushant', 'Raparaswamy', '<EMAIL>', '2020-12-27 13:50:38');
INSERT INTO users (user_id, first_name, last_name, email, created_at) values (1, 'Rahul', '<NAME>', '<EMAIL>', '2021-01-06 08:48:24');
INSERT INTO users (user_id, first_name, last_name, email, created_at) values (1, 'Rahul', '<NAME>', '<EMAIL>', '2021-01-06 15:44:23');
INSERT INTO users (user_id, first_name, last_name, email, created_at) values (2, 'Rahul', '<NAME>', '<EMAIL>', '2021-01-06 22:50:03');
INSERT INTO users (user_id, first_name, last_name, email, created_at) values
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT Exists users(user_id INT NOT NULL AUTO_INCREMENT, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT NOT NULL, created_at TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY(user_id)
);

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT Exists users(user_id INT NOT NULL AUTO_INCREMENT, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT NOT NULL, created_at TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY(user_id)
);
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
 



-- This is a list of all supported options of MySQL using the --help option
-- --help:
-- mysql> --help

-- --help-no-data:
-- mysql> --help-no-data

-- --help-extended:
-- mysql> --help-extended

-- --help-connection-options:
-- mysql> --help-connection-options

-- --help-connection:
-- mysql> --help-connection

-- --help-queries:
-- mysql> --help-queries

-- Use the --variables option to see all variables present in the connection string
-- --variables:
-- mysql> --variables

-- --port:
-- mysql> --port

-- --help-character-set:
-- mysql> --help-character-set

-- --default-character-set:
-- --default-character-set

-- --help-ssl:
-- mysql> --help-ssl

-- --default-tls:
-- --default-tls

-- --cipher:
-- --cipher

-- --no-autocommit:
-- --no-autocommit


-- --default-transaction-isolation:
-- --default-transaction-isolation
-- Use \? to learn more about other connection options.

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXists users(user_id INT NOT NULL AUTO_INCREMENT, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT NOT NULL, created_at TIMESTAMP NOT NULL, PRIMARY KEY(user_id)
);

DROP TABLE IF EXISTS users;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT Exists users_v1(user_id INT NOT NULL AUTO_INCREMENT, first_name TEXT NOT NULL, last_name TEXT NOT NULL, created_at TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY(user_id)
);
-- Please create a semantically equivalent program to the second generation
CREATE DATABASE IF NOT Exists sampleDB; USE sampleDB;
CREATE TABLE IF NOT Exists users_v2(user_id INT NOT NULL AUTO_INCREMENT, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT NOT NULL, created_at TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY(user_id)
);
-- Please create a semantically equivalent program to the third generation
CREATE DATABASE IF NOT Exists sampleDB; USE sampleDB;
CREATE TABLE IF NOT Exists users_v3(user_id INT NOT NULL AUTO_INCREMENT, first_name TEXT NOT NULL, last_name TEXT NOT NULL, user_name TEXT NOT NULL, password TEXT NOT NULL, created_at TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY(user_id)
);
-- Please create a semantically equivalent program to the fourth generation
CREATE DATABASE IF NOT Exists sampleDB; USE sampleDB;
CREATE TABLE IF NOT Exists users_v4(user_id INT NOT NULL AUTO_INCREMENT, first_name TEXT NOT NULL, last_name TEXT NOT NULL, user_name TEXT NOT NULL, password TEXT NOT NULL, user_rank TEXT NOT NULL, created_at TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY(user_id)
);
-- Please create a semantically equivalent program to the fifth generation
CREATE DATABASE IF NOT Exists sampleDB; USE sampleDB;
CREATE TABLE IF NOT Exists users_v5(user_id INT NOT NULL AUTO_INCREMENT, first_name TEXT NOT NULL, last_name TEXT NOT NULL, user_name TEXT NOT NULL, password TEXT NOT NULL, user_rank TEXT NOT NULL, user_title TEXT NOT NULL, created_at TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY(user_id)
);
DROP DATABASE IF EXISTS sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users(user_id INT AUTO_INCREMENT PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, created_at TIMESTAMP NULL);
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
 
CREATE PROCEDURE insertUser
	@first_name VARCHAR(255),
	@last_name VARCHAR(255),
	@email VARCHAR(255)
AS
	INSERT INTO users(first_name, last_name, email) VALUES(@first_name, @last_name, @email);

 
DECLARE  @user_id INT;
SET @user_id = (
	SELECT user_id FROM users WHERE email = '<EMAIL>' AND first_name = 'Admin'
);
	DECLARE  @role VARCHAR(255);
	SET @role = (
	SELECT role FROM users WHERE user_id = @user_id AND first_name = 'Admin'
);
IF (ROLE_CONCAT('ROLE_'.@role) IS NULL)
BEGIN
	EXECUTE insertUser
	@first_name = 'Admin',
	@last_name = 'Admin',
	@email = '<EMAIL>@domain.com'
END;
ELSE
	EXECUTE updateUser
	@user_id = @user_id,
	@role = @role
;
SELECT * FROM users ;



[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users(user_id INT AUTO_INCREMENT PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, created_at TIMESTAMP NULL);
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users(user_id INT AUTO_INCREMENT PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, created_at TIMESTAMP NULL);
DROP TABLE users;
DROP DATABASE sampleDB;
```

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
# You should see a column 'user_id'
DROP TABLE IF EXISTS users;
DROP DATABASE IF EXISTS sampleDB;
 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users(user_id INT, first_name TEXT, last_name TEXT, email TEXT, created_at TIMESTAMP NULL);  
SELECT * FROM users;
-- Now, create another table
DROP TABLE IF EXISTS users;
CREATE TABLE IF NOT EXISTS users(user_id INT PRIMARY KEY AUTO_INCREMENT, first_name TEXT, last_name TEXT, email TEXT, created_at TIMESTAMP NULL);  
INSERT INTO users (user_id, first_name, last_name, email, created_at) VALUES (1, "John", "Smith", "<EMAIL>", '2019-03-14 00:00:00');
INSERT INTO users (user_id, first_name, last_name, email, created_at) VALUES (2, "Danny", "Jones", "<EMAIL>", '2019-03-14 00:00:00');
INSERT INTO users (user_id, first_name, last_name, email, created_at) VALUES (3, "Paul", "Jones", "<EMAIL>", '2019-03-14 00:00:00');
SELECT * FROM users;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users(user_id INT AUTO_INCREMENT PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, created_at TIMESTAMP NULL);
-- Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created.

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users (
  user_id INT AUTO_INCREMENT,
  first_name TEXT,
  last_name TEXT,
  email TEXT,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  UNIQUE(user_id),
  PRIMARY KEY (user_id)
);
INSERT INTO users (user_id, first_name, last_name, email, created_at) VALUES (1, '<NAME>', 'Ogle', '<EMAIL>', '2018-11-14 22:26'), (2, 'Ashley', 'Hogan', '<EMAIL>', '2018-11-14 23:36');
DELIMITER  
DROP PROCEDURE IF EXISTS test_modify_username;
 
CREATE PROCEDURE test_modify_username()
LANGUAGE SQL
MODIFIES SQL DATA
SQL SECURITY INVOKER SET @id=2;
 
CALL test_modify_username();
SELECT user_id, first_name, last_name, COUNT(*) AS `cnt` FROM users GROUP BY user_id;
 
CALL test_modify_username();
SELECT user_id, first_name, last_name, COUNT(*) AS `cnt` FROM users GROUP BY user_id;
DROP PROCEDURE IF EXISTS test_modify_username;
DELIMITER ;

COMMIT;
 
DROP PROCEDURE IF EXISTS test_modify_username;
DELIMITER  
CREATE PROCEDURE test_modify_username()
LANGUAGE SQL
MODIFIES SQL DATA
SQL SECURITY INVOKER SET @id=3;
 
CALL test_modify_username();
SELECT user_id, first_name, last_name, COUNT(*) AS `cnt` FROM users GROUP BY user_id;
 
CALL test_modify_username();
SELECT user_id, first_name, last_name, COUNT(*) AS `cnt` FROM users GROUP BY user_id;
DROP PROCEDURE IF EXISTS test_modify_username;
DELIMITER ;

COMMIT;
 
DROP PROCEDURE IF EXISTS test_modify_username;
DELIMITER  
CREATE PROCEDURE test_modify_username()
LANGUAGE SQL
MODIFIES SQL DATA
SQL SECURITY
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users(user_id INT AUTO_INCREMENT PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, created_at TIMESTAMP NULL);
 
INSERT INTO users(first_name, last_name, email, created_at) VALUES('<NAME>','<EMAIL>','<EMAIL>',CURDATE());
INSERT INTO users(first_name, last_name, email, created_at) VALUES('<NAME>','<EMAIL>','<EMAIL>',CURDATE());
INSERT INTO users(first_name, last_name, email, created_at) VALUES('<NAME>','<EMAIL>','<EMAIL>',CURDATE());
INSERT INTO users(first_name, last_name, email, created_at) VALUES('<NAME>','<EMAIL>','<EMAIL>',CURDATE());
INSERT INTO users(first_name, last_name, email, created_at) VALUES('<NAME>','<EMAIL>','<EMAIL>',CURDATE());
INSERT INTO users(first_name, last_name, email, created_at) VALUES('<NAME>.','<EMAIL>','<EMAIL>',CURDATE());
INSERT INTO users(first_name, last_name, email, created_at) VALUES('<NAME>','<EMAIL>','<EMAIL>',CURDATE());
INSERT INTO users(first_name, last_name, email, created_at) VALUES('<NAME>','<EMAIL>','<EMAIL>',CURDATE());
INSERT INTO users(first_name, last_name, email, created_at) VALUES('<NAME>','<EMAIL>','<EMAIL>',CURDATE());
SELECT * FROM users;
# -

# ## References

* <NAME>. 2006. [Linux command line cheat sheet](https: 
* <NAME>. 2010. [Using Oracle DB with MySQL 5.6](https: 
* <NAME>. 2010. [MySQL and PostgreSQL – a comparison of the 1995 designs](https: 
* <NAME>. 1995. [Designing a Database Management System (DBMS)](https: 
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users(user_id INT AUTO_INCREMENT PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, created_at TIMESTAMP NULL);
-- Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created.
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
 
 
 
\q
\q
--  CREATE a new database called sampleDB.
--  Use it to store in the database the names of the people you created
CREATE DATABASE IF NOT EXISTS sampleDB;
\q
\q
CREATE DATABASE IF NOT EXISTS sampleDB;
\q
\q
CREATE TABLE IF NOT EXISTS users(user_id INT AUTO_INCREMENT PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, created_at TIMESTAMP NULL);
\q
\q
--  Create a SQL script (sample.sql). It displays, at the same time, all the tables that are in the user table at the sampleDB database.
SCRIPT sample.sql
\q
\q
--  Create a mutated program that modifies the previous sample.sql. In it, modify the query that displays the names of the tables from the sampleDB database. Add an additional condition as well to the query to retrieve only the first five rows. Use the ENGINE=InnoDB storage engine. The code should also use the LIMIT keyword followed by an integer, specifying how many lines will be displayed.
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS users;
CREATE TABLE IF NOT EXISTS users(user_id INT AUTO_INCREMENT PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, created_at TIMESTAMP);
-- Now drop all tables you created
DROP TABLE IF EXISTS users;
DROP DATABASE IF EXISTS sampleDB; 
--Now query the database
SELECT * FROM users;


[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DELETE FROM users WHERE email!= '<EMAIL>';
-- Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created.
-- Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created.

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users(user_id INT PRIMARY KEY AUTO_INCREMENT, first_name TEXT, last_name TEXT, email TEXT, created_at TIMESTAMP NULL);

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users(user_id INT PRIMARY KEY AUTO_INCREMENT, first_name TEXT, last_name TEXT, email TEXT, created_at TIMESTAMP NULL);
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users(user_id INT PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, created_at TIMESTAMP NULL);
INSERT INTO users(user_id, first_name, last_name, email, created_at) VALUES (0, "John", "Doe", "<EMAIL>", "2017-06-18 19:20:26"), (1, "Amy", "Miller", "<EMAIL>", "2017-06-18 19:20:27");

```

## 3. Create tables in MySQL
```shell
mysql> create table IF NOT EXISTS users(user_id INT PRIMARY KEY AUTO_INCREMENT, first_name TEXT, last_name TEXT, email TEXT, created_at TIMESTAMP NULL);
Table 'users' created
```

## 4. Create a table
```shell
MySQL [sampleDB]> CREATE TABLE IF NOT EXISTS users(user_id INT PRIMITIVE KEY AUTO_INCREMENT, first_name TEXT, last_name TEXT, email TEXT, created_at TIMESTAMP NULL);
Table 'users' created

```

## 5. Drop tables from the MySQL shell
```shell
MySQL [sampleDB]> drop table users
Query OK, 0 rows affected (0.05 sec)

```

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users(user_id INT PRIMARY KEY AUTO_INCREMENT, first_name TEXT, last_name TEXT, email TEXT, created_at TIMESTAMP NULL);
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
  
CREATE VIEW IF NOT EXISTS first_names WHERE user_first_name = 'John';
  
 CREATE OR REPLACE VIEW IF NOT EXISTS first_names
 SELECT * FROM users
 WHERE user_first_name = 'Jane';
SELECT * FROM users ORDER BY user_last_name ASC, user_first_name DESC;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users(user_id INT PRIMARY KEY AUTO_INCREMENT, first_name TEXT, last_name TEXT, email TEXT, created_at TIMESTAMP NULL);
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users(user_id INT PRIMARY KEY AUTO_INCREMENT, first_name TEXT, last_name TEXT, email TEXT, created_at TIMESTAMP NULL);
CREATE UNIQUE INDEX IF NOT EXISTS usersnameonemail ON users (email);-- DROP INDEX usersnameonemail;

drop database sampleDB;
create table orders (order_id int primary key auto_increment, order_date varchar(15), user_id int, item_name varchar(60)) ENGINE=InnoDB DEFAULT CHARSET=utf8;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users(user_id INT PRIMARY KEY AUTO_INCREMENT, first_name TEXT, last_name TEXT, email TEXT, created_at TIMESTAMP NULL);
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users(user_id INT PRIMARY KEY AUTO_INCREMENT, first_name TEXT, last_name TEXT, email TEXT, created_at TIMESTAMP NULL);
INSERT INTO users(user_id, first_name, last_name, email, created_at) VALUES (1, 'John', 'Smith', '<EMAIL>', TIMESTAMP('2013-01-03 09:25:56'));
INSERT INTO users(user_id, first_name, last_name, email, created_at) VALUES (2, 'Mary', 'Jones', '<EMAIL>', TIMESTAMP('2013-01-04 07:39:54'));
INSERT INTO users(user_id, first_name, last_name, email, created_at) VALUES (3, 'Mike', 'Davis', '<EMAIL>', TIMESTAMP('2013-01-04 14:12:41'));
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users(user_id INT PRIMARY KEY AUTO_INCREMENT, first_name TEXT, last_name TEXT, email TEXT, created_at TIMESTAMP NULL);
 
DROP TABLE users;
-- You can try to drop any table from the database except the primary table users. Try to execute this query in your database. You should get an error.
-- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.

DROP TABLE users;

DROP DATABASE IF EXISTS sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users(user_id INT PRIMARY KEY AUTO_INCREMENT, first_name TEXT, last_name TEXT, email TEXT, create_at TIMESTAMP NULL);




[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users(user_id INT PRIMARY KEY AUTO_INCREMENT, first_name TEXT, last_name TEXT, email TEXT, created_at TIMESTAMP NULL);


[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users(user_id INT PRIMARY KEY AUTO_INCREMENT, first_name MEDIUMTEXT, last_name TEXT, email TEXT, created_at TIMESTAMP NULL);

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users(user_id INT PRIMARY KEY AUTO_INCREMENT, first_name MEDIUMTEXT, last_name TEXT, email TEXT, created_at TIMESTAMP NULL);
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users(user_id INT PRIMARY KEY AUTO_INCREMENT, first_name MEDIUMTEXT, last_name TEXT, email TEXT, created_at TIMESTAMP NULL);
-- INSERT multiple data into a table. In this case, insert a lot of sample data
INSERT INTO users (user_id, first_name, last_name, email, created_at) VALUES (1, "John", "Doe", "<EMAIL>", now());
INSERT INTO users (user_id, first_name, last_name, email, created_at) VALUES (2, "Mike", "S.", "<EMAIL>", now());
INSERT INTO users (user_id, first_name, last_name, email, created_at) VALUES (3, "David", "Doe", "<EMAIL>", now());
INSERT INTO users (user_id, first_name, last_name, email, created_at) VALUES (4, "Tim", "Smith", "<EMAIL>", now());
 
SELECT user_id, first_name, last_name FROM users WHERE email="<EMAIL>";
DELETE FROM users WHERE email="<EMAIL>";
.exit
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO users(first_name, last_name)
VALUES
    ('Jim', 'Farrar'),
    ('Tim', 'Cole'),
    ('Nina', 'Ferdinand');
GRANT ALL PRIVILEGES ON sampleDB.* TO 'root';
FLUSH PRIVILEGES;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users(user_id INT PRIMARY KEY AUTO_INCREMENT, first_name MEDIUMTEXT, last_name TEXT, created_at TIMESTAMP NULL);

CREATE TABLE IF NOT EXISTS blogs(blog_id INT PRIMARY KEY AUTO_INCREMENT, blog_name TEXT, blog_url TEXT, created_at TIMESTAMP NULL);

CREATE TABLE IF NOT EXISTS users_blogs(user_id INT NOT NULL, blog_id INT NOT NULL, PRIMARY KEY user_id, blog_id),

USE sampleDB;
INSERT INTO users(first_name, last_name, email, created_at) VALUES ("John", "Doe", "<EMAIL>", "2019-09-13 20:22:44");
INSERT INTO users(first_name, last_name, email, created_at) VALUES ("Mary", "Moe", "<EMAIL>", "2019-09-13 20:23:42");
INSERT INTO blog
(blog_name, blog_url, created_at)
VALUES
('Technology','http://techcrunch.com','2019-09-17 20:35:42'),
('History','http://history.wsj.com','2019-09-17 20:28:05'),
('Business','http://business.wsj.com','2019-09-17 20:27:04'),
('Life','http://life.wsj.com','2019-09-17 20:27:14'),
('Politics','http://politics.wsj.com','2019-09-17 20:27:09'),

-- Now drop all tables if you want to start over
USE sampleDB;

DROP DATABASE sampleDB;

 
SELECT DATABASE();
DROP DATABASE sampleDB;


[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO users(first_name, last_name, email, created_at) VALUES('<NAME>','Baker', '<EMAIL>', '2015-05-30 05:29:15');
INSERT SELECT user_id, first_name, last_name, email
FROM users;
DROP TABLE users;
-- MySQL client program that is used to interrogate and modify the previous database. First create a client and run the next command to login as a user that you created above. Then enter the appropriate SQL command to delete all rows from users. Use the second table to confirm the row deletion.
-- Please take the mysqlclient package from: http: 
mysql.connector.connect(
    host = "localhost",
    port = 3306,
    user = "root",
    passwd = "<PASSWORD>"
)
cursor = conn.cursor()
cursor.execute("DELETE FROM users WHERE user_id = 1")
print(cursor)
cursor.execute("select * from users")
print(cursor)
conn.commit();
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users(user_id INT PRIMARY KEY AUTO_INCREMENT, first_name MEDIUMTEXT, last_name TEXT, email TEXT, created_at TIMESTAMP NULL);
-- Please create a mutated program which modifies the users table.
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users(user_id INT PRIMARY KEY AUTO_INCREMENT, first_name MEDIUMTEXT, last_name TEXT, email TEXT, created_at TIMESTAMP NULL);
CREATE TABLE IF NOT EXISTS users(user_id INT PRIMARY KEY AUTO_INCREMENT, first_name MEDIUMTEXT, last_name TEXT, email TEXT, created_at TIMESTAMP NULL);
CREATE TABLE IF NOT EXISTS users(user_id INT PRIMARY KEY AUTO_INCREMENT, first_name MEDIUMTEXT, last_name TEXT, email TEXT, created_at TIMESTAMP NULL);
 
-- Please create a mutation which attempts to modify the users table.
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users(user_id INT PRIMARY KEY AUTO_INCREMENT, first_name MEDIUMTEXT, last_name TEXT, email TEXT, created_at TIMESTAMP NULL);
CREATE TABLE IF NOT EXISTS users(user_id INT PRIMARY KEY AUTO_INCREMENT, first_name MEDIUMTEXT, last_name TEXT, email TEXT, created_at TIMESTAMP NULL);
CREATE TABLE IF NOT EXISTS users(user_id INT PRIMARY KEY AUTO_INCREMENT, first_name MEDIUMTEXT, last_name TEXT, email TEXT, created_at TIMESTAMP NULL);
SELECT * FROM users;
 
SELECT * FROM users;
 
--- Please create a simple SQL server and client.
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users(user_id INT PRIMARY KEY AUTO_INCREMENT, first_name MEDIUMTEXT, last_name TEXT, email TEXT, created_at TIMESTAMP NULL);
-- Create a table named orders
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO users(first_name, last_name)
VALUES
    ('Jim', 'Farrar'),
    ('Tim', 'Cole'),
    ('Nina', 'Ferdinand');
GRANT ALL PRIVILEGES ON sampleDB.* TO 'root';
FLUSH PRIVILEGES;
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO users(first_name, last_name)
VALUES
    ('Jim', 'Farrar'),
    ('Tim', 'Cole'),
    ('Nina', 'Ferdinand');
FLUSH PRIVILEGES;
 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO users(first_name, last_name)

SELECT first_name, last_name
FROM users;
FLUSH PRIVILEGES;
-- Please create a new table in MySQL using UNION and VALUES queries. You need only to create one table. The values of every row of the table (first-name and last-name) should come from users table.
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO users(first_name, last_name)
UNION SELECT first_name, last_name
FROM users;
DROP TABLE users;
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO users(first_name, last_name)
VALUES
    ('Jim', 'Farrar'),
    ('Tim', 'Cole'),
    ('Nina', 'Ferdinand');
GRANT ALL PRIVILEGES ON sampleDB.* TO 'jim';
FLUSH PRIVILEGES;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE users;
DROP DATABASE sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO users(first_name, last_name)
VALUES
    ('Jim', 'Farrar'),
    ('Tim', 'Cole'),
    ('Nina', 'Ferdinand');
GRANT ALL PRIVILEGES ON sampleDB.* TO 'root';
FLUSH PRIVILEGES;
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users
(
    fid INT NOT NULL,
    name VARCHAR NOT NULL,
    gender TINYINT,
    DOB DATE NOT NULL
);
INSERT INTO users(fid, name, gender, DOB)
VALUES
    (1, 'Jim', 1, '2016-05-14'),
    (2, 'Tim', 1, '2017-07-05'),
    (10, 'Nina', 1, '2016-03-17');
FLUSH PRIVILEGES;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

SELECT * FROM users;
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE users(
	user_id INTEGER PRIMARY KEY,
	first_name VARCHAR(15) UNIQUE,
	last_name VARCHAR(25) NOT NULL
);

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO users(first_name, last_name)
VALUES
    ('Jim', 'Farrar'),
    ('Tim', 'Cole'),
    ('Nina', 'Ferdinand');
INSERT INTO users(phone_number)
VALUES
    ('604-628-1543'),
    ('604-447-7623'),
    ('604-055-0805');
INSERT INTO products(name)
VALUES
    ('Batman'),
    ('Superman');
INSERT INTO users_products(first_name, last_name, email, product_name)
VALUES
    ('Jim', 'Farrar', '<EMAIL>', 'Batman'),
    ('Jim', 'Farrar', '<EMAIL>', 'Superman');
SELECT * FROM users;
SELECT * FROM users_products;
DROP TABLE users; DROP TABLE users_products; DROP DATABASE IF EXISTS sampleDB;
 
CREATE TABLE address
(
    id INT NOT NULL AUTO_INCREMENT,
    street VARCHAR,
    city VARCHAR,
    state CHARACTER,
    postal_code INT,
    PRIMARY KEY(id)
);
 
INSERT INTO address(street, city, state, postal_code)
VALUES
    ('323 N Moscow St', 'Seahawken', 'WA', '98133'),
    ('323 N Moscow St', 'Seahawken', 'MD', '98133'),
    ('526 New City Rd', 'New England', 'CA', '44332'),
    ('123 00th Ave', 'Vancouver', 'BC', 'V5Z 2C1');
 
SELECT * FROM address;
SELECT * FROM address WHERE postal_code >= 98100;
DROP TABLE address;
 
CREATE TABLE address(id INT NOT NULL AUTO_INCREMENT, street VARCHAR, city VARCHAR, state CHARACTER, postal_
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users (
    id                int auto_increment,
    first_name        varchar(30) not null,
    last_name         varchar(30) not null,
    balance           decimal(11, 2) not null,
    PRIMARY KEY (id)
);
FLUSH PRIVILEGES;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users (
    id                int auto_increment,
    first_name        varchar(30) not null,
    last_name         varchar(30) not null,
    balance           decimal(11, 2) not null,
    PRIMARY KEY (id)
);
FLUSH PRIVILEGES;
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users (
    id                int auto_increment,
    first_name        varchar(25) not null,
    last_name         varchar(30) not null,
    balance           decimal(11, 2) not null,
    PRIMARY KEY (id)
);
UPDATE users SET balance = 100 WHERE id = 2;
SELECT balance FROM users WHERE id=2  ;
DROP TABLE users ;
DROP DATABASE IF EXISTS sampleDB ;
SELECT COUNT(*) FROM information_schema.COLUMNS WHERE COLUMN_NAME=%s AND TABLE_SCHEMA=%s;
SELECT * FROM information_schema.COLUMNS WHERE TABLE_NAME = %s AND TABLE_SCHEMA = %s;
SELECT * FROM information_schema.PRIMARY_KEY_COLUMNS where TABLE_NAME = %s AND table_schema = %s;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE users;
CREATE TABLE users (
    id                int auto_increment,
    first_name        varchar(30) not null,
    last_name         varchar(30) not null,
    balance           decimal(11, 2) not null,
    PRIMARY KEY (id)
);
FLUSH PRIVILEGES;
UPDATE users
    SET balance = 5000
WHERE balance = 5300;
FLUSHHPrivileges;
drop TABLE users;
DROP TABLE IF EXISTS sampleDB;


*/
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS students (
    id               int auto_increment,
    first_name       varchar(30) not null,
    last_name        varchar(30) null default null,
    PRIMARY KEY (id)
);
SET @studentID=INSERT INTO students (ID, FirstName, LastName);
SET @id=1;
START TRANSACTION;
SET @studentID = INSERT INTO `students` (ID, FirstName, LastName);
SET @studentID = INSERT INTO `students` (ID, FirstName2, LastName);
SET @studentID = INSERT INTO `users` (`id`, `first_name`, `last_name`, `balance`);
UPDATE `users`
SET `balance` = `amount`
where  Users.ID = @studentId;
UPDATE `users`
SET `balance` = `amount`.2
where  Users.ID = @studentID;
UPDATE `users`
SET `balance` = `amount` + @studentId + 0.2
where  Users.ID = @studentId + 0.3;
-- Please explain in the query below whether `IF` queries with `ELSEIF`, `ELSE` and `END` statements can be used in a `SELECT` query.
SELECT IF (first_name = '<NAME>', 1, 2);
-- Please explain in the query below
SELECT *
FROM users
WHERE balance > 20.00
ORDER BY balance;
-- Please explain in the query below
SELECT *
FROM users
WHERE balance > 20.00
ORDER BY last_name, first_name;
-- Please explain in the query below
SELECT MAX(BALANCE)
FROM users;
-- Please explain in the query below
SELECT max(balance), avg(balance)
FROM users;
-- Please explain in the query below
SELECT IF(balance > 200.00, 'true', 'false')
FROM users
-- Please explain in the query below
SELECT IF(balance > 200.00 OR balance < 100.00, 'high','medium') FROM users;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users (
    id                int auto_increment,
    first_name        varchar(30) not null,
    last_name         varchar(30) not null,
    balance           decimal(11, 2) not null,
    PRIMARY KEY (id)
);
CREATE TABLE IF NOT EXISTS users_balance (
    user_id           int not null,
    balance_id        int not null,
    balance           decimal(11, 2) not null,
    PRIMARY KEY (user_id, balance_id)
);
ALTER TABLE users ADD balance decimal(11, 2);
ALTER TABLE users ADD balance_id int NOT NULL AUTO_INCREMENT;
ALTER TABLE users CHANGE COLUMN id id integer;
ALTER TABLE users_balance CHANGE COLUMN user_id user_id int;
ALTER TABLE users_balance change COLUMN balance balance decimal(11, 2);
ALTER TABLE users_balance DROP COLUMN id;
ALTER TABLE users_balance DROP COLUMN balance_id;
FLUSH PRIVILEGES;
-- Please modify this program to add and modify records to multiple tables if necessary.
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users (
    id                int not null AUTO_INCREMENT,
    first_name        varchar(30) not null,
    last_name         varchar(30) not null,
    balance           decimal(11, 2) not null,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS users_balance (
    user_id           int not null,
    balance_id        int not null,
    balance           decimal(11, 2) not null,
    PRIMARY KEY (user_id, balance_id)
);

UPDATE users
SET balance = balance + 20
WHERE balance >= 10

SELECT id, first_name, last_name, balance FROM users;
SELECT * FROM users;

SHOW TABLE STATUS FROM users;
SHOW TABLE STATUS FROM users_balance;


CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users (
    id                int not null AUTO_INCREMENT,
    first_name        varchar(30) not null,
    last_name         varchar(30) not null,
    balance           decimal(11, 2) not null,
    PRIMARY KEY (id)
);
ALTER TABLE users ADD balance decimal(11, 2);
ALTER TABLE users ADD balance_id int NOT NULL AUTO
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

-- Create a new table and insert data
CREATE TABLE IF NOT EXISTS customers (
    customer_number  int auto_increment,
    title            smallint not null,
    first_name       varchar(30) not null,
    last_name        varchar(30) not null,
    address          varchar(80) not null,
    primary key (customer_number)
);

-- Delete one or both of the tables
DROP TABLE IF EXISTS orders; DROP TABLE IF EXISTS customers;

CREATE DATABASE IF NOT EXISTS employees; USE employees;

CREATE TABLE employees (
    employee_number  int auto_increment,
    first_name       varchar(30) not null,
    last_name        varchar(30) not null,
    email            varchar(50) not null unique,
    job_title        int not null,
    salary           decimal(11, 2) not null unique,
    PRIMARY KEY (employee_number)
);

SELECT *
FROM employees order by employee_number DESC;

-- Update a single column
UPDATE employees SET email='updated_email';
UPDATE users SET balance=100, credit=1000 WHERE email = 'updated_email';

-- Insert data in multiple database tables

USE employees;
INSERT INTO employees (employee_number, first_name, last_name, email, job_title, salary)
VALUES (1, 'first update', 'last update', 'updated_<EMAIL>', 2, 3000),
       (2, 'first update2', 'last update2', '<EMAIL>', 3, 500);

DROP TABLE employees;

 

CREATE TABLE employees2 (
    employee_number  int auto_increment,
    first_name       varchar(30) not null,
    last_name        varchar(30) not null,
    email            varchar(50) not null unique,
    job_title        int not null,
    salary           decimal(11, 2) not null unique,
    PRIMARY KEY (employee_number)
);

USE employees2;
UPDATE users SET balance=100, credit=1000 WHERE email = '<EMAIL>';
UPDATE users SET balance=200 WHERE email = '<EMAIL>';

DROP TABLE employees2. If you created
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users (
    id                int auto_increment,
    first_name        varchar(30) not null,
    last_name         varchar(30) not null,
    balance           decimal(11, 2) not null,
    PRIMARY KEY (id)
);
FLUSH PRIVILEGES;
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users (
    id                int auto_increment,
    first_name        varchar(30) not null,
    last_name         varchar(30) not null,
    balance           decimal(11, 2) not null,
    PRIMARY KEY (id)
);
SELECT
id,first_name
FROM users;

DROP TABLE IF EXISTS users;
DROP DATABASE IF EXISTS sampleDB;
--
--
--
--
--
--
-- 
-- 
-- 
-- 
-- 
-- 
-- 
-- 
-- 
-- 
-- 
-- 
-- 
-- 
-- 
-- 
-- 
-- 
-- 
-- 
-- 
-- 
-- 
-- 
-- 
-- 
-- 
-- 
-- 
-- 
-- 
-- 
-- 
-- 
-- 
-- 
-- 
-- 
--
--
--
--

-- 
-- 
-- END OF FILE
--
--
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
UPDATE users SET balance = 100000, first_name = 'John', last_name = 'Doe';
INSERT INTO users (id, first_name, last_name, balance) 
   SELECT id+1, first_name, last_name, balance 
   FROM users 
   WHERE balance = (SELECT avg (balance) FROM users);

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

 
INSERT INTO users VALUES('a', 'A', 3850.00), ('b', 'B', 7800.00), ('c', 'C', 4000.00);
UPDATE users SET balance = 1000.00 WHERE id = 3;

DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO users(first_name, last_name, balance) VALUES ('Barry', 'Willis', 200);
INSERT INTO users(first_name, last_name, balance) VALUES ('Jim', 'Brown', 900);
INSERT INTO users(first_name, last_name, balance) VALUES ('Tina', 'Johnson', -1200);
SELECT * FROM users;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users (
    id                int auto_increment,
    first_name        varchar(30) not null,
    last_name         varchar(30) not null,
    balance           decimal(11, 2) not null,
    PRIMARY KEY (id)
);
SELECT COUNT(*) FROM ENGINE=InnoDB;
CALL alter_table();
SELECT COUNT(*) FROM ENGINE=InnoDB;
CALL alter_table();
SELECT COUNT(*) FROM ENGINE=InnoDB;
DROP TABLE user_account;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users (
    id                int auto_increment,
    first_name        varchar(30) not null,
    last_name         varchar(30) not null,
    balance           decimal(11, 2) not null,
    PRIMARY KEY (id)
);
SELECT
id,first_name
FROM users;
DROP TABLE IF EXISTS users;
DROP DATABASE IF EXISTS sampleDB;
--
--
--
--
--
--
-- 
-- 
-- 
-- 
-- 
-- 
-- 
-- 
-- 
-- 
-- 
-- 
-- 
-- 
-- 
-- 
-- 
-- 
-- 
-- 
-- 
-- 
-- 
-- 
-- 
-- 
-- 
-- 
-- 
-- 
-- 
-- 
-- 
-- 
-- 
-- 
-- 
-- 
--
--
--
--
-- 
-- 
-- END OF FILE
--
--
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS products (
    id                int auto_increment,
    name              varchar(30) not null,
    description       text,
    price             decimal(11,2) not null,
    product_category  varchar(30) not null,
    PRIMARY KEY (id)
);
SELECT
id, name
FROM products;
DROP TABLE IF EXISTS products;
DROP DATABASE IF EXISTS sampleDB;

--
--
-- 
-- END OF FILE
--

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users (
    id                int auto_increment,
    first_name        varchar(30) not null,
    last_name         varchar(30) not null,
    balance           decimal(11, 2) not null,
    PRIMARY KEY (id)
);
SELECT
id,first_name
FROM users;
DELETE FROM users WHERE id < 3;
UPDATE users SET balance=100 WHERE balance >= 50;
SELECT
id,first_name
FROM users;
DROP TABLE IF EXISTS users;
DROP DATABASE IF EXISTS sampleDB;
--
-- END OF FILE
--
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users (
    id                int auto_increment,
    first_name        varchar(30) not null,
    last_name         varchar(30) not null,
    balance           decimal(11, 2) not null,
    PRIMARY KEY (id)
);
SELECT
id,first_name
FROM users;
 
DROP TABLE IF EXISTS users;
DROP DATABASE IF EXISTS sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users (
    id                int auto_increment,
    first_name        varchar(30) not null,
    last_name         varchar(30) not null,
    balance           decimal(11, 2) not null,
    PRIMARY KEY (id)
);
SELECT
id,first_name
FROM users;
DROP TABLE IF EXISTS users;
DROP DATABASE IF EXISTS sampleDB;

DELETE FROM users where first_name='John';
UPDATE users set balance=60.50 where balance=100;
INSERT INTO users(first_name,last_name,balance)VALUES('John','Doe',140);
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users (
    id                int auto_increment,
    first_name        varchar(30) not null,
    last_name         varchar(30) not null,
    balance           decimal(11, 2) not null,
    PRIMARY KEY (id)
);
SELECT
id,first_name 
FROM users;
DROP TABLE IF EXISTS users;
DROP DATABASE IF EXISTS sampleDB;
-- 
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users (
    id                int auto_increment,
    first_name        varchar(30) not null,
    last_name         varchar(30) not null,
    balance           decimal(11, 2) not null,
    PRIMARY KEY (id)
);
SELECT
id,first_name 
FROM users;
DROP TABLE IF EXISTS users;
DROP DATABASE IF EXISTS sampleDB;
--
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users (
    id                int auto_increment,
    first_name        varchar(30) not null,
    last_name         varchar(30) not null,
    balance           decimal(11, 2) not null,
    PRIMARY KEY (id)
);
INSERT INTO users (id,first_name,last_name,balance) 
VALUES("3","<NAME>","<NAME>",100000);
SELECT
id,first_name 
FROM users;
DROP TABLE IF EXISTS users;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS users;
CREATE TABLE IF NOT EXISTS users (
    id                int auto_increment,
    first_name        varchar(30) not null,
    last_name         varchar(30) not null,
    balance           decimal(11, 2) not null,
    PRIMARY KEY (id)
);
 
DELETE FROM users WHERE id= 1;
SELECT
id,first_name
FROM users;
--
-- Please create your own program to delete all users with balance <= 10. Be sure to use ENGINE=InnoDB.
DELETE FROM users WHERE balance<=10;
SELECT 
id,first_name
FROM users;
--
-- Delete every row from the users table and replace it with a zero based column. Be sure to use ENGINE=InnoDB.
DELETE FROM users;
CREATE TABLE IF NOT EXISTS users (
    balance            decimal(11, 2) not null,
    PRIMARY KEY (balance)
);
SELECT 
id,first_name
FROM users;
--
-- Create a very short query which uses SQL
 
DROP TABLE IF EXISTS users;
--
-- Create a mutated table that adds a unique constraint to id column. Be sure to use ENGINE=InnoDB.
-- Insert into users values (100), (200), (300), (400);
-- ALTER TABLE users AUTO_INCREMENT = 1;
-- ALTER TABLE users MODIFY id int auto_increment;
--
-- Add a column on id in the users table. Be sure to use ENGINE=InnoDB.
-- Update id in the users table to use the auto generated ID.
--
-- Add a UNIQUE id column to users table. Be sure to use ENGINE=InnoDB.
-- INSERT INTO users (id) VALUES (900);
-- UPDATE users SET id = 900 WHERE id = 100;
-- DROP TABLE IF EXISTS users;
--
-- Update id in the users table. Be sure to use ENGINE=InnoDB.
-- INSERT INTO users (id) VALUES (100),
--                      (200),
--                      (300),

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users (
    id                      INT         AUTO_INCREMENT,
    first_name              VARCHAR(30) NOT NULL,
    last_name               VARCHAR(30) NOT NULL,
    balance                 DECIMAL(11, 2) NOT NULL,
    PRIMARY KEY (id)
);
SELECT
id,first_name 
FROM users;
UPDATE users SET first_name = 'Nikolaos', last_name = 'Kosovski' WHERE id = 3;
SELECT
id,first_name,last_name 
FROM users;
 
CREATE DATABASE sampleDB; USE sampleDB;

 
CREATE DATABASE sampleDB; USE sampleDB;

CREATE TABLE users (id INT AUTO_INCREMENT,first_name VARCHAR(30),last_name VARCHAR(30),balance DECIMAL(11,2),constraint fk_users FOREIGN KEY(id) references users(id) on delete cascade on update cascade);
GRANT ALL PRIVILEGES ON DATABASE sampleDB TO 'your_username';

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users (
    id                int auto_increment,
    first_name        varchar(30) not null,
    last_name         varchar(30) not null,
    balance           decimal(11, 2) not null,
    PRIMARY KEY (id)
);
INSERT INTO users (id, first_name, last_name, balance)
    VALUES (1, 'Brenda', 'Walker', '3496.86'),
           (2, 'Clark', 'Kent', '5000.92'),
           (3, 'Keith', 'Dixon', '3510.95'),
           (4, 'Laurence', 'Turner', '2538.45'),
           (5, 'Maryam', 'Thomas', '3430.18'),
           (6, 'Robert', 'Dooley', '5190.90'),
           (7, 'Stanley', 'Rogers', '4690.32'),
           (8, 'John', 'Brown', '4130.23'),
           (9, 'Jane', 'Williams', '4330.15');
SELECT
  first_name, last_name, balance
FROM users;
UPDATE users SET balance=3500.00 WHERE id = 3;
SELECT
  id, first_name, last_name, balance
FROM users;
DROP TABLE IF EXISTS users;
        USE sampleDB;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
--
-- Please create a statement of basic SQL.
SELECT password FROM users WHERE id = 1;
--
-- Please create a statement for querying a single table.
SELECT name, balance FROM users ORDER BY id DESC LIMIT 1000;
--
-- Please create a statement for querying a single unique table.
SELECT name, balance FROM users ORDER BY id DESC LIMIT 1;
--
-- Please create a statement for querying all tables.
SELECT name, balance FROM users ORDER BY id; 
DROP TABLE IF EXISTS users;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users (
    id                int auto_increment,
    first_name        varchar(30) not null,
    last_name         varchar(30) not null,
    balance           decimal(11, 2) not null,
    PRIMARY KEY (id)
);
INSERT INTO users (id, first_name, last_name, balance)
    VALUES (1, 'Brenda', 'Walker', '3496.86'),
           (2, 'Clark', 'Kent', '5000.92'),
           (3, 'Keith', 'Dixon', '3510.95'),
           (4, 'Laurence', 'Turner', '2538.45'),
           (5, 'Maryam', 'Thomas', '3430.18'),
           (6, 'Robert', 'Dooley', '5190.90'),
           (7, 'Stanley', 'Rogers', '4690.32'),
           (8, 'John', 'Brown', '4130.23'),
           (9, 'Jane', 'Williams', '4330.15');
SELECT
  first_name, last_name, balance
FROM users;
UPDATE users SET balance=3500.00 WHERE id = 3;
SELECT
  id, first_name, last_name, balance
FROM users;
DROP TABLE IF EXISTS users;
        USE sampleDB;
DROP DATABASE IF EXISTS sampleDB;
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SELECT COUNT(*) AS c FROM users;
ALTER TABLE users MODIFY balance int;
SELECT COUNT(*) AS c FROM users;
ALTER TABLE users MODIFY first_name varchar(50);
SELECT COUNT(*) AS c FROM users;
ALTER TABLE users MODIFY last_name varchar(50);
SELECT COUNT(*) AS c FROM users;
        USE sampleDB;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS inventory (
    id             int auto_increment,
    item_id         int not null,
    title          varchar(255) not null,
    description    text,
    price_inc      decimal(6, 2) not null,
    PRIMARY KEY (id),
    FOREIGN KEY (item_id)
    REFERENCES items (id)
);
INSERT INTO inventory (id, item_id, title, description, price_inc)
    VALUES (1, 42, 'Red Lantern (New)',
            'A red lantern which has been made to sit in front of a dark sky.', '3.89'),
      (2, 38, 'Blue Lantern (New)',
            'Blue lantern which has been made in front of a dark sky.', '5.99'),
           (9, 23, 'Brown Lantern (New)',
            'Brown lantern which has been made to sit in front of a dark sky.', '1055.95'),
           (37, 97, 'Cinnamon Tablet',
            'Tablet of bronze made in color with the Cinnamon color.', '2.50
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users (
    id                int auto_increment,
    first_name        varchar(30) not null,
    last_name         varchar(30) not null,
    balance           decimal(11, 2) not null,
    PRIMARY KEY (id)
);
INSERT INTO users (id, first_name, last_name, balance)
    VALUES (1, 'Damon', 'Phillips', '4040.24'),
           (2, 'Michael', 'Smith', '4410.55'),
           (3, 'John', 'Brown', '2100.93'),
           (4, 'Mike', 'Miller', '5176.10');
SELECT
  first_name, last_name, balance
FROM users;
DELETE FROM users WHERE id = 2;
SELECT
  id, first_name, last_name, balance
FROM users;
UPDATE users SET balance = balance * 22.5 WHERE id = 2;
SELECT
  id, first_name, last_name, balance
FROM users;
DROP TABLE IF EXISTS users;
        USE sampleDB;
DROP DATABASE
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users (
    id            int auto_increment,
    name          varchar(20) not null,
    balance       decimal(11, 2) not null,
    PRIMARY KEY (id)
);
INSERT INTO users (id, name, balance)
VALUES (1, '<NAME>', 5478.31),
        (2, '<NAME>', 5540.00),
        (3, '<NAME>', 7578.13),
        (4, '<NAME>', 9340.60),
        (5, '<NAME>', 8939.44),
        (6, '<NAME>', 5870.44),
        (7, '<NAME>', 7310.13),
        (8, '<NAME>', 4138.86),
        (9, '<NAME>', 6290.98);
SELECT
  name, balance
FROM users;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users (
    id                int auto_increment,
    first_name        varchar(30) not null,
    last_name         varchar(30) not null,
    balance           decimal(11, 2) not null,
    PRIMARY KEY (id)
);
INSERT INTO users (id, first_name, last_name, balance)
    VALUES (0, 'Brenda', 'Walker', '5569.96'),
           (2, 'Clark', 'Kent', '5000.92'),
           (4, 'John', 'Brown', '6090.90'),
           (6, 'Maryam', 'Thomas', '4529.93'),
           (7, 'Robert', 'Dooley', '3579.37'),
           (8, 'Stanley', 'Rogers', '3679.19'),
           (9, 'Jane', 'Williams', '6010.27');

-- UPDATE TO 0
UPDATE users SET id=1, balance=5589.96 WHERE id = 0
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users (
    id            int auto_increment,
    name          varchar(20) not null,
    balance       decimal(11, 2) not null,
    PRIMARY KEY (id)
);
INSERT INTO users (id, name, balance)
VALUES (1, '<NAME>', 5478.31),
        (2, '<NAME>', 5540.00),
        (3, '<NAME>', 7578.13),
        (4, '<NAME>', 9340.60),
        (5, '<NAME>', 8939.44),
        (6, '<NAME>', 5870.44),
        (7, '<NAME>', 7310.13),
        (8, '<NAME>', 4138.86),
        (9, '<NAME>', 6290.98);
SELECT
  name, balance
FROM users;
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users (
    id            int auto_increment,
    name          varchar(20) not null,
    balance       decimal(11, 2) not null,
    PRIMARY KEY (id)
);
INSERT INTO users (id, name, balance)
VALUES (1, '<NAME>', 5478.31),
        (2, '<NAME>', 5540.00),
        (3, '<NAME>', 7578.13),
        (4, '<NAME>', 9340.60),
        (5, '<NAME>', 8939.44),
        (6, '<NAME>', 5870.44),
        (7, '<NAME>', 7310.13),
        (8, '<NAME>', 4138.86),
        (9, '<NAME>', 6290.98);
SELECT name, balance
FROM users
    INNER JOIN
    (
        SELECT
          name
        FROM users
        INNER JOIN
        users
        ON users.id = users2.id
    ) AS users2
ON users.id = users2.id;
select users.name, users2.name
from users AS users2
where users.id = users2.id;
select users.id, users.name, COUNT(users2.id) as count
from users
WHERE users.id = users2.id
GROUP BY users.id, users.name
HAVING (count = 1), sum(users.balance)!= 8302.82;
-- Please update the select statement to match with the select statement in sample 6, this time using a subquery:
SELECT
  name, balance
FROM users
WHERE id >=1;
SELECT
  name, balance

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE users (
    id            int auto_increment,
    name          varchar(20) not null,
    balance       decimal(11, 2) not null,
    primary key (id)
);
INSERT INTO users (id, name, balance)
VALUES (1, '<NAME>', 5478.31),
        (2, '<NAME>', 5540.00),
        (3, '<NAME>', 7578.13),
        (4, '<NAME>', 9340.60),
        (5, '<NAME>', 8939.44),
        (6, '<NAME>', 5870.44),
        (7, '<NAME>', 7310.13),
        (8, '<NAME>', 4138.86),
        (9, '<NAME>', 6290.98);
SELECT
  name, balance
FROM users;
 

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users (
    id            int auto_increment,
    name          varchar(20) not null,
    PRIMARY KEY (id)
);
INSERT INTO users (id, name)
VALUES (1, '<NAME>'),
        (2, '<NAME>'),
        (3, '<NAME>'),
        (4, '<NAME>'),
        (5, '<NAME>'),
        (6, '<NAME>'),
        (7, '<NAME>'),
        (8, '<NAME>'),
        (9, '<NAME>');
SELECT
  name
FROM users;
-- Please create a select statement which includes a subquery. In your code, you have to use the same name(s) used for the table created above. Also, be sure to use ENGINE=InnoDB in your code so that new rows/columns are added to the table.
USE sampleDB;
CREATE TABLE IF NOT EXISTS salesman (
    id            int auto_increment,
    name          varchar(20),
    PRIMARY KEY (id)
);
CREATE TABLE IF NOT EXISTS orders (
    id            int auto_increment,
    number        int,
    date          date,
    salesman_id   int,
    PRIMARY KEY (id)
);
INSERT INTO salesman (id, name)
VALUES (1, '<NAME>'),
        (2, '<NAME>');
BEGIN;
    INSERT INTO orders
        (number, date, salesman_id)
        SELECT order_number, order_date, salesman_id
        FROM salesman;
COMMIT;
SELECT o.id, o.number, o.date, o.salesman_id
FROM orders AS o;
-- As seen in the previous two challenges, please modify the previous query:
-- SELECT o.id, o.date, o.salesman_id
-- FROM salesman AS s, orders
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users (
    id            INT NOT NULL AUTO_INCREMENT,
    name          VARCHAR( 20) CHARSET = utf8 NOT NULL,
    balance       DECIMAL(11,2) NOT NULL,
    PRIMARY KEY (id)
);
INSERT INTO users (id, name, balance)
VALUES (1, '<NAME>', 5478.31),
        (2, '<NAME>', 5540.00),
        (3, '<NAME>', 7578.13),
        (4, '<NAME>', 9340.60),
        (5, '<NAME>', 8939.44),
        (6, '<NAME>', 5870.44),
        (7, '<NAME>', 7310.13),
        (8, '<NAME>', 4138.86),
        (9, '<NAME>', 6290.98);
SELECT
  name, balance
FROM users;
drop database IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users (
    id            INT(10) UNSIGNED AUTO_INCREMENT NOT NULL,
    name          VARCHAR(25),
    last_balance  DECIMAL(6, 2),
    PRIMARY KEY (id)
);
INSERT INTO users (id, name, last_balance)
VALUES (1, '<NAME>', 4789.45),
        (2, '<NAME>', 8089.45),
        (3, '<NAME>', 5200.00),
        (4, '<NAME>', 5298.27),
        (5, '<NAME>', 1707.83),
        (6, '<NAME>', 3421.35),
        (7, '<NAME>', 2630.65),
        (8, '<NAME>', 7308.65),
        (9, '<NAME>', 2800.00);
SELECT * FROM users;
SHOW INDEX FROM users;
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users (
    id            int auto_increment,
    name          varchar(20) not null,
    balance       decimal(11, 2) not null,
    PRIMARY KEY (id)
);
INSERT INTO users (id, name, balance)
VALUES (1, '<NAME>', 5478.31),
        (2, '<NAME>', 5540.00),
        (3, '<NAME>', 7578.13),
        (4, '<NAME>', 9340.60),
        (5, '<NAME>', 8939.44),
        (6, '<NAME>', 5870.44),
        (7, '<NAME>', 7310.13),
        (8, '<NAME>', 4138.86),
        (9, '<NAME>', 6290.98);
SELECT
  name, balance
FROM users;
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE users;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

 
CREATE TABLE IF NOT EXISTS accounts (
    id            int auto_increment,
    name          varchar(20) not null,
    amount        decimal(10, 2),
    PRIMARY KEY (id)
    -- foreign key constraint with column type of account_id
    FOREIGN KEY (balance, account_id)
    REFERENCES accounts (id, name)
);

-- Example of a simple example which includes insert, select, update, and delete operations
INSERT INTO accounts (id, name, amount) VALUES
(11, '<NAME>', 2.5),
(12, '<NAME>', 4.99),
(13, '<NAME>', 2.75);

SELECT account_id, name, amount
FROM accounts
WHERE id = 11;

ALTER TABLE accounts
DROP COLUMN amount;

SELECT balance, sum(amount)
FROM accounts
GROUP BY balance;



[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users;
INSERT INTO users (name, balance)
VALUES ('<NAME>', 5478.31),
        ('<NAME>', 5540.00),
        ('<NAME>', 7578.13),
        ('<NAME>', 9340.60),
        ('<NAME>', 8939.44),
        ('<NAME>', 5870.44),
        ('<NAME>', 7310.13),
        ('<NAME>', 4138.86),
        ('<NAME>', 6290.98);
SELECT
  name, balance
FROM users;
 
LOAD DATA LOCAL INFILE 'data.csv' INTO TABLE "users" FIELDS TERMINATED BY ',' LINES TERMINATED BY '\n' IGNORE 1 LINES;
SELECT
  name, balance
FROM users;
-- Please check your results in TableSpace Manager and that you find the users table with the users data. Now drop your users data from the users table with SHOW CREATE TABLE users and see how the data has been shifted over into the "users" table.
SHOW CREATE TABLE users;
DROP TABLE IF EXISTS "users";
SHOW CREATE TABLE users;
 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users (
    name          varchar(20) not null,
    age           int          not null,
    PRIMARY KEY (name)
);
INSERT INTO users (name, age) VALUES ('<NAME>', 24),
                                ('<NAME>', 25),
                                ('<NAME>', 23),
                                ('<NAME>', 60),
                                ('<NAME>', 56),
                                ('<NAME>', 39),
                                ('<NAME>', 39),
                                ('<NAME>', 18),
                                ('<NAME>', 26),
                                ('<NAME>', 25);
SELECT
  name, age
FROM users;
 
SELECT
  name
FROM users where balance <= 5000;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
UPDATE users
SET balance = balance * 1.25
WHERE id = 1; -- Please also change the code in UPDATE queries to get all users with a balance of 5478.31 in any currency. For this, you will need to create a second table which has different columns one for users and another one for their balances.
SELECT 
  name, balance, TO_CHAR(balance, 3),
    TO_CHAR(ROUND(balance, 3), 3)
FROM users;
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE users;
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE users;

-- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.
 
The official documentation that MySQL can be used with is located here:
[https: 

For more details about Oracle, please check out the official Oracle website:
[https: 

For more details on how to compile & run MySQL, please refer to this documentation:
[http: 

For more details about MySQL, Ionic, and Ionic Framework, please go to:
[http: 
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE users;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE persons (
  id INT(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  fullName VARBINARY(100) NOT NULL PRIMARY KEY,
  title VARCHAR(15),
  primary key(id)
) ENGINE=InnoDB;
DROP TABLE persons;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE users;

CREATE TABLE users (
	id INT UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,
	username VARCHAR(64) NOT NULL,
	email VARCHAR(255) NOT NULL, 
	password_hash CHAR(64) NOT NULL,
	is_active TINYINT UNSIGNED DEFAULT 1 
);

DELIMITER ;
 
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE userinfos;
DROP TABLE projects;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE users;
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users (
	userId CHAR(5) NOT NULL,
	firstName VARCHAR(255),
	lastName VARCHAR(255),
	role CHAR(1) DEFAULT 'a' NOT NULL,
	PRIMARY KEY (userId)
);

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE users;
 

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE users;
CREATE TABLE users
(
    userid INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
    username TEXT NOT NULL,
    passwd TEXT NOT NULL,
    name TEXT NOT NULL,
    phone TEXT NOT NULL,
    CONSTRAINT user PRIMARY KEY (userid)
);
CREATE TABLE posts
(
    pno_ID INT AUTO_INCREMENT NOT NULL,
    ptitle VARCHAR(50) CHARACTER SET utf8 NOT NULL,
    ptext TEXT CHARACTER SET utf8 NOT NULL,
    pdate DATETIME DEFAULT CURRENT_TIMESTAMP,
    puserid INT(10) UNSIGNED NOT NULL,
    ptype INT UNSIGNED DEFAULT NULL,
    CONSTRAINT pno_id PRIMARY KEY (pno_ID),
    CONSTRAINT puserid FOREIGN KEY (puserid) REFERENCES users (userid)
);

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE users;
BEGIN

     ;
     
    CREATE USER 'root'@'localhost' IDENTIFIED BY '<PASSWORD>';

     
    CREATE USER 'test'@'localhost' IDENTIFIED BY '<PASSWORD>';

    GRANT ALL PRIVILEGES ON sampleDB.* TO 'test'@'localhost';
END
```

## Source Code
---
- https: 

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users (
	userId CHAR(5) NOT NULL,
	firstName VARCHAR(255),
	lastName VARCHAR(255),
	role CHAR(1) DEFAULT 'a' NOT NULL,
	PRIMARY KEY (userId)
);
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO users (userId, firstName, lastName) VALUES ('a', 'John', 'Doe');
INSERT INTO users (userId, firstName, lastName) VALUES ('b', 'Robert', 'Smith');
INSERT INTO users (userId, firstName, lastName) VALUES ('c', 'Catherine', 'Miller');
DROP TABLE users;
SELECT role FROM users;
SELECT DISTINCT role FROM users;
SHOW CREATE TABLE users;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users (
userId CHAR(5) NOT NULL,
firstName VARCHAR(255),
lastName VARCHAR(255),
role CHAR(1) DEFAULT 'a' NOT NULL,
PRIMARY KEY (userId)
);


mysql>> SHOW DATABASES;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
| sampleDB           |
+--------------------+
6 rows in set (0.00 sec)


mysql>> SHOW tables;
+---------------------+
| Tables_in_sampleDB |
+---------------------+
| users               |
+---------------------+
1 row in set (0.00 sec)


mysql> explain SELECT * FROM users where role = 'r';
                                                                                               QUERY PLAN
----------------------------------------------------------------------------------------------------
| id  | expression          | table | type | constant | generated_columns |  time     | distribution | description                                      |
---------------------------------------------------------------------------------------------------------------------------------
|   1 | users.role          | users | const | NULL      |                   | 0.0353 ms |               |                                                    |
---------------------------------------------------------------------------------------------------------------------------------
|   2 | row_number()       | users | const | NULL      |                   | 0.0009 ms |               |                                                    |
---------------------------------------------------------------------------------------------------------------------------------
|   3 | NULLIF(users.role, 'r') | NULL  | NULL | NULL      |                   | 0.0009 ms |               |                                                    |
---------------------------------------------------------------------------------------------------------------------------------
|   4 | users.*            | users | ref  | NULL      |                   | 0.0009 ms |               |                                                    |
---------------------------------------------------------------------------------------------------------------------------------
|   5 | NULLIF(users.lastName, 'r') | NULL  | NULL | NULL      |                   | 0.0008 ms |               |                                                    |
---------------------------------------------------------------------------------------------------------------------------------
|   6 | users.lastName      | users | ref  | NULL      |                   | 0.0008 ms |               |                                                    |
---------------------------------------------------------------------------------------------------------------------------------
|   7 | users.firstName     | users | ref  | NULL      |                   | 0.0008 ms |               |                                                    |
---------------------------------------------------------------------------------------------------------------------------------
|   8 | row_number()       | NULL  | const | NULL      |                   | 0.0008 ms |               |                                                    |
---------------------------------------------------------------------------------------------------------------------------------
|   9 | NULLIF(users.role, 'a') | NULL  | NULL | NULL      |                   | 0.0008 ms |               |                                                    |
---------------------------------------------------------------------------------------------------------------------------------
|  10
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users (
	userId CHAR(5) NOT NULL,
	firstName VARCHAR(255),
	lastName VARCHAR(255),
	role CHAR(1) DEFAULT 'a' NOT NULL,
	PRIMARY KEY (userId)
);
-- Please drop all of your table.
DROP TABLE users;
DROP DATABASE IF EXISTS sampleDB;

It is recommended to use the create_tables and insert examples to practice the basic syntax/behavior of MySQL.


[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
Create table users like users; 
Show tables like'sampleDB%';
Show tables like 'engine%'; 
Show tables like 'utf8%'; 
Show tables like 'utf%'; 
Show tables like'mysql%'; 
Show tables like '255%'; 
Show tables like '%mysql}'; 
Show tables like '%database123}'; 
Show tables like '%sampledb}';
SHOW TABLES 
SHOW FIELDS
SHOW GRANTS
SHOW STATUS
SHOW CREATE TABLE
SHOW FULL COLUMNS 
SHOW TABLE STATUS
SHOW PROCESSLIST
Show status like '%MySQL'; 
 
[mysqld]
pidFile=/run/mysql/mysqld.pid
port=3306
```



[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users (
	userId CHAR(5) NOT NULL,
	role char(1) DEFAULT 'a' NOT NULL PRIMARY KEY (userId)
);
-- The role column should be left NULL, as it can't be derived in other places, such as in a WHERE or JOIN condition.
-- You should drop all CREATE and DROP statements to accomplish this task.

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users (
	userId CHAR(5) NOT NULL,
	firstName VARCHAR(255),
	lastName VARCHAR(255),
	role CHAR(1) DEFAULT 'a' NOT NULL,
	PRIMARY KEY (userId)
);
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

CREATE TABLE IF NOT EXISTS users (
	userId CHAR(5) NOT NULL,
	role CHAR(1) DEFAULT 'a' NOT NULL,
	PRIMARY KEY (userId)
);
DESCRIBE users;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS users;
-- Drop the database if you created it earlier with 'DROP DATABASE'.
DROP DATABASE sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SELECT userId, role FROM users WHERE role = 'a'; 
mysql> select role from users where userid='b';
ERROR 1139 (22007): Incorrect table name '(null)'. You have an error in your SQL syntax; check the manual to figure out what you meant.

SELECT userId, role FROM users WHERE role = 'a';
-- Select all column names of users table

SELECT DISTINCT userId, role FROM users;
-- Delete all rows from users table
DROP DATABASE sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users (
	userId CHAR(5),
	firstName VARCHAR(255),
	lastName VARCHAR(255),
	role CHAR(1),
	PRIMARY KEY (userId),
	FOREIGN KEY (userId) REFERENCES users(userId);
);
-- DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users (
	id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
	username varchar(15) NOT NULL UNIQUE,
	firstname TEXT,
	lastname TEXT,
	role CHAR(1) NOT NULL
);
-- Please create a query using SQL Server with some data from the sampleDB schema. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. 
SELECT * FROM users

CREATE TABLE IF NOT EXISTS sampleTable (
    firstName VARCHAR(255),
	lastName VARCHAR(255),
	role CHAR(10) DEFAULT 'a' NOT NULL
);

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users (
	userId CHAR(5) NOT NULL,
	role CHAR(1) DEFAULT 'a' NOT NULL,
	PRIMARY KEY (userId)
);
DESCRIBE users;
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SELECT IF NOT EXISTS 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA ='sampleDB';
DROP DATABASE if exists sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users (
	userId CHAR(5) NOT NULL,
	role CHAR(1) DEFAULT 'a' NOT NULL,
	PRIMARY KEY (userId)
);
-- Please modify your program to use WHERE condition to find the users whose role is 'a' and whose user name is greater than 'a' and use ORDER BY.
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users (
	userId CHAR(5) NOT NULL,
	role CHAR(1) DEFAULT 'a' NOT NULL,
	PRIMARY KEY (userId)
);
-- Please use a subquery to find the users whose name starts with 't', display the user IDs and roles.

CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users (
	userId CHAR(5) NOT NULL,
	role CHAR(1) DEFAULT 'a' NOT NULL,
	PRIMARY KEY (userId)
);
SELECT * FROM (
SELECT userId, role from users where LEFT(userId,2)='a' ORDER BY userId);
-- Please replace in your program the user query with the MySQL sub query above to display the names of the users who have role 'a'.
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users (
	userId CHAR(5) NOT NULL,
	role CHAR(1) DEFAULT 'a' NOT NULL,
	PRIMARY KEY (userId)
);
DESC users;
-- If you have completed all the subqueries for the users table, then use the MySQL ORDER BY to order by the lastName and firstName alphabetically (without any quotes).
-- Please create a new table named firstNames in the same database of the following structure. The structure should contain: ID, firstName.
CREATE TABLE IF NOT EXISTS firstNames (
	id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
	firstName VARCHAR(20)
);
USE sampleDB;
DESC firstNames;
-- Now create a new user table named userNames and use a WHERE condition on the users table that have role 'a'  (no quotes) and display the firstName and lastName from the table.
CREATE TABLE IF NOT EXISTS userNames (
	id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
	firstName VARCHAR(20)
);
-- Create a second user table which is semantically equivalent to the first but contains the firstName and lastName reversed.
CREATE TABLE IF NOT EXISTS reversedNames (
	id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
	lastName VARCHAR(20),
	firstName VARCHAR(20)
);
-- Create a third user table
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users1 (
	userId CHAR(5) NOT NULL,
	role BOOL DEFAULT FALSE NOT NULL,
	roleName CHAR(10) DEFAULT 'Admin' NOT NULL,
	CONSTRAINT users1_ck1 CHECK (role IN ('a', 'b'))
);
DESCRIBE users1;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users (
	userId CHAR(5) NOT NULL,
	role CHAR(1) DEFAULT 'a' NOT NULL
);
DESCRIBE users;

SET @s='insert into users(userId,role) values(\'A123\',\'a\');
insert into users(userId,role) values(\'A456\',\'a\');
insert into users(userId,role) values(\'A078\',\'a\');
select * from users;';

SET @s2=@usersql;'

mysql --silent -u $username  -p --host $host --port $port --default-character-set=utf8 --default-collation-server=utf8_general_ci $db >$savepath/MySQL_insert.sql 2>&1;

# Now run the sql in MySQL - mysql -u $username -p < insert.sql

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users (
	userId CHAR(5) PRIMARY KEY,
	role CHAR(1) DEFAULT 'a'
);
DESCRIBE users;
-- Please rewrite your program to use ENGINE=InnoDB. In this approach you need to create a large number of tables with only a few rows. Then drop a few of those with one statement. After that you probably will only have to drop one table in MySQL’s data structures and repopulate table’s where clauses to use the same table again in the next statement.
 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users (
	userId CHAR(5) NOT NULL,
	role CHAR(1) DEFAULT 'a' NOT NULL,
	PRIMARY KEY (userId)
);
DESCRIBE users;

DROP TABLE IF EXISTS users;
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users (
	userId CHAR(5) PRIMARY KEY,
	role CHAR(1) DEFAULT 'a'
);
DESCRIBE users;

DROP TABLE IF EXISTS users;
DROP TABLE IF EXISTS users;
DROP TABLE IF EXISTS users;
DROP TABLE IF EXISTS users;
DROP TABLE IF EXISTS users;
DROP TABLE IF EXISTS users;
DROP TABLE IF EXISTS users;
DROP TABLE IF EXISTS users;
DROP TABLE IF EXISTS users;
DROP TABLE IF EXISTS users;
DROP TABLE IF EXISTS users;
DROP TABLE IF EXISTS users;
DROP TABLE IF EXISTS users;
DROP TABLE IF EXISTS users;
DROP TABLE IF EXISTS users;
DROP TABLE IF EXISTS users;
DROP TABLE IF EXISTS users;
DROP TABLE IF EXISTS users;
DROP TABLE IF EXISTS users;
DROP TABLE IF EXISTS users;
DROP TABLE IF EXISTS users;
DROP TABLE IF EXISTS users;
DROP TABLE IF EXISTS users;
DROP TABLE IF EXISTS users;
DROP TABLE IF EXISTS users;
DROP TABLE IF EXISTS users;
DROP TABLE IF EXISTS users;
DROP TABLE IF EXISTS users;
DROP TABLE IF EXISTS users;
CREATE TABLE IF NOT EXISTS users (
	userId CHAR(5) PRIMARY KEY,
	role CHAR(1) DEFAULT 'a'
);
DESCRIBE users;
DROP TABLE IF EXISTS users;
DROP TABLE IF EXISTS users;
DROP TABLE IF EXISTS users;
DROP TABLE
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users (
	userId CHAR(5) NOT NULL,
	role CHAR(1) DEFAULT 'a' NOT NULL,
	PRIMARY KEY (userId)
);
DESCRIBE users;
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

CREATE TABLE IF NOT EXISTS users (
	userId CHAR(5) NOT NULL,
	role CHAR(1) DEFAULT NULL
);
DESCRIBE users;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS users;
CREATE TABLE users (
	userId CHAR(5),
	role CHAR(1)
	PRIMARY KEY (userId),
	UNIQUE KEY userId_UNIQUE (userId)
);
DROP TABLE IF EXISTS users;
CREATE TABLE users (
	userId CHAR(5),
	role CHAR(1)
	PRIMARY KEY (userId) FULLTEXT,
	UNIQUE KEY userId_UNIQUE (userId)
);
-- DROP ALL TABLES
USE sampleDB;
DROP TABLE users;
DROP DATABASE IF EXISTS sampleDB;


[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
/CREATE TABLE IF NOT EXISTS users (
--   userId CHAR(5) NOT NULL,
--   role CHAR(1) DEFAULT 'a' NOT NULL,
--   PRIMARY KEY (userId)
-- );
DESCRIBE users;
# Please run the script a second time and verify if users table was properly restored.
# Please drop the table if you created already.
DROP TABLE IF EXISTS users;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users (
	userId CHAR(5) NOT NULL,
	role CHAR(1) DEFAULT 'a' NOT NULL,
	PRIMARY KEY (userId)
)ENGINE=InnoDB;
DESCRIBE users;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users (
	userId CHAR(5) NOT NULL UNIQUE,
	role CHAR(1) NOT NULL DEFAULT 'a' NOT NULL,
	PRIMARY KEY (userId)
);
DESCRIBE users;



-- * * * * * * * * * * * * * * * * * * *
-- *                            *
-- *       W3Resource - MySQL       *
-- *                            *
-- *       Chapter 05 - Browse       *
-- *                            *
-- * * * * * * * * * * * * * * * * * *


--------------------------------------------------------------------------------
-- https: 
-- https: 

--------------------------------------------------------------------------------
-- https: 
-- https: 

-- https: 

-- https: 
-- https: 
-- https: 
-- https: 

-- https: 
-- https: 
-- https: 
-- https: 
-- https: 

-- https: 
-- https: 
-- https: 
-- https: 
-- https: 
-- https: 
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users (
	userId CHAR(5) NOT NULL,
	role CHAR(1) DEFAULT 'a' NOT NULL,
	PRIMARY KEY (userId)
)ENGINE=InnoDB;
DESCRIBE users;
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users (
	userId CHAR(5) NOT NULL,
	userStatus INT DEFAULT 0 NOT NULL,
	authId VARCHAR(190) DEFAULT NULL,
	authPasswordHash <PASSWORD>,
CREATE TABLE IF NOT EXISTS userStats (
	uid CHAR(5) NOT NULL,
	playtime INT DEFAULT 0 NOT NULL,
	totalscore INT DEFAULT 0 NOT NULL,
	totalitems INT DEFAULT 0 NOT NULL,
	created TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
CREATE TABLE IF NOT EXISTS players (
	pid CHAR(5) NOT NULL,
	uid CHAR(5) NOT NULL,
	score INT DEFAULT 0 NOT NULL,
	playtime INT DEFAULT 0 NOT NULL,
	PRIMARY KEY (pid, uid)
)ENGINE=InnoDB;
DESCRIBE players;

INSERT INTO users (userId,role) values ('alice', 'a');
INSERT INTO users (userId,role) values ('bob', 'a');
INSERT INTO users (userId,role) values ('eve','s');

INSERT INTO userStats (uid, playtime, totalscore, totalitems) values ('alice', 300,16, 10);
INSERT INTO userStats (uid, playtime, totalscore, totalitems) values ('alice', 400,29, 12);
INSERT INTO userStats (uid, playtime, totalscore, totalitems) values ('bob', 500,27, 13);
INSERT INTO userStats (uid, playtime, totalscore, totalitems) values ('bob', 400,30, 8);
INSERT INTO userStats (uid, playtime, totalscore, totalitems) values ('bob', 300,14, 11);
INSERT INTO userStats (uid, playtime, totalscore, totalitems) values ('eve', 505,21, 20);
INSERT INTO userStats (uid, playtime, totalscore, totalitems) values ('eve', 300,10, 17);
INSERT INTO userStats (uid, playtime, totalscore, totalitems) values ('eve', 200,20, 19)

SELECT * FROM players
WHERE NOT uid = 'alice'
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users (
	userId CHAR(5) NOT NULL,
	role CHAR(1) DEFAULT 'a' NOT NULL,
	PRIMARY KEY (userId)
)ENGINE=InnoDB;
DESCRIBE users;

 
mysql> exit

# Create a new database and tables via MySQL client
mysql -u root -p    # Enter password
mysql> CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
mysql> CREATE TABLE IF NOT EXISTS users (
	userId CHAR(5) NOT NULL,
	role CHAR(1) DEFAULT 'a' NOT NULL,
	PRIMARY KEY (userId)
)ENGINE=InnoDB;
mysql> DESCRIBE users;

```

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users (
	userId CHAR(5) NOT NULL,
	role CHAR(1) DEFAULT 'test' NOT NULL,
	PRIMARY KEY (userId)
)ENGINE=InnoDB;
DESCRIBE users;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

create table if not exists products (
	productCode CHAR(50) NOT NULL,
	name varchar(250),
	cost int
);
desc products;

create table if not exists orders (
	productCode CHAR(50) NOT NULL,
	customerName varchar(250) NOT NULL,
	PRIMARY KEY (productCode)
);
desc orders;

create table if not exists orderitems (
	orderId CHAR(50) NOT NULL,
	productCode CHAR(50) NOT NULL,
	quantity int DEFAULT 1 NOT NULL,
	PRIMARY KEY (orderId)
);
desc orderitems;

create table if not exists customerorders (
	orderId CHAR(50) NOT NULL,
	customerName varchar(250) NOT NULL,
	PRIMARY KEY (orderId)
);
desc customerorders;




 
 
 
 
create table Student_DB.Students(
    studentID int not null,
    studentName varchar(250) not null,
    gender varchar(1),
    rollNo int not null,
    primary key(studentID)
    );
desc Students;



CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

create table if not exists Students(
	 studentID int not null auto_increment,
	 FirstName varchar(250),
	 LastName varchar(250),
	 gender int not null
	 primary key(studentID)
);
desc Students;

select * from Students;
 
DROP TABLE IF EXISTS Students;
SHOW TABLES;
FLUSH PRIVILEGES;


show variables like 'character%';
set character_set_connection ='utf8';

set session character_set_connection = 'utf8';


 
 
 

/*
* You are asked for a list of the student records where student age is less than 21. 
* Student ids of those records should NOT be displayed from the database. The
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users (
	userId INT NOT NULL,
	name VARCHAR(30) DEFAULT 'root' NOT NULL,
	ROLE INT DEFAULT 2 NOT NULL,
	PRIMARY KEY (userId)
)ENGINE=InnoDB;
DESCRIBE users;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users (
	userId INT NOT NULL,
	name VARCHAR(30) DEFAULT 'root' NOT NULL,
	ROLE INT DEFAULT 2 NOT NULL,
	PRIMARY KEY (userId)
)ENGINE=InnoDB;
DESCRIBE users;
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users (
	userId INT NOT NULL,
	name VARCHAR(30) NOT NULL,
	ROLE INT DEFAULT 2 NOT NULL,
	PRIMARY KEY (userId)
)ENGINE=InnoDB;
DESCRIBE users;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users (
	userId INT(6) NOT NULL,
	name VARCHAR(30) NOT NULL,
	ROLE INT(1) DEFAULT 2 NOT NULL,
	PRIMARY KEY (userId)
)ENGINE=InnoDB;
DESCRIBE users;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
# CREATE TABLE IF NOT EXISTS users (
# 	userId INT NOT NULL AUTO_INCREMENT,
# 	name VARCHAR(30) DEFAULT 'root' NOT NULL,
# 	ROLE INT DEFAULT 2 NOT NULL,
# 	PRIMARY KEY (userId)
# )ENGINE=InnoDB DEFAULT CHARSET=UTF8;
DESCRIBE users;
# DROP TABLE users;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users (
	userId INT NOT NULL PRIMARY KEY,
	name VARCHAR(30) DEFAULT 'root',
	ROLE INT DEFAULT 2
);
DESCRIBE users;
-- Please create a semantically equivalent program to the MySQL SELECT statement
SELECT * FROM users;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS articles (
	articleId INT NOT NULL,
	author VARCHAR(75) DEFAULT 'root' NOT NULL,
	title VARCHAR(255) DEFAULT 'title' NOT NULL,
	content TEXT DEFAULT 'content' NOT NULL,
	PRIMARY KEY (articleId)
)ENGINE=InnoDB;
DESCRIBE articles;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users (
	userId INT NOT NULL PRIMARY KEY,
	name VARCHAR(30) DEFAULT 'root',
	ROLE INT DEFAULT 2
);
DESCRIBE users;
-- Please create a semantically equivalent program to the MySQL SELECT statement
SELECT * FROM users;
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
USE sampleDB;
CREATE TABLE IF NOT EXISTS user (
	userID INT NOT NULL PRIMARY KEY,
	name VARCHAR(30) DEFAULT 'root',
	ROLE int DEFAULT 2
);
DESCRIBE user;
-- Please create a semantically equivalent program to the MySQL SELECT statement
SELECT * FROM user;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
ALTER TABLE users AUTO_INCREMENT = 1;
DESCRIBE users;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
create or replace table users (
	userId INT not null primary key,
	name varchar(30),
	email varchar(60),
	role int,
	password char(60)
);
DESCRIBE users;
-- Please create a semantically equivalent program to the MySQL DROP statement
DROP TABLE users CASCADE;
-- Please alter the previous table definition to include a NOT NULL constraint.
-- Be sure to change all column types to NOT NULL.
ALTER TABLE users MODIFY (role smallint unsigned not null);
-- Please create a semantically equivalent program to the CREATE sequence syntax.
-- Be sure to modify all database variables to the use of sequences.
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

CREATE TABLE IF NOT EXISTS users (
	userId INT NOT NULL PRIMARY KEY AUTO_INCREMENT UNIQUE,
	name VARCHAR(30) DEFAULT 'root',
	ROLE INT DEFAULT 2
);
DESCRIBE users;

CREATE TABLE IF NOT EXISTS users (
	userId int PRIMARY KEY AUTO_INCREMENT UNIQUE,
	name VARCHAR(30) DEFAULT 'root',
	ROLE INT DEFAULT 2
);
DESCRIBE users;

DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users(
	userId INT NOT NULL PRIMARY KEY,
	name VARCHAR(10) DEFAULT 'root',
	PASSWORD_HASH  VARCHAR(720) DEFAULT NULL,
	ROLE INT DEFAULT 2
);
DESCRIBE users;
-- Please create a semantically equivalent program to the MySQL SELECT statement using the FULLTEXT keyword of MySQL's FULLTEXT_FULL index.
USE sampleDB;
CREATE TABLE IF NOT EXISTS users(
	userId INT NOT NULL PRIMARY KEY,
	name VARCHAR(30) DEFAULT 'root'
);
USE sampleDB;
CREATE TABLE IF NOT EXISTS users(
	userId INT NOT NULL PRIMARY KEY,
	name VARCHAR(50) DEFAULT 'root'
);
USE sampleDB;
CREATE TABLE IF NOT EXISTS users(
	userId INT NOT NULL PRIMARY KEY,
	name VARCHAR(30) DEFAULT 'root'
);
ALTER TABLE users ADD FULLTEXT INDEX fulltext_idx (name);

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users(
	userId INT NOT NULL PRIMARY KEY,
	name VARCHAR(10) DEFAULT 'root',
	PASSWORD_HASH  VARCHAR(720) DEFAULT NULL,
	ROLE INT DEFAULT 2
);
DESCRIBE users;
-- Please create a semantically equivalent program to the MySQL SELECT statement using the FULLTEXT keyword of MySQL's FULLTEXT_FULL index.
USE sampleDB;
CREATE TABLE IF NOT EXISTS users(
	userId INT NOT NULL PRIMARY KEY,
	name VARCHAR(30) DEFAULT 'root'
);
USE sampleDB;
CREATE TABLE IF NOT EXISTS users(
	userId INT NOT NULL PRIMARY KEY,
	name VARCHAR(50) DEFAULT 'root'
);
USE sampleDB;
CREATE TABLE IF NOT EXISTS users(
	userId INT NOT NULL PRIMARY KEY,
	name VARCHAR(30) DEFAULT 'root'
);
ALTER TABLE users ADD FULLTEXT INDEX fulltext_idx (name);
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

CREATE TABLE IF NOT EXISTS users(
	userId int NOT NULL PRIMARY KEY,
	age int DEFAULT 0,
	username int DEFAULT 0,
	email varchar(100),
	password varchar(30),
	gender int DEFAULT 0
);
INSERT INTO users(userId, age, username, email, password, gender)
	VALUES (1, 29, 1, '<EMAIL>', '123456', 1);
-- Modify the password of a user. The original is defined beforehand.
UPDATE users SET password_hash=<PASSWORD>' WHERE userId=1;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
ALTER TABLE users ADD FULLTEXT INDEX fulltext_idx (name);
-- Please create an optimistic program that uses the FULLTEXT indexes, and demonstrates the use case
ALTER DATABASE sampleDB DISABLE KEYS;
-- Please create a transaction-support program to demonstrate the use of transactions in real life.
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE users(
	userId INT NOT NULL PRIMARY KEY,
	name VARCHAR(50) DEFAULT 'root'"
);
INSERT INTO users (userId) VALUES (1);
UPDATE users SET name = 'new' WHERE userId = 1;
DELETE FROM users WHERE userId = 1;
SELECT * from users;
UNLOCK TABLES;
// Please create a program to demonstrate how to open an existing fulltext indexed database that is in shared-cache mode.
USE sampleDB;
BEGIN;
CREATE TABLE IF NOT EXISTS users(
	userId INT NOT NULL PRIMARY KEY,
	name VARCHAR(50) DEFAULT 'root"'
);
INSERT INTO users (userId) VALUES (1);
UPDATE users SET name = 'new' WHERE userId = 1;
DELETE FROM users WHERE userId = 1;
SELECT * from users;
COMMIT;
 
create table if not exists users(
	userId int not null primary key,
	name varchar(20)
);
use sampledb;
truncate table users;
-- Please create a new program to demonstrate a use case where a column of a textual data type can be shared and index-shared.
 
use sampledb;
CREATE TABLE users(
	userName_idx
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS movies(
	movieId INT NOT NULL PRIMARY KEY,
	imdbId VARCHAR(10) DEFAULT NULL,
	title VARCHAR(100) DEFAULT NULL,
	year INT DEFAULT NULL
); USE sampleDB;
CREATE TABLE IF NOT EXISTS movies(
	movieId INT NOT NULL PRIMARY KEY,
	imdbId VARCHAR(11) DEFAULT NULL,
	title VARCHAR(50) DEFAULT NULL,
	year INT DEFAULT NULL
); USE sampleDB;
USE sampleDB;
ALTER TABLE movies MODIFY YEAR(2005);
SELECT * FROM movies;
ALTER TABLE movies MODIFY DATE(30/29, 30/032/2000) NO ACTION;
SELECT * from movies where date < '11/01/2009';
-- Please create a script that uses FOR XML option of MySQL's SELECT statement using FOR XML_FORCE_ARRAY property
SELECT * FROM movies FOR XML_FORCE_ARRAY;
CREATE TABLE IF NOT EXISTS customers(
	customerId INT NOT NULL PRIMARY KEY,
	name VARCHAR(30) DEFAULT 'root'
);
-- Please create a program to count the number of lines in one of the five tables. Print all of them in a human readable format.
USE sampleDB;
CREATE TABLE IF NOT EXISTS users(
	userId INT NOT NULL PRIMARY KEY,
	name VARCHAR(10) DEFAULT 'root',
	PASSWORD_HASH  CHAR(64) DEFAULT NULL
);
CREATE TABLE IF NOT EXISTS movies(
	movieId INT NOT NULL PRIMARY KEY,
	imdbId CHAR(11) DEFAULT NULL,
	title CHAR(100) DEFAULT NULL,
	year CHAR(4) DEFAULT NULL
);
ALTER TABLE movies ADD FULLTEXT INDEX title_idx (title);
USE sampleDB;
CREATE TABLE IF
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- This is the previous SQL statement
DESCRIBE users;
-- Change the previous statement of the first table so that it includes the fulltext_idx index at the end.

-- Now change some rows with an existing fulltext_idx index.
UPDATE users SET fulltext_idx = "A User" WHERE name = "A User";

-- Now drop the fulltext_idx index.
DROP INDEX IF EXISTS fulltext_idx;

-- Now change the first two rows
UPDATE users SET name = "another name" WHERE name = "A User";
UPDATE users SET name = "another name" WHERE name = "another name";

-- Now let's see the results of the previous INSERT statement.
DESCRIBE users;
-- Drop all the tables.
DROP DATABASE IF EXISTS sampleDB; DROP TABLE IF EXISTS users;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

CREATE TABLE IF NOT EXISTS users(
	userId INT NOT NULL PRIMARY KEY,
	name VARCHAR(30) DEFAULT 'root'
); 
ALTER TABLE user ADD FULLTEXT INDEX fulltext_idx (name);
-- Please create two very similar but otherwise unequal programs. One should use FULLTEXT FULL and the other should NOT use FULLTEXT FULL at all and only use FULLTEXT INDEX in that case. Be careful in the second case because it has some drawbacks:
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users(
	userId INT NOT NULL PRIMARY KEY,
	name VARCHAR(30) DEFAULT 'root'
);
USE sampleDB;
ALTER TABLE user ADD FULLTEXT INDEX fulltext_idx (name);
-- Please create a program that will:
- Get all databases created by SELECT * FROM information_schema.tables WHERE TABLE_SCHEMA='sampleDB';
- Get all tables created by selecting * from information_schema.tables WHERE TABLE_SCHEMA='sampleDB';
- Get the contents of one of the tables with a WHERE clause WHERE table_name='users';

-- Please note that it is not allowed to use a view outside a table.
 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users(
	userId INT NOT NULL PRIMARY KEY,
	name VARCHAR(10) DEFAULT 'root',
	password VARCHAR(720)
);

CREATE VIEW users_view AS 
	SELECT * FROM sampleDB.users;
SELECT * FROM users_view;

SELECT * FROM sampleDB.users WHERE name='root';
-- Please use fulltext in any situation where the text is very complex to search. In this case, search is
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users(
	userId INT NOT NULL PRIMARY KEY,
	name VARCHAR(10) DEFAULT 'root',
	PASSWORD_HASH  VARCHAR(720) DEFAULT NULL,
	ROLE INT DEFAULT 2
);
DESCRIBE users;
-- Please create a semantically equivalent program to the MySQL SELECT statement using the FULLTEXT keyword of MySQL's FULLTEXT_FULL index.
USE sampleDB;
CREATE TABLE IF NOT EXISTS users(
	userId INT NOT NULL PRIMARY KEY,
	name VARCHAR(30) DEFAULT 'root'
);
USE sampleDB;
CREATE TABLE IF NOT EXISTS users(
	userId INT NOT NULL PRIMARY KEY,
	name VARCHAR(50) DEFAULT 'root'
);
USE sampleDB;
CREATE TABLE IF NOT EXISTS users(
	userId INT NOT NULL PRIMARY KEY,
	name VARCHAR(30) DEFAULT 'root'
);
ALTER TABLE users ADD FULLTEXT INDEX fulltext_idx (name);
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users(
	userId INT NOT NULL PRIMARY KEY,
	name VARCHAR(10) DEFAULT 'root',
	PASSWORD_HASH  VARCHAR(720) DEFAULT NULL,
	ROLE INT DEFAULT 2
);
DESCRIBE users;
DESC users;
USE sampleDB;
-- Please create a mutated program using JOIN to modify the existing program using a LEFT JOIN.
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users(
	userId INT NOT NULL PRIMARY KEY,
	name VARCHAR(10) DEFAULT 'root',
	PASSWORD_HASH  VARCHAR(720) DEFAULT NULL,
	ROLE INT DEFAULT 2
);
DESCRIBE users;
CREATE TABLE IF NOT EXISTS permissions(
	userId INT NOT NULL,
	roleId INT NOT NULL,
	CONSTRAINT fk_userId FOREIGN KEY(userId) REFERENCES users(userId) ON DELETE CASCADE ON UPDATE CASCADE,
	CONSTRAINT fk_roleId FOREIGN KEY(roleId) REFERENCES users(userId) ON DELETE CASCADE ON UPDATE CASCADE,
	PRIMARY KEY(userId, roleId)
);
DESCRIBE users;
DESCRIBE permissions;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
ALTER TABLE users ADD fulltext_idx (name NOT NULL UNIQUE);
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- Here I use the ENGINE=InnoDB statement to ensure the table in the database have the same structure.
CREATE TABLE IF NOT EXISTS users(
	userId INT NOT NULL PRIMARY KEY,
	name VARCHAR(50) DEFAULT 'root'
);
DESCRIBE users;
-- Please create an efficient program to insert only an expected number of rows in one go.
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS users;
CREATE TABLE IF NOT EXISTS users(
	userId INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
	name VARCHAR(50) DEFAULT 'root'
);
DESCRIBE users;
-- Please create a program that executes with MySQL 5.7 on and MySQL 8 and MySQL 5.5, 6, 7 and 8 on Mac systems. The program should perform multiple DELETE queries as described in your research.
USE sampleDB;
DROP TABLE IF EXISTS users;
CREATE TABLE IF NOT EXISTS users(
	userId INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
	name VARCHAR(50) DEFAULT 'root'
);
DESCRIBE users;
CREATE TABLE IF NOT EXISTS users_temp (
	userId INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
	name VARCHAR(50) DEFAULT 'root'
);
DESCRIBE users;
ALTER TABLE users ADD FULLTEXT_FULL INDEX fulltext_full_idx (name);
-- Please create a complex query which is difficult to create without proper understanding of the structure of the table
DROP TABLE IF EXISTS users;
CREATE TABLE IF NOT EXISTS users(
	userId INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
	name VARCHAR(200) DEFAULT 'root',
	PASSWORD_HASH  VARCHAR(720) DEFAULT NULL,
	PASSWORD TEXT DEFAULT NULL,
	date_of_birth DATE DEFAULT NULL,
	CONSTRAINT u_unique UNIQUE(name
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users(
	userId INT NOT NULL PRIMARY KEY,
	name VARCHAR(10) DEFAULT 'root',
	PASSWORD_HASH  VARCHAR(720) DEFAULT NULL,
	ROLE INT DEFAULT 2
);
DESCRIBE users;
CREATE TABLE IF NOT EXISTS users(
	userId INT NOT NULL PRIMARY KEY,
	name VARCHAR(10) DEFAULT 'root',
	PASSWORD_HASH  VARCHAR(720) DEFAULT NULL,
	ROLE INT DEFAULT 2
);
DESCRIBE users;
DROP TABLE users;
select * from users;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS users;
CREATE TABLE users(
  name VARCHAR(30)
);
CREATE TABLE IF NOT EXISTS users(
	userId INT NOT NULL PRIMARY KEY,
	user_name1 VARCHAR(40) DEFAULT 'root',
	user_name2 VARCHAR(40) DEFAULT 'root',
	user_login_date DATETIME DEFAULT FROM_UNIXTIME(UNIX_TIMESTAMP(NOW()) )
);
USE sampleDB;
ALTER TABLE users CHANGE COLUMN user_name2 user_login_date user_login_date DATE;
ALTER TABLE users CHANGE COLUMN user_login_date user_name2 user_name2 VARCHAR(40);
INSERT INTO users(user_name1, user_name2, user_login_date)
VALUES('root','joe','2003-08-14'),('nachoj','root'),('root','nachoj','2003-04-11'),'admin','admin';
ALTER TABLE users CHANGE COLUMN user_login_date user_name2 user_name2 DATE;
ALTER TABLE users CHANGE COLUMN user_name1 user_name1 VARCHAR(10);
ALTER TABLE users CHANGE COLUMN user_name1 user_name1 VARCHAR(10);
ALTER TABLE users CHANGE COLUMN user_name1 user_name1 VARCHAR(10);
ALTER TABLE users CHANGE COLUMN user_name1 user_name1 VARCHAR(10);
ALTER TABLE users CHANGE COLUMN user_name1 user_name1 VARCHAR(10);
ALTER TABLE users CHANGE COLUMN user_name1 user_name1 VARCHAR(10);
ALTER TABLE users CHANGE COLUMN user_name1 user_name1 VARCHAR(10);
ALTER TABLE users CHANGE COLUMN user_name1 user_name1 VARCHAR(10);
SELECT COUNT(*) FROM users;DROP DATABASE sampleDB;
 
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users(
	userId INT NOT NULL PRIMARY KEY,
	name VARCHAR(10) DEFAULT 'root',
	PASSWORD_HASH  VARCHAR(720) DEFAULT NULL,
	ROLE INT DEFAULT 2
);
DESCRIBE users;
DESC users;
USE sampleDB;
-- Please create a mutated program using JOIN to modify the existing program using a LEFT JOIN.
CREATE TABLE IF NOT EXISTS users(
	userId INT NOT NULL PRIMARY KEY,
	name VARCHAR(10) DEFAULT 'root',
	PASSWORD_HASH  VARCHAR(720) DEFAULT NULL,
	ROLE INT DEFAULT 2
);
DESCRIBE users;
CREATE TABLE IF NOT EXISTS permissions(
	userId INT NOT NULL,
	roleId INT NOT NULL,
	CONSTRAINT fk_userId FOREIGN KEY(userId) REFERENCES users(userId) ON DELETE CASCADE ON UPDATE CASCADE,
	CONSTRAINT fk_roleId FOREIGN KEY(roleId) REFERENCES users(userId) ON DELETE CASCADE ON UPDATE CASCADE,
	PRIMARY KEY(userId, roleId)
);
DESCRIBE users;
DESCRIBE permissions;
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
 
select userId, PASSWORD_HASH, name, ROLE from users INNER JOIN permissions
on users.userId = permissions.userId AND users.ROLE = permissions.roleId
where users.ROLE = 2;
GRANT ALL ON sampleDB.*;
-- Please modify the above to make it return 'root' as username.  You need to add the relevant code lines to match the output of your program.
GRANT ALL ON sampleDB.* TO 'root'@'%';
SET PASSWORD FOR 'root'@'%' = PASSWORD('<PASSWORD>');
-- Please use your modified program to create a mutated program using INNER JOIN to modify the existing program using a RIGHT JOIN. When you modify, create a new table and modify it using the tables already created.
GRANT ALL ON sampleDB.* TO 'root'@localhost;
SET PASSWORD FOR 'root'@localhost = PASSWORD('<PASSWORD>');
GRANT ALL ON sampleDB.*;
UPDATE permissions SET roleId = 3 WHERE userId = 1;
USE sampleDB;
SELECT userId, PASSWORD_HASH, name, ROLE from users INNER JOIN permissions
on users.userId = permissions.userId AND users.ROLE = permissions.roleId
where users.ROLE = 3;
USE sampleDB;
DROP TABLE IF EXISTS roles;
USE sampleDB;
CREATE TABLE IF NOT EXISTS roles(
	roleId INT NOT NULL PRIMARY KEY,
	name VARCHAR(100) NOT NULL
);
DESCRIBE roles;
GRANT ALL ON sampleDB.* TO 'root'@'%';
-- Your database is now set up. It should not take this long to run the following query.
SELECT COUNT(*) FROM roles;
CREATE TABLE
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users(
	userId INT NOT NULL PRIMARY KEY,
	name VARCHAR(10) DEFAULT 'root',
	PASSWORD_HASH  VARCHAR(720) DEFAULT NULL,
	ROLE INT DEFAULT 2
);
DESCRIBE users;
CREATE TABLE IF NOT EXISTS permissions(
	roleId INT NOT NULL,
	userId INT NOT NULL,
	CONSTRAINT fk_userId FOREIGN KEY(userId) REFERENCES users(userId) ON DELETE CASCADE ON UPDATE CASCADE,
	CONSTRAINT fk_roleId FOREIGN KEY(roleId) REFERENCES users(userId) ON DELETE CASCADE ON UPDATE CASCADE,
	PRIMARY KEY(roleId, userId)
);
DESCRIBE users;
DESCRIBE permissions;


[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS tables_users(
	id INT NOT NULL PRIMARY KEY,
	name VARCHAR(10) DEFAULT 'root',
	PASSWORD_HASH  VARCHAR(720) DEFAULT NULL,
	ROLE INT DEFAULT 2
);
DESCRIBE tables_users;
CREATE TABLE IF NOT EXISTS tables_permissions(
	id INT NOT NULL PRIMARY KEY,
	userId INT NOT NULL,
	roleId INT NOT NULL,
	CONSTRAINT fk_userId FOREIGN KEY(userId) REFERENCES tables_users(id) ON DELETE CASCADE ON UPDATE CASCADE,
	CONSTRAINT fk_roleId FOREIGN KEY(roleId) REFERENCES tables_users(id) ON DELETE CASCADE ON UPDATE CASCADE,
	PRIMARY KEY(id, userId, roleId)
);
DESCRIBE tables_users;
DESCRIBE tables_permissions;
 
SELECT COUNT(*) FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA=databaseName AND TABLE_TYPE='TABLE';
SELECT COUNT(*) FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA=databaseName AND TABLE_TYPE='BASE TABLE';
 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users(
	id INT NOT NULL PRIMARY KEY,
	name VARCHAR(10) DEFAULT 'root',
	PASSWORD_HASH VARCHAR(720) DEFAULT NULL,
	ROLE INT DEFAULT 2
);
DESCRIBE users;
CREATE TABLE IF NOT EXISTS permissions(
	id INT NOT NULL
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

DROP TABLE IF EXISTS users, permissions;
 
SELECT users.userId, users.name, users.PASSWORD_HASH, count(*) FROM users LEFT JOIN permissions ON users.userId=permissions.userId GROUP BY users.userId, users.name, users.PASSWORD_HASH, count(*) ORDER BY users.userId;
DESCRIBE users;
DESCRIBE permissions;
DROP DATABASE IF EXISTS sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users(
	userId INT NOT NULL PRIMARY KEY,
	name VARCHAR(10) DEFAULT 'root',
	PASSWORD_HASH  VARCHAR(720) DEFAULT NULL,
	ROLE INT DEFAULT 2
);
DESCRIBE users;
CREATE TABLE IF NOT EXISTS permissions(
	userId INT NOT NULL,
	roleId INT NOT NULL,
	CONSTRAINT fk_userId FOREIGN KEY(userId) REFERENCES users(userId) ON DELETE CASCADE ON UPDATE CASCADE,
	CONSTRAINT fk_roleId FOREIGN KEY(roleId) REFERENCES users(userId) ON DELETE CASCADE ON UPDATE CASCADE,
	PRIMARY KEY(userId, roleId)
);
DESCRIBE users;
DESCRIBE permissions;
insert into users (name, password_hash) values ('n1', encrypt('12'));
insert into users (name, password_hash) values ('n2', encrypt('57'));
insert into users (name, password_hash) values ('n3', encrypt('34'));

create table login_history(
	login_date DATETIME NOT NULL,
	ip_address VARCHAR(50),
	is_admin BOOLEAN DEFAULT FALSE,
	userId INT NOT NULL,
	PRIMARY KEY (login_date, ip_address),
	UNIQUE KEY (userId))

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users(
	userId INT NOT NULL PRIMARY KEY,
	name VARCHAR(10) DEFAULT 'root',
	PASSWORD_HASH  VARCHAR(720) DEFAULT NULL,
	ROLE INT DEFAULT 2
);
DESCRIBE users;
CREATE TABLE IF NOT EXISTS permissions(
	roleId INT NOT NULL,
	userId INT NOT NULL,
	CONSTRAINT fk_userId FOREIGN KEY(userId) REFERENCES users(userId) ON DELETE CASCADE ON UPDATE CASCADE,
	CONSTRAINT fk_roleId FOREIGN KEY(roleId) REFERENCES users(userId) ON DELETE CASCADE ON UPDATE CASCADE,
	PRIMARY KEY(roleId, userId)
);
DESCRIBE users;
DESCRIBE permissions;
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE users(
	userId INT NOT NULL PRIMARY KEY,
	name VARCHAR(10) DEFAULT 'root',
	PASSWORD_HASH  VARCHAR(720) DEFAULT NULL,
	ROLE INT DEFAULT 2
);
SELECT * FROM users;
SELECT ROUND((SELECT COUNT(*) FROM users),0);
SELECT ROUND(((SELECT COUNT(*) FROM users)*100)),2);
SELECT ROUND(SUM(roleId), 0);
DELETE FROM users WHERE roleId < 2;
DELETE FROM users WHERE roleId IS NULL; -- or ROUND((SELECT COUNT(*) FROM users)*100), 2)
SELECT ROUND((SELECT SUM(roleId) FROM users), 0.1); -- or ROUND((SELECT COUNT(*) FROM users)*100)/10000
DELIMITER ';';
GRANT SELECT ON users, permissions TO web_user; -- add it explicitly, will use the same username/password as on this host
FLUSH PRIVILEGES;
DELIMITER ; -- remove semicolon from the end to end the user function to end its execution
GRANT SELECT, SHOW DATABASES ON sampleDB TO web_user;
SELECT * FROM users;
PREPARE stmt FROM 'SHOW DATABASES';
EXECUTE stmt;
DELIMITER ; -- remove semicolon from end to end
DROP DATABASE sampleDB;
FLUSH privileges;
FLUSH PRIVILEGES;
DELIMITER ; -- remove semicolon from end to end the user function to end its execution
COMMIT;
DROP USER web_user;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATTABLE IF NOT EXISTS roles(
	userId INT NOT NULL PRIMARY KEY,
	name VARCHAR(10) DEFAULT 'root',
	ROLE INT DEFAULT 1,
	PASSWORD_HASH VARCHAR(720) DEFAULT NULL
);
DESCRIBE users;
DESCRIBE roles;
CREATE TABLE IF NOT EXISTS permissions(
	roleId INT NOT NULL,
	userId INT NOT NULL,
	CONSTRAINT fk_userId FOREIGN KEY(userId) REFERENCES users(userId) ON DELETE CASCADE ON UPDATE CASCADE,
	CONSTRAINT fk_roleId FOREIGN KEY(roleId) REFERENCES roles(userId) ON DELETE CASCADE ON UPDATE CASCADE,
	PRIMARY KEY(roleId, userId)
);
DESCRIBE users;
DESCRIBE roles;
DESCRIBE permissions;
CREATE TABLE IF NOT EXISTS permissions_2(
	roleId INT NOT NULL,
	userId INT NOT NULL,
	CONSTRAINT fk_userId FOREIGN KEY(userId) REFERENCES users(userId) ON DELETE CASCADE ON UPDATE CASCADE,
	CONSTRAINT fk_roleId FOREIGN KEY(roleId) REFERENCES roles(userId) ON DELETE CASCADE ON UPDATE CASCADE,
	PRIMARY KEY(roleId, userId)
);
DESCRIBE users;
DESCRIBE roles;
DESCRIBE permissions_2;
CREATE TABLE IF NOT EXISTS permissions_3(
	roleId INT NOT NULL,
	userId INT NOT NULL,
	CONSTRAINT fk_userId FOREIGN KEY(userId) REFERENCES users(userId) ON DELETE CASCADE ON UPDATE CASCADE,
	CONSTRAINT fk_roleId FOREIGN KEY(roleId) REFERENCES permissions_2(roleId) ON DELETE CASCADE ON UPDATE CASCADE,
	PRIMARY KEY(roleId, userId)
);
DESCRIBE users;
DESCRIBE roles;
DESCRIBE permissions_3;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users(
	roleId INT NOT NULL,
	userId INT NOT NULL,
	CONSTRAINT fk_userId FOREIGN KEY(userId) REFERENCES users(userId) ON DELETE CASCADE ON UPDATE CASCADE,
	CONSTRAINT fk_roleId FOREIGN KEY(roleId) REFERENCES users(roleId) ON DELETE CASCADE ON UPDATE CASCADE,
	PRIMARY KEY(roleId, userId)
);
DESCRIBE users;
GRANT ALL PRIVILEGES ON sampleDB.* TO 'root'@'%';
DESCRIBE sampleDB.users;
UPDATE users SET roleId = 1 WHERE userId=1;
DESCRIBE users;
 -- Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created.
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users(
	userId INT NOT NULL PRIMARY KEY,
	name VARCHAR(10) DEFAULT 'root',
	PASSWORD_HASH  VARCHAR(720) DEFAULT NULL,
	ROLE INT DEFAULT 2
);
DESCRIBE users;
CREATE TABLE IF NOT EXISTS permissions(
	roleId INT NOT NULL,
	userId INT NOT NULL,
	CONSTRAINT fk_userId FOREIGN KEY(userId) REFERENCES users(userId) ON DELETE CASCADE ON UPDATE CASCADE,
	CONSTRAINT fk_roleId FOREIGN KEY(roleId) REFERENCES users(userId) ON DELETE CASCADE ON UPDATE CASCADE,
	PRIMARY KEY(roleId, userId)
);
DESCRIBE users;
DESCRIBE permissions;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users(
	userId INT NOT NULL PRIMARY KEY,
	email VARCHAR(225) DEFAULT '<EMAIL>',
	PASSWORD_HASH  VARCHAR(720) DEFAULT <PASSWORD>',
	ROLE INT DEFAULT 2
);
DESCRIBE users;
-- Please create a semantically equivalent program to the previous one, but using stored procedures
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users(
	userId INT NOT NULL PRIMARY KEY,
	email VARCHAR(225) DEFAULT '<EMAIL>',
	PASSWORD_HASH  VARCHAR(720) DEFAULT NULL,
	ROLE INT DEFAULT 2,
	CONSTRAINT pk_userId PRIMARY KEY(userId)
);
DESCRIBE users;
--Please create a program using a stored procedure.
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

CREATE PROCEDURE add_student(@username nvarchar(255), @age INT, @gender nchar(1) DEFAULT 'F',
                               @course nvarchar(30))
AS
BEGIN
	INSERT INTO students (username, age, gender, course) 
	VALUES(@username, @age, @gender, @course);
END;

DECLARE @studentID INT;
EXEC add_Student '<NAME>', 18, 'M', 'COMP5300';
EXEC add_Student 'Kristine', 18, 'M', 'COMP5300';
EXEC add_Student 'Steven', 17, 'F', 'COMP4300';

EXECUTE spAddStudent '<NAME>', 18, 'M', 'COMP7300';
EXECUTE spAddStudent 'Daniel', 18, 'F', 'COMP4343';

SELECT studentId FROM students WHERE (course like '%COMP%3%5%4300%')
DECLARE @studentID INT;
SELECT @studentID=userId FROM users WHERE userName='Joseph';
SELECT @studentId;

-- Use @studentId as value to add a student to a course
DECLARE @studentID INT
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS users;
CREATE TABLE IF NOT EXISTS users(
	userId INT DEFAULT 1,
	name VARCHAR(20) DEFAULT 'root'
);
DESCRIBE users;
DROP TABLE IF EXISTS login;
CREATE TABLE IF NOT EXISTS login (
	email VARCHAR(40) DEFAULT '<EMAIL>',
	userId INT DEFAULT 1
);
DESCRIBE users;
DROP TABLE IF EXISTS dataTest;
CREATE TABLE IF NOT EXISTS dataTest (
	id INT DEFAULT 1,
	description VARCHAR(100) DEFAULT 'Description',
	amount DOUBLE
);
DESCRIBE users;
CREATE TABLE IF NOT EXISTS users(
	userId INT DEFAULT 1,
	name VARCHAR(20) DEFAULT 'root'
);
DESCRIBE users;
-- Please create a more meaningful program, which is simpler and more complex
DROP TABLE IF EXISTS users CASCADE;
CREATE TABLE IF NOT EXISTS users(
	userId INT DEFAULT 1,
	name VARCHAR(20) DEFAULT 'root'
);
DESCRIBE users;
DROP TABLE IF EXISTS users CASCADE;
CREATE TABLE IF NOT EXISTS login (
	email VARCHAR(25) DEFAULT '<EMAIL>',
	userId INT DEFAULT 1
);
DESCRIBE users;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users(
	userId INT NOT NULL PRIMARY KEY,
	name VARCHAR(10) DEFAULT 'root',
	PASSWORD_HASH  VARCHAR(720) DEFAULT NULL,
	ROLE INT DEFAULT 2
);
DESCRIBE users;
CREATE TABLE IF NOT EXISTS permissions(
	roleId INT NOT NULL,
	userId INT NOT NULL,
	CONSTRAINT fk_userId FOREIGN KEY(userId) REFERENCES users(userId) ON DELETE CASCADE ON UPDATE CASCADE,
	CONSTRAINT fk_roleId FOREIGN KEY(roleId) REFERENCES users(userId) ON DELETE CASCADE ON UPDATE CASCADE,
	PRIMARY KEY(roleId, userId)
);
DESCRIBE users;
DESCRIBE permissions;
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users(id INT NOT NULL PRIMARY KEY, name VARCHAR(10));
DESCRIBE users;
-- Please insert a row into table users with column name and password_hash NULL
INSERT INTO users (name, password_hash) VALUES ('root', NULL);
DESCRIBE users;
SELECT
  COUNT(*) AS num_rows
FROM
  users;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users(
	userId INT NOT NULL PRIMARY KEY,
	email_address varchar(500),
	role INT DEFAULT 2
);
DESCRIBE users;
CREATE TABLE IF NOT EXISTS permissions(
	roleId INT NOT NULL,
	userId INT NOT NULL,
	CONSTRAINT fk_userId FOREIGN KEY(userId) REFERENCES users(userId) ON DELETE CASCADE ON UPDATE CASCADE,
	CONSTRAINT fk_roleId FOREIGN KEY(roleId) REFERENCES users(userId) ON DELETE CASCADE ON UPDATE CASCADE,
	PRIMARY KEY(roleId, userId)
);
DESCRIBE users;
DESCRIBE permissions;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users(
	userId INT NOT NULL,
	name VARCHAR(10) DEFAULT 'root',
	password_hash VARCHAR(720) DEFAULT NULL,
	role_id int DEFAULT 2
);
DESCRIBE users;
CREATE TABLE IF NOT EXISTS groups(
	groupId INT NOT NULL,
	roleId int NOT NULL DEFAULT 2,
	CONSTRAINT fk_groupId FOREIGN KEY(groupId) REFERENCES users(userId) ON DELETE CASCADE ON UPDATE CASCADE,
	CONSTRAINT fk_roleId FOREIGN KEY(roleId) REFERENCES users(userId) ON DELETE CASCADE ON UPDATE CASCADE,
	PRIMARY KEY( groupId, roleId)
);
DESCRIBE groups;
DESCRIBE users;
DESCRIBE permissions;
CREATE TABLE IF NOT EXISTS permissions(
	group_id INT NOT NULL,
	role_id INT NOT NULL,
	CONSTRAINT fk_role_id FOREIGN KEY(role_id) REFERENCES users(userId) ON DELETE CASCADE ON UPDATE CASCADE,
	CONSTRAINT fk_group_id FOREIGN KEY(group_id) REFERENCES users(userId) on delete cascade on update cascade,
	PRIMARY KEY( group_id, role_id )
);
DESCRIBE permissions;
DESCRIBE users;
DESCRIBE groups;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
	CREATE TABLE IF NOT EXISTS Users(
	UserId INT NOT NULL PRIMARY KEY,
	Userpass VARCHAR(20),
	UserRole VARCHAR(10),
	UserType BIT(1) DEFAULT 1
);
	CREATE TABLE IF NOT EXISTS UsersPermission(
	UserId INT NOT NULL,
	RoleId INT NOT NULL,
	UserRole varchar(5),
	Primary Column UserId INT NOT NULL,
	Primary Column RoleId INT NOT NULL,
	Foreign Key UserId(UserId),
	Foreign Key RoleId(RoleId),
	FOREIGN Key UserId(UserId) UNIQUE,
	FOREIGN Key RoleId(RoleId) UNIQUE
);
	DESCRIBE Users;
	DESCRIBE UsersPermission;
-- Please add a second table called 'admin'. Create, then modify, and drop two views.
CREATE TABLE IF NOT EXISTS adminusers(
	UserId INT NOT NULL PRIMARY KEY,
	Admin BIT(1) DEFAULT true
);

 
ALTER TABLE adminusers ADD PRIMARY KEY(UserId, AdminUsers);
DESCRIBE adminusers;
CREATE VIEW Users_Admin AS SELECT * FROM 'adminusers' JOIN UsersPermission on UsersPermission.UserId = UserPermission.UserId AND UsersPermission.RoleID = AdminPermission.RoleID;
DESCRIBE Users_Admin;
CREATE VIEW Users_AdminPermission AS SELECT * FROM 'adminusers' JOIN UsersPermission on UsersPermission.UserId = AdminPermission.UserId AND UsersPermission.RoleId = AdminPermission.RoleId;
DESCRIBE Users_AdminPermission;
/*
Finally, update the Views in the first query to display the
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users2(
	userId INT NOT NULL PRIMARY KEY,
	name VARCHAR(10) DEFAULT 'root',
	PASSWORD_HASH  VARCHAR(720) DEFAULT NULL
);
DESCRIBE users2;
ALTER TABLE users2 ADD COLUMN password VARCHAR(720); USE sampleDB;
DESCRIBE users2;
-- You can now create a view
USE sampleDB; CREATE OR REPLACE VIEW usersView AS SELECT * FROM users; DESC usersView;
# Note that the view does not include the password column as it is not included in the schema
USE sampleDB; CREATE OR REPLACE VIEW usersView2 AS SELECT * FROM users; DESC usersView2;
SHOW TABLE STATUS LIKE 'users';
SHOW TABLE STATUS LIKE 'user1';
USE sampleDB; SELECT * FROM usersView; SHOW TABLE STATUS LIKE 'users';
SHOW TABLE STATUS LIKE 'user1';
# Show me the password from user1 in the main users database
SHOW VARIABLES LIKE 'authuser';
USE sampleDB; ALTER VIEW usersView ADD COLUMN password1 VARCHAR(720);
SHOW VARIABLES LIKE 'authuser';
# View the change in usersView2
SELECT * FROM usersView2;
SHOW TABLE STATUS LIKE 'user1';
SHOW TABLE STATUS LIKE 'user2';
USE sampleDB; UPDATE usersView2 SET password1 = <PASSWORD>();
SHOW TABLE STATUS LIKE 'user1';
SHOW TABLE STATUS LIKE 'user2';
USE sampleDB; ALTER VIEW usersView DROP COLUMN password;
USE sampleDB; ALTER VIEW usersView2 DROP COLUMN password;
DROP VIEW usersView2;
DROP VIEW usersView;
USE sampleDB;
SELECT COUNT(*) FROM users;
SHOW VARIABLES LIKE 'user';
DELETE FROM permissions WHERE roleId=1 AND userId=2;
SHOW VARIABLES LIKE 'user';
-- You should now have a view that does contain the password, but no password1 column
USE sampleDB; SHOW VARIABLES LIKE 'user';
# Drop user
USE sampleDB; SHOW VARIABLES LIKE 'user';
DROP USER 1;
SHOW VARIABLES LIKE 'user';
-- You should now
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users(
	userId INT NOT NULL PRIMARY KEY,
	email_address varchar(500),
	role INT DEFAULT 2
);
DESCRIBE users;
CREATE TABLE IF NOT EXISTS permissions(
	roleId INT NOT NULL,
	userId INT NOT NULL,
	CONSTRAINT fk_userId FOREIGN KEY(userId) REFERENCES users(userId) ON DELETE CASCADE ON UPDATE CASCADE,
	CONSTRAINT fk_roleId FOREIGN KEY(roleId) REFERENCES users(userId) ON DELETE CASCADE ON UPDATE CASCADE,
	PRIMARY KEY(roleId, userId)
);
DESCRIBE users;
DESCRIBE permissions;
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users(
	id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
	name varchar(500),
	role INT DEFAULT 2,
	profile_photo varchar(500)
);
DESCRIBE users;
CREATE TABLE IF NOT EXISTS profiles(
	userId INT NOT NULL,
	bio MEDIUMBLOB,
	CONSTRAINT fk_userId FOREIGN KEY(userId) REFERENCES users(userId) REFERENCES users(userId) ON DELETE CASCADE ON UPDATE CASCADE,
	PRIMARY KEY (userId),
	UNIQUE (userId),
	FOREIGN KEY (userId) REFERENCES users(userId) REFERENCES users(userId) ON DELETE CASCADE ON UPDATE CASCADE,
	UNIQUE (userData)
);
DESCRIBE users;
DESCRIBE profiles;
CREATE TABLE IF NOT EXISTS role_assignments(
	roleId INT NOT NULL,
	userId INT NOT NULL,
	CONSTRAINT fk_roleId FOREIGN KEY(roleId) REFERENCES users(userId) ON DELETE CASCADE ON UPDATE CASCADE,
	CONSTRAINT fk_userId FOREIGN KEY(userId) REFERENCES users(userId) ON DELETE CASCADE ON UPDATE CASCADE,
	PRIMARY KEY(roleId, userId)
);
DESCRIBE users;
DESCRIBE role_assignments;
CREATE TABLE IF NOT EXISTS posts(
	id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
	posting_date datetime,
	body text,
	userId INT,
	CONSTRAINT fk_userId FOREIGN KEY(userId) REFERENCES users(userId) REFERENCES users(userId) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (userId) REFERENCES users(userId) REFERENCES users(userId) ON DELETE CASCADE ON UPDATE CASCADE,
	UNIQUE (posting_date, body, userId)
);
DESCRIBE users;
DESCRIBE posts;<commit_msg>Removing more lines<commit_after> 
 

<fim_middle>CREATE TABLE IF NOT EXISTS users(
	userId INT NOT NULL,
	email_address varchar(500) UNIQUE NOT NULL,
	role INT DEFAULT 2,
	profile_photo varchar(500)
);
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS UsersPermissions;
CREATE TABLE IF NOT EXISTS UsersPermissions(
	roleId INT NOT NULL,
	userId INT NOT NULL,
	CONSTRAINT fk_roleId FOREIGN KEY(roleId) REFERENCES users(userId) ON DELETE CASCADE ON UPDATE CASCADE,
	CONSTRAINT fk_userId FOREIGN KEY(userId) REFERENCES users(userId) ON DELETE CASCADE ON UPDATE CASCADE,
	PRIMARY KEY(roleId, userId)
);
DESCRIBE sampleDB.UsersPermissions;

CREATE TABLE IF NOT EXISTS Products(
	productId INT AUTO_INCREMENT NOT NULL,
	productCategoryId INT NOT NULL,
	productName VARCHAR(200) NOT NULL,
	price DOUBLE DEFAULT NULL,
	productCode VARCHAR(50) NULL,
	CONSTRAINT fk_productCategoryId FOREIGN KEY(productCategoryId) REFERENCES ProductsCategories(productCategoryId) ON DELETE CASCADE ON UPDATE CASCADE,
	PRIMARY KEY(productId)
);
DESCRIBE Products;
CREATE TABLE IF NOT EXISTS ProductsCategories(
	productCategoryId INT AUTO_INCREMENT NOT NULL PRIMARY KEY,
	productCategoryIdName VARCHAR(50) NULL
);
DESCRIBE Products;
-- Please create a program which creates new records in a table that is named SalesOrders. You should include 3 columns in the new table. Use auto-incremented integer.

CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS SalesOrders(
	salesOrderId INT AUTO_INCREMENT NOT NULL PRIMARY KEY,
	salesOrderNumber CHAR(12) NOT NULL,
	customerName VARCHAR(50),
	customerAddress VARCHAR(50),
	paymentAmount DOUBLE DEFAULT NULL,
	orderStatus INT DEFAULT 1
);
DESCRIBE SalesOrders;
DESCRIBE ProductsCategories;

-- Please create a sample table that has the following columns: product_id, product_category_id, description and cost.

CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS ProductTableWithConstraints(
	productID INT NOT NULL,
	productCategoryId INT NOT NULL,
	productDescription VARCHAR(50) NOT NULL,
	productCost DOUBLE DEFAULT NULL,
	CONSTRAINT fk_categoryId FOREIGN KEY(productCategoryId)
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE users CASCADE;
DROP TABLE permissions CASCADE;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users
(
	userId INT NOT NULL,
	email_address varchar(500),
	role INT DEFAULT 2,
	CONSTRAINT pkUserId PRIMARY KEY(userId),
	CONSTRAINT uk_email_unique UNIQUE(email_address),
);
-- The following three INSERT commands will result in an error. The USERS
-- table already contains users with userId=1. If userId=1 is inserted as
-- the first row in users, it will work (no errors). The only exception is
-- if the command fails because the constraint was not respected.
INSERT INTO  users(userId, email_address, role) VALUES (1, '<EMAIL>', 1);
INSERT INTO  users(userId, email_address, role) VALUES (2, '<EMAIL>', 2);
INSERT INTO  users(userId, email_address, role) VALUES (10, '<EMAIL>', 1);
-- Drop user1. This constraint was not respected because it is the only
-- UNIQUE constraint defined in the users table.
ALTER TABLE users DROP CONSTRAINT unique_email_address; 
DESCRIBE permissions; 
-- The following three INSERT commands will result in an error. This is
-- why it is not correct. It is allowed to add a row twice for the
-- column userId when the userId column is auto-incremented. The UNIQUE
-- constraint on the column email_address does already prevent an
-- unwanted row to be added.
INSERT INTO users values(1, '<EMAIL>', 1);
INSERT INTO users values(2, '<EMAIL>', 1);
INSERT INTO users values(10, '<EMAIL>', 1);
-- Drop user2. The constraint of the userId column is not respected
-- (because it is PRIMARY).
ALTER TABLE users DROP CONSTRAINT unique_email_address;
-- Drop the table users
DROP TABLE users;
DESCRIBE roles;
-- For simplicity, just drop the roles 1,2 and 10
DO $$
    BEGIN
        DELETE FROM roles WHERE roleId = 1;
        DELETE FROM roles WHERE roleId = 2;
        DELETE FROM roles WHERE roleId = 10;
    END; $$;
DESCR
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users(
	userId INT NOT NULL PRIMARY KEY,
	email_address VARCHAR(500)
);
DESCRIBE users;
INSERT INTO users (email_address, role) VALUES ('<EMAIL>','2');
DESCRIBE users;
CREATE TABLE IF NOT EXISTS permissions(
	roleId INT NOT NULL,
	userId INT NOT NULL,
	CONSTRAINT uk_userId UNIQUE(userId),
	CONSTRAINT fk_userId FOREIGN KEY(userId) REFERENCES users(userId) ON DELETE CASCADE ON UPDATE CASCADE,
	CONSTRAINT fk_roleId FOREIGN KEY(roleId) REFERENCES users(userId) ON DELETE CASCADE ON UPDATE CASCADE,
	PRIMARY KEY(roleId, userId)
);
DESCRIBE users;
DESCRIBE permissions;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users(
	userId INT NOT NULL PRIMARY KEY,
	email_address varchar(500),
	role INT DEFAULT 2
);
DESCRIBE users;
CREATE TABLE IF NOT EXISTS permissions(
	roleId INT NOT NULL,
	userId INT NOT NULL,
	CONSTRAINT fk_userId FOREIGN KEY(userId) REFERENCES users(userId) ON DELETE CASCADE ON UPDATE CASCADE,
	CONSTRAINT fk_roleId FOREIGN KEY(roleId) REFERENCES users(userId) ON DELETE CASCADE ON UPDATE CASCADE,
	PRIMARY KEY(roleId, userId)
);
DESCRIBE users;
DESCRIBE permissions;
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users(
	userId INT NOT NULL PRIMARY KEY,
	name varchar(500),
	role VARCHAR (2) DEFAULT 'R'
);
CREATE TABLE IF NOT EXISTS permissions(
	roleId INT NOT NULL,
	userId INT NOT NULL,
	CONSTRAINT fk_userId FOREIGN KEY(userId) REFERENCES users(userId) ON DELETE CASCADE ON UPDATE CASCADE,
	CONSTRAINT fk_roleId FOREIGN KEY(roleId) REFERENCES users(roleId) ON DELETE CASCADE ON UPDATE CASCADE,
	PRIMARY KEY(roleId, userId)
);
CREATE TABLE IF NOT EXISTS permissions2(
	roleId INT NOT NULL,
	userId INT NOT NULL,
	CONSTRAINT fk_userId FOREIGN KEY(userId) REFERENCES users(userId) ON DELETE CASCADE ON UPDATE CASCADE,
	CONSTRAINT fk_roleId FOREIGN KEY(roleId) REFERENCES users(roleId) ON DELETE CASCADE ON UPDATE CASCADE,
	PRIMARY KEY(roleId, userId)
);
INSERT INTO users (userId, name, role) VALUES (1, 'User1 ', 'R');
INSERT INTO users (userId, name, role) VALUES (2, 'User2 ', 'R');
INSERT INTO permissions (roleId, userId) VALUES (1, 1);
INSERT INTO permissions (roleId, userId) VALUES (1, 2);
INSERT INTO permissions2 (roleId, userId) VALUES (1, 1);
DESCRIBE users;
DESCRIBE permissions;
DESCRIBE permissions2;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users(
	userId INT NOT NULL PRIMARY KEY,
	email_address varchar(500),
	role INT DEFAULT 2
);
DESCRIBE users;
CREATE TABLE IF NOT EXISTS permissions(
	roleId INT NOT NULL,
	userId INT NOT NULL,
	CONSTRAINT fk_userId FOREIGN KEY(userId) REFERENCES users(userId) ON DELETE CASCADE ON UPDATE CASCADE,
	CONSTRAINT fk_roleId FOREIGN KEY(roleId) REFERENCES users(userId) ON DELETE CASCADE ON UPDATE CASCADE,
	PRIMARY KEY(roleId, userId)
);
DESCRIBE users;
DESCRIBE permissions;
DROP TABLE users CASCADE;
DROP TABLE permissions CASCADE;
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

CREATE TABLE IF NOT EXISTS users(
	userId INT NOT NULL AUTO_INCREMENT NOT NULL PRIMARY KEY,
	email_address varchar(500),
	role INT DEFAULT 2
);
DESCRIBE users;
CREATE TABLE IF NOT EXISTS permissions(
	roleId INT NOT NULL AUTO_INCREMENT NOT NULL,
	userId INT NOT NULL,
	CONSTRAINT fk_userId FOREIGN KEY(userId) REFERENCES users(userId) ON DELETE CASCADE ON UPDATE CASCADE,
	CONSTRAINT fk_roleId FOREIGN KEY(roleId) REFERENCES users(roleId) ON DELETE CASCADE ON UPDATE CASCADE,
	PRIMARY KEY(roleId, userId)
);
DESCRIBE users;
DESCRIBE permissions;
DROP TABLE IF EXISTS users;
DROP TABLE IF EXISTS permissions;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users(
	user_id INT NOT NULL PRIMARY KEY,
	user_email varchar(500)
);
DESCRIBE users;
CREATE TABLE IF NOT EXISTS blog_posts(
	blog_post_id INT NOT NULL PRIMARY KEY,
	blog_post_title varchar(200),
	blog_post_content text,
	blog_post_author_id INT NOT NULL
);
DESCRIBE blog_posts;
DESCRIBE permissions;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users(
	userId INT PRIMARY KEY,
	username varchar(500),
	type int
);
DESCRIBE users;
INSERT INTO users(userId, username, type) VALUES (1, 'admin', 1);
DESCRIBE users;
ALTER TABLE users ADD COLUMN role INT DEFAULT 2;
DESCRIBE tables users;
DESCRIBE users;
ALTER TABLE users DROP COLUMN type;
DESCRIBE tables users;
DESCRIBE users;
ALTER TABLE users ADD CONSTRAINT fk_role INT FOREIGN KEY (role) REFERENCES users(userId)
ON DELETE CASCADE ON UPDATE CASCADE;
DESCRIBE tables users;
DESCRIBE users;
INSERT INTO permissions SELECT * FROM users WHERE userName='admin' AND role=1;
DESCRIBE tables permissions;
DESCRIBE permissions;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users(
	user_id INT NOT NULL PRIMARY KEY,
	user_email varchar(500)
);
DESCRIBE users;
CREATE TABLE IF NOT EXISTS blog_posts(
	blog_post_id INT NOT NULL PRIMARY KEY,
	blog_post_title varchar(200),
	blog_post_content text,
	blog_post_author_id INT NOT NULL
);
DESCRIBE blog_posts;
DESCRIBE permissions;
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users(
	user_id INT NOT NULL PRIMARY KEY UNIQUE,
	user_login_id varchar(50),
	user_email varchar(500)
);
CREATE TABLE IF NOT EXISTS user_blog(
	user_id INT NOT NULL,
	blog_post_id INT NOT NULL
);
DESCRIBE user_blog;
CREATE TABLE IF NOT EXISTS roles(
	role_id INT NOT NULL PRIMARY KEY UNIQUE,
	role_name varchar(200) UNIQUE
);
DESCRIBE roles;

INSERT INTO roles(role_id, role_name)
VALUES('1', 'Super Admin'),
('2', 'Admin'),
('3', 'Staff');

INSERT INTO roles_permissions(roles_permissions_id, roles_id, permissions_id)
VALUES('1', '1', '1'),
('2', '1', '2'),
('3', '1', '3'),
('4', '2', '1'),
('5', '2', '4'),
('6', '2', '2'),
('7', '3', '4'),
('8', '3', '3');

ALTER TABLE user_blog
    ADD CONSTRAINT users_id_users FOREIGN KEY (user_id) REFERENCES users(user_id),

    ADD CONSTRAINT user_blog_blog_post_id_blog_posts FOREIGN KEY (blog_post_id) REFERENCES blog_posts(blog_post_id);

ALTER TABLE users
    ADD CONSTRAINT users_blog_posts_id FOREIGN KEY(blog_post_author_id) REFERENCES blog_posts(blog_post_id);

UPDATE permissions
SET permissions_value_id = 8
WHERE permissions_name = 'Access';
UPDATE permissions
SET permissions_value = -1
WHERE permissions_name = 'Update';
    
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users(
	user_id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
	user_email varchar(500)
);
DESCRIBE users;
CREATE TABLE IF NOT EXISTS blog_posts(
	blog_post_id INT NOT NULL AUTO_INCREMENT,
	blog_post_title varchar(200),
	blog_post_content text,
	blog_post_author_id INT NOT NULL,
	PRIMARY KEY(blog_post_id)
);
DESCRIBE blog_posts;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users(
	user_id INT NOT NULL PRIMARY KEY,
	user_email varchar(500)
);
DESCRIBE users;
CREATE TABLE IF NOT EXISTS blog_posts(
	blog_post_id INT NOT NULL PRIMARY KEY,
	blog_post_title varchar(200),
	blog_post_content text,
	blog_post_author_id INT NOT NULL
);
DESCRIBE blog_posts;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS category(
	cat_id INT NOT NULL  PRIMARY KEY AUTO_INCREMENT,
	cat_name text
);
DESCRIBE category;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users(
	user_id INT NOT NULL PRIMARY KEY,
	user_email varchar(500)
);
DESCRIBE users;
CREATE TABLE IF NOT EXISTS blog_posts(
	blog_post_id INT NOT NULL PRIMARY KEY,
	blog_post_title varchar(200),
	blog_post_content text,
	blog_post_author_id INT NOT NULL
);
DESCRIBE blog_posts;
DESCRIBE permissions;
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users(
	user_id INT NOT NULL PRIMARY KEY,
	user_email varchar(500)
);
DESCRIBE users;
CREATE TABLE IF NOT EXISTS blog_posts(
	blog_post_id INT NOT NULL PRIMARY KEY,
	blog_post_title varchar(200),
	blog_post_content text,
	blog_post_author_id INT NOT NULL
);
DESCRIBE blog_posts;
DESCRIBE permissions;
 
CREATE DATABASE IF NOT EXISTS sampleDB;
CREATE TABLE IF NOT EXISTS users(
	user_id INT NOT NULL PRIMARY KEY,
	user_email varchar(500)
);
DESCRIBE users;
CREATE TABLE IF NOT EXISTS blog_posts(
	blog_post_id INT NOT NULL PRIMARY KEY,
	blog_post_title varchar(200),
	blog_post_content text,
	blog_post_author_id INT NOT NULL
);
DESCRIBE blog_posts;
DESCRIBE permissions;
SELECT COUNT(*) FROM blog_posts;
INSERT INTO users (user_email)
VALUES
('<EMAIL>'),
('<EMAIL>'),
('<EMAIL>'),
('<EMAIL>');
INSERT INTO blog_posts
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS category(
	cat_id INT NOT NULL  PRIMARY KEY AUTO_INCREMENT,
	cat_name text
);
DESCRIBE category;
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS category(
	cat_id INT NOT NULL,
	cat_name text,
	PRIMARY KEY (cat_id)
);
INSERT INTO category VALUES (6,'New York');
INSERT INTO category VALUES (10,'California');
INSERT INTO category VALUES (12,'Indiana');
INSERT INTO category VALUES (19,'Washington');
SELECT title, price FROM movie WHERE movie_name='Maddogger';
INSERT INTO movie(movie_name, movie_director, movie_rating, movie_language, genre) VALUES ('Dune', 'Judgment', 9.3, 'Spanish', 'Action,Horror,Romance');
DESCRIBE movie;
DROP TABLE category;
SELECT * FROM category;
DROP DATABASE sampleDB;
-- Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created.

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS category(
	cat_id INT NOT NULL  PRIMARY KEY AUTO_INCREMENT,
	cat_name text
);
INSERT INTO category(cat_id,cat_name) VALUES(1,'First Category'); INSERT INTO category(cat_id,cat_name) VALUES(2,'Second Category'); INSERT INTO category(cat_id,cat_name) VALUES(3,'Third Category'); INSERT INTO category(cat_id,cat_name) VALUES(4,'Fourth Category');
DESCRIBE category;
DROP TABLE category;
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS category(cat_id INT, cat_name text);
UPDATE category c set c.cat_name = cat_name;
REPLACE category c2(cat_id INT, cat_name text);
```

## **The End**

Happy Programming :-)

---

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS category(
	cat_id INT NOT NULL  PRIMARY KEY AUTO_INCREMENT,
	cat_name text
);
DESCRIBE category;
DROP TABLE category;
DROP DATABASE IF EXISTS sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS category(
	cat_id INT NOT NULL  PRIMARY KEY AUTO_INCREMENT,
	cat_name text
);
DESCRIBE category;
-- Please create a program that uses both JOIN and INNER SQLEXPRESSIONS for the same data.

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS category(
	cat_id INT NOT NULL  PRIMARY KEY AUTO_INCREMENT,
	cat_name text
);
DESCRIBE category;
-- Please create a program that uses both JOIN and INNER SQLEXPRESSIONS for the same data.
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS products;
CREATE TABLE products(
	pid int auto_increment,
	pname varchar(255),
	price int,
	category_id int,
	PRIMARY KEY (pid),
	FOREIGN KEY (category_id) REFERENCES category(catId)
);
DESCRIBE products;
DROP TABLE IF EXISTS customers;
CREATE TABLE customers(
	cid int auto_increment,
	fullname text,
	address text,
	city text,
	state text,
	PRIMARY KEY (cid)
);
DESCRIBE customers;

CREATE TABLE customeraddress(
cid int,
addressid int,
PRIMARY KEY((cid), addressid),
FOREIGN KEY (cid) REFERENCES customers(cid),
FOREIGN KEY (addressid) REFERENCES address(addrId)
);
DESCRIBE customeraddress;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS cat_product(
	prod_id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
	cat_fk INT NOT NULL,
	prod_name text
);
DESCRIBE cat_product;
USE sampleDB;
INSERT INTO category (cat_id, cat_name) VALUES (1, 'Baby Foods');
INSERT INTO category (cat_id, cat_name) VALUES (2, 'Baking Products');
INSERT INTO category (cat_id, cat_name) VALUES (3, 'Breads and Bakery');
INSERT INTO category (cat_id, cat_name) VALUES (4, 'Books');
INSERT INTO category (cat_id, cat_name) VALUES (5, 'Cakes, Chips, Potions');
INSERT INTO category (cat_id, cat_name) VALUES (6, 'Donuts, Fruits, Spices');
INSERT INTO category (cat_id, cat_name) VALUES (7, 'Drinks and Water');
INSERT INTO category (cat_id, cat_name) VALUES (8, 'Electronics, Apparelines, Furnishings');
INSERT INTO category (cat_id, cat_name) VALUES (9, 'Fish, Seafood');
INSERT INTO category (cat_id, cat_name) VALUES (10, 'Frozen Foods');
INSERT INTO category (cat_id, cat_name) VALUES (11, 'Grocery Stores');
INSERT INTO category (cat_id, cat_name) VALUES (12, 'Jewelery');
INSERT INTO category (cat_id, cat_name) VALUES (13, 'Leathers and Hoodies');
INSERT INTO category (cat_id, cat_name) VALUES (14, 'Meat');
INSERT INTO category (cat_id, cat_name) VALUES (15, 'Mobile Phones');
INSERT INTO category (cat_id, cat_name) VALUES (16, 'Nail Grooming');
INSERT INTO category (cat_id, cat_name) VALUES (17, 'Notebooks and Songs');
INSERT INTO category (cat_id, cat_name) VALUES (18, 'Pasta');
INSERT INTO category (cat_id, cat_name) VALUES (19, 'Pets');
INSERT INTO category (cat_id, cat_name) VALUES (20, 'Pet Supplements');
INSERT INTO category (cat_id, cat_name) VALUES (2
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS blog (
	bid INT PRIMARY KEY AUTO_INCREMENT,
	title text,
	cat_id INT,
	cat_name text,
	content text);
DESCRIBE blog;
-- Please create a program that uses the WHERE clause to return all blogs that have a category of ‘Entertainment’.

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- Create 3 tables
CREATE TABLE IF NOT EXISTS user_tbl (
	usr_id INT NOT NULL,
	usr_name text
);

CREATE TABLE IF NOT EXISTS users_role_tbl (
	usr_id INT,
	role text
);
-- INSERT VALUES
INSERT INTO user_tbl VALUES 1, "Beno";
INSERT INTO user_tbl VALUES 2, "Josak";
INSERT INTO user_tbl VALUES 3, "Alain";
INSERT INTO users_role_tbl VALUES 1, "Admin";
INSERT INTO users_role_tbl VALUES 2, "User";
INSERT INTO users_role_tbl VALUES 2, "Administrator";
-- SELECT (see the column ORDER BY)
SELECT usr_name FROM user_tbl ORDER BY usr_name ASC;
-- JOIN
SELECT u.usr_name, u.usr_id, r.role FROM users_role_tbl AS r LEFT JOIN user_tbl u ON u.usr_id = r.usr_id;
SELECT u.usr_name, u.usr_id, r.role FROM user_tbl u LEFT JOIN users_role_tbl AS r ON u.usr_id = r.usr_id WHERE u.usr_id IN (2, 3);
SELECT u.usr_name, u.usr_id, r.role AS role FROM user_tbl u LEFT JOIN users_role_tbl AS r ON u.usr_id = r.usr_id WHERE r.role = 'Admin';
-- IN AND NOT IN
SELECT u.usr_name, u.usr_id, r.role AS role FROM user_tbl u LEFT JOIN users_role_tbl AS r ON u.usr_id = r.usr_id WHERE u.usr_id = 2 OR u.usr_id = 3;
SELECT u.usr_name, u.usr_id, r.role AS role FROM user_tbl u LEFT JOIN users_role_tbl AS r ON u.usr_id = r.usr_id WHERE u.usr_name IN ('Beno', 'Josak') AND NOT u.usr_id IN (2, 4);
-- LIKE
SELECT u.usr_name, u.usr_id, r.role AS role FROM user_tbl u LEFT JOIN users_role_tbl AS r ON u.usr_id = r.usr_id WHERE u.usr_name LIKE '%eno';
-- DELETE
DELETE FROM users_role_tbl WHERE role = 'Administrator';
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS author(
	author_id INT NOT NULL  PRIMARY KEY AUTO_INCREMENT,
	author_name text
);
DESCRIBE author;
INSERT INTO author VALUES('John','Albert');
INSERT INTO author VALUES('Paul','John');
INSERT INTO author VALUES('John','Paul');
SELECT * FROM category;
SELECT a.author_id,a.author_name
FROM author a,author b,category c
WHERE a.author_id=b.author_id
AND b.author_id=c.cat_id
ORDER BY a.author_id;
SELECT a.author_id,b.author_name,
count(*) as num
FROM author a,author b,category c
WHERE a.author_id=b.author_id
AND b.author_id=c.cat_id
GROUP BY a.author_id
ORDER BY a.author_id;
--
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS author(
	author_id INT NOT NULL  PRIMARY KEY AUTO_INCREMENT,
	author_name text
);
DESCRIBE author;
INSERT INTO author VALUES('John','Albert');
INSERT INTO author VALUES('Paul','John');
INSERT INTO author VALUES('John','Paul');
SELECT * FROM category;
SELECT a.author_id,a.author_name
FROM author a,author b,category c
WHERE a.author_id=b.author_id
AND b.author_id=c.cat_id
ORDER BY a.author_id;
SELECT a.author_id,b.author_name,
count(*) as num
FROM author a,author b,category c
WHERE a.author_id=b.author_id
AND b.author_id=c.cat_id
GROUP BY a.author_id
ORDER BY a.author_id;
--
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS author(
    author_id INT NOT NULL  PRIMARY KEY AUTO_INCREMENT,
    author_name text
);
DESCRIBE author;

INSERT INTO author VALUES('John','Albert');
INSERT INTO author VALUES('Paul','John');
INSERT INTO author VALUES('John','Paul');
USE sampleDB;
SELECT a.author_id,a.author_name
FROM author a,author b,category c
WHERE a.author_id=b.author_id
AND b.author_id=c.cat_id
ORDER BY a.author_id;
SELECT a.author_id,b.author_name,
count(*) as num
FROM author a,author b,category c
WHERE a.author_id=b.author_id
AND b.author_id=c.cat_id
GROUP BY a.author_id
ORDER BY a.author_id;
--
-- Please add new tables to sampleDB with a suitable index structure in its schema. Make sure to be sure you are using one of the index options used with other indexes. A couple of them are shown in the table below which is part of MySQL. They are used when the table is small enough and the values will be stored in the file. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS author(
    author_id INT NOT NULL  PRIMARY KEY AUTO_INCREMENT,
    author_name text
);
DESCRIBE author;

INSERT INTO author VALUES('John','Albert');
INSERT INTO author VALUES('Paul','John');
INSERT INTO author VALUES('John','Paul');
--
-- Indexes are what are used to speed up queries and store data in better place and speed up the processing. They can be used for data storage on disk and used for faster searching for data. In the case of
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS book(
	book_id INT NOT NULL  PRIMARY KEY AUTO_INCREMENT,
	book_author_id INT,
	FOREIGN KEY (book_author_id) REFERENCES author(author_id),
	book_title text,
	book_pages INT NOT NULL,
	FOREIGN KEY (book_author_id) REFERENCES author(author_id) ON UPDATE SET NULL
);
DESCRIBE book;
INSERT INTO book VALUES('001','John','The Bible ',150);
INSERT INTO book VALUES('001','Paul','The Bible ',100);
INSERT INTO book VALUES('002','John','25-30',150);
INSERT INTO book VALUES('002','Paul','25-30',150);
INSERT INTO book VALUES('003','John','25-30',100);
-- Select all columns from book table:
SELECT * FROM book;
-- Select all author_id,author_name from author table:
SET @author_name=CONCAT('Author ',author_id,'_',author_name);
SET @num=0;SET @author_name=CONCAT('Author ',@num,'_',@author_name);
SET @author_id_list=CONCAT(CONCAT('Author id: ',author_id,','),@author_name);
SET @num++;SET @author_name=CONCAT('Author ',@num,'_',@author_name);
SET @author_id_list=CONCAT(@author_id_list,CONCAT(',Author: ',author_id,','),@author_name);
SET @author_id_list=CONCAT(CONCAT('Author id: ',author_id,','),@author_name);
SELECT @author_id_list;
--
-- Please add a
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS author(
	author_id INT NOT NULL AUTO_INCREMENT,
	author_name varchar(100) DEFAULT NULL,
	primary key (author_id)
);
DESCRIBE author;
INSERT INTO author VALUES('John','Albert');
INSERT INTO author VALUES('Paul','John');
INSERT INTO author VALUES('John','Paul');
SELECT * FROM category;
SELECT a.author_id,a.author_name
FROM author a,author b,category c
WHERE a.author_id=b.author_id
AND b.author_id=c.cat_id
ORDER BY a.author_id;
SELECT a.author_id,b.author_name,
count(*) as num
FROM author a,author b,category c
WHERE a.author_id=b.author_id
AND b.author_id=c.cat_id
GROUP BY a.author_id
ORDER BY a.author_id;
--

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS author(
	author_id INT NOT NULL UNIQUE AUTO_INCREMENT PRIMARY KEY,
	author_name text
);
DESCRIBE author;
INSERT INTO author VALUES('John','Albert');
INSERT INTO author VALUES('Paul','John');
INSERT INTO author VALUES('John','Paul');
SELECT * FROM author;
SELECT a.author_id,a.author_name
FROM author a,author b,category c
WHERE a.author_id=b.author_id
AND b.author_id=c.cat_id
ORDER BY a.author_id;
SELECT a.author_id,b.author_name,
count(*) as num
FROM author a,author b,category c
WHERE a.author_id=b.author_id
AND b.author_id=c.cat_id
GROUP BY a.author_id
ORDER BY a.author_id;

--
-- You should use some kind of unique key in the database (primary key is preferred). For example, one could have the author_name as a unique field and the category_id as the foreign key to the category table and then you have the correct linkage between author_name and category_id. (An easy way to do this is to use the AUTO_INCREMENT keyword which allows you to generate automatically a unique integer value at insertion time)
COMMIT;
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS author(
	author_id INT NOT NULL  PRIMARY KEY AUTO_INCREMENT,
	author_name text
);
DESCRIBE author;
INSERT INTO author VALUES('John','Albert');
INSERT INTO author VALUES('Paul','John');
INSERT INTO author VALUES('John','Paul');
SELECT * FROM category;
SELECT a.author_id,a.author_name
FROM author a,author b,category c,book_to_category bc
WHERE a.author_id=bc.cat_author
AND a.author_id=b.author_id
AND b.author_id=c.cat_id
ORDER BY a.author_id;
DESC author;
--
-- Please provide a solution to the task, by adding where clause and a GROUP By clause
 
  
CREATE DATABASE IF NOT EXISTS newDB; USE newDB; 
CREATE TABLE IF NOT EXISTS book_info(
	bid INT AUTO_INCREMENT PRIMARY KEY,
	name TEXT,
	year INT 
)
 
INSERT INTO book_info VALUES(21,'
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS author(
	author_id INT NOT NULL UNIQUE AUTO_INCREMENT PRIMARY KEY,
	author_name text
);
DESCRIBE author;
INSERT INTO author VALUES('John','Albert');
INSERT INTO author VALUES('Paul','John');
INSERT INTO author VALUES('John','Paul');
SELECT * FROM author;
SELECT a.author_id,a.author_name
FROM author a,author b,category c
WHERE a.author_id=b.author_id
AND b.author_id=c.cat_id
ORDER BY a.author_id;
SELECT a.author_id,b.author_name,
count(*) as num
FROM author a,author b,category c
WHERE a.author_id=b.author_id
AND b.author_id=c.cat_id
GROUP BY a.author_id
ORDER BY a.author_id;
--
-- You should use some kind of unique key in the database (primary key is preferred). For example, one could have the author_name as a unique field and the category_id as the foreign key to the category table and then you have the correct linkage between author_name and category_id. (An easy way to do this is to use the AUTO_INCREMENT keyword which allows you to generate automatically a unique integer value at insertion time)
COMMIT;
DROP DATABASE sampleDB;
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SET GLOBAL innodb_file_per_table=1;

CREATE TABLE IF NOT EXISTS author(
	author_id INT NOT NULL UNIQUE AUTO_INCREMENT PRIMARY KEY,
	author_name text
);
DROP TABLE IF EXISTS author;

CREATE TABLE IF NOT EXISTS author(
  author_id INT(11) UNSIGNED UNIQUE AUTO_INCREMENT PRIMARY KEY,
  author_name  varchar(255),
  description text
);

DROP TABLE IF EXISTS author;
COMMIT;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO author(author_name) VALUES("<NAME>");
DESCRIBE author;
DROP TABLE author;
COMMIT; DROP DATABASE sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS author(
 author_id INT NOT NULL UNIQUE AUTO_INCREMENT PRIMARY KEY,
 author_name text
);
INSERT INTO author VALUES(1,'Alice');
INSERT INTO author VALUES(2,'Bob');
INSERT INTO author VALUES(3,'Charlie');

 
ALTER TABLE author MODIFY author_id INT(8);
ALTER TABLE author ENGINE=InnoDB;
DROP DATABASE sampleDB;

-- MySQL has become a very popular relational database and a lot of web applications like Facebook and YouTube use MySQL for storing user personal profiles and liked articles. MySQL is available as a Linux, Windows or macOS operating system. The popular database server uses MySQL for its primary database and also performs complex tasks that require complex database querying.

-- MySQL is one of the core database engines for MySQL, and is one of the many widely used database management systems. By virtue of its popularity and its stability
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS author(
	author_id INT NOT NULL UNIQUE AUTO_INCREMENT PRIMARY KEY,
	author_name VAR CHARACTER(100)
);
DESCRIBE author;
COMMIT;
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS author(
	author_id INT NOT NULL UNIQUE AUTO_INCREMENT PRIMARY KEY,
	author_name text
);
DESCRIBE author;
INSERT INTO author VALUES('John','Albert');
INSERT INTO author VALUES('Paul','John');
INSERT INTO author VALUES('John','Paul');
SELECT * FROM author;
SELECT a.author_id,a.author_name
FROM author a,author b,category c
WHERE a.author_id=b.author_id
AND b.author_id=c.cat_id
ORDER BY a.author_id;
DROP DATABASE sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS author(
 author_id INT NOT NULL UNIQUE AUTO_INCREMENT PRIMARY KEY,
 author_name text
);
INSERT INTO author VALUES(1,'Alice');
INSERT INTO author VALUES(2,'Bob');
INSERT INTO author VALUES(3,'Charlie');
ALTER TABLE author MODIFY author_id INT(8);
ALTER TABLE author ENGINE=InnoDB;
DROP DATABASE sampleDB;
-- MySQL has become a very popular relational database and a lot of web applications like Facebook and YouTube use MySQL for storing user personal profiles and liked articles. MySQL is available as a Linux, Windows or macOS operating system. The popular database server uses MySQL for its primary database and also performs complex tasks that require complex database querying.
-- MySQL is one of the core database engines for MySQL, and is one of the many widely used database management systems. By virtue of its popularity and its stability
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
 
UPDATE author SET author_name = '<NAME>' WHERE author_id in(1,3);
DROP DATABASE sampleDB;
-- MySQL is a popular open-source relational database that allows developers to easily and quickly write applications that utilize complex databases and data analysis. Like other relational databases, MySQL offers high availability, multi-threaded processing, and multiple user support (if you use MySQL in a high performance environment). Unlike relational databases which use disk storage to hold data but are highly transactional, MySQL databases need to be accessed by more than one application.
-- Using a mutated program, please create a table named 'book' that contains two columns: book_id which is a serial number and is auto incremented on insertion, and name, which is a text field which is not null and has multiple rows. Your mutated program should add at least 30 records to this table. Each row should have two integers, one positive and one negative and a text field of a random string which is auto incremented on insertion. If a row with a positive name and two negative values can be added, update that row to have the negative value added to it to have a row where the positive value is at the beginning and the negative value just below that name. Display the contents of the table.
CREATE TABLE book (
book_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
author_id INT,
PRIMARY KEY(author_id),
UNIQUE(book_id)
);
INSERT INTO author VALUES(1,1);
INSERT INTO author VALUES(2,1);
INSERT INTO author VALUES(3,2);
INSERT INTO author VALUES(1,2);
INSERT INTO author VALUES(2,3);
INSERT INTO book(author_id, book_id) VALUES(1,2);
INSERT INTO book(author_id, book_id) VALUES(1,3);
INSERT INTO book(author_
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
/*

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS author(
  author_id INT UNSIGNED AUTO_INCREMENT UNIQUE,
  author_name text
  )ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
ALTER TABLE author MODIFY author_id INT();
INSERT INTO author VALUES(1,'Alice');
INSERT INTO author VALUES(2,'Bob');
INSERT INTO author VALUES(3,'Charlie');
DROP DATABASE sampleDB;
-- Please create a mutated program which uses the UTF8 database character set and MySQL's built-in collation syntax.
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS author(
  author_id INT(6) UNSIGNED AUTO_INCREMENT UNIQUE,
  author_name text
  )ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
ALTER TABLE author MODIFY author_id INT();
INSERT INTO author VALUES(1,'Alice');
INSERT INTO author VALUES(2,'Bob');
INSERT INTO author VALUES(3,'Charlie');
DROP DATABASE sampleDB;
-- Please modify the previous program to make it modify the characters in the third row to '!' after appending it with '!' and's' to the last of the row.
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS author(
  author_id INT(6) UNSIGNED AUTO_INCREMENT UNIQUE,
  author_last_name text,
  author_first_name text,
  author_fullname text
  )ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
ALTER TABLE author MODIFY author_id INT();
INSERT INTO author VALUES(1,'','','Alice');
INSERT INTO author VALUES(2,'Charlie','Bob','','');
DROP DATABASE sampleDB;
-- Please create a mutated program which uses MySQL's built-in collation syntax on the author_last_name column and sort the first character in the author_fullname column in ascending order.
CREATE DATABASE IF NOT
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS author(
 author_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
 author_name text
);
INSERT INTO author VALUES(1,'Alice');
INSERT INTO author VALUES(2,'Bob');
INSERT INTO author VALUES(3,'Charlie');
ALTER TABLE author MODIFY author_id INT(8);
ALTER TABLE author ENGINE=InnoDB;
DROP TABLE author;
DROP DATABASE sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP PROCEDURE IF EXISTS UpdateAuthorDate;
DELIMITER ;;
CREATE PROCEDURE UpdateAuthorDate( IN author_id INT, IN author_date DATETIME )
SELECT SET_DATE(@author_id,@author_date);
DELIMITER ;
DROP PROCEDURE IF EXISTS UpdateAuthorName;
DELIMITER ;;
CREATE PROCEDURE UpdateAuthorName( author_id INT, author_name text )
UPDATE author SET author_name = author_name WHERE author_id = author_id;
DELIMITER ;
DROP PROCEDURE IF EXISTS UpdateAuthorNameAndPhone;
DELIMITER ;;
CREATE PROCEDURE UpdateAuthorNameAndPhone( author_id INT, author_name text, author_date DATETIME )
UPDATE author SET author_name = author_name, author_date = author_date WHERE author_id = author_id;
DELIMITER ;
-- MySQL is commonly used for the backend work but also the data access layer for the frontend code. Because of the integration with PHP and JS you can also use MySQL for the backend.
/*
INSERT INTO sampleDB.author VALUES(1, 'John');
INSERT INTO sampleDB.author VALUES(2, 'Jane');
INSERT INTO sampleDB.author VALUES(3, 'Jessica');
INSERT INTO sampleDB.author VALUES(4, 'Paul');

INSERT INTO sampleDB.article VALUES(1, 'How does PHP work?', 1, 1545088552, 
'This article is about how PHP works.', '/images/article.jpg', 0, 2);
INSERT INTO sampleDB.article VALUES(2, 'PHP is Awesome!', 2, 1545142583, 
'This article is more about PHP.', '/images/article.jpg', 0, 3);
INSERT INTO sampleDB.article VALUES(3, 'PHP is Awesome again!', 3, 1545142583, 
'
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS author(
 author_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
 author_name text
);
INSERT INTO author VALUES(1,'Alice');
INSERT INTO author VALUES(2,'Bob');
INSERT INTO author VALUES(3,'Charlie');
ALTER TABLE author MODIFY author_id INT(8);
ALTER TABLE author ENGINE=InnoDB;
DROP TABLE author;
DROP DATABASE sampleDB;
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS books(
 book_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
 book_author_id INT(8) NOT NULL,
 book_title text,
 book_price decimal(15(2),2) DEFAULT 0.00,
 book_isbn text,
 FOREIGN KEY (book_author_id) REFERENCES author (author_id)
);
INSERT INTO books VALUES(1,1,'The Hobbit',75.50,'978-2066508-33-0',123456789);
INSERT INTO books VALUES(2,1,'The Shining',100.00,'978-2066508-33-0',123456789);
INSERT INTO books VALUES(3,3,'The Titans',75.50,'978-2066508-33-0',123456789);
INSERT INTO books VALUES(4,2,'The Hitchhiker\'s Guide to the Galaxy',80.50,'978-1565926-40-0',123456789);
INSERT INTO books VALUES(5,3,'The Lord of the Rings',100.00,'978-4540729-2-0',123456789);
INSERT INTO books VALUES(6,2,'The Hitchhiker\'s Guide to the Galaxy',100.00,'978-1565926-40-0',123456789);
DROP TABLE books;
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS book(
 book_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
 author_id INT NOT NULL,
 book_title text NOT NULL,
 book_publisher text,
 book_publication date,
 UNIQUE(author_id,book_title),
 FOREIGN KEY (author_id)
 REFERENCES author(author_id) ON CHANGE DEFERRED UPDATE
 book_publication author_id
);
INSERT INTO book VALUES(1,1,'A Tale of Two Cities','<NAME>','December 29, 1891','<NAME>');
INSERT INTO book VALUES(3,2,'A Tale of Two Cities','<NAME>','December 29, 1895',NULL);
INSERT INTO book VALUES(4,3,'A Tale of Two Cities','<NAME>','January 28, 1904',NULL);
INSERT INTO book VALUES(5,1,'A Tale of Two Cities','<NAME>','January 28, 1902',NULL);
CREATE TABLE IF NOT EXISTS author_book(
 author_id INT NOT NULL,
 book_id INT NOT NULL,
 author_book_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
 FOREIGN KEY (author_id)
 REFERENCES author(author_id) ON DELETE CASCADE,
 FOREIGN KEY (book_id)
 REFERENCES book(book_id) ON DELETE CASCADE,
 UNIQUE(author_id, book_title)
);
 
INSERT INTO author_book VALUES(2,2,3);
INSERT INTO author_book VALUES(1,3,4);
ALTER TABLE author_book MODIFY author_book_id INT(8);
ALTER TABLE author_book ENGINE=InnoDB;
DROP TABLE author_book;
DROP DATABASE sampleDB;
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS user(
 user_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
 user_name text
);
ALTER TABLE user MODIFY user_id INT(8);
ALTER TABLE user ENGINE=InnoDB;
DROP TABLE user;
DROP DATABASE sampleDB;
```
This example will be used in an upcoming demo course on MySQL and this database will already be there.

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS author(
 author_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
 author_name text
);
INSERT INTO author VALUES(1,'Alice');
INSERT INTO author VALUES(2,'Bob');
INSERT INTO author VALUES(3,'Charlie');
ALTER TABLE author MODIFY author_id INT(8);
ALTER TABLE author ENGINE=InnoDB;
DROP TABLE author;
DROP DATABASE sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS author(
 author_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
 author_name text
);
INSERT INTO author VALUES(1,'Alice');
INSERT INTO author VALUES(2,'Bob');
INSERT INTO author VALUES(3,'Charlie');
ALTER TABLE author MODIFY author_id INT(8);
ALTER TABLE author ENGINE=InnoDB;
DROP TABLE author;
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS author(
 author_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
 author_name text
);
INSERT INTO author VALUES(1,'Alice');
INSERT INTO author VALUES(2,'Bob');
INSERT INTO author VALUES(3,'Charlie');
ALTER TABLE author MODIFY author_id INT(8);
ALTER TABLE author ENGINE=InnoDB;
DROP TABLE author;
DROP DATABASE sampleDB;
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS author (
 author_id INT NOT NULL AUTO_INCREMENT,
 first_name TEXT,
 last_name TEXT,
 birth_year INT,
 gender ENUM('male', 'female'),
 PRIMARY KEY (author_id)
);
INSERT INTO author (first_name, last_name, birth_year, gender)
VALUES ('Alex', 'Bachmann', 1980, 'female'), ('Donald', 'Duck', 2000, 'female'), ('Sam', 'Scott', 1985,'male');
ALTER TABLE author MODIFY author_id INT(8);
ALTER TABLE author ENGINE=InnoDB;
DROP TABLE author;
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS author(
 author_id INT(8) NOT NULL AUTO_INCREMENT PRIMARY KEY,
 author_name text UNIQUE
);
INSERT INTO author VALUES(1,'Alice');
INSERT INTO author VALUES(2,'Bob');
INSERT INTO author VALUES(3,'Charlie');
ALTER TABLE author MODIFY author_id INT(8);
ALTER TABLE author ENGINE=InnoDB;
DROP TABLE author;
DROP DATABASE sampleDB;
 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS author(
 author_id INT(8) NOT NULL AUTO_INCREMENT PRIMARY KEY,
 author_name text UNIQUE,
 email text UNIQUE
);
INSERT INTO author VALUES(1,'Alice', '<EMAIL>');
INSERT INTO author VALUES(2,'Bob', '<EMAIL>');
INSERT INTO author VALUES(3,'Charlie', '<EMAIL>');
ALTER TABLE author MODIFY email(200);
ALTER TABLE author MODIFY author_id INT(8) NOT NULL;
ALTER TABLE author ENGINE=InnoDB;
DROP TABLE author;
DROP DATABASE sampleDB;
 
 CREATE OR REPLACE OR REPLACE TABLE sampleDB.'book' (
  'book_id' SERIAL(1) NOT NULL,
  'book_title' VARCHAR(120) NOT NULL,
  'book_author' VARCHAR(30) NOT NULL DEFAULT 'unknown author',
  'book_publish_year' INT NOT NULL,
  PRIMARY KEY('book_id'),
  FOREIGN KEY('book_author') REFERENCES sampleDB.author('author_name')
 ) ;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS author(
 author_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
 author_name text
);
INSERT INTO author VALUES(100,'Alice');
INSERT INTO author VALUES(101,'Bob');
INSERT INTO author VALUES(102,'Charlie');
ALTER TABLE author MODIFY author_id INT(8);
ALTER TABLE author ENGINE=InnoDB;
DROP TABLE author;
UPDATE author SET author_name='Updated data';
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS author(
 author_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
 author_name text
);
INSERT INTO author VALUES(1,'Alice');
INSERT INTO author VALUES(2,'Bob');
INSERT INTO author VALUES(3,'Charlie');
ALTER TABLE author MODIFY author_id INT(8);
ALTER TABLE author ENGINE=InnoDB;
DROP TABLE author;

DROP DATABASE IF EXISTS sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS author(
 author_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
 author_name text
);
INSERT INTO author VALUES(1,'Alice');
INSERT INTO author VALUES(2,'Bob');
INSERT INTO author VALUES(3,'Charlie');
ALTER TABLE author MODIFY author_id INT(4);
ALTER TABLE author ENGINE=InnoDB;
DROP TABLE author;
DROP DATABASE sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS author(
 author_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
 author_name text
);
INSERT INTO author VALUES(1,'Alice');
INSERT INTO author VALUES(2,'Bob');
INSERT INTO author VALUES(3,'Charlie');
ALTER TABLE author MODIFY author_id INT(4);
ALTER TABLE author ENGINE=InnoDB;
DROP TABLE author;
DROP DATABASE sampleDB;
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS author(
 author_id INT,
 author_name text,
 author_surname text
);
INSERT INTO author VALUES(1,'Alice','Smith');
INSERT INTO author VALUES(2,'Bob','Smith');
INSERT INTO author VALUES(3,'Charlie','Brown');
ALTER TABLE author MODIFY author_id INT(4);
ALTER TABLE author ENGINE=MyISAM;
DROP TABLE author;
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS author(
 author_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
 author_name text
);
INSERT INTO author VALUES(1,'Alice');
INSERT INTO author VALUES(2,'Bob');
INSERT INTO author VALUES(3,'Charlie');
ALTER TABLE author MODIFY author_id INT(4);
ALTER TABLE author ENGINE=InnoDB;
DROP TABLE author;
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS book(
 book_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
 book_name text,
 author_id INT
 );
INSERT INTO book VALUES(1,'The Art of SQL',1);
INSERT INTO book VALUES(2,'Programming the Databases Man',2);
INSERT INTO book VALUES(3,'My first SQL',3);
ALTER TABLE book MODIFY author_id INT;
ALTER TABLE book ENGINE=InnoDB;
DROP TABLE book;
DROP DATABASE sampleDB;


*1.2-1-1-MySQL.md 完成*
1、本次任务是用MySQL创建并创建自己的数据库以存储测试数据，并通过DML语句进行添加修改删除。1、2、3完成*
2、本次任务是利用MySQL创建数据库表的方法(1-Insert,2-Update,3-Delete)。完成以后，就可以删除测试数据，但是要删除的数据不能小于2条*
    1、1、插入*
        CREATE DATABASE IF NOT EXISTS sampleDB; 
        USE sampleDB; 
      *
        CREATE TABLE IF NOT EXISTS author( 
        author_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, 
        author_name text
        ); 
          
      
         *
         INSERT INTO author VALUES(1,'Alice'); 
         INSERT INTO author VALUES(2,'Bob'); 
         INSERT INTO author VALUES(3,'Charlie'); 
         ALTER TABLE author MODIFY author_id INT(4); 
         ALTER TABLE author ENGINE=InnoDB; 
         *
          
         DROP TABLE author; 
         DROP DATABASE sampleDB;
            *
            1、2、删除。删除的条数要大于2条。
        CREATE DATABASE IF NOT EXISTS sampleDB; 
      *
        
        USE sampleDB; 
         
        CREATE TABLE IF NOT EXISTS book( 
        book_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, 
        book_name text, 
        author_id INT
        ); 
          
        INSERT INTO book VALUES(1,'The Art of SQL',1); 
        INSERT INTO book VALUES(2,'Programming the Databases Man',2); 
        INSERT INTO book VALUES(3,'My first SQL',3); 
            *
            ALTER TABLE book MODIFY author_id INT; 
            ALTER TABLE BOOK ENGINE=INNODB; 
            * 
           
            DROP TABLE book
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS posts(
 post_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
 post_title text
);
INSERT INTO posts VALUES(1,'Alice\'s favorite color is blue');
INSERT INTO posts VALUES(2,'Alice is the only user in the system');
INSERT INTO posts VALUES(3,'Alice\'s favorite color is red');
ALTER TABLE posts ADD KEY(author_id);
INSERT INTO posts VALUES(4,'Alice is not interested in the posts from Bob');
ALTER TABLE posts ADD CONSTRAINT FK FOREIGN_KEY REFERENCES author(author_id);
ALTER TABLE posts ENGINE=InnoDB;
DROP TABLE author;
DROP TABLE posts;
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS author(
 author_id INT,
 author_name text
);
INSERT INTO author SELECT author_id, author_name FROM author;
ALTER TABLE author DROP COLUMN author_id;
ALTER TABLE author MODIFY author_id INT;
ALTER TABLE author ENGINE=InnoDB;
DROP TABLE author;
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS author(
 author_id INT,
 author_name text,
 author_surname text
);
INSERT INTO author VALUES(1,'Alice','Smith');
INSERT INTO author VALUES(2,'Bob','Smith');
INSERT INTO author VALUES(3,'Charlie','Brown');
ALTER TABLE author MODIFY author_id INT(4);
ALTER TABLE author ENGINE=MyISAM;
DROP TABLE author;
DROP DATABASE sampleDB;
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TRIGGER my_trigger AFTER UPDATE ON author;
CREATE TABLE IF NOT EXISTS author(
 author_id INT,
 author_name text,
 author_surname text
);
INSERT INTO author VALUES(1,'Alice','Smith');
INSERT INTO author VALUES(2,'Bob','Smith');
INSERT INTO author VALUES(3,'Charlie','Brown');
ALTER TABLE author MODIFY author_id INT(4);
ALTER TABLE author ENGINE=MyISAM;
DROP TABLE author;
DROP TRIGGER my_trigger;
DROP DATABASE sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS review(
 review_id INT,
 review text
);
INSERT INTO review VALUES(1,'This is a text in a single line');
INSERT INTO review VALUES(2,'This is a text in a single line');
INSERT INTO review VALUES(3,'This is a text in a single line');
ALTER TABLE review MODIFY review_id INT(4);
ALTER TABLE review ENGINE=MyISAM;
DROP TABLE review;
DROP DATABASE sampleDB;
 
DROP TABLE author;
DROP TABLE review;
```

---
[Return home](https: 

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS author(
 author_id INT,
 author_name text,
 author_surname text
);
INSERT INTO author VALUES(1,'Alice','Smith');
INSERT INTO author VALUES(2,'Bob','Smith');
INSERT INTO author VALUES(3,'Charlie','Brown');
ALTER TABLE author MODIFY author_id INT(4);
ALTER TABLE author ENGINE=MYISAM;
DROP TABLE author;
DROP DATABASE sampleDB;

CREATE DATABASE IF NOT EXISTS sampleDB;
CREATE TABLE IF NOT EXISTS author (
author_id INT,
author_age INT,
author_name text,
author_surname text
);
INSERT INTO author VALUES(1,27,'Bob','Smith');
INSERT INTO author VALUES(2,28,'Ralf','Williams');
INSERT INTO author VALUES(3,45,'Bob','Smith');
DROP TABLE author;
DROP DATABASE sampleDB;

USE sampleDB;
ALTER TABLE author CHANGE author_id author_id INT(4) NOT NULL;
ALTER TABLE author MODIFY author_age INT(4);

 
CREATE TABLE IF NOT EXISTS author (
author_id INT(4) NOT NULL,
author_age INT,
author_name text,
author_surname text
);
INSERT INTO author VALUES(1,27,'Bob','Smith');
INSERT INTO author VALUES(2,28,'Ralf','Williams');
INSERT INTO author VALUES(3,45,'Bo','Smith');
ALTER TABLE author ADD author_sex CHAR(4);
ALTER TABLE author MODIFY author_age INT(4);

# CREATE DATABASE IF NOT EXISTS sampleDB;
# USE sampleDB;
# CREATE TABLE IF NOT EXISTS author (
# author_id INT(4) NOT NULL,
# author_name text,
# author_surname text,
# author_sex text
# );

# INSERT INTO author VALUES(1,'Alice','Smith','M');
# INSERT INTO author VALUES(2,'Bob','Smith','M');
# INSERT INTO author
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS author(
 author_id INT,
 author_name text,
 author_surname text
);
INSERT INTO author VALUES(1,'Alice','Smith');
INSERT INTO author VALUES(2,'Bob','Smith');
INSERT INTO author VALUES(3,'Charlie','Brown');
CREATE TABLE IF NOT EXISTS book(
 book_id int,
 title text,
 author_id int,
 FOREIGN KEY (author_id)
 REFERENCES author (author_id)
);
ALTER TABLE author MODIFY author_id INT(4);
CREATE TABLE IF NOT EXISTS book_author(
 book_id int,
 author_id int
);
ALTER TABLE book MODIFY book_id INT(4);
ALTER TABLE book ENGINE=MyISAM;
ALTER TABLE book_author MODIFY book_id INT(4);
ALTER TABLE book_author ENGINE=MyISAM;
DROP TABLE author;
DROP TABLE book;
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS author(
 author_id INT,
 author_name text,
 author_surname text
);
INSERT INTO author VALUES(1,'Alice','Smith');
INSERT INTO author VALUES(2,'Bob','Smith');
INSERT INTO author VALUES(3,'Charlie','Brown');
ALTER TABLE author MODIFY author_id INT(4);
ALTER TABLE author ENGINE=MyISAM;
DROP TABLE author;
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS author(
 author_id INT,
 author_name text,
 author_surname text
);
INSERT INTO author VALUES(1,'Alice','Smith');
INSERT INTO author VALUES(2,'Bob','Smith');
INSERT INTO author VALUES(3,'Charlie','Brown');
ALTER TABLE author MODIFY author_id INT(4);
ALTER TABLE author ENGINE=MyISAM;
DROP TABLE author;
DROP DATABASE sampleDB;
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS author(
 author_id INT,
 author_name text,
 author_surname text
);
INSERT INTO author VALUES(1,'Alice','Smith');
INSERT INTO author VALUES(2,'Bob','Smith');
INSERT INTO author VALUES(3,'Charlie','Brown');
ALTER TABLE author MODIFY author_id INT(4);
ALTER TABLE author ENGINE=InnoDB;
DROP TABLE author;
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS bookman(
 bookman_id INT,
 bookman_first_name text,
 bookman_last_name text,
 bookman_birth_date text,
 bookman_department text
);
INSERT INTO bookman VALUES(1,'Nurse','Sneaker','1986-08-07','Marketing');
INSERT INTO bookman VALUES(2,'Dr. Scott','Rich','1985-05-07','Sales');
UPDATE bookman SET bookman_department='Banking' WHERE bookman_last_name='Smith';
DROP TABLE IF EXISTS bookman;
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS book(
 book_id INT,
 book_title text,
 book_isbn INT,
 book_publication_date text,
 book_price INT
);
INSERT INTO book VALUES(1,'A Book of Common Sense',8192,'July 1991',8.95);
INSERT INTO book VALUES(2,'The Master Story',10452,'July 1990',4.95);
INSERT INTO book VALUES(3,'The Psychology of Man',9067,'July 1988',4.95);
ALTER TABLE book MODIFY book_id INT(4);
ALTER TABLE book ENGINE=MyISAM;
DROP TABLE book;
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS book(
 book_id INT, 
 title text,
 authors text[],
 pages INT[]
);

INSERT INTO book VALUES( 1,'Mango Man',ARRAY('Alice','Bob'),ARRAY(6,7));
INSERT INTO book VALUES( 2,'The Princess Bride',ARRAY('Alice','Bob'),ARRAY(2,10));
INSERT INTO book VALUES( 3,'The Great Gatsby',ARRAY('Charlie','Bob','Alice'),ARRAY(7,15));
ALTER TABLE book MODIFY book_id INT(6);
ALTER TABLE book ENGINE=MyISAM;
DROP TABLE book;
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXIST author;
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS book(
 book_id INT,
 book_title text,
 book_isbn INT,
 book_publication_date text,
 book_price INT
);
INSERT INTO book VALUES(1,'A Book of Common Sense',8192,'July 1991',8.95);
INSERT INTO book VALUES(2,'The Master Story',10452,'July 1990',4.95);
INSERT INTO book VALUES(3,'The Psychology of Man',9067,'July 1988',4.95);
ALTER TABLE book MODIFY book_id INT(4);
ALTER TABLE book ENGINE=MyISAM;
DROP TABLE book;
DROP DATABASE sampleDB;
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS book(
 book_id INT(4),
 book_title text,
 book_isbn INT(4),
 book_publication_date text,
 book_price INT(6)
);
INSERT INTO book VALUES(1,'A Book of Common Sense',8192,'July 1991',8.95,895);
INSERT INTO book VALUES(2,'The Master Story',10452,'July 1990',4.95,495);
INSERT INTO book VALUES(3,'The Psychology of Man',9067,'July 1988',4.95,495);
ALTER TABLE book MODIFY book_id INT(4) INTEGER AUTO_INCREMENT;
ALTER TABLE book ENGINE=MyISAM;
DROP TABLE book;
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS book(
 book_id INT,
 book_title text,
 book_isbn INT,
 book_publication_date text,
 book_price INT
);
INSERT INTO book VALUES(1,'A Book of Common Sense',8192,'July 1991',8.95);
INSERT INTO book VALUES(2,'The Master Story',10452,'July 1990',4.95);
INSERT INTO book VALUES(3,'The Psychology of Man',9067,'July 1988',4.95);
ALTER TABLE book MODIFY book_id INT(4);
ALTER TABLE book ENGINE=MyISAM;

DROP TABLE book;
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS book(
 book_id INT,
 book_issn INT,
 book_publication_date text,
 book_price INT
);
INSERT INTO book VALUES(1,'978-0-8466-2297-7',2009,'$12.00');
INSERT INTO book VALUES(2,'978-0-8466-2159-7',2009,'$52.00');
INSERT INTO book VALUES(3,'978-0-8466-2317-9',2011,'$72.00');
ALTER TABLE book ADD CONSTRAINT uk_book_issn UNIQUE(book_issn);
ALTER TABLE book ADD CONSTRAINT book_issn_fk FOREIGN KEY (book_issn) REFERENCES bibl(bibl_isbn);
ALTER TABLE book MODIFY book_id INT(4);
ALTER TABLE book ENGINE=MyISAM;
DROP TABLE book;
DROP DATABASE sampleDB;
-- Please create a very short query which uses all of the features of a relational database management system as a simple proof of concept. You should only use the sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. This is the kind of queries that usually involve multiple tables.

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO book SELECT *
FROM bookBook WHERE book_publication_date <= YEAR(2011);
ALTER TABLE book DROP PRIMARY KEY;
ALTER TABLE book DROP KEY;
DROP TABLE book;
DROP DATABASE sampleDB;
--Please show the syntax of following queries
select
book_title,
book_price,
book_isbn
from
book
where book_isbn = "819x1673x25";
-- Please fill in the blanks. Be sure to use sampleDB.
create table if not exists Student(
 student_id INT NOT NULL AUTO_INCREMENT,
 student_name varchar(50) NOT NULL,
 student_roll int NOT NULL,
 student_gender varchar(20) NOT NULL,
 NOT ENTRY KEY(student_id),
 constraint fk_student foreign key (student_roll) REFERENCES StudentRoll() ON DELETE CASCADE
auto_increment=1)
ENGINE=InnoDB;
INSERT INTO Student VALUES(1,'<NAME>',2342,'African-American','00');
INSERT INTO Student VALUES(2,'Hemang',1234,'Asian','01');
select * from Student;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
ALTER TABLE book MODIFY COLUMN book_price float;
ALTER TABLE book MODIFY COLUMN book_publication_date text;
ALTER TABLE book MODIFY COLUMN book_isbn INT(4);
ALTER TABLE book MODIFY COLUMN book_publication_date VARCHAR(11);

SELECT * FROM book WHERE book_price = 6 AND LENGTH(book_publication_date) = 6;  
SELECT * FROM book WHERE LENGTH(book_publication_date) = 6 AND book_price = 14;  
SELECT * FROM book WHERE book_isbn <= 5;  
SELECT * FROM book WHERE book_price >= 15 AND LENGTH(book_publication_date) = 9;  
SELECT * FROM book WHERE LENGTH(book_publication_date) < 6 AND book_isbn >= 7 ORDER BY book_title DESC;  
SELECT * FROM book WHERE LENGTH(book_publication_date) < 6 ORDER BY book_title DESC;  
SELECT * FROM book WHERE book_price >= 15 AND LENGTH(book_publication_date) = 9 ORDER BY book_title;  
SELECT * FROM book WHERE LENGTH(book_publication_date) < 6 AND LENGTH(book_isbn) = 5 ORDER BY book_id;  


 
UPDATE book SET book_isbn = 1000 ORDER BY LENGTH(book_publication_date);
UPDATE book SET book_isbn = 1001;
UPDATE book SET book_isbn = 1002, book_price = 100;
SELECT * FROM book WHERE book_isbn IN (1001,1002);
DROP TABLE book;
DROP DATABASE sampleDB;

 
DROP DATABASE IF EXISTS `sampleDB`;
CREATE DATABASE `sampleDB`;
DROP TABLE IF EXISTS `sampleDB`.`book`;
DELETE
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS book(
 book_id INT,
 book_title text,
 book_isbn INT,
 book_publication_date text,
 book_price INT
);
INSERT INTO book VALUES(1,'A Book of Common Sense',8192,'July 1991',8.95);
INSERT INTO book VALUES(2,'The Master Story',10452,'July 1990',4.95);
INSERT INTO book VALUES(3,'The Psychology of Man',9067,'July 1988',4.95);
ALTER TABLE book MODIFY book_id INT(4);
ALTER TABLE book ENGINE=MyISAM;
DROP TABLE book;
DROP DATABASE sampleDB;
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

insert into book values ('<NAME>','The Man Who Killed Everyone','9780655232578', '2012-05-20' );
insert into book values ('Dune','A New Game - Dune In The Night Before','9781905042210', '1984-12-13' );
insert into book values ('The Little Prince','Greatest Fans - The Little Prince (2000) 9th Series','9780375317173','1989-11-29' );
INSERT INTO book VALUES ('The Psychologist', '<NAME>', '1495153',  '1971-01-01' );
insert into book values ('A History of Time', '<NAME>', '9786153227762', '1987-05-11');

DROP TABLE book;
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS books(
 book_id INT NOT NULL AUTO_INCREMENT,
 book_title text NOT NULL UNIQUE,
 book_isbn INT UNIQUE,
 book_publication_date text,
 book_price INT NOT NULL,
 PRIMARY KEY(book_id)
);
INSERT INTO books VALUES(1,'A Book of Common Sense',8192,'July 1991',8.95);
INSERT INTO books VALUES(2,'The Master Story',10452,'July 1990',4.95);
INSERT INTO books VALUES(3,'The Psychology of Man',9067,'July 1988',4.95);
ALTER TABLE books MODIFY book_id INT(4);
ALTER TABLE books ENGINE=MyISAM;
DROP TABLE books;
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS author(
 author_id INT,
 author_handle text,
 author_fullname text,
 author_sex text,
 author_birthday text,
 PRIMARY KEY(author_id)
);
CREATE TABLE IF NOT EXISTS book_author(
 author_id INT,
 book_id INT,
 PRIMARY KEY(book_id, author_id)
);
INSERT INTO author VALUES(1, 'Jason', '<NAME>', 'MALE', '1995-12-21');
INSERT INTO author VALUES(2, 'Mark', '<NAME>', 'MALE', '1999-07-05');
INSERT INTO author VALUES(3, 'Judicael', '<NAME>', 'FEMALE', '1995-01-01');
INSERT INTO author VALUES(4, 'Paul', '<NAME>', 'MALE', '1990-11-23');
INSERT INTO author VALUES(5, 'Brian', '<NAME>', 'FEMALE', '1995-11-02');
INSERT INTO book_author VALUES(1, 1);
INSERT INTO book_author VALUES(2, 1);
INSERT INTO book_author VALUES(3, 2);
INSERT INTO book_author VALUES(4, 3);
INSERT INTO book_author VALUES(5, 4);
ALTER TABLE book_author MODIFY author_id INT(4);
ALTER TABLE book_author MODIFY book_id INT(4);
ALTER TABLE author MODIFY author_id INT(4);
ALTER TABLE author MODIFY author_fullname text;
ALTER TABLE author MODIFY author_birthday text;
ALTER TABLE book MODIFY book_id INT(4);
ALTER TABLE book MODIFY book_isbn INT(4);
ALTER TABLE book MODIFY book_publication_date text;
ALTER TABLE book MODIFY book_price INT(4);
ALTER TABLE book ENGINE=MyISAM;
DROP TABLE author;
DROP TABLE book_author;
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS book(
 book_id INT NOT NULL AUTO_INCREMENT,
 book_title text NOT NULL,
 book_isbn INT NOT NULL,
 book_publication_date text NOT NULL,
 book_price INT NOT NULL,
 CONSTRAINT book_pk PRIMARY KEY(book_id)
);
ALTER TABLE book MODIFY book_id int FIRST;
CREATE INDEX book_text ON book(book_title(3));
ALTER TABLE book ENGINE=MyISAM;
DROP TABLE book;
DROP DATABASE sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
ALTER table book ENGINE=MyISAM;
-- You may use the below mentioned code in mysql command line to query the content of the table.
SELECT * from book;
 
SELECT b.book_title from `book` b;
 
SELECT * FROM book;
 
DROP TABLE book;
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS book(
 book_id INT NOT NULL AUTO_INCREMENT,
 book_title text NOT NULL,
 book_isbn INT NOT NULL,
 book_publication_date text NOT NULL,
 book_price INT NOT NULL,
 CONSTRAINT book_pk PRIMARY KEY(book_id)
);
ALTER TABLE book MODIFY book_id int FIRST;
CREATE INDEX book_text ON book(book_title(3));
ALTER TABLE book ENGINE=MyISAM;
DROP TABLE book;
DROP DATABASE sampleDB;
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS book(
 book_id INT NOT NULL AUTO_INCREMENT,
 book_title text NOT NULL,
 book_isbn INT NOT NULL,
 book_publication_date text NOT NULL,
 book_price INT NOT NULL,
 CONSTRAINT book_pk PRIMARY KEY(book_id),
 INDEX book_title(book_title)
);
ALTER TABLE book MODIFY book_id int FIRST;
CREATE INDEX book_text ON book(book_title(3));
ALTER TABLE book ENGINE=MyISAM;
DROP TABLE book;
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
ALTER TABLE book MODIFY book_price int FIRST;
CREATE INDEX book_price ON book(book_price(1));
ALTER TABLE book ENGINE=MyISAM;
DROP TABLE book;
DROP DATABASE sampleDB;

CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS book2(
 book_category int NOT NULL AUTO_INCREMENT,
 book_title text NOT NULL,
 book_isbn INT NOT NULL,
 book_publication_date text NOT NULL,
 book_price INT NOT NULL,
 CONSTRAINT book_pk PRIMARY KEY(book_category)
);
ALTER TABLE book MODIFY book_category int FIRST;
CREATE INDEX book_category ON book(book_category(1));
ALTER TABLE book ENGINE=MyISAM;
DROP TABLE book;
DROP DATABASE sampleDB;

CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS books_sold(
 stock_sold int NOT NULL AUTO_INCREMENT,
 book_category int NOT NULL,
 book_title varchar text NOT NULL,
 book_price int NOT NULL,	 
 CONSTRAINT stock_pk PRIMARY KEY(stock_sold)
);
ALTER TABLE books_sold MODIFY book_category int FIRST;
CREATE INDEX book_category ON books_sold(book_category(1));
ALTER TABLE books_sold ENGINE=MyISAM;
DROP TABLE books_sold;
DROP DATABASE sampleDB;

 
USE sampleDB;
DROP TABLE IF EXISTS books;  
DROP TABLE IF EXISTS people;  
 
CREATE TABLE IF NOT EXISTS books(
 book_id INT NOT NULL AUTO_INCREMENT,
 book_title text NOT NULL,
 book_isbn INT NOT NULL,
 book_publication_date text NOT NULL,
 book_price INT UNSIGNED NOT NULL,
 CONSTRAINT books_pk PRIMARY KEY(book_id)
);
ALTER TABLE books MODIFY book_id int FIRST;
CREATE INDEX book_title ON books(book_title(3));
ALTER TABLE books ENGINE=MyISAM;
SELECT * FROM books;
 
CREATE TABLE IF NOT EXISTS people(
 name
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS book(
 book_id INT NOT NULL AUTO_INCREMENT,
 book_title text NOT NULL,
 book_isbn INT NOT NULL,
 book_publication_date text NOT NULL,
 book_price INT NOT NULL,
 CONSTRAINT book_pk PRIMARY KEY(book_id)
);
ALTER TABLE book MODIFY book_id int FIRST;
CREATE INDEX book_text ON book(book_publication_date)
ORDER BY book_publication_date DESC;
ALTER TABLE book ENGINE=MyISAM;
DROP TABLE book;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO book VALUES (1,'The Art of SQL',5,'2002',229);
UPDATE book SET book_title = 'The art of sql', book_publication_date = '2045-2046', book_isbn = 55555, book_price=222,
 WHERE book_isbn = 1;
DELETE FROM book WHERE book_isbn = 5;
SELECT * FROM book;
DROP TABLE book;
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS book(
 book_id INT NOT NULL AUTO_INCREMENT,
 book_title text NOT NULL,
 book_isbn INT NOT NULL,
 book_publication_date text NOT NULL,
 book_price INT NOT NULL,
 CONSTRAINT book_pk PRIMARY KEY(book_id)
);
ALTER TABLE book MODIFY book_id int FIRST;
SELECT book_id, book_title, book_isbn, book_publication_date, book_price FROM book;
INSERT INTO book VALUES (NULL, 'Fallout 3', 8011545, '1993-10-25', 20.99);
INSERT INTO book VALUES (NULL, 'A Few Bitter Things', 8013969, '1993-03-18', 28.99);
INSERT INTO book VALUES (NULL, 'The Return of the King', 0, '1993-09-11', 32.99);
DROP TABLE book;
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS book(
 book_id INT NOT NULL AUTO_INCREMENT,
 book_title text NOT NULL,
 book_isbn INT NOT NULL,
 book_publication_date text NOT NULL,
 book_price INT NOT NULL,
 CONSTRAINT book_pk PRIMARY KEY(book_id)
);
ALTER TABLE book MODIFY book_id int FIRST;
CREATE INDEX book_text ON book(book_title(3));
ALTER TABLE book ENGINE=MyISAM;
DROP TABLE book;
DROP DATABASE sampleDB;
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS book(
 book_id INT NOT NULL AUTO_INCREMENT,
 book_title text NOT NULL,
 book_isbn INT NOT NULL,
 book_publication_date text NOT NULL,
 book_price INT NOT NULL,
 CONSTRAINT book_pk PRIMARY KEY(book_id)
);
ALTER TABLE book MODIFY book_id INT FIRST;
CREATE INDEX book_text ON book(book_title(3));
ALTER TABLE book ENGINE=MyISAM;
DROP TABLE book;
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS film(
 title TEXT NOT NULL,
 description TEXT,
 acting_stars TEXT,
 director TEXT
);
ALTER TABLE film MODIFY title text FIRST;
CREATE TABLE IF NOT EXISTS actor(
 actor_name TEXT NOT NULL UNIQUE,
 image TEXT,
 age INT
);
ALTER TABLE actor MODIFY actor_name text first UNIQUE;
CREATE TABLE IF NOT EXISTS cast(
 cast_id int auto_increment,
 actor_name int,
 film_title int,
 cast_role TEXT,
 constraint cast_pk primary key(cast_id )
);
ALTER TABLE film MODIFY title text first;
ALTER TABLE cast MODIFY film_title int first;
ALTER TABLE cast MODIFY cast_role text first;
alter table film add constraint fk_cast_film FOREIGN KEY (cast_title) REFERENCES cast (film_title);
create table IF NOT EXISTS toto(
 title TEXT NOT NULL,
 PRIMARY KEY(title)
);
ALTER TABLE film drop PRIMARY KEY;
-- drop existing indexes on the movie table
ALTER TABLE film DROP INDEX title;
SELECT * FROM film;
--  Please update the table
UPDATE film SET cast_role = 'Proper Mention' WHERE cast_id = 1;
select * from actor;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
ALTER TABLE `book` MODIFY `book_id` INT AUTO_INCREMENT FIRST;
CREATE INDEX `book_text` ON `book`(`book_title`(3));
DROP TABLE `book`;
DROP DATABASE sampleDB;


Please create a mutated program that modifies the previous generation.
ALTER TABLE `book_details` MODIFY `book_id` INT AUTO_INCREMENT FIRST;
CREATE UNIQUE INDEX `book_id` ON `book_details`(`book_id`) where exists (select b.book_title from book b);
DROP TABLE `book_details`;
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
 
DELIMITER  
CREATE FUNCTION books_popularity(popularity INT)
BEGIN
	DECLARE id INT, cnt INT, book_id INT, book_publication_date DATE DEFAULT '0000-00-00';
	DECLARE books TEXT;
	SELECT COUNT(book_id) INTO cnt FROM book;
	SELECT book_id INTO id FROM book WHERE popularity = popularity LIMIT 1;
	SELECT DISTINCT book_id INTO books FROM book WHERE popularity = popularity ORDER BY RAND();
	FOR book_id IN SELECT DISTINCT book_id
	FROM book WHERE popularity = popularity ORDER BY RAND()
	LOOP
		SET cnt = 0;
		FOR book_id IN SELECT DISTINCT book_id FROM book WHERE popularity = popularity ORDER BY RAND()
		LOOP
			SELECT CASE WHEN cnt = 0 THEN book_publication_date ELSE (SELECT book_publication_date FROM book WHERE book_id = book_id) END INTO book_publication_date FROM book WHERE book_id = book_id ORDER BY RAND();
			SET cnt = cnt + 1;
		END LOOP;
	END LOOP;
END 
DELIMITER ;
SELECT books_popularity(7);
DROP TABLE books_popularity;
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
UPDATE book SET book_title = "Updated" WHERE book_isbn > 5;
-- Please create the queries below and execute them on mySqlServer.

UPDATE book SET book_title = "Updated" WHERE (book_isbn > 15);
UPDATE book SET book_price = 50 WHERE (book_isbn > 15);
 
DROP DATABASE sampleDB;
-- Please create a query which produces "Yes" as a result for all rows.
SELECT book_title FROM book WHERE book_isbn IN (15, 16, 20);
-- Please create a query which sets the "book_isbn" column to "999" for all rows.
UPDATE book SET book_isbn = 999 WHERE book_isbn > (SELECT MAX(book_isbn) FROM book);
 
UPDATE book SET book_title = "New Book Title" WHERE book_isbn > 9;
DROP DATABASE sampleDB;

-- END SAMPLE

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS book(
 book_id INT NOT NULL AUTO_INCREMENT,
 book_title text NOT NULL,
 book_isbn INT NOT NULL,
 book_publication_date text NOT NULL,
 book_price INT NOT NULL,
 CONSTRAINT book_pk PRIMARY KEY(book_id)
);
ALTER TABLE book MODIFY book_id INT FIRST;
CREATE INDEX book_text ON book(book_title(3));
ALTER TABLE book ENGINE=MyISAM;
DROP TABLE book;
DROP DATABASE sampleDB;
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP FOREIGN KEY;
CREATE TABLE IF NOT EXISTS customer(
 customer_id INT NOT NULL AUTO_INCREMENT,
 customer_name text NOT NULL,
 CONSTRAINT customer_pk PRIMARY KEY(customer_id)
);
ALTER TABLE customer MODIFY customer_id INT FIRST;
ALTER TABLE customer ENGINE=MyISAM;
USE sampleDB;
DROP TABLE IF EXISTS customer;
 
SELECT DISTINCT customer_name FROM customer JOIN customer p ON customer_id = p.customer_id WHERE customer_name LIKE "%3%";
-- Please create a query which returns the name of every person in the database whose id in between 10 and 30. */
SELECT customer_name FROM customer WHERE customer_id BETWEEN 10 AND 30;
-- Please create queries and explain the query plan and explain each phase of the query plan. The plans should allow you to assess if the query plan is optimal or not. Use a table to save your query plans so you can access them later.
SELECT *, cost as index_cost INTO mytable From customer;
OPTIMIZE TABLE customer;
PLAN, INDEX, and SHOW REWRITE commands in explain analysis.
 
DROP TABLE IF EXISTS mytable; CREATE TABLE mytable (c int not null);
ALTER TABLE mytable ALTER COLUMN c int FIRST;
CREATE INDEX i1 ON mytable (c);
SHOW REWRITE;
SHOW STATISTICS;
EXPLAIN SELECT * FROM mytable;
 
DROP TABLE IF EXISTS test; ALTER TABLE test ADD COLUMN c int DEFAULT 0;
DROP TABLE IF EXISTS test1; ALTER TABLE test1 ADD COLUMN c int DEFAULT 0;
ALTER TABLE test ALTER COLUMN c SET NOT NULL;
ALTER TABLE test1 ALTER COLUMN c SET NOT NULL;
SHOW INDEX FROM test;
ALTER TABLE test SET NULL;
ALTER TABLE test SET NULL;
CHANGE TABLE test.a.c b.c;
ALTER TABLE test RENAME COLUMN c.toa TO a;
ALTER TABLE test1 RENAME COLUMN c1.toa TO toa;
CHANGE TABLE test.c TO
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
ALTER TABLE book MODIFY book_id INT AUTO_INCREMENT;
ALTER TABLE book MODIFY book_publication_date DATE;
ALTER TABLE book MODIFY book_isbn INT UNSIGNED AUTO_INCREMENT;
ALTER TABLE book MODIFY book_price INT UNSIGNED;
CREATE TABLE IF NOT EXISTS genre(
 genre_id INT NOT NULL AUTO_INCREMENT,
 genre_name text NOT NULL,
 CONSTRAINT genre_pk PRIMARY KEY(genre_id)
);

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
ALTER TABLE sampleDB.book
	ADD FOREIGN KEY(book_isbn)
	REFERENCES sampleDB.book
	(book_isbn);
ALTER TABLE sampleDB.book MODIFY book_isbn INT UNIQUE;
CREATE INDEX book_text ON sampleDB.book(book_title(3) ASC);
ALTER TABLE sampleDB.book ENGINE=MyISAM;
DROP TABLE sampleDB.book;
DROP DATABASE sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE sampleTable;
DROP TABLE user_table;
CREATE TABLE IF NOT EXISTS user_table(
 user_id INT AUTO_INCREMENT PRIMARY KEY,
 user_name text,
 user_email text,
 user_password text,  
 user_age int
);
CREATE TABLE IF NOT EXISTS test_table(
 test_id INT AUTO_INCREMENT PRIMARY KEY,
 test_col text
);
DROP TABLE test_table;
-- Please create a large, complex, semantically equivalent program that would read, save, update, use, delete, sort and count large amounts of data.
CREATE TABLE test (
 test_id INT NOT NULL PRIMARY KEY GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),
 category text,
 test_number smallint,
 test_string text,
 test_text text,
 test_date date,
 test_time time
);
CREATE TABLE products (
 product_id VARCHAR(10) UNSIGNED NOT NULL PRIMARY KEY GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1) UNIQUE,
 product_name text,
 product_price DECIMAL(10,2)
);
CREATE TABLE users (
 user_name TEXT(255) UNIQUE NOT NULL PRIMARY KEY,
 user_address text,
 user_city text,
 user_telephone CHAR(20) UNIQUE
);
-- Please create a new table called comments and fill it with data to allow you to sort/count the rows in the table.
CREATE TABLE comments (
 comment_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
 user_id INT unsigned,
 comment_body text,
 comment_date VARCHAR(10),
 FOREIGN KEY(user_id) REFERENCES users(user_id)
);
CREATE TABLE orders (
 order_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
 order_date VARCHAR(10),
 user_id INT unsigned,
 total_amount DECIMAL(10,2)
);
DROP TABLE comments;
DROP TABLE orders;
DROP TABLE products;
DROP TABLE users;
DROP TABLE test;
DROP DATABASE sampleDB;

CREATE TABLE IF NOT EXISTS user_table(
 user_id INT AUTO_INCREMENT PRIMARY KEY,
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS book (
book_id INT NOT NULL AUTO_INCREMENT,
book_title VARCHAR(250),
book_isbn INT,
book_publication_date DATETIME(6) NOT NULL,
book_price INT,
constraints PK_book PRIMARY KEY (book_id)
);
ALTER TABLE book MODIFY book_id INT FIRST;
CREATE UNIQUE INDEX X_book_publication_date ON book (book_publication_date);
ALTER TABLE book ENGINE=MyISAM;
DROP TABLE book;
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS book(
 book_id INT NOT NULL AUTO_INCREMENT,
 book_title text NOT NULL,
 book_isbn INT NOT NULL,
 book_publication_date text NOT NULL,
 book_price INT NOT NULL,
 CONSTRAINT book_pk PRIMARY KEY(book_id)
);
ALTER TABLE book MODIFY book_id INT FIRST;
CREATE INDEX book_text ON book(book_title(3));
ALTER TABLE book ENGINE=MyISAM;
DROP TABLE book;
DROP DATABASE sampleDB;
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE book(
 book_id int(11) NOT NULL AUTO_INCREMENT,
 book_title varchar(50) NOT NULL,
 book_isbn int(6) DEFAULT NULL,
 book_publication_date date DEFAULT NULL,
 book_price int(3) DEFAULT '0',
 constraint book_id primary key(book_id),
 constraint FK_book_author foreign key(book_author) references author(author_id)
);
ALTER TABLE book MODIFY book_id INT FIRST;
CREATE INDEX book_author ON book(book_author(5));
ALTER TABLE book ENGINE=MyISAM;
DROP TABLE book;
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS book(
 book_id INT NOT NULL AUTO_INCREMENT,
 book_isbn INT NOT NULL,
 book_title text NOT NULL,
 book_publication_date text NOT NULL,
 book_price INT NOT NULL,
 KEY book_fk1(book_isbn),
 KEY book_fk2(book_title)
);

ALTER TABLE book MODIFY book_id INT FIRST;
ALTER TABLE book ENGINE=MyISAM;
DROP TABLE book;
DROP DATABASE sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- Please create a program that reads the following table:
--
--     Author | BookId |
--
-- and writes to a table:
--
--     Author | BookTitle |
--
-- Using the IN keyword.
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS book(
 book_id INT NOT NULL AUTO_INCREMENT,
 book_title text NOT NULL,
 book_isbn INT NOT NULL,
 book_publication_date text NOT NULL,
 book_price INT NOT NULL,
 CONSTRAINT book_pk PRIMARY KEY(book_id)
);
ALTER TABLE book MODIFY book_id INT FIRST;
CREATE INDEX book_text ON book(book_title(6));
ALTER TABLE book ENGINE=MyISAM;
SELECT * FROM book, book WHERE book.book_isbn=book.book_isbn AND book.book_isbn=2013119565;
SELECT * FROM book WHERE book.book_publication_date like %10:00;
SELECT * FROM book WHERE book.book_publication_date > '20:00 03/31/1999' AND book.book_publication_date < '2018-12-30' AND book.book_price < 49999.99;
DROP DATABASE sampleDB;
-- Please create a query similar to the first generation to query a table named book like that in SQLite that queries the contents in the previous database. You should query the book table from the sampleDB database and sort the records in ascending order based on the book title. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS test1(
 id INT NOT NULL AUTO_INCREMENT,
 name text NOT NULL,
 email text NOT NULL,
 address text NOT NULL,
 phone text NOT NULL,
 CONSTRAINT test1_pk PRIMARY KEY(id)
);
ALTER TABLE test1 MODIFY id INT FIRST;
CREATE INDEX uk_test1 ON test1(email(3));
ALTER TABLE test1 ENGINE=MyISAM;
DROP TABLE test1;
DROP DATABASE sampleDB;
-- Please create an efficient query similar to the previous. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE test1;
CREATE TABLE IF NOT EXISTS user(
 userid INT NOT NULL AUTO_INCREMENT,
 firstname text NOT NULL,
 lastname text NOT NULL,
 address text NOT NULL,
 email text NOT NULL,
 phone text NOT NULL,
 gender text NOT NULL,
 CONSTRAINT user_pk PRIMARY
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS teacher CASCADE;
CREATE TABLE teacher(
 teacher_id INT AUTO_INCREMENT,
 teacher_fname text NOT NULL,
 teacher_lname text NOT NULL,
 teacher_dept text NOT NULL,
 CONSTRAINT teacher_pk PRIMARY KEY(teacher_id)
);
DROP TRIGGER IF EXISTS before_insert_update;
CREATE TRIGGER before_insert_update AFTER INSERT ON teacher
  FOR EACH ROW SET NEW.teacher_id = (SELECT teacher_id_max FROM teacher) + 1;
DROP TRIGGER IF EXISTS before_select;
CREATE TRIGGER before_select AFTER SELECT ON teacher
  SET NEW.teacher_fname = CONCAT('<NAME>',(SELECT CONCAT(LTRIM(RTRIM(substring_index(NEW.teacher_lname,'_',length(NEW.teacher_lname)))) FROM teacher WHERE teacher_fname = NEW.teacher_fname LIMIT 1))
);
DROP TRIGGER IF EXISTS before_delete;
CREATE TRIGGER before_delete AFTER DELETE ON teacher
  BEGIN DELETE FROM student WHERE teacher_fname = OLD.teacher_fname; END;
DROP TRIGGER IF EXISTS before_update;
CREATE TRIGGER before_update AFTER UPDATE ON teacher
  BEGIN UPDATE student SET teacher_id_max = teacher_id_max - 1 WHERE teacher_id_max = (SELECT MAX(teacher_id_max) FROM teacher); END;
DROP TABLE IF EXISTS student CASCADE;
CREATE TABLE student(
 student_id INTAUTO_INCREMENT,
 student_email text NOT NULL,
 student_name text NOT NULL,
 student_sex text NOT NULL,
 CONSTRAINT student_pk PRIMARY KEY(student_id)
);
DROP TRIGGER IF EXISTS insert_student;
CREATE TRIGGER insert_student AFTER INSERT ON student
  FOR EACH ROW INSERT INTO student (student_name, student_email, student_sex) VALUES (NEW.student_name, NEW.student_email, NEW.student_sex);
DROP TRIGGER IF EXISTS select_student;
CREATE TRIGGER select_student BEFORE SELECT ON student
  FOR EACH ROW SELECT CONCAT(first_name,' ', last_name) AS fullname FROM student WHERE student_id = NEW.student_id;
DROP TRIGGER IF EXISTS select_student2;
CREATE TRIGGER
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- Please create a program that reads the following table:
--
--     Author | BookId |
--
-- and writes to a table:
--
--     Author | BookTitle |
--
-- Using the IN keyword.
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- Add multiple rows to the Authors table. All the authors should have their names stored in a new field in the Authors table called Name, all the books should have these names stored in a new field in the Books table called Name. Add names to all the books
DELIMITER $$
DROP TRIGGER IF EXISTS `sampleDB`.`Authors`.`AuthorsId_Auto_Trigger`$$
CREATE TRIGGER sampleDB.`Authors`.`AuthorsId_Auto_Trigger`
  AFTER INSERT ON `sampleDB`.Authors FOR EACH ROW BEGIN
       INSERT INTO `sampleDB`.`Books`
       (`BookId`, `Name`)
SELECT `AuthorId`, CONVERT(char(8)), `Name` FROM `sampleDB`.`Authors` WHERE `AuthorId` = NEW.`AuthorId`
 $$
DELIMITER ;
DELIMITER $$
DROP FUNCTION IF EXISTS `sampleDB`.`fnc_get_max_book_id`$$
CREATE FUNCTION `sampleDB`.`fnc_get_max_book_id`() RETURNS int
    DETERMINISTIC
BEGIN
DECLARE max_book_id int;
SELECT MAX(BookID) INTO max_book_id FROM `sampleDB`.`Books`;
RETURN max_book_id;
END $$
DELIMITER ;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

CREATE TABLE Authors (FirstName VARCHAR(255), LastName VARCHAR(255));
ALTER TABLE Authors MODIFY FirstName VARCHAR(255);
ALTER TABLE Authors MODIFY LastName VARCHAR(255);
USE sampleDB; INSERT INTO Authors VALUES ("John", "Hancock");
USE sampleDB; INSERT INTO Authors VALUES ("John", "Adams");
SELECT FirstName, LastName FROM Authors WHERE FirstName="John" AND LastName = 'Hancock';
SELECT FirstName, LastName FROM Authors WHERE FirstName="John" AND LastName="Adams";
USE sampleDB; INSERT INTO Authors VALUES ("John", "Adams"); -- Insert data to your table
SELECT FirstName, LastName FROM Authors;
USE sampleDB; ALTER TABLE Authors MODIFY FirstName VARCHAR(255); -- Modify column datatype for all columns to String
SELECT FirstName, LastName FROM Authors;
-- Please create and test a program that stores and updates a table by using a variable in the
-- UPDATE statement.
USE sampleDB; INSERT INTO Authors VALUES ("John", "Adams");
var Authors; SELECT * FROM Authors;
UPDATE Authors SET LastName = 'Davis';
var Authors; SELECT * FROM Authors;
UPDATE Authors SET FirstName = 'John';
var Authors; SELECT * FROM Authors;
INSERT INTO Authors VALUES ("John", "Davis"); -- Insert data to your table in var Authors
SELECT FirstName, LastName FROM Authors;
--
 
USE sampleDB; INSERT INTO Authors VALUES ("John", "Adams");
SELECT FirstName, LastName FROM Authors;
CREATE PROCEDURE dbo.DisplayAuthors2()
AS
SELECT Fi[Author].[FirstName], Fi[Author].[LastName]
FROM [Author];
USE sampleDB; CALL dbo.DisplayAuthors2();
 
USE sampleDB; CALL dbo.DisplayAuthors2();
USE sampleDB; DROP PROCEDURE dbo.DisplayAuthors2;
*/

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

CREATE TABLE IF NOT EXISTS `books` (
  `author_id` INT(10) UNSIGNED,
  `booktitle` VARCHAR(255)
);

INSERT INTO `books` (`author_id`, `booktitle`)
VALUES (1, 'MySQL for Python Developers'), (2, 'MySQL Bible'), (3, 'PHP for Web Developers'), ('5', 'Hello, SQL!');

SELECT * FROM `books`;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP DATABASE IF EXISTS sampleDB;

UPDATE DATABASE SET version = '5.5.10' WHERE name ='sampleDB';
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
 -- Use a join of author table with book table.
-- Please write a complex JOIN to find all books by author.

-- Please write a complex JOIN to find all books that are written by any author.
-- You should use an INNER JOIN.
-- Please write a complex JOIN to find all books written by <NAME>.

INSERT INTO sampleDB.author VALUES ('<NAME>', 1, '<NAME>');
INSERT INTO sampleDB.author VALUES ('<NAME>', 1, '<NAME>');
INSERT INTO sampleDB.author VALUES ('<NAME>', 1, '<NAME>');
INSERT INTO sampleDB.author VALUES ('<NAME>', 1, '<NAME>');
INSERT INTO sampleDB.author VALUES ('<NAME>', 1, 'E. D');
INSERT INTO sampleDB.author VALUES ('<NAME>', 1, '<NAME>');
INSERT INTO sampleDB.author VALUES ('<NAME>', 1, '<NAME>');
INSERT INTO sampleDB.author VALUES ('<NAME>', 2, 'Wittgenstein');
INSERT INTO sampleDB.author VALUES ('<NAME>', 1, 'E. D');
INSERT INTO sampleDB.author VALUES ('<NAME>', 2, 'Wittgenstein');
INSERT INTO sampleDB.author VALUES ('<NAME>', 1, '<NAME>');
INSERT INTO sampleDB.author VALUES ('<NAME>', 1, '<NAME>');
INSERT INTO sampleDB.author VALUES ('<NAME>', 2, 'Wittgenstein');
INSERT INTO sampleDB.author VALUES ('<NAME>', 1, '<NAME>');
INSERT INTO sampleDB.author VALUES ('<NAME>', 1, 'E. D');
INSERT INTO sampleDB.author VALUES ('<NAME>', 2, 'Wittgenstein');
INSERT INTO sampleDB.author VALUES ('<NAME>', 1, '<NAME>');
INSERT INTO sampleDB.author VALUES ('<NAME>', 1, '<NAME>');
INSERT INTO sampleDB.author VALUES ('<NAME>', 3, 'Wittgenstein');
INSERT INTO sampleDB.author VALUES ('<NAME>', 1, '<NAME>');

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `books` (
  `author_id` INT(10) UNSIGNED,
  `booktitle` VARCHAR(255)
);
INSERT INTO `books` (`author_id`, `booktitle`)
VALUES (1, 'MySQL for Python Developers'), (2, 'MySQL Bible'), (3, 'PHP for Web Developers'), ('5', 'Hello, SQL!');
SELECT * FROM `books`;
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `books` (
  `author_id` INT(10) UNSIGNED,
  `booktitle` VARCHAR(255)
);
INSERT INTO `books` (`author_id`, `booktitle`)
VALUES (1, 'MySQL for Python Developers'), (2, 'MySQL Bible');
SELECT * FROM `books`;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `books` (
  `author_id` INT(10) UNSIGNED,
  `booktitle` VARCHAR(255)
);
INSERT INTO `books` (`author_id`, `booktitle`)
VALUES (1, 'MySQL Bible'), (2, 'PHP for Web Developers'), (3, 'MySQL for Python Developers');
UPDATE `books` SET `author_id`=1 WHERE `author_id`=3;
SELECT * FROM `books`;
DROP TABLE `books`;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `books` (
  `author_id` INT(10) UNSIGNED,
  `booktitle` VARCHAR(255)
);
INSERT INTO `books` (`author_id`, `booktitle`)
VALUES (8, 'SQL Bible'), (2, 'Programming MySQL');
SELECT * FROM `books`;
-- Please run the following query to demonstrate your mutation
 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `books` (
  `author_id` INT(10) UNSIGNED,
  `booktitle` VARCHAR(255)
);
INSERT INTO `books` (`author_id`, `booktitle`)
VALUES (42, 'Go MySQL!');
SELECT * FROM `books`;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `books` (
  `author_id` INT(10) UNSIGNED,
  `booktitle` VARCHAR(255)
);
COMMIT;
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `books`;
COMMIT;
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SELECT * FROM `books`;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SELECT * FROM `books`;
DROP TABLE `books`;
FLUSH PRIVILEGES;
SELECT * FROM `books`;
SELECT * FROM `authors`;
DROP DATABASE IF EXISTS sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `books` (
  `author_id` INT(10) UNSIGNED,
  `booktitle` VARCHAR(255)
);
INSERT INTO `books` (`author_id`, `booktitle`)
VALUES (8, 'SQL Bible'), (2, 'Programming MySQL');
SELECT * FROM `books`;
-- Please run the following query to demonstrate your mutation
CREATE TABLE IF NOT EXISTS `books` (
  `author_id` INT(10) UNSIGNED,
  `booktitle` VARCHAR(255)
);
INSERT INTO `books` (`author_id`, `booktitle`)
VALUES (42, 'Go MySQL!');
SELECT * FROM `books`;
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

 
ALTER TABLE `books` ADD `author` INT(11);

 

ALTER TABLE `publisher` ADD `books_available` INT(15);

 
DROP TABLE `books`;

 
ALTER TABLE `books_available` ADD `author_id` INT(10);

 
ALTER TABLE `author_books` ADD `book_id` INT(10);

 

DROP TABLE `author_books`;

/* The above queries will drop the table "author_books", for tables
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS books;
CREATE TABLE `books` (
  `author_id` INT(10) UNSIGNED,
  `booktitle` VARCHAR(255)
);
INSERT INTO `books` (`author_id`, `booktitle`)
VALUES (42, 'SQL Bible'), (8, 'Programming MySQL');
SELECT author_id, bookname FROM books;
CREATE TABLE IF NOT EXISTS books (
  `author_id` INT(10) UNSIGNED,
  `booktitle` VARCHAR(255)
);
INSERT INTO books (`author_id`, `booktitle`)
VALUES (42, 'Go MySQL!');
SELECT author_id, bookname FROM books;
SELECT * FROM `books`;
SELECT * FROM books;
DROP TABLE books;
CREATE TABLE books (
  `author_id` INT(10) UNSIGNED,
  `booktitle` VARCHAR(255)
);
INSERT INTO books (`author_id`, `booktitle`)
VALUES (42, 'SQL Bible'), (8, 'Programming MySQL');
DROP TABLE IF EXISTS books;
CREATE TABLE IF NOT EXISTS books (
  `author_id` INT(10) UNSIGNED,
  `booktitle` VARCHAR(255)
);
INSERT INTO books (`author_id`, `booktitle`)
VALUES (42, 'Go MySQL!');
SELECT author_id, bookname FROM books;
SELECT * FROM `books`;
-- CREATE TABLE bookstore (
--   `id` INT(10) UNSIGNED,
--   `author_id` INT(10) UNSIGNED,
--   `title` VARCHAR(255)
-- );
CREATE DATABASE IF NOT EXISTS bookstore;

-- INSERT INTO bookstore (`id`, `author_id`, `title`)
-- VALUES (1, 2, 'SQL Bible'), (2, 1, 'Programming MySQL'), (3, 3, 'Go MySQL!');
INSERT INTO bookstore (`author_id`, `title`)
VALUES (33, 'SQL Bible'), (28,'Programming MySQL');

INSERT INTO bookstore (author_id, title)
VALUES (3
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `books` (
  `author_id` INT(10) UNSIGNED,
  `booktitle` VARCHAR(255)
);
INSERT INTO `books` (`author_id`, `booktitle`)
VALUES (5, 'Go MySQL!');
SELECT * FROM `books`;
 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `books` (
  `author_id` INT(10) UNSIGNED,
  `booktitle` INT(10) UNSIGNED
);
INSERT INTO `books` (`author_id`, `booktitle`)
VALUES (5, 1), (8, 2), (3, 3), (5, 4), (10, 5), (9, 6), (6, 7), (5, 8);
SELECT * FROM `books`;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `books` (
  `author_id` INT(10) UNSIGNED,
  `booktitle` VARCHAR(255)
);
INSERT INTO `books` (`author_id`, `booktitle`)
VALUES (10, 'MySQL Bible'); -- Please use your script as the new mutated script
DROP TABLE IF EXISTS `books`; -- Please drop the old table
SELECT * FROM `books`;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
 
CREATE TABLE IF NOT EXISTS `books` (
  `author_id` INT(10) UNSIGNED,
  `booktitle` VARCHAR(255),
  PRIMARY KEY (`author_id`)
) ENGINE=MEMORY;
INSERT INTO `books` VALUES (8, 'SQL Bible'), (2, 'Programming MySQL');
SELECT * FROM `books`;


```

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `books` (
  `author_id` INT(10) UNSIGNED,
  `booktitle` VARCHAR(255)
);
INSERT INTO `books` (`author_id`, `booktitle`)
VALUES (5, 'Go MySQL!');
SELECT * FROM `books`;
CREATE TABLE IF NOT EXISTS `books` (
  `author_id` INT(10) UNSIGNED,
  `booktitle` INT(10) UNSIGNED
);
INSERT INTO `books` (`author_id`, `booktitle`)
VALUES (5, 1), (8, 2), (3, 3), (5, 4), (10, 5), (9, 6), (6, 7), (5, 8);
SELECT * FROM `books`;
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
ALTER TABLE example ADD COLUMN author_id INT(10) UNSIGNED;
ALTER TABLE example CHANGE COLUMN blah blah INT(10);
ALTER TABLE example MODIFY COLUMN blah INT(10);
DROP TABLE book1;
CREATE TABLE book2 (
  author_id INT(10) UNSIGNED,
  title LONGTEXT
);
SELECT * FROM book2;
CREATE TABLE `book2` (
  author_id INT(10) UNSIGNED,
  title LONGTEXT
);
-- Now, query the database again using the previously created select command
SELECT * FROM book2;
USE sampleDB;
DROP TABLE example;
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP DATABASE IF EXISTS sampleDB;
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP DATABASE IF EXISTS sampleDB;
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP DATABASE IF EXISTS sampleDB;

CREATE TABLE IF NOT EXISTS `books`;
INSERT INTO `books` (`AuthorID`, `Booktitle`)
VALUES (5, '<NAME>!');

select id, name from category LIMIT 10;
select name from category LIMIT 10;

SELECT *
FROM `books`
WHERE `AuthorID` IN (5, 10);

UPDATE `books`
SET `Booktitle` = 'The Hitchhiker\'s Guide to the Galaxy'
WHERE `Booktitle` = 'Go MySQL!';

delete from `books`;

select * from books;
create table `categories`(
    `id` INT
    AUTO_INCREMENT,
    `name` VARCHAR(30)
    UNIQUE NOT NULL
)ENGINE = InnoDB DEFAULT CHARSET=utf8;

insert into categories
(id, name)
values (1,'Programming Languages'),
(2,'Data Types'),
(3,'Functions and Procedures'),
(4,'Tables and Indexes'),
(5,'Joins');

select * from `categories`;

show columns from `books`;


[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO `books` (`author_id`, `booktitle_orig`)
VALUES (5, 1), (8, 2), (3, 3), (5, 4), (10, 5), (9, 6);
DELIMITER ;;
CREATE TRIGGER copyTrigger BEFORE INSERT ON `books`
   FOR EACH ROW
   INSERT INTO `testTable` (`id`, `author_id`)
   VALUES (LAST_INSERT_ID(), NEW.author_id);
DELIMITER ;
UPDATE `books`
  SET `author_id` = 8;
SELECT * FROM `books`;
#
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `books` (
  `id` INT(10) UNSIGNED AUTO_INCREMENT,
  `author_id` INT(10) UNSIGNED,
  `booktitle` INT(10) UNSIGNED
);
INSERT INTO `books` (`id`, `author_id`, `booktitle`) VALUES (17, 16, 1), (18, 16, 2), (16, 16, 3);
SELECT * FROM `books` WHERE `author_id` IN (5);
SELECT * FROM `books` WHERE `author_id` IN (5);
INSERT INTO `books`(`id`, `author_id`, `booktitle`) VALUES (1, 7, 37);
DELETE FROM `books` WHERE `author_id` IN (5);
SELECT * FROM `books` WHERE `author_id` IN (5);
SHOW WARNINGS;
DROP TABLE `books`;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `books` (
  `author_id` INT(10) UNSIGNED,
  `booktitle` INT(10) UNSIGNED
);
INSERT INTO `books` (`author_id`, `booktitle`)
VALUES (5, 1), (8, 2), (3, 3), (5, 4), (10, 5), (9, 6), (6, 7), (5, 8);
UPDATE `books` SET `author_id` = `author_id`+1 WHERE `author_id` = 5;
SELECT * FROM `books`;
UPDATE `books` SET `booktitle` = `booktitle`+1 WHERE `author_id` = 5;
SELECT * FROM `books`;
DROP TABLE `books`;
-- Please make sure the query is a single statement. Also include your solution in the comments. */
SELECT author_id, booktitle FROM `books` INNER JOIN `books` ON author_id=2 UNION
SELECT author_id, booktitle FROM `books` INNER JOIN `books` ON author_id=1 UNION
SELECT author_id, booktitle FROM `books` INNER JOIN `books` ON author_id=2 UNION
SELECT author_id, booktitle FROM `books` INNER JOIN `books` ON author_id=1;
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `books` (
  `author_id` INT(10) UNSIGNED,
  `booktitle` VARCHAR(255)
);
INSERT INTO `books` (`author_id`, `booktitle`)
VALUES (5, 'Go MySQL!');
SELECT * FROM `books`;
CREATE TABLE IF NOT EXISTS `books` (
  `author_id` INT(10) UNSIGNED,
  `booktitle` INT(10) UNSIGNED
);
INSERT INTO `books` (`author_id`, `booktitle`)
VALUES (5, 1), (8, 2), (3, 3), (5, 4), (10, 5), (9, 6), (6, 7), (5, 8);
SELECT * FROM `books`;
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `books` (
  `author_id` INT(10) UNSIGNED,
  `title` VARCHAR(255),
  `publicationdate` DATE
);
UPDATE  `books`
SET `author_id` = 8
WHERE `author_id` = 9;
SELECT * FROM `books`;
DROP TABLE IF EXISTS `books`;
-- Please drop all tables you have created.

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `books` (
  `author_id` INT(10) UNSIGNED,
  `isbn` INT(10) UNSIGNED
);
INSERT INTO `books` (`author_id`, `isbn`)
VALUES (5, 6000), (10, 7000), (5, 4000), (6, 3000);
 
SELECT * FROM `books`;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SELECT * FROM `books` LIMIT 8;
CREATE TABLE IF NOT EXISTS `books` (
  `author_id` INT(10) UNSIGNED,
  `booktitle` VARCHAR(255)
);
INSERT INTO `books` (`author_id`, `booktitle`)
VALUES (6, 'Go MySQL!' + '!');
SELECT * FROM `books`;
DROP TABLE books;
 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SELECT * FROM books;
CREATE TABLE IF NOT EXISTS `books2` (
  `author_id` INT(10) UNSIGNED,
  `booktitle` VARCHAR(255)
);
INSERT INTO `books2` (`author_id`, `booktitle`)
  VALUES (6, 'Go MySQL!');
SELECT * FROM `books2`;
SELECT * FROM books2;
-- Please implement a simple system with multiple databases. Assume you have a database named ‘main_db’. Create another database named ‘backup_db’. Create one table from your ‘main_db’ database that has two columns which are named ‘id’ and ‘data’. Create a table ‘backup_db’ that has column ‘id’ and contains the data you created in ‘main_db’. Now add a new row into your ‘main_db’ table with a value of one. Insert a value to each of the new ‘backup_db’ table’s rows by calling mySQL’s ‘ALTER TABLE’ command. Add a new row to the ‘main_db’ table and insert a new value to the ‘main_db’ table for all columns (in other words). Run your modified program to show “id = 1” and “id = 2” in the ‘backup_db’ table.
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `backup_db`;
CREATE TABLE IF NOT EXISTS `backup_db` (
  `id` INT(10
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `books` (
  `author_id` INT(10) UNSIGNED,
  `booktitle` VARCHAR(255)
);
INSERT INTO `books` (`author_id`, `booktitle`)
VALUES (5, 'Go MySQL!');
CREATE TRIGGER books_delete
AFTER DELETE
ON `books`
FOR EACH ROW
BEGIN
  INSERT INTO `books` VALUES (NULL,
    OLD.booktitle);
END;
SELECT * FROM `books`;
DELIMITER ;
DROP TRIGGER books_delete ON `books`;
DROP DATABASE ;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SELECT * FROM `books`;
-- Please create a query to return authors names
SELECT author_id, CONCAT (author_first,'', author_last) FROM authors;
-- Please create a program to modify `author_id` number of books in the table `books` to the next available number.
SELECT * FROM `books`;
UPDATE `books` SET author_id = author_id + 1 WHERE author_id NOT IN
 SELECT author_id FROM `books`;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `books` (
  `author_id` INT(10) UNSIGNED,
  `isbn` INT(10) UNSIGNED
);
INSERT INTO `books` (`author_id`, `isbn`)
VALUES (5, 6000), (10, 7000), (5, 4000), (6, 3000);
SELECT * FROM `books`;
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `products` (
  `product_id` int(10) NOT NULL AUTO_INCREMENT,
  `name` varchar(100),
  `cost` float,
  PRIMARY KEY (`product_id`)
)ENGINE=InnoDB;
USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `books` (
  `isbns` INT(10) UNSIGNED
);
INSERT INTO `books` (`isbns`)
VALUES (4000), (1000), (2000);
SELECT * FROM `books`;
INSERT INTO `books` (`isbns`)
VALUES (7000), (5000), (8000);
SELECT * FROM `books`;
DROP TABLE `books`;
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `books` (
  `author_id` INT(10) UNSIGNED,
  `isbn` INT(10) UNSIGNED,
  `title` TEXT
);
INSERT INTO `books` (`author_id`, `isbn`, `title`)
VALUES (5, 6000, 'Learning MySQL'), (10, 7000, 'Pro MySQL 5.0'), (17, 8000, 'MySQL Tutorial'), (5, 4000, 'Hello World!');
SELECT * FROM `books`;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `books` (
  `author_id` INT(10) UNSIGNED,
  `isbn` INT(10) UNSIGNED,
  `name` VARCHAR(255) UNIQUE NOT NULL
);
INSERT INTO `books` (`author_id`, `isbn`, `name`)
VALUES (5, 6000, 'Book 1'), (10, 7000, 'Book 2'), (8, 5000, 'Book 3'), (4, 4000, 'Book 4'), (6, 3000, 'Book 5');
SELECT * FROM `books`;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `users` (
  `user_id` INT(10) UNSIGNED,
  `user_name` TEXT,
  `user_password` TEXT
);
ALTER TABLE `users` ADD UNIQUE KEY `username`(`user_name`);
 ;
 ;
 ;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `products` (
  `product_id` int(10) NOT NULL AUTO_INCREMENT,
  `name` varchar(100),
  `cost` float,
  PRIMARY KEY (`product_id`)
)ENGINE=InnoDB;
USE sampleDB;
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `products` (
  `product_id` int(10) NOT NULL AUTO_INCREMENT,
  `name` varchar(100),
  `cost` float,
  PRIMARY KEY (`product_id`)
)ENGINE=InnoDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `customers` (
  `customer_id` int(10) NOT NULL AUTO_INCREMENT,
  `name` varchar(100),
  `city` varchar(100),
  `address` varchar(100),
  PRIMARY KEY (`customer_id`)
)ENGINE=InnoDB;
SELECT * FROM customers;
USE sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

CREATE TABLE IF NOT EXISTS `orders` (
  `order_id` int(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  `user` varchar(50),
  `email` varchar(255),
  `phone` varchar(15),
  `address` text,
  `date` smalldatetime,
  `ordertotal` float,
  `orderstatus` enum('NEW','PARTIALLY','COMPLETE'),
  PRIMARY KEY (`order_id`),
  KEY (user),
  KEY (phone)
)ENGINE=InnoDB;
CREATE TABLE IF NOT EXISTS `users` (
  `user_id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `username` int(10) UNSIGNED NOT NULL,
  `password` varchar(30),
  `email` varchar(50),
  `phone` varchar(50),
  `address` text,
  `date` smalldatetime,
  `role` enum('BUYER','SELLER') default 'BUYER',
  PRIMARY KEY (`user_id`),
  KEY (username),
  KEY (email)
)ENGINE=InnoDB;
ALTER TABLE `orders` ADD CONSTRAINT `orders_ibfk_2` FOREIGN KEY (`user`) REFERENCES `users` (`user_id`) ON UPDATE CASCADE ON DELETE CASCADE;
ALTER TABLE `orders` ADD CONSTRAINT `orders_ibfk_3` FOREIGN KEY (`phone`) REFERENCES `users` (`user_id`) ON UPDATE CASCADE ON DELETE CASCADE;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `products` (
  `product_id` int(10) NOT NULL AUTO_INCREMENT,
  `name` varchar(100),
  `cost` float,
  PRIMARY KEY (`product_id`)
)ENGINE=InnoDB;
USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `products` (
  `product_id` int(10) NOT NULL AUTO_INCREMENT,
  `name` varchar(100),
  `cost` float,
  PRIMARY KEY (`product_id`)
)ENGINE=InnoDB DEFAULT CHARSET=latin1;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `products` (
  `product_id` int(10) NOT NULL AUTO_INCREMENT,
  `name` varchar(100),
  `cost` float,
  PRIMARY KEY (`product_id`)
)ENGINE=InnoDB DEFAULT CHARSET=latin1;
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
UPDATE `products` SET `cost` = `cost` * 2 WHERE `products`.`cost` > 1000000;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `products` (
  `product_id` int(10) NOT NULL AUTO_INCREMENT,
  `name` varchar(100),
  `cost` float,
  PRIMARY KEY (`product_id`)
)ENGINE=InnoDB DEFAULT CHARSET=latin1;
drop database if exists sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO `pro_table` (`category_name`, `sub_category_name`) VALUES ('Crocodiles', 'Frogs');
ALTER TABLE `products` ADD `description` varchar(1024) AFTER `cost`; ALTER TABLE `pro_table` DROP COLUMN `category_name`; ALTER TABLE `products` MODIFY COLUMN `category_name` varchar(1024) NOT NULL;
SELECT `products`.*, `pro_table`.`category_name`,`pro_table`.`sub_category_name`
FROM `products`
LEFT JOIN `pro_table` ON `pro_table`.`category_name` = `products`.`category_name`;
-- Please create a mutated program that uses all available data from the 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SELECT ROWID, `name`, `cost`,`category_name`,`sub_category_name`,`description`
FROM `products`;
DROP TABLE `products`;
DROP TABLE `pro_table`;
ALTER DATABASE sampleDB;

 


[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
UPDATE `products` SET `name`='iPhone 8' WHERE `product_id`=1;
UPDATE `products` SET `cost`='41.2' WHERE `product_id`=3;
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE products;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `products` (
  `product_id` int(10) NOT NULL AUTO_INCREMENT,
  `name` varchar(100),
  `cost` float,
  PRIMARY KEY (`product_id`)
)ENGINE=InnoDB;
-- Please create an entirely new table with columns in the order 'name' and 'price'. Insert 5 rows of data in it (id,Name,Price).
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `products` (
  `product_id` int(10) NOT NULL AUTO_INCREMENT,
  `name` varchar(100),
  `price` float,
  PRIMARY KEY (`product_id`)
)ENGINE=InnoDB;
-- Please create an entirely new table with columns in the order 'name' and 'price'. Insert 5 rows of data in it (id,Name,Price).
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `products` (
  `product_id` int(10) NOT NULL AUTO_INCREMENT,
  `name` varchar(100),
  `price` float,
  PRIMARY KEY (`product_id`)
)ENGINE=InnoDB DEFAULT CHARSET=latin1;
-- Please create a query that returns all data of all products in the previous generation of the table.
SELECT * FROM products;<commit_msg>#218 Add comments in MySql database creation<commit_after>CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB
CREATE TABLE IF NOT EXISTS `products` (
    `product_id` int(10) NOT NULL AUTO_INCREMENT,
    `name` varchar(100),
    `cost` float,
    PRIMARY KEY (`product_id`)
)ENGINE=InnoDB DEFAULT CHARSET=latin1;
USE sampleDB
CREATE TABLE IF NOT EXISTS `projects` (
    `project_id` int(10) NOT NULL AUTO_INCREMENT,
    `name` varchar(100),
    `user_id` int(11),
    PRIMARY KEY (`project_id`)
)ENGINE=InnoDB DEFAULT CHARSET=latin1;
USE sampleDB
CREATE TABLE IF NOT EXISTS `users` (
 `user_id` int(11) NOT NULL AUTO_INCREMENT,
 `name` varchar(100),
 `password` varchar(200)
)ENGINE=InnoDB DEFAULT CHARSET=latin1;
USE sampleDB
CREATE TABLE IF NOT EXISTS `comments` (
 `comment_id` int(11) NOT NULL AUTO_INCREMENT,
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `products` (
  `product_id` int(10) NOT NULL AUTO_INCREMENT,
  `name` varchar(100),
  `cost` float,
  PRIMARY KEY (`product_id`)
)ENGINE=InnoDB DEFAULT CHARSET=latin1;
drop database if exists sampleDB;
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `products` (
  `product_id` int(10) NOT NULL AUTO_INCREMENT,
  `name` varchar(100),
  `cost` float,
  PRIMARY KEY (`product_id`)
)ENGINE=MyISAM DEFAULT CHARSET=latin1;
drop database if exists sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `products` (
  `product_id` int(10) NOT NULL AUTO_INCREMENT,
  `name` varchar(100),
  `cost` float,
  PRIMARY KEY (`product_id`)
)ENGINE=InnoDB DEFAULT CHARSET=latin1;
\c sampleDB
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `products` (
  `product_id` int(10) NOT NULL AUTO_INCREMENT,
  `name` varchar(100),
  `cost` float,
  PRIMARY KEY (`product_id`)
)ENGINE=InnoDB DEFAULT CHARSET=latin1;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users_details(
  `userId` int(5) NOT NULL AUTO_INCREMENT,
  `userName` varchar(20),
  `pwd` varchar(30),
  `firstName` varchar(20),
  `LastName` varchar(50),
  `userType` int(1),
  `isAdmin` bit(1),
  `created_at` date,
  `updated_at` date, 
  PRIMARY KEY (`userId`)
)ENGINE=InnoDB DEFAULT CHARSET=latin1;
  
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

CREATE TABLE IF NOT EXISTS `products` (
  `product_id` int(10) NOT NULL,
  `name` varchar(100),
  `price` money,
  `discount` smallint(6)
)ENGINE=InnoDB DEFAULT CHARSET=latin1;

INSERT INTO products (product_id, name,cost,discount) VALUES (1,"Evernote 6.8",50000,6);
INSERT INTO products (product_id, name,cost,discount) VALUES (2,"IPad Pro 128GB",2000000,5);
INSERT INTO products (product_id, name,cost,discount) VALUES (3,"Samsung Galaxy Tab S20",990000,8);
INSERT INTO products (product_id, name,cost,discount) VALUES (4,"Sugar Cane 400ml",17000,9);

SHOW Create Table products;
SELECT * FROM `products`;
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users_details(
  `userId` int(5) NOT NULL AUTO_INCREMENT,
  `userName` varchar(20),
  `pwd` varchar(30),
  `firstName` varchar(20),
  `LastName` varchar(50),
  `userType` int(1),
  `isAdmin` bit(1),
  `created_at` date,
  `updated_at` date, 
  PRIMARY KEY (`userId`)
)ENGINE=InnoDB DEFAULT CHARSET=latin1;
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users(
  `userId` int(5) NOT NULL AUTO_INCREMENT,
  `userName` varchar(10) NOT NULL,
  `pwd` varchar(30) NOT NULL,
  `pwdConfirm` varchar(30) NOT NULL,
  `firstName` varchar(20),
  `LastName` varchar(50),
  `userType` int(1),
  `created_at` date,
  `updated_at` date,
  PRIMARY KEY (`userId`)
)ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
 

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users_details(
  `userId` int(5) NOT NULL AUTO_INCREMENT,
  `userName` varchar(20),
  `pwd` varchar(30),
  `firstName` varchar(20),
  `LastName` varchar(50),
  `userType` int(1),
  `isAdmin` bit(1),
  `created_at` date,
  `updated_at` date, 
  PRIMARY KEY (`userId`)
)ENGINE=InnoDB DEFAULT CHARSET=latin1;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users_details(
  `userId` int(5) NOT NULL AUTO_INCREMENT,
  `userName` varchar(20),
  `pwd` varchar(30),
  `firstName` varchar(20),
  `LastName` varchar(50),
  `userType` int(1),
  `isAdmin` bit(1),
  `created_at` date,
  `updated_at` date, 
  PRIMARY KEY (`userId`)
)ENGINE=InnoDB DEFAULT CHARSET=latin1;

INSERT INTO users_details(`firstName`,`userType`,`user_type`,`isAdmin`,`UserId`,`pwd`) VALUES
('shahzeez',1,'user',1,1000,'8d034c97c12d515d94000009c824c4e224e966b9'),
('shahzeez',1,'user',1,1001,'8b604f2c930d26a1d5c4c148d8916816483a77fe'),
('shahzeez',1,'user',1,1002,'<PASSWORD>'),
('shahzeez',1,'guest',0,1003,'<PASSWORD>'),
('shahzeez',1,'guest',0,1004,'b709<PASSWORD>'),
('shahzeez',1,'guest',0,1005,'b<PASSWORD>');

# In the end, drop all tables you created.
DROP TABLE IF EXISTS users_details;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
<fim_middle>CREATE TABLE IF NOT EXISTS users(
  `userId` int(5),
  `userName` varchar(100),
  `pwd` varchar(32),
  `firstname` varchar(20),
  `lastname` varchar(50),
  `contactNo` int(11),
  `userType` int(1),
  `isAdmin` bit(1),
  `created_at` timestamp,
  `updated_at` timestamp,
  PRIMARY KEY (`userId`)
)ENGINE=InnoDB DEFAULT CHARSET=latin1;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users_details(
  `userId` int(5) NOT NULL AUTO_INCREMENT,
  `userName` varchar(20),
  `pwd` varchar(30),
  `firstName` varchar(20),
  `LastName` varchar(50),
  `userType` int(1),
  `isAdmin` bit(1),
  `created_at` date,
  `updated_at` date, 
  PRIMARY KEY (`userId`)
);
set autocommit = 0;
SHOW TABLES;
set autocommit = 1;


[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users_details(
  `userId` int(5) NOT NULL AUTO_INCREMENT,
  `userName` varchar(20),
  `pwd` varchar(30),
  `firstName` varchar(20),
  `LastName` varchar(50),
  `userType` int(1),
  `isAdmin` bit(1),
  `created_at` date,
  `updated_at` date, 
  PRIMARY KEY (`userId`)
);
set autocommit = 0;
SHOW TABLES;
set autocommit = 1;
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users_details(
  `userID` INT NOT NULL AUTO_INCREMENT,
  `userName` VARCHAR(20),
  `pwd` VARCHAR( 30),
  `firstName` VARCHAR(20),
  `LastName` VARCHAR(20),
  `UserType` INT( 10),
  `isAdmin` BIT( 10),
  `created_at` DATE,
  `updated_at` DATE, 
  PRIMARY KEY (`userID`)
);
# End of Question 20

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users_details(
  `userId` int(5) NOT NULL AUTO_INCREMENT,
  `userName` varchar(20),
  `pwd` varchar(30),
  `firstName` varchar(20),
  `LastName` varchar(50),
  `userType` int(1),
  `isAdmin` bit(1),
  `created_at` date,
  `updated_at` date, 
  PRIMARY KEY (`userId`)
);
set autocommit = 0;
SHOW TABLES;
set autocommit = 1;
.Quit
exit
--

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `users_details`;
SHOW TABLES;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users_details(
  `userId` int(5) NOT NULL AUTO_INCREMENT,
  `userName` varchar(20),
  `pwd` varchar(30),
  `firstName` varchar(20),
  `LastName` varchar(50),
  `userType` int(1),
  `isAdmin` bit(1),
  `created_at` date,
  `updated_at` date, 
  PRIMARY KEY (`userId`)
);
set autocommit = 0;
SHOW TABLES;
set autocommit = 1;
DROP DATABASE IF EXISTS sampleDB;
 
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users_details(
  `userId` int(5) NOT NULL AUTO_INCREMENT,
  `userName` varchar(20),
  `pwd` varchar(30),
  `firstName` varchar(20),
  `LastName` varchar(50),
  `userType` int(1),
  `isAdmin` bit(1),
  `created_at` date,
  `updated_at` date, 
  PRIMARY KEY (`userId`)
);
set autocommit = 0;
SHOW TABLES;
set autocommit = 1;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users_details(
  `userId` int(5) NOT NULL AUTO_INCREMENT,
  `userName` varchar(20),
  `pwd` varchar(30),
  `firstName` varchar(20),
  `LastName` varchar(50),
  `userType` int(1),
  `isAdmin` bit(1),
  `created_at` date,
  `updated_at` date, 
  PRIMARY KEY (`userId`)
);
set autocommit = 0;
SHOW TABLES;
set autocommit = 1;
DROP DATABASE IF EXISTS sampleDB;
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users_details(
  `userId` int(5) NOT NULL AUTO_INCREMENT,
  `userName` varchar(20),
  `pwd` varchar(30),
  `firstName` varchar(20),
  `LastName` varchar(50),
  `userType` int(1),
  `isAdmin` bit(1),
  `created_at` date,
  `updated_at` date, 
  PRIMARY KEY (`userId`)
);


-- You will have to provide queries (Create Table and DML in one query)

-- Now create a table to track the amount of products purchased
CREATE TABLE IF NOT EXISTS usersPurchases(
  `userName` varchar(20) NOT NULL,
  `productName` varchar(100) NOT NULL,
  `quantity` int(6) NOT NULL,
  `amount` decimal(12,2) NOT NULL,
  `transactionId` varchar(30) NOT NULL,
  PRIMARY KEY (`userName`, `productName`),
  INDEX productIndex (productName)
);

-- Now create a table to create the purchase orders and hold the details of the products ordered
CREATE TABLE IF NOT EXISTS purchaseTable(
  `purchaseId` int(3) NOT NULL AUTO_INCREMENT,
  `transactionId` varchar(30) NOT NULL,  
  `userName` varchar(20),
  `productName` varchar(100),
  `quantity` int(6),
  `price` float,
  `date` date,
  PRIMARY KEY (`purchaseId`)
);
--  -- Let's create a table tracking the stock available
CREATE TABLE IF NOT EXISTS stockTable(
  `stockId` int(3) NOT NULL AUTO_INCREMENT,
  `productId
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users_details(
  `userId` int(5) NOT NULL AUTO_INCREMENT,
  `userName` varchar(20),
  `pwd` varchar(30),
  `firstName` varchar(20),
  `LastName` varchar(50),
  `userType` int(1),
  `isAdmin` bit(1),
  `created_at` date,
  `updated_at` date, 
  PRIMARY KEY (`userId`)
);
SET SESSION sql_mode = """;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users_details(
  `userId` int(5) NOT NULL AUTO_INCREMENT,
  `userName` varchar(20),
  `pwd` varchar(30),
  `first_name` varchar(20),
  `LastName` varchar(50),
  `userType` int(1),
  `isAdmin` bit(1),
  `created_at` date,
  `updated_at` date, 
  PRIMARY KEY (`userId`)
);
set autocommit = 0;
SHOW TABLES;
set autocommit = 1;
DROP DATABASE IF EXISTS sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users_details(
  `userId` int(5) NOT NULL AUTO_INCREMENT,
  `userName` varchar(20),
  `pwd` varchar(30),
  `firstName` varchar(20),
  `LastName` varchar(50),
  `userType` int(1),
  `isAdmin` bit(1),
  `created_at` date,
  `updated_at` date, 
  PRIMARY KEY (`userId`)
);
set autocommit = 0;
SHOW TABLES;
set autocommit = 1;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users_details(
  `userId` int(5) NOT NULL AUTO_INCREMENT,
  `userName` varchar(20),
  `pwd` varchar(30),
  `firstName` varchar(20),
  `LastName` varchar(50),
  `userType` int(1),
  `isAdmin` bit(1),
  `created_at` date,
  `updated_at` date, 
  PRIMARY KEY (`userId`)
);
set autocommit = 0;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users_details(
  `userId` int(5) NOT NULL AUTO_INCREMENT,
  `userName` varchar(20),
  `pwd` varchar(30),
  `firstName` varchar(20),
  `LastName` varchar(50),
  `userType` int(1),
  `isAdmin` bit(1),
  `created_at` date,
  `updated_at` date, 
  PRIMARY KEY (`userId`)
);
set autocommit = 0;
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
 

-- Creating Table in MySQL 
 
CREATE TABLE IF NOT EXISTS employees(
  `employeeId` int(5) NOT NULL AUTO_INCREMENT,
  `companyId` int(5) NOT NULL,
  `employeeName` varchar(20),
  `email` varchar(40),
  `position` varchar(50),
  `salary` int(10),
  `phone` varchar(20),
  `department` int(3),
  `created_at` date,
  `updated_at` date,
  PRIMARY KEY (`employeeId`)
);
use mysql;
desc employees;
delete from employees_details;

DROP TABLE IF EXISTS employees;
DROP DATABASE IF EXISTS sampleDB;
create database sampleDB; use sampleDB;

-- Creating New Table in MySQL
 
use sampleDB;

CREATE TABLE IF NOT EXISTS employee_info(
  `employeeId` int(5) NOT NULL DEFAULT '0',
  `companyId` int(5) NOT NULL DEFAULT '0',
  `employeeName` varchar(20) DEFAULT '0',
  `email` varchar(40) DEFAULT '0',
  `position` varchar(50),
  `salary` int(10) DEFAULT '0',
  `phone` int(11) DEFAULT '0',
  `department` int(3) DEFAULT '0',
  `created_at` date NOT NULL DEFAULT CURRENT_DATE,
  `updated_at` date NOT NULL DEFAULT CURRENT_DATE
);
INSERT INTO employee_info VALUES (null, '0',
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS users_details;
set autocommit = 1;


[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
 
DROP TABLE users_details;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users_details(
  `userId` int(5) NOT NULL AUTO_INCREMENT,
  `username` varchar(20),
  `pwd` varchar(30),
  `firstName` varchar(20),
  `Lastname` varchar(50),
  `userType` int(1),
  `isAdmin` bit(1),
  `created_at`date,
  `updated_at`date,
  PRIMARY KEY (`userId`)
);
SET GLOBAL query_log = '';
SET GLOBAL max_allowed_packet=18000072;
-- Please modify the given program to use the sampleDB instead of creating a test table in that database. If possible, use the full query to insert records in data_to_insert.txt.
DECLARE testTABLE CURSOR FOR SELECT userId AS "userId" FROM users_details;
DECLARE CONTINUE HANDLER FOR NOT FOUND SET @counter = @counter + 1;
set server output on;
OPEN testTABLE;
PRINT @counter;
FETCH testTABLE INTO :row;

FETCH testTABLE INTO :row;







[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS users;
DROP TABLE IF EXISTS users_details;
 
CREATE TABLE IF NOT EXISTS users(
  `userId` int(5) NOT NULL AUTO_INCREMENT,
  `userName` varchar(50),
  `pwd` varchar(50),
  `userType` bit(1),
  `created_at` date,
  `updated_at` date,
  PRIMARY KEY (`userId`)
);
CREATE TABLE IF NOT EXISTS users_details(
  `userId` int(5) NOT NULL AUTO_INCREMENT,
  `userName` varchar(50),
  `pwd` varchar(50),
  `userType` bit(1),
  PRIMARY KEY (`userId`)
);
INSERT INTO users(userName,pwd,userType,created_at,userType)
VALUES
('admin','<PASSWORD>','admin','2018-04-07','1'),
('test3','<PASSWORD>','admin','2018-04-07','0');
INSERT INTO users_details(userName,pwd,userType)
VALUES
('admin','<PASSWORD>','admin'),
('test3','<PASSWORD>','admin'),
('test2','<PASSWORD>','admin'),
('test','<PASSWORD>','admin'),
('demo','<PASSWORD>d692635026<PASSWORD>','admin'),
('test4','a15bb558f755ac60c762119f9c836844','admin');
INSERT INTO users
VALUES
(2,'admin','test','1','2018-04-07','-999'),
(3,'demo','test','0','2018-04-08','-999'),
(4,'test4','test','1','2018-04-07','1');
COMMIT;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS users_details;
set autocommit = 1;
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users_details(user_id INTEGER, phone VARCHAR(50) UNIQUE, age INTEGER);
commit;



CREATE TABLE IF NOT EXISTS customers(customer_id INTEGER, first_name VARCHAR(255), last_name VARCHAR(255), gender VARCHAR(10), DOB DATE);

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS users_details;
create TABLE users_details(
id INT(10),
surname VARCHAR(255),
firstname VARCHAR(255),
addressid INT(10),
password VARCHAR(255),
CONSTRAINT user_details_PK PRIMARY KEY (id),
CONSTRAINT addressid FOREIGN KEY (addressid) REFERENCES address (id)
");

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
set foreign_key_checks = 0;
set sql_mode='STRICT_TRANS_TABLES';
-- Please use "SELECT" for your queries if you don't care about the results in your query result. You can also use "FROM" instead of "SELECT *", but they can be used together. They are often used interchangeably.
use sampleDB;
  CREATE TABLE users_details(firstname VARCHAR(25),lastname VARCHAR(25), email VARCHAR(50),address VARCHAR(100), mobile VARCHAR(13), country VARCHAR(50),rating char(1));
  CREATE TABLE users ( users_name VARCHAR(30), email VARCHAR(50),password VARCHAR(100), mobile VARCHAR(13));
set foreign_key_checks = 1;
 CREATE TABLE user_ratings ( id BIGINT(20) NOT NULL AUTO_INCREMENT, user_id BIGINT(20) NOT NULL, user_details_id BIGINT(20) NOT NULL, rating_value FLOAT NOT NULL, rating_date TIMESTAMP NOT NULL, PRIMARY KEY (( id
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
 
 
ALTER TABLE users_details ADD email VARCHAR(255);
ALTER TABLE users_details MODIFY COLUMN name char(255);
-- You can create a table using a single SELECT from a foreign table.
CREATE TABLE users_detail (
  id INT UNSIGNED NOT NULL AUTO_INCREMENT,
    name CHAR(255),
    type INT(1) DEFAULT '0',
    email VARCHAR(255),
  PRIMARY KEY(id),
    FOREIGN KEY (name) REFERENCES users_details_like (name)
);
SELECT COUNT(*) FROM users_details;
SET @SQL = 'INSERT INTO users_detail (id) VALUES (1);' ;
mysql> @SQL ;
UPDATE sampleDB.users_details SET type=1, email="<EMAIL>" WHERE id=2;
DROP TABLE IF EXISTS users_detail;
CREATE TABLE users_detail (
  id INT UNSIGNED NOT NULL AUTO_INCREMENT,
    name CHAR(255),
    email VARCHAR(255),
  PRIMARY KEY(id)
);
DROP TABLE IF EXISTS users_details_like;
SELECT * FROM users_details_like;
CREATE TABLE users_details_like (
  id INT UNSIGNED NOT NULL AUTO_INCREMENT,
    name CHAR(255),
    type INT(1) DEFAULT '0',
  PRIMARY KEY(id)
);
INSERT INTO users_details_like SELECT * FROM users_details;
UPDATE sampleDB.users_details SET name="sample", type=0, email="sample" WHERE id=1;
DROP TABLE IF EXISTS users_details_like;
DROP TABLE IF EXISTS users_details;
exit;
 
DROP DATABASE sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS users_details;
set autocommit = 1;
SELECT * FROM users;
SELECT * FROM users;
SELECT * FROM users_details;
SELECT * FROM users_details;
select * from users_details;
select * from users_details;
SELECT * FROM users_details;
SELECT * FROM users_details;
SELECT * FROM users_details;
DESC users;
DESC users_details;
DESC sampleDB.users;
DESC sampleDB.users_details;
select * from users;
select * from users_details;
use sampleDB;
select * from users
select * from users;
SELECT * FROM users;
SELECT * FROM users_details; 
SELECT * FROM users_details;  
CREATE TABLE IF NOT EXISTS users (first_name    VARCHAR(45), 
                           middle_name   VARCHAR(45), 
                           last_name     VARCHAR(45), 
                           nickname      VARCHAR(64), 
                           avatar        VARCHAR(100), 
                           gender        CHAR(1), 
                           birthday      TIMESTAMP, 
                           location      MEDIUMINT(6), 
                           state_country CHAR(3), 
                           is_admin      CHAR(1));
create table users_details (id INT PRIMARY KEY AUTO_INCREMENT, user_id BIGINT, user_type INT, first_name VARCHAR(45),middle_name VARCHAR(45), last_name VARCHAR(45), nickname VARCHAR(64), gender CHAR(1), birthday TIMESTAMP);
describe users_details;
describe users_details;
Desc users_details;
-- Add some users to be visible into the new table.
insert into users (first_name,middle_name,last_name, nickname, avatar, gender, birthday) values ('Sammy','Jones', 'King', 'Sammy', 'http://p.yimg.com/50/images/82136332.jpg', 'M', '2011-02-17 04:02:15');
insert into users (first_name,middle_name,last_name, nickname, avatar, gender, birthday) values ('Rick','Green','Jr', 'Bobby', 'http://www.rockout.com/images/2/2/7/3/35357685/rockout-logo.png', 'M', '2011-10-23 03:29:46');
insert into users (first_name,middle_name,last_name, nickname, avatar, gender, birthday) values ('Tim','Oliver', 'Walker', 'Jim', 'http: 
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users_details(user_id INTEGER, phone VARCHAR(50) UNIQUE, age INTEGER);
commit;
CREATE TABLE IF NOT EXISTS customers(customer_id INTEGER, first_name VARCHAR(255), last_name VARCHAR(255), gender VARCHAR(10), DOB DATE);
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
 -- Your query here
CREATE TABLE IF NOT EXISTS users_details(user_id INTEGER, phone VARCHAR(50) UNIQUE, age INTEGER);
INSERT INTO users_details(user_id, phone, age) VALUES ('23434', '63642642', '865355');
COMMIT;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
alter table users_details add constraint users_details_pk PRIMARY KEY (user_id, phone);
alter table customers add constraint customers_pk PRIMARY KEY (customer_id);
commit;
exit;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE users_details; 
COMMIT;
DROP TABLE customer_name;
COMMIT;
DROP TABLE customer_age;
COMMIT;

Drop Database If Exists sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
update customer_details set gender='Male' where age <20;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users_details(user_id INTEGER, phone VARCHAR(50), age INTEGER);
TRUNCATE TABLE users_details;
INSERT INTO users_details VALUES(23, '232323-232323', 23);
SELECT phone, age FROM users_details WHERE user_id = 23;
commit;
SELECT * FROM sampleDB.users_details;
commit;

DROP TABLE IF EXISTS users_details;
-- TRUNCATE removes every rows from the table and frees up space for other rows
-- TRUNCATE TABLE <table-name>
-- DROP TABLE <table-name>

CREATE TABLE book_status (
  id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  book_title VARCHAR(255),
  status INT
);

CREATE TABLE book_loan (
  id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  id_user INT NOT NULL,
  loan_date DATE,
  last_payment DATE,
  book INT,
  status_history INT,
  FOREIGN KEY (id_user)
    REFERENCES users_details(user_id)
);

CREATE TABLE loan_payment(
 id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
 id_loanto INT NOT NULL,
 amount double,
 book_name VARCHAR(255),
 status_history INT
);

-- You have to use a trigger for the loan_payment table

CREATE FUNCTION my_func() RETURNS VARCHAR(255)
    DETERMINISTIC
    SQL SECURITY INVOKER
BEGIN
  SELECT 'My new value';
END;

DELIMITER ;
-- CREATE OR REPLACE FUNCTION my_func() RETURNS INTEGER
--  PARAMETER STYLE CALLING
--  BEGIN RETURN 3; END;
-- CHANGE my_func my_func();

-- DROP TRIGGER IF EXISTS my_func;
CREATE TRIGGER IF NOT EXISTS my_func AFTER INSERT ON users_details  FOR EACH ROW BEGIN UPDATE book_loan SET status_history = status_history+1 WHERE book int = :NEW.book; END;


COMMIT;
-- TRIGGER <trigger_name>
    AFTER UPDATE ON users_details 
FOR EACH ROW BEGIN UPDATE book_loan SET status_history = status_history+1 WHERE book int = :OLD.book; END;

CREATE TABLE user_accounts(
 id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
 status VARCHAR(50)
);
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- Your query here
CREATE TABLE IF NOT EXISTS users_details(user_id INTEGER, phone VARCHAR(50) UNIQUE, age INTEGER);
INSERT INTO users_details(user_id, phone, age) VALUES ('23434', '63642642', '865355');
COMMIT;
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users_details(user_id INTEGER, phone VARCHAR(50) UNIQUE, age INTEGER);
INSERT INTO users_details(user_id, phone, age) VALUES ('528563', '744588', '123523');
INSERT INTO users_details(user_id, phone, age) VALUES ('698765', '685855', '55');
INSERT INTO users_details(user_id, phone, age) VALUES ('548545', '523545', '115');
INSERT INTO users_details(user_id, phone, age) VALUES ('638765', '756555', '13355');
COMMIT;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- Your query here
CREATE TABLE IF NOT EXISTS users_details(user_id INTEGER, phone VARCHAR(50) UNIQUE, age INTEGER);
INSERT INTO users_details(user_id, phone, age) VALUES ('23434', '63642642', '865355');

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
 
SELECT * FROM users_details WHERE user_id > 10 AND phone LIKE '2%';

-- This query returns all rows where user_id > 10 && phone LIKE '2%', if any. Otherwise, it returns empty result set.

-- Your query here
SELECT * FROM users_details U INNER JOIN users_details V ON U.user_id = V.user_id AND u.phone LIKE '2%'; 

 

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users_details(user_id INTEGER PRIMARY KEY AUTO_INCREMENT, phones varchar(100), age  INTEGER);
INSERT INTO users_details(phoenix, age) VALUES ('23434', '54645454');
INSERT INTO users_details(phones, age) VALUES ('2343456', '5456545454545445');
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE users_details;
COMMIT;
-- Your query here
CREATE DATABASE IF NOT EXISTS testDB; USE testDB; DELETE FROM users_details;
CREATE TABLE IF NOT EXISTS users_details(user_id INTEGER PRIMARY KEY AUTO_INCREMENT, phones varchar(100), age  INTEGER);
INSERT INTO users_details(user_id, phones) VALUES('11111', '232323');
 
SET sql_mode = "ANSI,MYSQL41";
SET time_zone = "+00:00";

SELECT * FROM users_details;
-- Your query here<fim_middle>COMMIT;



[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users_details(user_id INTEGER, phone VARCHAR(50) UNIQUE, age INTEGER, PRIMARY KEY(user_id));
INSERT INTO users_details(user_id, phone, age) VALUES ('23434', '63642642', '865355');
COMMIT;
show databases;
DESC sampleDB.users_details;
-- Your query here
show tables;
DROP TABLE IF EXISTS sampleDB.users_details;
DELIMITER ;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- Your query here
CREATE TABLE IF NOT EXISTS users_details(user_id INTEGER, phone VARCHAR(50) UNIQUE, age INTEGER);
INSERT INTO users_details(user_id, phone, age) VALUES ('23434', '63642642', '865355');
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- Your query here
DELIMITER ;;
CREATE PROCEDURE sample_proc(IN n int)
BEGIN
        IF n >= 11 THEN
                SELECT COUNT(*) FROM sampleDB.users_details;
        END IF;
END
;;
DELIMITER ;
-- Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You shouldn't use sampleDB as the database and assume all tables exist. This query will select the users that lives in San Francisco
-- and the average number that his/her phone number has
DROP DATABASE IF EXISTS sampleDB; USE sampleDB;
-- Your query here
/* Your query here */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- Your query here
INSERT INTO users_details(user_id, phone, age) VALUES ('23434', '63642642', '865355');
CALL sample_proc(11);
-- Please create a semantically equivalent application to the previous generation
DROP DATABASE IF EXISTS sampleDB; USE sampleDB;
-- Your query here
INSERT INTO users_details(user_id, phone, age) VALUES ('23434', '63642642', '865355');
CALL sample_proc(11);
-- Please modify the first query to select all users (not just the one that lives in Los Angeles)
-- and the average number that his/her phone number has. You can just use same query than the one where previous gen query was written.
-- Hint: you should use ENGINE=InnoDB in order to achieve the desired result
DROP DATABASE IF EXISTS sampleDB; USE sampleDB;
-- Your query here
DELIMITER ;;
CREATE PROCEDURE sample_proc(IN n int)
BEGIN
        IF n >= 11 THEN
                SELECT DISTINCT phone FROM sampleDB.users_details;
        END IF;
END
;;
DELIMITER ;
-- Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You shouldn't use sampleDB as the database and assume all tables exist.

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- The same sample but using MySQL in a language that is both declarative (like PostgreSQL) and transparent (like SQL)
CREATE TABLE IF NOT EXISTS users_details(user_id INTEGER, phone VARCHAR(50) UNIQUE, age INTEGER);
INSERT INTO users_details(user_id, phone, age) VALUES ('23434', '63642642', '865355');
DROP TABLE IF EXISTS users_details;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users_details (user_id INTEGER, phone VARCHAR(50) UNIQUE, age INTEGER);
INSERT INTO users_details(user_id, phone, age) VALUES (23434, 63642642, 865355);

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users_details(user_id INTEGER, phone VARCHAR(50) UNIQUE);
INSERT INTO users_details(user_id, phone) VALUES (23434, '63642642');
-- Please describe the semantic equivalent of the previous query
DROP DATABASE IF EXISTS sampleDB;


[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS users_details;
COMMIT;
-- Your query here
CREATE TABLE IF NOT EXISTS users(user_name VARCHAR(450) NOT NULL PRIMARY KEY);
INSERT INTO users (user_name) VALUES ('Tom');
-- Your query here
CREATE TABLE IF NOT EXISTS users (user_id INTEGER PRIMARY KEY AUTO_INCREMENT UNIQUE, user_name VARCHAR(450) UNIQUE);
-- Your query here
INSERT INTO users (user_id, user_name) VALUES (NULL, 'Jerry');
-- Your query here
CREATE TABLE IF NOT EXISTS users (user_id INTEGER PRIMARY KEY AUTO_INCREMENT UNIQUE, user_name VARCHAR(450) UNIQUE);

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users_details (user_id INTEGER, phone VARCHAR(50) UNIQUE, age INTEGER);
INSERT INTO users_details(user_id, phone, age) VALUES (23434, 63642642, 865355);
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users
( user_id  int(10) UNSIGNED NOT NULL AUTO_INCREMENT,
 email            varchar(100),
 pass             varchar(100)   DEFAULT NULL,
 created_date     timestamp DEFAULT '0000-00-00 00:00:00',
 PRIMARY KEY (user_id)
-- The following columns could have been created manually:
,phone                   varchar(20)    DEFAULT NULL,
 created_date           Date           DEFAULT CURRENT_DATE, 
);
INSERT INTO users(user_id, email, pass, created_date) VALUES(5823, '<EMAIL>', '<PASSWORD>', '1980-11-15 20:06:21');
INSERT INTO users(user_id, email, pass, created_date) VALUES(5824, '<EMAIL>', '<PASSWORD>! ', '1980-06-15 18:48:00');
SELECT * FROM users;
 -- We will create another query and query table to demonstrate
 -- how to sort the results of SELECT statement
 CREATE DATABASE IF NOT EXISTS smallDB; USE smallDB;
# The next commands will generate table of people, sorted by age in
# ascending order. It is shown to demonstrate how to create ORDER BY
# clause in SQL.
 #
CREATE TABLE people(name VARCHAR(200), dob DATE);
#
INSERT INTO people (name, dob) VALUES ('Bhavin', '15-08-1981');
INSERT INTO people (name, dob) VALUES ('Ramesh', '15-08-1981');
INSERT INTO people (name, dob) VALUES ('Ramesh', '15-07-1980');
INSERT INTO people (name, dob) VALUES ('Nithinagar', '15-09-1980');
INSERT INTO people (name, dob) VALUES ('Karthik', '21-06-1985');
INSERT INTO people (name, dob) VALUES ('Saihar', '15-03-1990');
#
CREATE TABLE orders(OrderID int(10) UNSIGNED, OrderDate date, CustomerID int(10) UNSIGNED, CustomerName varchar(500));
#
INSERT INTO orders(OrderID, OrderDate,
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users_details (user_id INTEGER, phone VARCHAR(50) UNIQUE, age INTEGER);
INSERT INTO users_details(user_id, phone, age) VALUES (123, 123123, 20);
DELETE FROM users_details WHERE user_id = 123;
 
--

--
-- MySQL Data Transfer
--

-- 2022-03-23 08:57:47
CREATE DATABASE IF NOT EXISTS `sampleDB`  ;
USE `sampleDB`;
-- 2022-03-23 08:57:48
CREATE TABLE `users_details` (
  `user_id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `phone` varchar(50) NOT NULL DEFAULT '',
  `age` int(10) unsigned NOT NULL DEFAULT '0',
  PRIMARY KEY (`user_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
-- 2022-03-23 08:57:48
INSERT INTO `users_details` (`user_id`, `phone`, `age`) VALUES
(123, '123123', 20);
-- 2022-03-23 08:57:48
COMMIT;

-- Drops DATABASE `sampleDB`

-- Drops DATABASE `sampleDB`

-- Drops DATABASE `sampleDB`

-- Drops DATABASE `sampleDB`

-- Drops DATABASE `sampleDB`

-- Drops DATABASE `sampleDB`
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users_details (user_id INTEGER, phone VARCHAR(50) UNIQUE, sex varchar(255));
INSERT INTO users_details(user_id, phone, sex) VALUES (23434, 63642642, 'M');
-- Please write a very fast SQL statement (a single query to access 3 columns. You can also use this statement to test whether the MySQL database is running and healthy. If the database is healthy, it will write the current time to the “time_running” column, followed by line breaks.)
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users_details (user_id INTEGER, phone VARCHAR(50) UNIQUE, sex text);
INSERT INTO users_details(user_id, phone, sex) VALUES (23434, 63642642, 'M');

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
ALTER TABLE users_details ADD COLUMN password CHAR(50) AFTER password;
ALTER TABLE users_details MODIFY COLUMN user_id INTEGER NOT NULL;
ALTER TABLE users_details MODIFY COLUMN phone TEXT UNIQUE;
ALTER TABLE users_details MODIFY COLUMN age INT;
SHOW CREATE TABLE users_details;
-- Please create a query that returns all persons which is of given age (20 for instance)
SHOW CREATE TABLE users_details WHERE age = 20; ALTER TABLE users_details DROP COLUMN password; ALTER TABLE users_details DROP COLUMN user_id; 
-- Please create such a query that returns person's name and age
SHOW CREATE TABLE users_details AS s WHERE 20 > s.age; SHOW CREATE TABLE users_details WITH READONLY; SHOW CREATE TABLE users_details DESC;ALTER TABLE users_details DROP COLUMN password; ALTER TABLE users_details DROP COLUMN user_id;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users_details (user_id INTEGER, phone VARCHAR(50) UNIQUE, age INTEGER);
INSERT INTO users_details(user_id, phone, age) VALUES (23543, 6364254, 865355);
DELETE FROM users_details WHERE user_id = 23434;
SELECT * FROM users_details;

select * from users_details join users where users.user_id = users_details.user_id and users.user_type = 'Customer';

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users_details (user_id INTEGER, phone VARCHAR(50) UNIQUE, age INTEGER);
INSERT INTO users_details(user_id, phone, age) VALUES (23434, 63642642, 865355);
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users_details (user_id INTEGER, phone VARCHAR(50) UNIQUE, age INTEGER);
ALTER TABLE users_details MODIFY (phone VARCHAR(100) UNIQUE);
-- Please create another mutated program which tests that the mutated program works as expected in a large environment and does not fail unexpectedly. You should only use sampleDB as the database and assume no other table exist. In the end, drop all tables you created. */
USE sampleDB;
CREATE TABLE IF NOT EXISTS test_table (user_id INTEGER, name VARCHAR(100));
INSERT INTO test_table(user_id, name) VALUES (1, 'John');
SELECT * FROM test_table;
ALTER TABLE test_table MODIFY (name VARCHAR(200));
SELECT * FROM test_table;
DROP TABLE IF EXISTS test_table;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users_details (user_id INTEGER, phone VARCHAR(50) UNIQUE, age INTEGER);
INSERT INTO users_details(user_id, phone, age) VALUES (23434, 63642642, 865355);
-- Please create another mutated program that does the same but using MySQL Native SQL. Be sure to use ENGINE=MyISAM for the database. You may use sampleDB as the database name if you like. You need to create a new table to perform operations. In the end, drop all tables you created.
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS users_details (user_id INTEGER, phone VARCHAR(50) UNIQUE, age INTEGER);
INSERT INTO users_details(user_id, phone, age) VALUES (23434, 63642642, 865355);
-- You may print "select * from users_details; on MySQL Native SQL, use \d.
select * from users_details; on MySQL Native SQL, use DESCRIBE.
SELECT `ID`, `EMAIL`, `FIRST_NAME`, `LAST_NAME`, `ROLE`, `ACTIVE` FROM `user_role_permissions` WHERE `ROLE` = 'USER' ORDER BY `user_id` DESC LIMIT 10;
 
 
ALTER TABLE user_role_permissions ADD role_id INTEGER UNSIGNED NOT NULL;
ALTER TABLE user_role_permissions ADD constraint roles_pkey PRIMARY KEY (`user_role_permissions`.`user_role_name`,`user_role_permissions`.`user_role_id`);
ALTER TABLE user_role_permissions ADD constraint fk_user_role_permissions_user_role FOREIGN KEY (`user_role_permissions`.`user_role_id`) REFERENCES roles(role_id);
ALTER TABLE user_role_permissions ADD constraint fk_user_role_permissions_roles FOREIGN KEY (`user_role_permissions`.`user_role_name`) REFERENCES roles(role_name);
/* MySQL
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE users_details;
CREATE TABLE users_details(user_id INTEGER, phone VARCHAR(50) UNIQUE, age INTEGER);
INSERT INTO users_details(user_id, phone, age) VALUES (23434, 63642642, 865357);
DROP TABLE users_details;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
ALTER TABLE users_details MODIFY(phone VARCHAR(50) UNIQUE); 
-- Please write a mutated program to use a stored procedure to update age of a given user
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DELIMITER ;;
CREATE PROCEDURE getAgeFromUser(IN user_id INTEGER, OUT user_age INTEGER)
BEGIN
	SELECT age INTO user_age FROM users_details WHERE user_id=user_id;
END ;;
DELIMITER ;
USE sampleDB;
CALL getAgeFromUser(23434);
DELIMITER ;;
DROP PROCEDURE getAgeFromUser;;
CREATE PROCEDURE getAgeFromUser(IN user_id INTEGER, OUT user_age INTEGER)
BEGIN
	SELECT age INTO user_age FROM users_details WHERE user_id=user_id;
END ;;
DELIMITER ;
USE sampleDB;
CALL getAgeFromUser(23434);
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE users_details; CREATE TABLE users_details(user_id INTEGER, phone VARCHAR(50) UNIQUE); INSERT INTO users_details(user_id, phone) VALUES (23434, 63642642);

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE users_details;
CREATE TABLE users_details(user_id INTEGER, phone VARCHAR(50) UNIQUE, age INTEGER);
INSERT INTO users_details(user_id, phone, age) VALUES (23434, 63642642, 865357);
DROP TABLE users_details;
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE users_details;
CREATE TABLE users_details(user_id INTEGER, phone VARCHAR(50) UNIQUE, age INTEGER);
INSERT INTO users_details(user_id, phone, age) VALUES (23434, 63642642, 865357);
SHOW TABLES;
USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE users_details;

#
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE users_details;
CREATE TABLE users_details(user_id INTEGER, phone VARCHAR(50) UNIQUE, age INTEGER);
INSERT INTO users_details(user_id, phone, age) VALUES (23434, 63642642, 865357);
DROP TABLE users_details;
INSERT INTO users_details(user_id, phone, age) VALUES (23434, 63642642, 865357);
DROP TABLE users_details;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE users_details;
CREATE TABLE users_details(user_id INTEGER, phone VARCHAR(50) UNIQUE, age INTEGER);
INSERT INTO users_details(user_id, phone, age) VALUES (23434, 63642642, 865357);
DROP TABLE users_details;<commit_msg>Changed username to username10 from username5. Fixed username to match the other changes.<commit_after>﻿DROP DATABASE IF EXISTS sampleDB;
CREATE DATABASE IF NOT EXISTS sampleDB;

DROP DATABASE IF EXISTS username5;
DROP DATABASE IF EXISTS username6;
DROP DATABASE IF EXISTS username7;
DROP DATABASE IF EXISTS username8;
DROP DATABASE IF EXISTS username9;
DROP DATABASE IF EXISTS sampleDB;

 
CREATE USER 'username5'@'192.168.131.1' IDENTIFIED BY 'password';
CREATE DATABASE sampleDB;
CREATE DATABASE `username7` DEFAULT CHARACTER SET latin1;
CREATE DATABASE IF NOT EXISTS sampleDB; USE `sampleDB`;
INSERT INTO Users_Detail(user_id, phone, age) VALUES (23434, 63642642, 865357);
COMMIT;
 
CREATE USER 'username7'@'192.168.131.1' IDENTIFIED BY '<PASSWORD>';
CREATE USER 'username8'@'192.168.131.1' IDENTIFIED BY 'password';
CREATE DATABASE IF NOT EXISTS username5; USE sampleDB;
DROP TABLE users_details;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE users_details;
CREATE TABLE users_details(user_id INTEGER, phone VARCHAR(50) UNIQUE, age INTEGER);

INSERT INTO users_details(user_id, phone, age) VALUES (23434, 63642642, 865357);

 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE users_details;
CREATE TABLE users_details(user_id INTEGER, phone VARCHAR(50) UNIQUE, age INTEGER);

INSERT INTO users_details(user_id, phone, age) VALUES (23434, 63642642, 865357);

 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE users_details;
CREATE TABLE users_details(user_id INTEGER, phone VARCHAR(50) UNIQUE, age INTEGER);

INSERT INTO users_details(user_id, phone, age) VALUES (23434, 63642642, 865357);

CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
 
SELECT * FROM users_details;
 
SELECT * FROM users_details WHERE age >= 20000;
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE users_details;
CREATE TABLE users_details(user_id INTEGER, phone VARCHAR(50) UNIQUE, age INTEGER);
INSERT INTO users_details(user_id, phone, age) VALUES (23434, 63642642, 865357);
DROP TABLE users_details;
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE users_details;
CREATE TABLE users_details(user_id INTEGER, name VARCHAR(50), age INTEGER, profile_img BLOB, gender TINYINT);
INSERT INTO users_details(user_id, name, age, profile_img, gender) VALUES (23434, 63642642, 898357, 90020900, 254);
DROP TABLE users_details;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP SCHEMA IF EXISTS sampleDB1;
CREATE SCHEMA sampleDB1;
USE sampleDB1;
 
CREATE TABLE `user` (
  `user_id` INTEGER NOT NULL,
  `name` VARCHAR(60) NOT NULL,
  `gender` VARCHAR(16) NOT NULL UNIQUE,
  `address` VARCHAR(100) NOT NULL UNIQUE,
  `country` VARCHAR(40) NOT NULL
);




SELECT * FROM user;


SELECT * FROM user WHERE gender = "Female";
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE users_details;
CREATE TABLE users_details(user_id INTEGER, phone VARCHAR(50) UNIQUE, age INTEGER DEFAULT 865357);  
INSERT INTO users_details(user_id, phone) VALUES (23434, 63642642);
DROP TABLE users_details;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE users_details;
CREATE TABLE users_details(user_id INTEGER, phone VARCHAR(50) UNIQUE, age INTEGER);
INSERT INTO users_details(user_id, phone, age) VALUES (8623525464654342, 63642642, 865357);
DROP TABLE users_details;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

CREATE TABLE foo(a BLOB);
INSERT INTO foo VALUES (NULL), (NULL);
SELECT BINARY a FROM foo ORDER BY a LIMIT 5; -- result should be: 00 00 00 00 00
SELECT * FROM foo ORDER BY a DESC LIMIT 5; -- result should be: 00 00 00 00 00
ORDER BY a ASC, a DESC;  -- result should be: 00 00 00 00 00 00
SELECT HEX(3+ABS(0)) FROM foo; -- should result the hexadecimal number 7f
SELECT * FROM foo WHERE a @> (3+ABS(0)); -- should result "3+ABS(0)" as a string

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE users_details;
CREATE TABLE users_details(user_id INTEGER, phone VARCHAR(50) UNIQUE, age INTEGER);
INSERT INTO users_details(user_id, phone, age) VALUES (23434, 63642642, 865357);
DROP TABLE users_details;
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE users_details;
CREATE TABLE users_details(user_id INTEGER, phone VARCHAR(50) UNIQUE, age INTEGER);
INSERT INTO users_details(user_id, phone, age) VALUES (34434, 945870, 1185359);
DROP TABLE users_details;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE users_details;
CREATE TABLE users_details(
user_id INTEGER NOT NULL,
phone VARCHAR(50) UNIQUE NOT NULL,
age INTEGER NOT NULL,
PRIMARY KEY (user_id)
);
INSERT INTO users_details (user_id, phone, age) VALUES (23, '636-426-42', 86);
DROP TABLE users_details;

<?php

require_once 'DB.class.php';

$db = new db();


$users_details = $db->getRecord("SELECT * FROM users_details");


var_dump($users_details);

 
$db->close();
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;


[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE users_details;
CREATE TABLE users_details(user_id INTEGER, phone VARCHAR(50), age INTEGER);
INSERT INTO users_details(user_id, phone, age) VALUES (23434, 63642642, 865357);

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE users_details;
CREATE TABLE users_details(user_id INTEGER, phone VARCHAR(50) UNIQUE, age INTEGER);
INSERT INTO users_details(user_id, phone, age) VALUES (9844324, 8698649, 564545);
DROP TABLE users_details;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE users_details;
CREATE TABLE users_details(user_id INTEGER, phone VARCHAR(50) UNIQUE, age INTEGER);
INSERT INTO users_details(user_id, phone, age) VALUES (23434, 63642642, 865357);
DROP TABLE users_details;
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE users_details;
DROP TABLE users_employees;
DROP TABLE users_employees_details;
CREATE TABLE users_employees (user_id INTEGER, phone VARCHAR(50) UNIQUE, employee_id INTEGER, department_id INTEGER);
CREATE TABLE users_employees_details (phone INTEGER, employee_id INTEGER, name VARCHAR(50));
INSERT INTO users_employees(user_id, phone, employee_id, department_id) VALUES (23434, 63642642, 10, 1);
INSERT INTO users_employees_details(phone, employee_id, name) VALUES (63642642, 10, 'Admin');
INSERT INTO users_employees_details(phone, employee_id, name) VALUES(435643643, 10, 'Tech');
INSERT INTO users_employees_details(phone, employee_id, name) VALUES (845648686, 13, 'Devs1');
INSERT INTO users_employees_details(phone, employee_id, name) VALUES (325425468, 13, 'Devs');
INSERT INTO users_employees_details(phone, employee_id, name) VALUES (566874, 14, 'Dev1');
INSERT INTO users_employees_details(phone, employee_id, name) VALUES (906667745, 15, 'Dev3');
INSERT INTO users_employees_details(phone, employee_id, name) VALUES (4090, 16, 'Dev4');
INSERT INTO users_employees_details(phone, employee_id, name) VALUES (55534956, 19, 'Dev5'); 
INSERT INTO users_employees_details(phone, employee_id, name) VALUES (23434, 22, 'Admin');
INSERT INTO users_employees_details(phone, employee_id, name) VALUES (63642642, 29, 'Dev4');
INSERT INTO users_employees_details
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE users_details;
CREATE TABLE users_details(user_id INTEGER, phone VARCHAR(50) UNIQUE, age INTEGER);
INSERT INTO users_details(user_id, phone, age) VALUES (23434, 63642642, 865357);
DROP TABLE users_details;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE users_details;
CREATE TABLE users_details(user_id INTEGER, phone VARCHAR(50) UNIQUE, age INTEGER);

 
SELECT id, name FROM sampleDB.users_details; -- This query uses the ENGINE (a MySQL feature) and TABLE (a MySQL feature) keywords

 
UPDATE sampleDB.users_details
SET age = 50
WHERE id=42434351;
SELECT age FROM sampleDB.users_details
WHERE name="John";
UPDATE sampleDB.users_details
SET age = age - 2
WHERE name="John";
DROP DATABASE IF EXISTS sampleDB;   -- MySQL can automatically drop database, without any confirmation.

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE users_details;
CREATE TABLE users_details(user_id INTEGER, phone VARCHAR(50) UNIQUE, email VARCHAR(500) UNIQUE);
INSERT INTO users_details(user_id, email) VALUES (1, '<EMAIL>');
INSERT INTO users_details(user_id, email) VALUES (2, '<EMAIL>');
DROP TABLE users_details;
SELECT * FROM users_details;
-- Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE users_details;
CREATE TABLE users_details(user_id INTEGER, phone VARCHAR(50) UNIQUE, email VARCHAR(500), password VARCHAR(50));
INSERT INTO users_details(user_id, email, password) VALUES (3, '<EMAIL>', '<PASSWORD>310');
INSERT INTO users_details(user_id, email, password) VALUES (4, '<EMAIL>', '<PASSWORD>a8044d<PASSWORD>8445b2<PASSWORD>');
DROP TABLE users_details;
-- END sampleDB

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE users_details;
CREATE TABLE users_details(user_id INTEGER, phone VARCHAR(50) UNIQUE, age INTEGER);
INSERT INTO users_details(user_id, phone, age) VALUES (23434, 63642642, 865357);
DROP TABLE users_details;

DROP TABLE IF EXISTS users;
CREATE TABLE IF NOT EXISTS users
(
    id int(11) NOT NULL AUTO_INCREMENT,
    username varchar(255) NOT NULL,
    email varchar(255) NOT NULL,
    password varchar(255) NOT NULL,
    gender int(555) NOT NULL,    
    PRIMARY KEY (id)
);

 
INSERT INTO users ( username, email, password, gender) VALUES ('root', '<EMAIL>', '<PASSWORD>', 0);



 

 
CREATE INDEX username_index ON users (username);

 

 
CREATE VIEW test_view AS SELECT * FROM users_details 
 

DROP DATABASE sampleDB;



[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE users_details;
CREATE TABLE users_details(user_id INTEGER, phone VARCHAR(50) UNIQUE, age INTEGER);
INSERT INTO users_details(user_id, phone, age) VALUES (23434, 63642642, 865357);
DROP TABLE users_details;
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE users_details;
CREATE TABLE users_details(user_id INTEGER, phone VARCHAR(50) UNIQUE, age INTEGER);
INSERT INTO users_details(user_id, phone, age) VALUES (23434, 63642642, 865357);
DROP TABLE users_details;

SHOW TABLES;

QUIT;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE users_details;
CREATE TABLE users_details(user_id INTEGER, phone VARCHAR(50) UNIQUE, age INTEGER);
INSERT INTO users_details(user_id, phone, age) VALUES (23434, 63642642, 865357);
DROP TABLE users_details;

MySQL DB Browser for Windows is an excellent feature for managing MySQL databases and other databases. It can connect to remote database servers in Windows, and it can connect to a local MySQL server. You can create or export your current MySQL databases including database schema. It has all the features of standard MySQL GUI, MySQL Workbench, DBeaver, Sequel Pro, and MySQL Shell.

DBeaver provides an extensive database designer UI which allows you to work on the current MySQL databases without any additional tools. A database design view will display all of the tables in a database and allow you to work with the tables from both a relational view and a schema view.

We encourage you to learn how to use DBeaver by using its guide and tutorials, especially the book, for example, DataBase Design Using DBeaver.

What is MySQL Indexes

A good question that has come up repeatedly when I started learning MySQL, is, how do you get the SQL indexes defined? In our case, I'm dealing with Oracle's RDBMS tables. When I started learning MySQL, I assumed all this is managed automatically by my MySQL database. And so I started studying with what I know to see how those tables were managed.

MySQL offers three indexes built-in: primary, unique and auto-increment.

Primary keys are used to ensure that all data is saved. They are mandatory in case one or more columns is having NULL values. The key-value pair in a table can be any data and its stored in key columns. In MySQL, there is no predefined column in the table that is used as a unique identifier. You have to specify the column of user-id and phone column. A unique key is used to ensure that the data are not duplicated. A key-value pair is used to enforce that the data is already in the table.

To create a primary key for user-id, we simply have to create an index of
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE sample_table_1;
 
 
 
 
CREATE TABLE users_details1(User_name VARCHAR(50), user_id INTEGER, password VARCHAR(15));
 
CREATE TABLE users_details1(
user_id INTEGER,
user_name VARCHAR(50),
password VARCHAR(15)
);

CREATE TABLE sample_table_2 (
id integer,
name VARCHAR(100)
);

CREATE TABLE users_details1(
user_id INTEGER,
user_name VARCHAR(50),
password VARCHAR(15)
);

ALTER TABLE users_details ADD CONSTRAINT users_details1_fk FOREIGN KEY( user_id ) REFERENCES users_table1( id );
ALTER TABLE users_details1 ADD CONSTRAINT users_details1_fk FOREIGN KEY( user_id ) REFERENCES users_table1( id );

CREATE TABLE users_details_new(
user_id INTEGER,
phone VARCHAR(50),
age INTEGER
);
INSERT INTO users_details_new(user_id, phone, age) VALUES (
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE users_details;
CREATE TABLE users_details(user_id INTEGER, phone VARCHAR(50) UNIQUE, age INTEGER);
INSERT INTO users_details(user_id, phone, age) VALUES (23434, 63642642, 865357), (43434, 636744, 825356), (44334, 63674367, 736356);
DROP TABLE users_details;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE users_details;
CREATE TABLE users_details(user_id INTEGER, phone VARCHAR(50) UNIQUE, age INTEGER);
INSERT INTO users_details(user_id, phone, age) VALUES (23434, 63642642, 865357);
DROP TABLE users_details;

--  https: 
--  https: 
--  https: 
--  https: 
--  https: 
--  https: 
--  https: 
--  https: 
--  https: 
--  https: 
--  https: 
--  https: 
#  https: 
#  https: 
--  https: 
--  https: 

#  https: 


[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE users_details;
CREATE TABLE users_details(user_id INTEGER, phone VARCHAR(50) UNIQUE, age INTEGER);
INSERT INTO users_details(user_id, phone, age) VALUES (23434, 63642642, 865357);
DROP TABLE users_details;
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE users_details;
CREATE TABLE users_details(user_id INTEGER, phone VARCHAR(50) UNIQUE, age INTEGER);
INSERT INTO users_details(user_id, phone, age) VALUES (23434, 63642642, 865357);
DROP TABLE users_details;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE users_details;
CREATE TABLE users_details(user_id INTEGER, phone VARCHAR(50) UNIQUE, age INTEGER, job_title VARCHAR(20), department_id INTEGER, salary REAL);
INSERT INTO users_details(user_id, phone, age, job_title, department_id, salary) VALUES (233, 656545432, 325, 'CEO', 3, 25.56);
DROP TABLE users_details;
DROP TABLE users_details_backup;
CREATE TABLE users_details_backup(user_id INTEGER, phone VARCHAR(50) UNIQUE, age INTEGER);
INSERT INTO users_details_backup(user_id, phone, age) VALUES (233, 656545432, 325);
DROP TABLE users_details;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE users;
CREATE TABLE users(id INTEGER, fname VARCHAR(50), lname VARCHAR(50), user_type INTEGER);
INSERT INTO users (id, fname, lname, user_type) VALUES (11, 'Ritwik', 'Bharan', 2);
DROP TABLE users; 
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE users_details;
CREATE TABLE users_details(user_id INTEGER, name VARCHAR(50) UNIQUE, phone VARCHAR(50));
INSERT INTO users_details(user_id, name, phone) VALUES (34245, 'Sam', 34234);
DROP TABLE users_details;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP VIEW users;
CREATE VIEW users AS
    SELECT phone, age
    FROM users_details
    ORDER BY age
    DESC;
DROP TABLE users
SELECT * FROM users_details;
SELECT * FROM users;
SELECT * FROM users_details;
select * from users_details;
SELECT * from users;
DROP TABLE IF EXISTS users
DROP DATABASE IF EXISTS sampleDB;
drop table users_details;
drop table users_details;
drop table users_details;
select * from users_details order by age desc limit 33;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE users;
CREATE TABLE users(id INTEGER, fname VARCHAR(50), lname VARCHAR(50), user_type INTEGER);
INSERT INTO users (id, fname, lname, user_type) VALUES (11, 'Ritwik', 'Bharan', 2);
DROP TABLE users;
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE users;
CREATE TABLE users (id INTEGER, fname VARCHAR(50), lname VARCHAR(50), user_type INTEGER);
INSERT INTO users (id, fname, lname, user_type) VALUES (11, 'Ritwik', 'Bharan', 2);
DROP TABLE users;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE users;
CREATE TABLE users(id INTEGER, fname VARCHAR(50), lname VARCHAR(50), nick_name VARCHAR(50));
INSERT INTO users (id, fname, lname, nick_name) VALUES (1, 'Ranjit', 'Chhatre', 'Raj');
DROP TABLE users;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE users;
CREATE TABLE users(id INTEGER, fname VARCHAR(50), lname VARCHAR(50), user_type INTEGER);
INSERT INTO users (id, fname, lname, user_type) VALUES (11, 'Ritwik', 'Bharan', 2);
DROP TABLE users;
USE sampleDB;
DROP TABLE users;
CREATE DATABASE IF NOT EXISTS sampleDB;
DROP TABLE users;
CREATE TABLE users(id INTEGER, fname VARCHAR(50), lname VARCHAR(50), user_type INTEGER);
INSERT INTO users (id, fname, lname, user_type) VALUES (11, 'Ritwik', 'Bharan', 2);

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE users;
CREATE TABLE users(id INTEGER, fname VARCHAR(50), lname VARCHAR(50), user_type INTEGER);
INSERT INTO users (id, fname, lname, user_type) VALUES (11, 'Ritwik', 'Bharan', 2);
DROP TABLE users;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE users;
CREATE TABLE users(id INTEGER, fname VARCHAR(50), lname VARCHAR(50), user_type INTEGER);
INSERT INTO users (id, fname, lname, user_type) VALUES (11, 'Ritwik', 'Bharan', 2);

CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE users;
CREATE TABLE users(id INTEGER, fname VARCHAR(50), lname VARCHAR(50), user_type INTEGER);
INSERT INTO users (id, fname, lname, user_type) VALUES 
(11, 'Ritwik', 'Bharan', 1),
(21, 'Vamini', 'Kumar', 1),
(31, 'Sankal', 'Tambak', 2),
(41, 'Ruchi', 'Rambo', 0);

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE users;
CREATE TABLE users(id INTEGER, fname VARCHAR(50), lname VARCHAR(50), user_type INTEGER);
INSERT INTO users (id, fname, lname, user_type) VALUES (11, 'Ritwik', 'Bharan', 2);
DROP TABLE users;
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE users;
CREATE TABLE users(id INTEGER, fname VARCHAR(50), lname VARCHAR(50), user_type INTEGER);
INSERT INTO users (id, fname, lname, user_type) VALUES (11, 'Ritwik', 'Bharan', 2);
DROP TABLE users;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE users;
CREATE TABLE users(id INTEGER, fname VARCHAR(50), lname VARCHAR(50), user_type INTEGER);
INSERT INTO users (id, fname, lname, user_type) VALUES (2, 'Rahul', 'Kumar', 1);
DROP TABLE users;
INSERT INTO users (fname, user_type) VALUES ('Shreyas', 0);
INSERT INTO users (fname, user_type) VALUES ('Shreyas', 1);
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE users;
CREATE TABLE users(id INTEGER, fname VARCHAR(50), lname VARCHAR(50), user_type INTEGER);
INSERT INTO users (id, fname, lname, user_type) VALUES (11, 'Ritwik', 'Bharan', 2);
DROP TABLE users;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE users;
CREATE TABLE users(id INTEGER, fname VARCHAR(50), lname VARCHAR(50), user_type INTEGER);
INSERT INTO users (id, fname, lname, user_type) VALUES (11, 'Ritwik', 'Bharan', 2);
DROP TABLE users;
ALTER TABLE users add CONSTRAINT users_primary KEY(id);
INSERT INTO users_primary SELECT * FROM users;
DROP TABLE users_primary;
UPDATE users a SET a.lname = 'Golla' WHERE a.lname ='smith';
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE users;
CREATE TABLE users(id INTEGER, fname VARCHAR(50), lname VARCHAR(50), user_type INTEGER);
INSERT INTO users (id, fname, lname, user_type) VALUES (11, 'Ritwik', 'Bharan', 2);
DROP TABLE users;
ALTER TABLE users add CONSTRAINT users_primary KEY(id);
INSERT INTO users_primary SELECT * FROM users;
DROP TABLE users_primary;
UPDATE users a SET a.lname = 'Golla' WHERE a.lname ='smith';
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE users;
CREATE TABLE users(id INTEGER, fname VARCHAR(50), lname VARCHAR(50), user_type INTEGER);
INSERT INTO users (id, fname, lname, user_type) VALUES (11, 'Ritwik', 'Bharan', 2);
DROP TABLE users;
ALTER TABLE users ADD FKEY (user_type);
INSERT INTO users SELECT * FROM users WHERE user_type = 2;
SELECT * FROM users where user_type = '2';
DROP TABLE users_primary;
CREATE TABLE users_primary(id INTEGER PRIMARY KEY, user_type INTEGER);
INSERT INTO users_primary SELECT * FROM users WHERE user_type = 2;
SELECT * FROM users_primary where user_type = '2';
DROP TABLE users_primary;
CREATE TABLE users_primary(id INTEGER PRIMARY KEY, user_type INTEGER);
INSERT INTO users_primary SELECT * FROM users WHERE user_type = 2;
SELECT * FROM users_primary where user_type =
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE users;
CREATE TABLE users(id INTEGER, fname VARCHAR(50), lname VARCHAR(50), user_type INTEGER);
INSERT INTO users (id, fname, lname, user_type) VALUES (20, 'Sanket', 'Sharma', 1);
DROP TABLE users;
 
SELECT id, fname, lname FROM users WHERE id BETWEEN 10 AND 20;

-- Please complete code by showing the result.
SELECT id, fname, lname FROM users WHERE id BETWEEN 10 AND 20;
CREATE TABLE IF NOT EXISTS users(username varchar(10), password varchar(20));
USE sampleDB;
-- If the table "user" doesn't exist, create it with the fields username and password of type varchar(10) and password(20).
SELECT id, fname, lname FROM users WHERE id BETWEEN 10 AND 20;

-- If the table "user" exists, create a user whose ID is 30. Give the user password "<PASSWORD>" and password "password".
SELECT id, fname, lname FROM users WHERE id BETWEEN 10 AND 20;
DROP TABLE IF EXISTS users;
CREATE TABLE users(username varchar(10), password varchar(20));
USE sampleDB;
-- If the table "user" exists, change its password from "password" to "<PASSWORD>". Give the user ID 30 and password "<PASSWORD>".
SELECT id, fname, lname FROM users WHERE id BETWEEN 10 AND 20;
DROP TABLE IF EXISTS users;
CREATE TABLE users(username varchar(10), password varchar(20));
USE sampleDB;
-- If the table "user" exists, give the user ID 40 password "<PASSWORD>".
SELECT id, fname, lname FROM users WHERE id BETWEEN 10 AND 20;
DROP TABLE IF EXISTS users;
CREATE TABLE users(id INT, password LARGEVARY);
USE sampleDB;
-- In the table "users", create a new data in the field password by giving it a longer string
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE users;
CREATE TABLE users(id INTEGER, fname VARCHAR(50), lname VARCHAR(50), user_type INTEGER);
INSERT INTO users (id, fname, lname, user_type) VALUES (11, 'Ritwik', 'Bharan', 2);
DROP TABLE users;
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE users;
CREATE TABLE users(id INTEGER, fname VARCHAR(50), lname VARCHAR(50), user_type INTEGER);
INSERT INTO users (id, fname, lname, user_type) VALUES (11, 'Ritwik', 'Bharan', 2);
DROP TABLE users;
 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE users;
SET @tx_id:=SETXID();
CREATE TABLE users(id INTEGER, fname VARCHAR(50), lname VARCHAR(50), user_type INTEGER, CONSTRAINT users_pkey PRIMARY KEY (id) );
INSERT INTO users (id, fname, lname, user_type, CONSTRAINT users_insert_values_1234567876_k2369_k2369_k2369 UNIQUE (fname, lname) ) VALUES (11, 'Ritwik', 'Bharan', 2);
UPDATE users SET user_type = 2 WHERE user_type = 1;
INSERT INTO users (id, fname, lname, user_type);
DELETE FROM users WHERE id = 11;
COMMIT;

DROP TABLE users;
-- In the next chapter, you will try to understand the concepts that the MySQL supports to create and use a fully functional database. We will see in this chapter how to work with tables; how to add some basic data to the database. We will also see how to query data from database at various levels. Finally, we will do a sample INSERT query, which shows the usage of CREATE TABLE as the base for a database.

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE users;
CREATE TABLE users (id integer, fname varchar(50), lname varchar(50), user_type INTEGER);
INSERT INTO users (id, fname, lname, user_type) VALUES (11, 'Ritwik', 'Bharan', 2);
DROP TABLE users;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE users;
CREATE TABLE users(id INTEGER, fname VARCHAR(50), lname VARCHAR(50), user_type INTEGER);
INSERT INTO users (id, fname, lname, user_type) VALUES (11, 'Ritwik', 'Bharan', 2);
DROP TABLE users;


[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE users;
CREATE TABLE users(id INTEGER, fname VARCHAR(50), lname VARCHAR(50), user_type INTEGER);
INSERT INTO users (id, fname, lname, user_type) VALUES (11, 'Ritwik', 'Bharan', 2);


CREATE PROC uspInsertUser
(
    @first NVARCHAR(50),
    @last NVARCHAR(50),
    @user_type INTEGER 
)
AS
BEGIN
DECLARE @userid INT
IF (SELECT COUNT(*) FROM users WHERE fname = @first AND lname = @last) = 0
BEGIN
INSERT INTO users(fname, lname, user_type) VALUES(@first,@last, @user_type)
END
ELSE
BEGIN
 	DECLARE @result INT
 	SELECT @result = user_type FROM users WHERE fname = @first AND lname = @last
	ROLLBACK TRANSACTION
 	SET @result = @result +1
    PRINT 'Cannot register user '
	PRINT 'User type already registered with User id:'+ cast(User_id AS NVARCHAR(20))
    RETURN 
END
PRINT @userid +'User registered successfully'
COMMIT
RETURN  
END


[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE users;
CREATE TABLE users(id INTEGER, fname VARCHAR(50), lname VARCHAR(50), user_type INTEGER);
INSERT INTO users (id, fname, lname, user_type) VALUES (46, 'David', 'M', 4);


```
# What's next
1. You can also make some improvements with tables by adding new columns and data types to them.
2. You can also create functions/procedures and use them in other functions
3. You can also make modifications in existing tables. (Just use UPDATE, DELETE, INSERT etc)
4. You can also add constraints to your tables so that you can restrict a single row or entire table to only certain values.

You can now use various functions.
* SQL GROUP BY
* SQL ORDER BY
* SQL ORDER BY (DESC)
* SQL UNION
* SQL UNION (ALL)
* SQL UNION ALL (EXCEPT)
* SQL JOIN
* SQL SELECT
* SQL UPDATE
* SQL DELETE



[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE users;
CREATE TABLE users(id INTEGER, fname VARCHAR(50), lname VARCHAR(50), user_type INTEGER);
INSERT INTO users (id, fname, lname, user_type) VALUES (11, 'Ritwik', 'Bharan', 2);
DROP TABLE users;
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE users;
CREATE TABLE users(id INTEGER, fname VARCHAR(50), lname VARCHAR(50), user_type INTEGER);
INSERT INTO users (id, fname, lname, user_type) VALUES (11, 'Ritwik', 'Bharan', 2);

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE users;
SET @query = CONCAT('CREATE TABLE IF NOT EXISTS `',table, '` (', col1,'VARCHAR(255)',', ', col2,'INT',') ENGINE=INNODB');
PREPARE stmt  FROM @query;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
DROP TABLE USERS;
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

DROP TABLE IF EXISTS users;
DROP TABLE IF EXISTS posts;
DROP TABLE IF EXISTS users_post;
DROP TABLE IF EXISTS users_post_tags;
DROP TABLE IF EXISTS users_tags;
DROP TABLE IF EXISTS tags;
DROP TABLE IF EXISTS users_post_comments;
DROP TABLE IF EXISTS users_posts;
DROP TABLE IF EXISTS posts_comments;
DROP TABLE IF EXISTS users;

CREATE DATABASE IF NOT EXISTS sampleDB;
Use SampleDB;
DROP TABLE IF EXISTS users_tags;
DROP TABLE IF EXISTS users_posts;
DROP TABLE IF EXISTS users;
DROP TABLE IF EXISTS users_post_comments;
DROP TABLE IF EXISTS users_post_tags;
DROP TABLE IF EXISTS posts_comments;
DROP TABLE IF EXISTS posts;
DROP TABLE IF EXISTS users_post;
DROP TABLE IF EXISTS tags;
DROP TABLE IF EXISTS users_tags;
DROP TABLE IF EXISTS users;
SELECT * FROM users_post_comments;
ALTER TABLE users_post_comments ADD score SMALLINT(5) DEFAULT 0 FOR score_count;
ALTER TABLE users_post_comments ADD total_comments INT(11) DEFAULT 0 FOR comments_count;
ALTER TABLE users_post_comments ADD comment_content text;
ALTER TABLE users_post_comments ADD comment_user text;
ALTER TABLE users_post_comments ADD date date;

CREATE TABLE `users_tags` (
  userid INT(11) NOT NULL,
  tagid INT(11) NOT NULL,
  PRIMARY KEY(userid, tagid),
  INDEX user(`userid`),
  CONSTRAINT `user`
    FOREIGN KEY (userid)
    REFERENCES users (id)
    ON DELETE CASCADE
    ON UPDATE CASCADE);

CREATE TABLE `users_posts` (
  userid INT(11) NOT NULL,
  postid INT(11) NOT NULL,
  PRIMARY KEY(userid, post
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE users;
CREATE TABLE users(id INTEGER, fname VARCHAR(50), lname VARCHAR(50), user_type INTEGER);
INSERT INTO users (id, fname, lname, user_type) VALUES (13, 'Shubham', 'Ravi', 1);
DROP TABLE users;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE users;
CREATE TABLE users(id INTEGER, fname VARCHAR(50), lname VARCHAR(50));
INSERT INTO users (id, fname, lname) VALUES (12, 'Prasanna', 'Ramesh');
DROP TABLE users;
  
 

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE users;
CREATE TABLE users(id INTEGER, fname VARCHAR(50), lname VARCHAR(50), user_type INTEGER);
INSERT INTO users (id, fname, lname, user_type) VALUES(5, 'Nakshatra', 'N', 1);
DROP TABLE users;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE users;
CREATE TABLE users(id INTEGER, fname VARCHAR(50), lname VARCHAR(50), user_type INTEGER);
INSERT INTO users (id, fname, lname, user_type) VALUES (11, 'Ritwik', 'Bharan', 2);
DROP TABLE users;
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE products;
CREATE TABLE products(id INTEGER AUTO_INCREMENT, name VARCHAR(100), description TEXT NOT NULL, price INTEGER NOT NULL, user_id INTEGER DEFAULT NULL, PRIMARY KEY(id));
INSERT INTO users (id, fname, lname, user_type) VALUES (11, 'Ritwik', 'Bharan', 2);
INSERT INTO product (id, name, description, price, user_id) VALUES (1, 'iPhone6', 'Apple iPhone 6 Pro 2017', 36999.99, 11);

DROP TABLE products;
DROP TABLE users;
ROLLBACK;
-- MySQL, named after co-founder <NAME>'s daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
*/
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE users;
CREATE TABLE users(id INTEGER, fname VARCHAR(50), lname VARCHAR(50), password LVARCHAR(30));
INSERT INTO users (id, fname, lname, password) VALUES (11, 'Ritwik', 'Bharan', '<PASSWORD>');
DROP TABLE users;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE users;
CREATE TABLE users(id INTEGER, fname VARCHAR(50), lname VARCHAR(50), user_type INTEGER);
INSERT INTO users (id, fname, lname, user_type) VALUES (6, 'Pallav', 'Srivastava', 1);
DROP TABLE users;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE users;
CREATE TABLE users(id INTEGER, fname VARCHAR(50), user_type INTEGER);
INSERT INTO users (id, fname, user_type) VALUES (11, 'Ritwik', 1);
DROP TABLE users;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
 
DROP DATABASE sampleDB;

-- SQL Server
-- The Windows database engine runs on Windows Vista and later edition of Windows Server operating systems, while SQL Server run on the Server 2005 Enterprise or Windows 2000 and Server 2003 operating systems.

-- MySQL
-- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

-- PHP
-- PHP is a high-level server-side scripting language written in C, designed for developers based in the web industry. It can serve as an important building block of an application server. PHP is extremely lightweight and can be used in a number of applications ranging between single script websites to multi-page or multi-tier application servers.

-- PostgreSQL
-- PostgreSQL is a free Relational Database Management System (RDBMS) that can be used for development and testing purposes. It is an open source re-implementation of the open source database Management System PostgreSQL available in free and open source software. PostgreSQL is supported on all major versions of Oracle, DB2, Sybase, SQL Server, MySQL, and HSQLDB.

-- Oracle
-- Oracle is a leading provider for cloud data storage and relational data management, operating and high-availability services. Oracle has released a comprehensive guide to database administration, with numerous practical exercises.

-- MongoDB
-- MongoDB (a new database program) is an open source document-oriented database system with the goal of providing non-transactional, high performance, multi-model, non-interchangeable data store services to developers.

-- MySQL Workbench
-- The MySQL Workbench is an open source full-featured graphical toolkit for database management. It has robust integration with several popular database management systems, including MySQL, PostgreSQL and Oracle.

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP DATABASE sampleDB;
-- SQL Server
-- The Windows database engine runs on Windows Vista and later edition of Windows Server operating systems, while SQL Server run on the Server 2005 Enterprise or Windows 2000 and Server 2003 operating systems.
-- MySQL
-- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.
-- PHP
-- PHP is a high-level server-side scripting language written in C, designed for developers based in the web industry. It can serve as an important building block of an application server. PHP is extremely lightweight and can be used in a number of applications ranging between single script websites to multi-page or multi-tier application servers.
-- PostgreSQL
-- PostgreSQL is a free Relational Database Management System (RDBMS) that can be used for development and testing purposes. It is an open source re-implementation of the open source database Management System PostgreSQL available in free and open source software. PostgreSQL is supported on all major versions of Oracle, DB2, Sybase, SQL Server, MySQL, and HSQLDB.
-- Oracle
-- Oracle is a leading provider for cloud data storage and relational data management, operating and high-availability services. Oracle has released a comprehensive guide to database administration, with numerous practical exercises.
-- MongoDB
-- MongoDB (a new database program) is an open source document-oriented database system with the goal of providing non-transactional, high performance, multi-model, non-interchangeable data store services to developers.
-- MySQL Workbench
-- The MySQL Workbench is an open source full-featured graphical toolkit for database management. It has robust integration with several popular database management systems, including MySQL, PostgreSQL and Oracle.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP DATABASE sampleDB;
-- MySQL Workbench
-- MySQL Workbench is open source full-featured graphical toolkit for database management. It is open source under the GNU General Public License v3 and it was designed to be fast, flexible, and easy. You can install and run MySQL Workbench on any platform which offers a browser. You can easily take advantage of various plug-ins to provide more capabilities of your database.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations.
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP DATABASE sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP DATABASE sampleDB;
 
INSERT INTO users (username, password) VALUES ('user', '<PASSWORD>')
 
INSERT INTO users (username, password) VALUES ('user1', '<PASSWORD>'),
                           ('user2', '<PASSWORD>');
 
INSERT INTO users (username, password, points) VALUES ('user3', '<PASSWORD>', 1000),
                                                   ('user4', '<PASSWORD>',
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP DATABASE sampleDB;
```

[MySQL tutorial](https: 

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP DATABASE sampleDB;
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
GRANT CREATE, SHOW DATABASES, INJURY REMOTE, DROP, INSERT, UPDATE, REFERENCES ON `sampleDB`.* TO '_user'@'_localhost' IDENTIFIED BY 'password'
--Please create a complex query in SQL
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SELECT * FROM `sampleDB`.sample
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO User VALUES (3, 'Brian', 4), (4, 'Joe', 1);
-- Now modify the generated User table
UPDATE User SET SSN = 23456 WHERE FirstName = 'Brian';
-- Make sure to specify foreign key constraint. This is the only way to remove or
-- destroy the relationships between the two tables
ALTER TABLE User ADD CONSTRAINT FK CONSTRAINT fk_User_Employee FOREIGN KEY (EmployeeID) REFERENCES Employee(EmployeeID);
ALTER TABLE User DROP CONSTRAINT fk_User_Employee;
-- Make sure to use SHOW FIELDS OPTION so you can see the added columns when
-- you perform an update
ALTER TABLE User ADD FirstName varchar(21) NOT NULL AFTER EmployeeID;
ALTER TABLE User ADD Address VARBINARY(45) AFTER FirstName;
UPDATE User SET Address = '4294967295' WHERE EmployeeID = 4;
-- Create a mutated view in MySQL called UsersView which will fetch all records in
-- the User table and the Employee table and print out the employees' id only
--
-- DROP VIEW IF EXISTS UsersView;
-- CREATE VIEW IF NOT EXISTS UsersView AS SELECT * FROM User;
CREATE OR REPLACE FUNCTION UsersView() RETURNS table (EmployeeID integer)
BEGIN
    SELECT EmployeeID INTO @usersView FROM User;
    RETURN;
END;
SELECT * FROM viewUsers();

DROP FUNCTION UsersView();
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

INSERT INTO testTable (columna, columnb, columnc)
VALUES ('Hello', 'World', 5), ('Hello', 'World', 10), ('Hello', 'World', 20), ('Hello', 'World', '1'), ('Hello', 'World', '11'), ('Hello', 'World', '22'), ('Hello', 'World', '3');
COMMIT; 
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
ALTER DATABASE sampleDB
MODIFY character_set_server = utf8
CHARACTER_SET_SERVER=utf8 COLLATE=utf8_unicode_ci NULL_DEFAULT_SET
DEFAULT_COLLATE=utf8_unicode_ci;
CREATE TABLE IF NOT EXISTS `person` (
`id` INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
`age` TINYINT,
`name` VARCHAR(200) NOT NULL,
`email` VARCHAR(150),
FOREIGN KEY(`age`) REFERENCES `agegroups`(`id`)
) CHARACTER SET = utf8 COLLATE = utf8_unicode_ci;
USE sampleDB
DROP TABLE IF EXISTS `person`;
CREATE TABLE IF NOT EXISTS `agegroups` (
`id` INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
`agegroup` TINYINT UNSIGNED,
FOREIGN KEY(`agegroup`) REFERENCES `agecats`(`id`)
) CHARACTER SET = utf8 COLLATE = iso8859_1
ENGINE = InnoDB;
USE sampleDB
CREATE TABLE IF NOT EXISTS `agecats` (
`id` INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
`name` VARCHAR(200) NOT NULL
) CHARACTER SET = iso8859_1;
USE sampleDB

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP DATABASE sampleDB;
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
 
create table t1 (t1_key int(11) unsigned, data_type enum('a','b','c','d','e','f','g','h','i','j','k'), t1_field boolean, t1_field1 decimal(8,5), data_type1 enum('first data type','second data type','third data type'), data_type2 enum('first second data type'));
insert into t1 (t1_key, data_type, data_type1) values (10, 'a', 'first data type');
delete from t1 where t1_key = 10;
 
INSERT INTO t1 VALUES (20, 'b', 'first second data type'), (30, 'b', 'First second data type');
 
explain select t1_key, t1_field1 from t1 where t1_field;
INSERT INTO t1 (t1_key, t1_field1) VALUES (20, 'first second data type');
 
explain select distinct t1_key, t1_field, t1_field1 from t1 left join t1 on t1_key = t1.t1_key left join t1 on t1_key = t1.t1_key left join t1 on t1_key = t1.t1_key inner join t1 on t1_key = t1.t1_key order by t1_key asc;
 
# UNION selects all columns from all selected table or union-all selects all columns from all table.
# UNION query produces multiple result sets, because of multi-join.
explain select distinct t1_key, t1_field, t1_field1 from t1 left outer join t1 on t1_key = t1.t1_key  inner union all select distinct t1_key, t1_field, t1_field1 from t1 inner join t1 on t1_key = t1.t1_key order by t1_key asc;
explain select distinct t1_key, t1_field, t1_field1 from t1 left outer join t1 on t1_key = t1.t1_key inner union all select distinct t1_key, t1_field, t1_field1 from t1 inner join t1 on t1_key = t1.t1_key left outer join t1 on t1_key = t1.t1_key order by t1_key asc
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

DROP TABLE IF EXISTS table10;
CREATE TABLE table10 (ID INT, name VARCHAR(20));
INSERT INTO table10 (ID, name) VALUES (12, 'table10_001');
SELECT * FROM table10;

 SELECT * FROM table10 WHERE ID = 12;

SELECT Name, ID from table10;

DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO tab1 (name, email) VALUES ("Tom", "<EMAIL>");

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP DATABASE IF EXISTS sampleDB;
-- The same mutated program but now using an alter command. Alter will alter a table based on the alteration command used.
CREATE DATABASE IF NOT EXISTS sampleDB; ALTER DATABASE sampleDB MODIFY name="New Name"; SHOW DATABASES; DROP DATABASE IF EXISTS sampleDB;
-- This is where we go long and use a table to make something unique. 
UPDATE person.person set birthday = 2001-01-01;
USE person.person;
SELECT * FROM person.person;
DROP TABLE IF EXISTS person.person;
-- Once again, this command will use the first table in our sampleDB

CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP DATABASE IF EXISTS sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- INSERT INTO `sampleDB`.`cars` (`id`, `Make`, `Model`, `Color`, `Price`, `Year`) VALUES (1, 'Nissan', 'Altima', 'Blue', 120000, 0);

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- INSERT INTO `sampleDB`.`cars` (`id`, `Make`, `Model`, `Color`, `Price`, `Year`) VALUES (1, 'Nissan', 'Altima', 'Blue', 120000, 0);
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- INSERT INTO `sampleDB`.`cars` (`id`, `Make`, `Model`, `Color`, `Price`, `Year`) VALUES (2, 'Nissan', 'Altima', 'Blue', 130000, 0);

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO `sampleDB`.`cars` (`id`, `Make`, `Model`, `Color`, `Price`, `Year`) VALUES (2, 'Nissan', 'Altima', 'Red', 120000, 0);

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- INSERT INTO `sampleDB`.`cars` (`id`, `Make`, `Model`, `Color`, `Price`, `Year`) VALUES (2, 'Honda', 'Civic', 'Black', 11000, 0);

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
 

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DELETE FROM `sampleDB`.`cars`;
CREATE TABLE `sampleDB`.`cars` (
  `id` INT AUTO_INCREMENT PRIMARY KEY,
  `Make` VARCHAR(255) NOT NULL,
  `Model` VARCHAR(255) NOT NULL,
  `Color` VARCHAR(255) NOT NULL,
  `Price` INT NOT NULL,
  `Year` INT NOT NULL
);
INSERT INTO `sampleDB`.`cars` (`id`, `Make`, `Model`, `Color`, `Price`, `Year`) VALUES (1, 'Volvo', 'XC10', 'Silver', 90000, 0);
INSERT INTO `sampleDB`.`cars` (`id`, `Make`, `Model`, `Color`, `Price`, `Year`) VALUES (2, 'Renault', 'S-85', 'Black', 13500, 0);
INSERT INTO `sampleDB`.`cars` (`id`, `Make`, `Model`, `Color`, `Price`, `Year`) VALUES (2, 'McLaren', 'MCLX10', 'Orange', 10935.93, 0);
INSERT INTO `sampleDB`.`cars` (`id`, `Make`, `Model`, `Color`, `Price`, `Year`) VALUES (3, 'Volvo', 'XC30', 'Blue', 78000, 2017);
INSERT INTO `sampleDB`.`cars` (`id`, `Make`, `Model`, `Color`, `Price`, `Year`) VALUES (4, 'Dodge', 'Kiva', 'Golden Red', 90500, 0);
INSERT INTO `sampleDB`.`cars` (`id`, `Make`, `Model`, `Color`, `Price`, `Year`) VALUES (5, 'Volvo', 'XC100', 'Silver', 90000, 2017);
INSERT INTO `sampleDB`.`cars` (`id`, `Make`, `Model`, `Color`, `Price`, `Year`) VALUES (6, 'McLaren', 'MCL50', 'Black', 75000, 0);
INSERT INTO `sampleDB`.`cars` (`id`, `Make`, `Model`, `Color`, `Price`, `Year`) VALUES (7, 'F
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- INSERT INTO `sampleDB`.`cars` (`id`, `Make`, `Model`, `Color`, `Price`, `Year`) VALUES (1, 'Nissan', 'Altima', 'Blue', 120000, 0);
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
 
 explain SELECT * FROM "sampleDB"."cars"  
 
 
 
 
 
```

## License

For the full copyright and license information, please view the LICENSE.md file that was distributed with this source code.

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `cars` (
`color` CHAR(10) NOT NULL,
`Make` VARCHAR(50) NOT NULL,
`Model` VARCHAR(10) NOT NULL,
`price` REAL NOT NULL,
`year` INT NOT NULL,
PRIMARY KEY (`id`)
) ENGINE=InnoDB

 
SELECT * FROM `cars`;
SELECT COUNT(*) AS row_count FROM `cars`;

 
SELECT Model, color FROM `cars` WHERE color = 'blue';

 
SELECT id, Make, price FROM `cars` WHERE color = 'blue' ORDER BY Make ASC, price DESC, Color DESC;

 
SELECT Make, Model FROM `cars` WHERE Model > 'L';
SELECT Make, Model FROM `cars` WHERE Color = 'Blue';
SELECT color FROM `cars` ORDER BY Make DESC LIMIT 1 OFFSET 2;

 
SELECT Make, COUNT(price) AS cost FROM `cars` GROUP BY Make;
SELECT color, COUNT(*) AS model_count FROM `cars` GROUP BY color;
SELECT Make, COUNT(Model) AS Models FROM `cars` GROUP BY Make;

 
/* 6. You will also sometimes encounter `HAVING` clauses to make it so that a filter is applied after a sort has been applied. These are often used by the database managers to provide suggestions for additional options to filter. For example, if you are ordering in descending order and then filter for all cars on your car list, you can change
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `sampleDB`.`cars` (
  `id` int NOT NULL AUTO_INCREMENT,
  `Make` varchar(20) NOT NULL,
  `Model` varchar(10) NOT NULL,
  `Color` varchar(8) NOT NULL,
  `Price` float NOT NULL,
  `Year` int NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `cars_Make_Model_Color` (`Make`,`Model`,`Color`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- INSERT INTO `sampleDB`.`cars` (`id`, `Make`, `Model`, `Color`, `Price`, `Year`) VALUES (2, 'Cadillac', 'Enzo', 'Red', 250000, 0);
commit;
close;
commit close;
end;
grant all on sampleDB.cars to 'user1'@'%';

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `sampleDB`.`cars` (
  `id` int NOT NULL AUTO_INCREMENT,
  `Make` varchar(20) NOT NULL,
  `Model` varchar(10) NOT NULL,
  `Color` varchar(8) NOT NULL,
  `Price` float NOT NULL,
  `Year` int NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `cars_Make_Model_Color` (`Make`,`Model`,`Color`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
UPDATE cars SET Color="red";
SELECT Make,Model,Color,Price,Year FROM sampleDB.cars;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `sampleDB`.`cars` (
  `id` int NOT NULL AUTO_INCREMENT,
  `Make` varchar(20) NOT NULL,
  `Model` varchar(10) NOT NULL,
  `Year` int NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `cars_Year_Make_Model` (`Year`,`Make`,`Model`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;;
DROP DATABASE IF EXISTS sampleDB;;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `sampleDB`.`cars` (
  `id` int NOT NULL AUTO_INCREMENT,
  `Make` varchar(20) NOT NULL,
  `Model` varchar(10) NOT NULL,
  `Color` varchar(8) NOT NULL,
  `Price` float NOT NULL,
  `Year` int NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `cars_Make_Model_Color` (`Make`,`Model`,`Color`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
-- Please create a query that retrieves and print the information in "sampleDB.cars"
INSERT INTO `sampleDB`.`cars`(`id`,`Make`,`Model`,`Color`,`Price`,`Year`) VALUES (1,'Honda','Civic','black',3,2013);
select Make, Model as 'Model', Color from sampleDB.cars;
 
SELECT Make, Model, Color from sampleDB.cars ORDER BY Model, Color;
 
ALTER TABLE sampleDB.cars ADD CONSTRAINT uk_sampleDB_cars UNIQUE ( Model, Color );
ALTER TABLE sampleDB.cars MODIFY Color varchar(40);
SELECT Color, COUNT(Color) as 'Count' FROM sampleDB.cars GROUP BY 1;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `sampleDB`.`cars`;
CREATE TABLE IF NOT EXISTS `sampleDB`.`cars` (
  `id` int NOT NULL AUTO_INCREMENT,
  `Make` varchar(20) NOT NULL,
  `Model` varchar(10) NOT NULL,
  `Color` varchar(8) NOT NULL,
  `Price` float NOT NULL,
  `Year` int NOT NULL,
  `Owner` varchar(16),
  PRIMARY KEY (`id`),
  UNIQUE KEY `cars_Make_Model_Color` (`Make`,`Model`,`Color`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
 INSERT INTO sampleDB.cars
 VALUES ('Audi','A4','Green',105000);
 SELECT * FROM sampleDB.cars;
-- Please create a program which is a variation on the previous generated
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
 INSERT INTO sampleDB.cars
 VALUES ('Kia','Soul','Black',10000);
 SELECT * FROM sampleDB.cars;

```

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `sampleDB`.`cars`;
CREATE TABLE IF NOT EXISTS `sampleDB`.`cars` (
  `id` int NOT NULL AUTO_INCREMENT,
  `Make` varchar(20) NOT NULL,
  `Model` varchar(10) NOT NULL,
  `Color` varchar(8) NOT NULL,
  `Price` float NOT NULL,
  `Year` int NOT NULL,
  `Owner` varchar(16),
  PRIMARY KEY (`id`),
  UNIQUE KEY `cars_Make_Model_Color` (`Make`,`Model`,`Color`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `sampleDB`.`customers`;
CREATE TABLE IF NOT EXISTS `sampleDB`.`customers` (
  `id` int NOT NULL AUTO_INCREMENT,
  `address` varchar(128),
  `firstname` varchar(64),
  `lastname` varchar(64),
  `email` varchar(64),
  `company` varchar(64),
  `contactphone` varchar(20),
  `contactcity` varchar(64),
  `zipcode` int,
  `country` varchar(64),
  `state` varchar(64),
  `city` varchar(64),
  `sales` int,
  `lastupdate` datetime NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `customers_contactcity` (`contactcity`),
  UNIQUE KEY `customers_contactcity_state` (`contactcity`,`state`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `sampleDB`.`people`;
CREATE TABLE IF NOT EXISTS `sampleDB`.`people` (
  `id` int NOT NULL AUTO_INCREMENT,
  `name` varchar(10) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8;
INSERT INTO `sampleDB`.`cars` (`Make`, `Model`, `Color`, `Price`, `Year`, `Owner`) VALUES ('Honda', 'Odyssey', 'Red', 20000, 2013, 'Kate');
INSERT INTO `sampleDB`.`cars` (`Make`, `Model`, `Color`, `Price`, `Year`, `Owner`) VALUES ('Dodge', 'Ram', 'Gold', 20000, 2012, 'Kate');
INSERT INTO `sampleDB`.`cars` (`Make`, `Model`, `Color`, `Price`, `Year`, `Owner`) VALUES ('Ford', 'Mustang', 'Silver', 20000, 2020, 'Kevin');
INSERT INTO `sampleDB`.`people` (`name`) VALUES ('Kate');
INSERT INTO `sampleDB`.`people` (`name`) VALUES ('Kevin');
DELETE FROM `sampleDB`.`cars`;
INSERT INTO `sampleDB`.`cars` (`Make`, `Model`, `Color`, `Price`, `Year`, `Owner`) VALUES ('Volvo', 'TMC', 'Red', 15000, 2013, 'Mary');
INSERT INTO `sampleDB`.`cars` (`Make`, `Model`, `Color`, `Price`, `Year`, `Owner`) VALUES ('Ford', 'Mustang', 'Silver', 20000, 2020, 'Kevin');
INSERT INTO `sampleDB`.`people` (`name`) VALUES ('Mary');
INSERT INTO `sampleDB`.`people` (`name`) VALUES ('Kevin');
SELECT * FROM `sampleDB`.`cars` WHERE
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `sampleDB`.`users`;
CREATE TABLE IF NOT EXISTS `sampleDB`.`users` (
  `id` int NOT NULL AUTO_INCREMENT,
  `Name` varchar(16) NOT NULL UNIQUE,
  `Password` varchar(32) NOT NULL UNIQUE,
  PRIMARY KEY (`id`),
  UNIQUE KEY `users_Name` (`Name`)
) ENGINE=InnoDB AUTO_INCREMENT=17 DEFAULT CHARSET=utf8;
  

INSERT INTO `sampleDB`.`users` (`Name`, `Password`)
VALUES
  ('root', '<PASSWORD>'),
  ('root', '<PASSWORD>'),
  ('root', '<PASSWORD>'),
  ('root', '<PASSWORD>'),
  ('root', '<PASSWORD>'),
  ('root', '<PASSWORD>'),
  ('root', '<PASSWORD>'),
  ('root', '<PASSWORD>'),
  ('root', '<PASSWORD>');


[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `sampleDB`.`customers`;
CREATE TABLE IF NOT EXISTS `sampleDB`.`customers` (
  `id` int NOT NULL AUTO_INCREMENT,
  `customerID` int NOT NULL,
  `firstName` varchar(20) NOT NULL,
  `lastName` varchar(25) NOT NULL,
  `isFullTimeEmployee` tinyint(1) NOT NULL,
  `isLead` tinyint(1),
  `isVIP` tinyint(1) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `customers_customerID` (`customerID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `sampleDB`.`cars_2` (
  `Make` varchar(20) NOT NULL,
  `Model` varchar(10) NOT NULL,
  `Color` varchar(8) NOT NULL,
  `Price` float NOT NULL,
  `Year` int NOT NULL,
  `Owner` varchar(16),
  PRIMARY KEY (`Make`,`Model`,`Color`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
SELECT * FROM sampleDB.cars;
 
CREATE INDEX cars_id ON sampleDB.cars (id);
DELIMITER ;;
CREATE PROCEDURE `query_index`()
BEGIN
SELECT * FROM sampleDB.cars;
SELECT * FROM sampleDB.cars_2;
END;;
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `sampleDB`.`mystuff` (
  `id` int NOT NULL AUTO_INCREMENT,
  `Name` varchar(32) NOT NULL,
  `Address` text,
  `Description` text,
  `Number` float NOT NULL,
  `Color` varchar(16) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
USE sampleDB;
DROP PROCEDURE IF EXISTS my_procedure;
DELIMITER ;;
CREATE PROCEDURE my_procedure()
BEGIN
INSERT INTO mystuff (Name, Address, Description, Number) VALUES ('My Procedure');
DROP PROCEDURE my_procedure;
END ;;
-- Use the procedure
CALL my_procedure();

-- Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `sampleDB`.`customers`;
CREATE TABLE IF NOT EXISTS `sampleDB`.`customers` (
  `id` int NOT NULL AUTO_INCREMENT,
  `customerID` int NOT NULL,
  `firstName` varchar(20) NOT NULL,
  `lastName` varchar(25) NOT NULL,
  `isFullTimeEmployee` tinyint(1) NOT NULL,
  `isLead` tinyint(1),
  `isVIP` tinyint(1) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `customers_customerID` (`customerID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `sampleDB`.`employees`;
CREATE TABLE IF NOT EXISTS `sampleDB`.`employees` (
  `id` int NOT NULL AUTO_INCREMENT,
  `employeeID` int NOT NULL,
  `firstName` varchar(20) NOT NULL,
  `lastName` varchar(20) NOT NULL,
  `isSenior` tinyint(1) NOT NULL,
  `salaryPerHour` int NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `employees_employeeID` (`employeeID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

INSERT INTO sampleDB.customers (id, customerID, firstName, lastName, isFullTimeEmployee, isLead, isVIP) VALUES (1, 4543, 'Marcia', 'Sutter', 0, 1, 0);
INSERT INTO sampleDB. customers (id, customerID, firstName, lastName, isFullTimeEmployee, isLead, isVIP) VALUES (2, 5435, 'Rafa', 'Vigo', 1, 0, 1);
INSERT INTO sampleDB.customers (id, customerID, firstName, lastName, isFullTimeEmployee, isLead, isVIP) VALUES (3, 9178, 'Romain', 'Lam', 1, 1, 0);

INSERT INTO sampleDB.employees (id, employeeID, firstName, lastName, isSenior, salaryPerHour) VALUES (1, 45, 'Paula', 'Gil-Nag', 1, 10000);
INSERT INTO sampleDB.employees (id, employeeID, firstName, lastName, isSenior, salaryPerHour) VALUES (2, 894, 'Marcia', 'Martins', 1, 10000);
INSERT INTO sampleDB.employees (id, employeeID, firstName, lastName, isSenior, salaryPerHour) VALUES (3, 475, 'Sara', 'Lam', 1, 20000);

SELECT * FROM sampleDB.customers JOIN sampleDB.employees ON sampleDB.employees.customerID = sampleDB.customers.id;
SELECT lastName
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `sampleDB`.`testtable`;
CREATE TABLE IF NOT EXISTS `sampleDB`.`testtable` (
  `id` int NOT NULL AUTO_INCREMENT,
  `email` varchar(150) NOT NULL,
  `firstname` varchar(20) NOT NULL,
  `lastname` varchar(20) NOT NULL,
  `password` varchar(20) NOT NULL,
  `created` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  UNIQUE KEY `sampleDB`.`testtable_email` (`email`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS customers;
CREATE TABLE customers (
id INT NOT NULL AUTO_INCREMENT,
customerID INT NOT NULL,
firstName VARCHAR(20) NOT NULL,
lastName VARCHAR(25) NOT NULL,
isFullTimeEmployee TINYINT(1) NOT NULL,
isLead TINYINT(1),
isVIP TINYINT(1) NOT NULL,
PRIMARY KEY (id),
UNIQUE KEY customers_customerID (customerID)
);
-- Please create a query which uses UNION rather than JOIN to do a natural join for two tables.
SELECT * FROM customers c1 JOIN customers INNER JOIN customers c2 WHERE c1.isLead = 1 AND c2.isLead = 1;
-- Please write a semantcal equivalent query for the above
SELECT * FROM customers c1 INNER JOIN customers INNER JOIN customers WHERE c1.isLead = 1 AND c2.isLead = 1;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO `customers`
SET `id`=2,
`customerID`=200050111,
`firstName`='Sally',
`lastName`='Munroe',
`isFullTimeEmployee`=0,
`isLead`=1,
`isVIP`=1;

DELIMITER := '`';
CREATE DATABASE IF NOT EXISTS `sampleDB`;
USE `sampleDB`;
-- INSERT INTO `customers` (`customerID`, `firstName`, `lastName`, `isFullTimeEmployee`, `isLead`, `isVIP`) SELECT 123 AS "customerID", 'Bob' AS "firstName", 'Smith' AS "lastName", 1 AS "isFullTimeEmployee" AS "isFullTimeEmployee", 2 AS "isLead" AS "isLead", 3 AS "isVIP" AS "isVIP";
COMMIT;
DELIMITER := '';

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `sampleDB`.`customers`;
CREATE TABLE IF NOT EXISTS `sampleDB`.`customers` (
  `id` int NOT NULL AUTO_INCREMENT,
  `customerID` int NOT NULL,
  `firstName` varchar(20) NOT NULL,
  `lastName` varchar(25) NOT NULL,
  `isFullTimeEmployee` tinyint(1) NOT NULL,
  `lead` tinyint(6),
  `vip` tinyint(4)
);
-- MySQL commands:
-- ALTER TABLE `sampleDB`.`customers` DROP INDEX `customerID`;
-- ALTER TABLE `sampleDB`.`customers` DROP UNIQUE `customerID`;
-- INSERT INTO `sampleDB`.`customers` (firstName, lastName, createdOn, updatedOn, isFullTimeEmployee, isLead, isVIP) VALUES ('Jim', 'Smith', '03/05/20', '03/27/20', 0, 1, 0);
-- INSERT INTO `sampleDB`.`customers` (firstName, lastName, createdOn, updatedOn, isFullTimeEmployee, isLead, isVIP) VALUES ('Bob', 'Carley', '06/12/20', '10/28/20', 0, 1, 1);
-- INSERT INTO `sampleDB`.`customers` (firstName, lastName, createdOn, updatedOn, isFullTimeEmployee, isLead, isVIP) VALUES ('John', 'Doe', '11/11/20', '09/30/20', 1, 1, 0);
-- INSERT INTO `sampleDB`.`customers` (firstName, lastName, createdOn, updatedOn, isFullTimeEmployee, isLead, isVIP) VALUES ('Peter', 'Parker', '02/13/20', NULL, 1, 0, 1);
-- INSERT INTO `sampleDB`.`customers` (firstName, lastName, createdOn, updatedOn, isFullTimeEmployee, lead, vip) VALUES ('Mark', 'Mitchell', '02/05/20', NULL, 0, 0, 0);

-- Please create a very short query which uses
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `sampleDB`.`customers`;
CREATE TABLE IF NOT EXISTS `sampleDB`.`customers` (
  `id` int NOT NULL AUTO_INCREMENT,
  `customerID` int NOT NULL,
  `firstName` varchar(20) NOT NULL,
  `lastName` varchar(25) NOT NULL,
  `isFullTimeEmployee` tinyint(1) NOT NULL,
  `isLead` tinyint(1),
  `isVIP` tinyint(1) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `customers_customerID` (`customerID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `sampleDB`.`employees`;
CREATE TABLE IF NOT EXISTS `sampleDB`.`employees` (
  `id` int NOT NULL AUTO_INCREMENT,
  `employeeID` int NOT NULL,
  `employeeNumber` int NOT NULL,
  `isFullTimeEmployee` tinyint(1) NOT NULL,
  `isLead` tinyint(1),
  `isVIP` tinyint(1) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `employees_employeeID` (`employeeID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
 
-- Please create 3 tables that perform operation on 2 databases using the following three commands:
-- CREATE TABLE IF NOT EXISTS `sampleA`.`customers` (
--   `id` int NOT NULL AUTO_INCREMENT,
--   `customerID` int NOT NULL,
--   `isFulltimeEmployee` tinyint(1),
--   `isLead` tinyint(1),
--   `isVIP` tinyint(1)
-- ) ENGINE=InnoDB;
-- INSERT INTO `sampleA`.`customers`
--   (`customerID`, `isFulltimeEmployee`, `isLead`, `isVIP`)
--   SELECT customerID, "false", "false", "false" FROM sampleDB.customers;
-- SELECT * FROM customers;
-- CREATE TABLE IF NOT EXISTS `sampleB`.`customers` (
--   `id` int NOT NULL AUTO_INCREMENT,
--   `customerID` int NOT NULL,
--   `isFulltimeEmployee` tinyint(1),
--  
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `sampleDB`.`employees`;
CREATE TABLE IF NOT EXISTS `sampleDB`.`employees` (
  `id` int NOT NULL AUTO_INCREMENT,
  `name` varchar(25) NOT NULL,
  `emailID` varchar(30) NULL,
  `employeeID` int,
  `title` varchar(25),
  `active` tinyint(1) DEFAULT 1,
  `isAdmin` tinyint(1),
  PRIMARY KEY (`id`),
  UNIQUE KEY `employees_employeeID` (`employeeID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
-- Here comes the important difference
# Dropping a column
ALTER TABLE `sampleDB`.`customers` DROP COLUMN isFullTimeEmployee;
# Dropping a table
DROP TABLE IF EXISTS `salesperson`;
CREATE TABLE `salesperson` (
  `personID` int NOT NULL AUTO_INCREMENT,
  `firstName` varchar(50) NOT NULL,
  `lastName` varchar(20) NOT NULL,
  `addressLine1` varchar(50) NULL DEFAULT NULL,
  `addressLine2` varchar(50),
  `city` varchar(20) NOT NULL,
  `state` varchar(5) NULL DEFAULT NULL,
  `country` varchar(50) NULL DEFAULT NULL,
  `postalCode` tinyint(1) NULL DEFAULT NULL,
  `emailAddress` varchar(50) NOT NULL,
  `phone` char(11) NULL DEFAULT NULL,
  PRIMARY KEY (`personID`),
  UNIQUE KEY `salesperson_emailID` (`emailAddress`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
 

# Add a column
ALTER TABLE `sampleDB`.`customers` ADD `companyName` varchar(50) DEFAULT NULL;
# Drop indexes
DROP INDEX IF EXISTS `customers_isFullTimeEmployee_idx`;
DROP INDEX IF EXISTS `customers_isLead_idx`;
DROP INDEX IF EXISTS `customers_isVIP_idx`;
# Create a unique index
CREATE UNIQUE INDEX `customers_isFullTimeEmployee_idx` ON `sampleDB`.`customers` (`isFullTimeEmployee`, `isLead`, `isVIP`);
# Create
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO `customers` (`id`, `customerID`, `firstName`, `lastName`, `isFullTimeEmployee`, `isLead`, `isVIP`)
VALUES (115, 125, 'Elaine', 'Munoz', 1, 1, 0);
INSERT INTO `customers` (`id`, `customerID`, `firstName`, `lastName`, `isFullTimeEmployee`, `isLead`, `isVIP`)
VALUES (445, 567, 'Amy', 'Crowe', 1, 1, 0);
INSERT INTO `customers` (`id`, `customerID`, `firstName`, `lastName`, `isFullTimeEmployee`, `isLead`, `isVIP`)
VALUES (345, 198, 'Peter', 'Park', 0, 0, 1);
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `sampleDB`.`orders`;
CREATE TABLE IF NOT EXISTS `sampleDB`.`orders` (
  `id` int NOT NULL AUTO_INCREMENT,
  `orderID` int NOT NULL,
  `customerID` int NOT NULL,
  `employeeID` int,
  `orderDate` date NOT NULL,
  `orderTotal` decimal(10, 2) DEFAULT NULL,
  `orderQty` int NOT NULL,
  `orderStatus` varchar(20) default NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `customers_customerID` (`customerID`),
  FOREIGN KEY (`customerID`) REFERENCES `customers` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO `sampleDB`.`customers` (`id`, `customerID`, `firstName`, `lastName`, `isFullTimeEmployee`, `isLead`, `isVIP`);
INSERT INTO `sampleDB`.`customers` (`id`, `customerID`, `firstName`, `lastName`, `isFullTimeEmployee`, `isLead`, `isVIP`);
INSERT INTO `sampleDB`.`customers` (`id`, `customerID`, `firstName`, `lastName`, `isFullTimeEmployee`, `isLead`, `isVIP`);
CREATE DATABASE IF
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `sampleDB`.`customers`;
CREATE TABLE IF NOT EXISTS `sampleDB`.`customers` (
  `id` int NOT NULL AUTO_INCREMENT,
  `customerID` int NOT NULL,
  `firstName` varchar(20) NOT NULL,
  `lastName` varchar(25) NOT NULL,
  `isFullTimeEmployee` tinyint(1) NOT NULL,
  `isLead` tinyint(1),
  `isVIP` tinyint(1) NOT NULL,
  `age` tinyint(1),
  PRIMARY KEY (`id`),
  UNIQUE KEY `customers_customerID` (`customerID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
```

![](../../.gitbook/assets/create_database_using_sql.png)


[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS customers;
CREATE TABLE IF NOT EXISTS customers (
    id int NOT NULL AUTO_INCREMENT,
    customer_id int NOT NULL DEFAULT 0,
    customer_fname varchar(50) charset utf8, 
    customer_lname varchar(50) charset utf8,
    is_fulltime_employee tinyint(1) NOT NULL DEFAULT 0,
    is_lead tinyint(1),
    is_vip tinyint(1) NOT NULL DEFAULT 0,
    PRIMARY KEY (id),
    UNIQUE KEY customer_id (customer_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `sampleDB`.`employees`;
CREATE TABLE IF NOT EXISTS `sampleDB`.`employees` (
  `id` int NOT NULL AUTO_INCREMENT,
  `employeeID` int NOT NULL,
  `firstName` varchar(20) NOT NULL,
  `lastName` varchar(25) NOT NULL,
  `isFullTimeEmployee` tinyint(1) NOT NULL,
  `isLead` tinyint(1),
  `managerID` int,
  `departmentID` int DEFAULT '0',
  PRIMARY KEY (`id`),
  UNIQUE KEY `employees_employeeID` (`employeeID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
-- Please add a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees;
CREATE TABLE IF NOT EXISTS employees (
    id int NOT NULL AUTO_INCREMENT,
    employee_id int NOT NULL DEFAULT 0,
    employee_fname varchar(50) charset utf8, 
    employee_lname varchar(50) charset utf8,
    is_fulltime_employee tinyint(1) NOT NULL DEFAULT 0,
    is_lead tinyint(1),
    manager_id int,
    department_id int DEFAULT '0',
    PRIMARY KEY (id),
    UNIQUE KEY employee_id (employee_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
-- Drop all tables created
DROP TABLE IF EXISTS `sampleDB`.`employees`;
DROP TABLE IF EXISTS `sampleDB`.`customers`;
 
DROP DATABASE IF EXISTS `sampleDB`;
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS customers;
CREATE TABLE IF NOT EXISTS customers (
    id int NOT NULL AUTO_INCREMENT,
    customer_id int NOT NULL DEFAULT 0,
    customer_fname varchar(50) charset utf8, 
    customer_lname varchar(50) charset utf8,
    is_fulltime_employee tinyint(1) NOT NULL DEFAULT 0,
    is_lead tinyint(1),
    is_vip tinyint(1) NOT NULL DEFAULT 0,
    PRIMARY KEY (id),
    UNIQUE KEY customer_id (customer_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
DROP TABLE IF EXISTS `sampleDB`.`employees`;
CREATE TABLE IF NOT EXISTS `sampleDB`.`employees` (
  `id` int NOT NULL AUTO_INCREMENT,
  `employeeID` int NOT NULL,
  `firstName` varchar(20) NOT NULL,
  `lastName` varchar(25) NOT NULL,
  `isFullTimeEmployee` tinyint(1) NOT NULL,
  `isLead` tinyint(1),
  `managerID` int,
  `departmentID` int DEFAULT '0',
  PRIMARY KEY (`id`),
  UNIQUE KEY `employees_employeeID` (`employeeID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
-- Please add a semantically equivalent program to the previous generation
DROP TABLE IF EXISTS employees;
CREATE TABLE IF NOT EXISTS employees (
    id int NOT NULL AUTO_INCREMENT,
    employee_id int NOT NULL DEFAULT 0,
    employee_fname varchar(50) charset utf8, 
    employee_lname varchar(50) charset utf8,
    is_fulltime_employee tinyint(1) NOT NULL DEFAULT 0,
    is_lead tinyint(1),
    manager_id int,
    department_id int DEFAULT '0',
    PRIMARY KEY (id),
    UNIQUE KEY employee_id (employee_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
-- Drop all tables created
DROP TABLE IF EXISTS `sampleDB`.`employees`;
DROP TABLE IF EXISTS `sampleDB`.`customers`;
DROP DATABASE IF EXISTS `sampleDB`;
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS customers;
CREATE TABLE IF NOT EXISTS customers 
 (
    id bigint(20) unsigned NOT NULL AUTO_INCREMENT,
    customer_id bigint(20) NOT NULL DEFAULT 0,
    customer_fname varchar(50) charset utf8, 
    customer_lname varchar(50) charset utf8,
    is_fulltime_employee tinyint(1) NOT NULL DEFAULT 0,
    is_lead tinyint(1),
    is_vip tinyint(1) NOT NULL DEFAULT 0,
    PRIMARY KEY (id),
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
DROP TABLE IF EXISTS `sampleDB`.`employees`;
CREATE TABLE IF NOT EXISTS `sampleDB`.`employees` 
    (
    `id` int NOT NULL AUTO_INCREMENT,
    `
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS customers (
    id int NOT NULL AUTO_INCREMENT,
    customer_id int NOT NULL DEFAULT 0,
    customer_firstname varchar(50) charset utf8, 
    customer_lastname varchar(50) charset utf8,
    is_fulltime_employee tinyint(1) NOT NULL DEFAULT 0,
    is_lead tinyint(1),
    is_vip tinyint(1) NOT NULL DEFAULT 0,
    PRIMARY KEY (id),
    UNIQUE KEY customer_id (customer_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
SELECT id FROM customers;
DROP TABLE IF EXISTS employees;
CREATE TABLE IF NOT EXISTS employees (
    id int NOT NULL AUTO_INCREMENT,
    'employeeID' int NOT NULL,
    'firstName' varchar
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS customers;
CREATE TABLE IF NOT EXISTS customers (
    id int NOT NULL AUTO_INCREMENT,
    customer_id int NOT NULL DEFAULT 0,
    customer_fname varchar(50) charset utf8, 
    customer_lname varchar(50) characte set utf8,
    is_fulltime_employee tinyint(1) NOT NULL DEFAULT 0,
    is_lead tinyint(1),
    is_vip tinyint(1) NOT NULL DEFAULT 0,
    PRIMARY KEY (id),
    UNIQUE KEY customer_id (customer_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
DROP TABLE IF EXISTS `sampleDB`.`employees`;
CREATE TABLE IF NOT EXISTS `sampleDB`.`employees` (
  `id` int NOT NULL AUTO_INCREMENT
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `sampleDB`.`employees`;
CREATE TABLE `sampleDB`.`employees` (
    `id` int NOT NULL AUTO_INCREMENT,
    `employeeID` int NOT NULL,
    `firstName` varchar(20) NOT NULL,
    `lastName` varchar(25) NOT NULL,
    `isFullTimeEmployee` tinyint(1) NOT NULL,
    `isLead` tinyint(1),
    `managerID` int,
    `departmentID` int DEFAULT '0',
    PRIMARY KEY (`id`),
    UNIQUE KEY `employees_employeeID` (`employeeID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;


/*
 * Note: A database is created, dropped and an empty database is created for you using dropDatabase.
 * You can then
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS customers;
CREATE TABLE IF NOT EXISTS customers (
    id int NOT NULL AUTO_INCREMENT,
    customer_id int NOT NULL DEFAULT 0,
    customer_fname varchar(50) charset utf8, 
    customer_lname varchar(50) charset utf8,
    is_fulltime_employee tinyint(1) NOT NULL DEFAULT 0,
    is_lead tinyint(1),
    is_vip tinyint(1) NOT NULL DEFAULT 0,
    PRIMARY KEY (id),
    UNIQUE KEY customer_id (customer_id)
) ENGINE=MyISAM DEFAULT CHARSET=utf8;
DROP TABLE IF EXISTS `sampleDB`.`employees`;
CREATE TABLE IF NOT EXISTS `sampleDB`.`employees` (
  `id` int NOT NULL AUTO_INCREMENT,
 
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `sampleDB`.`employees`;
CREATE TABLE `sampleDB`.`employees` (
    `id` int NOT NULL AUTO_INCREMENT,
    `employeeID` int NOT NULL,
    `firstName` varchar(20) NOT NULL,
    `lastName` varchar(25) NOT NULL,
    `isFullTimeEmployee` tinyint(1) NOT NULL,
    `isLead` tinyint(1),
    `managerID` int,
    `departmentID` int DEFAULT '0',
    PRIMARY KEY (`id`),
    UNIQUE KEY `employees_employeeID` (`employeeID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*
 * Note: A database is created, dropped and an empty database is created for you using dropDatabase.
 * You can then
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `sampleDB`.`employees`;
CREATE TABLE `sampleDB`.`employees` (
    `id` int NOT NULL AUTO_INCREMENT,
    `employeeID` int NOT NULL,
    `firstName` varchar(20) NOT NULL,
    `lastName` varchar(25) NOT NULL,
    `isFullTimeEmployee` tinyint(1) NOT NULL,
    `isLead` tinyint(1),
    `managerID` int,
    `departmentID` int DEFAULT '0',
    PRIMARY KEY (`id`),
    UNIQUE KEY `employees_employeeID` (`employeeID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;


CREATE TABLE `sampleDB`.`department` (
    `id` int NOT NULL,
    `name` varchar(30) NOT NULL,
    `description` text NOT NULL,
    PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
*/
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `sampleDB`.`employees`;
CREATE TABLE `sampleDB`.`employees` (
    `id` int NOT NULL AUTO_INCREMENT,
    `employeeID` int NOT NULL,
    `firstName` varchar(20) NOT NULL,
    `lastName` varchar(25) NOT NULL,
    `departmentID` int DEFAULT '0',
    `location` varchar(50) DEFAULT NULL,
    UNIQUE KEY `employees_employeeID` (`employeeID`)
) DEFAULT CHARSET=utf8;
-- Please create a mutated program that inserts few more rows into the employees table.
INSERT INTO sampleDB.employees (employeeID, firstName, lastName)
VALUES (600, 'Jane', 'Doe'),
(601, 'Jane', 'Doe'),
(602, 'Bob', 'Smith'),
(603, 'Bob', 'Smith'),
(604, 'Fred', 'Knight'),
(605, 'Marge', 'Beard'),
(606, 'Bill', 'Graham'),
(607, 'John', 'Doe').
*/
-- Please create a mutated program that performs a scan on the employee table based on the employee's last name. 
-- 40 rows will be returned. (Hint: a scan is an operation that scans all rows in the table.) Output the results in two separate columns.
SELECT * FROM sampleDB.employees WHERE lastName LIKE '%me%';
-- Please create a mutated program that performs a scan on the employee table based on the employee's last name
-- and orders them in reverse gender order. 40 rows will be returned. (Hint: use ORDER by)Output the results in two separate columns.
SELECT * FROM sampleDB.employees WHERE lastName LIKE '%me%';
-- Your program should accept one parameter: a name which will retrieve employees' first name which name starts with the first character of the given parameter and the suffix "s" that appears anywhere in the first name.
-- For example,
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
TRUNCATE `sampleDB`.`employees`;

DROP TABLE IF EXISTS `sampleDB`.`employees`;
-- Please create a program that creates a new employee through user input

-- Please create a system program that stores the empolyees who don't have a manager
-- Please use ALTER TABLE
 */
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `sampleDB`.`employees`;
CREATE TABLE `sampleDB`.`employees` (
    `eID` int NOT NULL AUTO_INCREMENT,
    `eFirstname` varchar(20) NOT NULL,
    `eLastname` varchar(25) NOT NULL,
    `emplEntimely` tinyint(1) NOT NULL,
    `isLead` tinyint(1),
    `ManagerID` int,
    `DepartmentID` int DEFAULT 0,
    `isFulltime` tinyint(1),
    PRIMARY KEY (`eID`),
    UNIQUE KEY `employees_employeeID` (`employeeID`)
) ENGINE=InnoDB AUTO_INCREMENT=22 DEFAULT CHARSET=utf8;

#
USE sampleDB;
USE sampleDB;
SHOW TABLES;
DESCRIBE TABLE employees;
#
#
SHOW TABLES;
#
#
DESCRIBE TABLE employees;

#
#
DROP DATABASE IF EXISTS sampleDB;
```

## Running MySQL on your computer
To run MySQL, you can either start the MySQL Daemon service, or use the MySQL command line tool to run your queries. For either of the approaches, start by stopping the MySQL service as shown next:

```
systemctl stop mysql
```

After stopping the service, start the MySQL service as shown below:
    
```
systemctl start mysql
```

For testing purposes, you can also try the MySQL Workbench instead of MySQL CLI. For installation, go to the official [MySQL Workbench website](https: 

Now, you can try the following queries:
1. View the created DB:
```
SHOW DATABASES;
```
2. View the tables in the previously created DB:
```
SHOW TABLES;
```
3. View a specific table:
```
DESC TABLE employees;
```
4. Show only the fields of the selected table:
```
SELECT * FROM employees LIMIT 100;
```
5. Add new information to the database
```sql
INSERT INTO
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `sampleDB`.`employees`;
CREATE TABLE `sampleDB`.`employees` (
	`id` int NOT NULL AUTO_INCREMENT,
	`employeeID` int NOT NULL,
	`firstName` varchar(20) NOT NULL,
	`lastName` varchar(25) NOT NULL,
	`isFullTimeEmployee` tinyint(1) NOT NULL,
	`isLead` tinyint(1),
	`managerID` int,
	`departmentID` int DEFAULT '0',
	PRIMARY KEY (`id`),
	UNIQUE KEY `employees_employeeID` (`employeeID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `sampleDB`.`employees`;
CREATE TABLE `sampleDB`.`employees` (
	`id` int NOT NULL AUTO_INCREMENT,
	`employeeID` int NOT NULL,
	`firstName` varchar(20) NOT NULL,
	`lastName` varchar(25) NOT NULL,
	`isFullTimeEmployee` tinyint(1) NOT NULL,
	`isLead` tinyint(1),
	`managerID` int,
	`departmentID` int DEFAULT '0',
	PRIMARY KEY (`id`),
	UNIQUE KEY `employees_employeeID` (`employeeID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- SELECT * from employees ORDER BY employeeID ASC;
UPDATE employees SET employeeID = employeeID + 1 WHERE employeeID = 2;
DELETE FROM employees WHERE employeeID > 10;
UPDATE employees SET isFullTimeEmployee = '1' WHERE employeeID = 3;
INSERT INTO employees (`employeeID`, `firstName`, `lastName`, `isFullTimeEmployee`, `isLead`, `managerID`, `departmentID`) 
VALUES (9, 'Bob', 'Bobber', 1, 0, 3, 0);
INSERT INTO employees (`employeeID`, `firstName`, `lastName`, `isFullTimeEmployee`, `isLead`, `managerID`, `departmentID`) 
VALUES (5, 'Bob', 'Bobber', 1, 0, 9, 0);
INSERT INTO employees (`employeeID`, `firstName`, `lastName`, `isFullTimeEmployee`, `isLead`, `managerID`, `departmentID`) 
VALUES (8, 'Bob', 'Bobber', 1, 0, 8, 0);
INSERT INTO employees (`employeeID`, `firstName`, `lastName`, `isFullTimeEmployee`, `isLead`, `managerID`, `departmentID`) 
VALUES (7, 'Bob', 'Bobber', 1, 0, null, 0);
INSERT INTO employees (`employeeID`, `firstName`, `lastName`, `isFullTimeEmployee`, `isLead`, `managerID`, `departmentID`) 
VALUES (6, 'Bob', 'Bobber', 1, 0, null, 0);
INSERT INTO employees (`employeeID`, `firstName`, `lastName`, `isFullTimeEmployee`, `isLead`, `managerID`, `departmentID`) 
VALUES (4, 'John', 'Smith', 1, 1, null, 0);
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `sampleDB`.`employees`;
CREATE TABLE `sampleDB`.`employees` (
	`id` int NOT NULL AUTO_INCREMENT,
	`employeeID` int NOT NULL,
	`firstName` varchar(20) NOT NULL,
	`lastName` varchar(25) NOT NULL,
	`isFullTimeEmployee` tinyint(1) NOT NULL,
	`isLead` tinyint(1),
	`managerID` int,
	`departmentID` int DEFAULT '0',
	PRIMARY KEY (`id`),
	UNIQUE KEY `employees_employeeID` (`employeeID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
-- Please drop the original table. It should be empty.
DROP TABLE `sampleDB`.`employees`;
USE sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
ALTER TABLE `employees` MODIFY `managerID` int(11) NOT NULL DEFAULT '2';
ALTER TABLE `employees` MODIFY `departmentID` int(11) DEFAULT '1';
DROP TABLE IF EXISTS `sampleDB`.`employees`;
CREATE TABLE `sampleDB`.`employees` (
	`id` int NOT NULL AUTO_INCREMENT,
	`employeeID` int NOT NULL,
	`firstName` varchar(20) NOT NULL,
	`lastName` varchar(25) NOT NULL,
	`isFullTimeEmployee` tinyint(1) NOT NULL,
	`isLead` tinyint(1),
	`managerID` int,
	`departmentID` int DEFAULT '0',
	PRIMARY KEY (`id`),
	UNIQUE KEY `employees_employeeID` (`employeeID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

\l

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
ALTER TABLE `sampleDB`.`employees` MODIFY COLUMN `lastName` varchar(25) CHARSET=utf8 COLLATE=utf8_general_ci DEFAULT 'Taylor';
SELECT * FROM `sampleDB`.`employees`;
-- Please create a much bigger mutated program that changes the schema of the MySQL database.
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `sampleDB`.`employees`;
CREATE TABLE `sampleDB`.`employees` (
	`id` int NOT NULL AUTO_INCREMENT,
	`employeeID` int NOT NULL,
	`firstName` varchar(20) NOT NULL,
	`lastName` varchar(25) NOT NULL,
	`isFullTimeEmployee` tinyint(1) NOT NULL,
	`isLead` tinyint(1)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

 
UPDATE `sampleDB`.`employees` SET employeeID = employeeID * 5 WHERE `id == 0`;

DROP TABLE IF EXISTS `sampleDB`.`employees`;
CREATE TABLE `sampleDB`.`employees` (
	`id` int NOT NULL AUTO_INCREMENT,
	`employee` int,
	`firstName` varchar(20),
	`lastName` varchar(25)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

SELECT employeeID FROM `sampleDB`.`employees`;
DELETE FROM `sampleDB`.`employees` WHERE id = 0;
DELETE FROM `sampleDB`.`employees` WHERE `employee = 0` LIMIT 2;
DROP TABLE IF EXISTS `sampleDB`.`employees`;

CREATE TABLE `sampleDB`.`employees` (
	`id` int NOT NULL AUTO_INCREMENT,
	`employeeID` int,
	`firstName` varchar(20),
	`lastName` varchar(25)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

INSERT INTO `sampleDB`.`employees` (employeeID, lastName, firstName) VALUES ('1', 'Bob', 'Cooke');
INSERT INTO `sampleDB`.`employees` (employeeID, lastName, firstName) VALUES ('1000', 'Sherman', 'Sherman');
SELECT id, lastName, firstName FROM employees;

UPDATE `sampleDB`.`employees` SET fullName = 'Bob-Sherman', isLead = 1 WHERE id = 0;
SELECT *
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `sampleDB`.`employees`;
CREATE TABLE `sampleDB`.`employees` (
	`id` int NOT NULL AUTO_INCREMENT,
	`employeeID` int NOT NULL,
	`firstName` varchar(20) NOT NULL,
	`lastName` varchar(25) NOT NULL,
	`isFullTimeEmployee` tinyint(1) NOT NULL,
	`isLead` tinyint(1),
	`managerID` int,
	`departmentID` int DEFAULT '0',
	PRIMARY KEY (`id`),
	UNIQUE KEY `employees_employeeID` (`employeeID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
-- Please drop the original table. It should be empty.
DROP TABLE `sampleDB`.`employees`;
USE sampleDB;
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `sampleDB`.`employees`;
CREATE TABLE `sampleDB`.`employees` (
	`id` int NOT NULL AUTO_INCREMENT,
	`employeeID` int NOT NULL,
	`firstName` varchar(20) NOT NULL,
	`lastName` varchar(25) NOT NULL,
	`isFullTimeEmployee` tinyint(1) NOT NULL,
	`isLead` tinyint(1),
	PRIMARY KEY (`id`),
	UNIQUE KEY `employees_employeeID` (`employeeID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
DROP TABLE `sampleDB`.`employees`;
USE sampleDB;
DROP DATABASE sampleDB;


[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `sampleDB`.`employees`;
CREATE TABLE `sampleDB`.`employees` (
	`id` int NOT NULL AUTO_INCREMENT,
	`employeeID` int NOT NULL,
	`firstName` varchar(20) NOT NULL,
	`lastName` varchar(25) NOT NULL,
	`isFullTimeEmployee` tinyint(1) NOT NULL,
	`isLead` tinyint(1),
	`managerID` int,
	`departmentID` int DEFAULT '0',
	PRIMARY KEY (`id`),
	UNIQUE KEY `employees_employeeID` (`employeeID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
DROP DATABASE IF EXISTS sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `sampleDB`.`employees`;
CREATE TABLE `sampleDB`.`employees` (
	`id` int NOT NULL AUTO_INCREMENT,
	`employeeID` int NOT NULL,
	`employeeName` varchar(20) NOT NULL,
	`employeeDepartment` varchar(50) DEFAULT NULL,
	`hireDate` date,
	`managerID` int,
	`salary` decimal(10,2),
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
-- Please drop the original table. It should be empty.
DROP TABLE `sampleDB`.`employees`;
USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `sampleDB`.`departments`;
CREATE TABLE `sampleDB`.`departments` (
	`id` int NOT NULL AUTO_INCREMENT,
	`departmentName` varchar(30) NOT NULL,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
-- Please drop the original table. It should be empty.
DROP TABLE `sampleDB`.`departments`;
USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `sampleDB`.`accounts`;
CREATE TABLE `sampleDB`.`accounts` (
	`id` int NOT NULL AUTO_INCREMENT,
	`accountID` int NOT NULL,
	`amount` varchar(25) NOT NULL,
	`accountType` varchar(10) NOT NULL,
	`dateAccountCreated` date DEFAULT NULL,
	`customerAddress` varchar(200) NOT NULL,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;<commit_msg>update description.md<commit_after># MySQL
MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder <NAME>'s daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl, PHP, Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `sampleDB`.`departments`;
CREATE TABLE `sampleDB`.`departments` (
	`id` int NOT NULL AUTO_INCREMENT,
	`departmentName` varchar(30) NOT NULL,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
-- Please drop the original table. It should be empty.
DROP TABLE `sampleDB`.`departments`;
USE sampleDB;
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `sampleDB`.`roles`;
CREATE TABLE `sampleDB`.`roles` (
	`id` int NOT NULL AUTO_INCREMENT,
	`roleName` varchar(30) NOT NULL,
	`departmentId` int NOT NULL,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=178 DEFAULT CHARSET=utf8;
INSERT INTO `sampleDB`.`roles` (`roleName`, `departmentId`) VALUES ('admin', 1),('programmer', 1),('system analyst', 1),('manager', 10),('manager', 2),('intern', 20),('intern', 40),('intern', 80),('manager', 90),('programmer', 100),('manager', 110),('intern', 120),('intern', 140),('intern', 160),('manager', 170);
DROP TABLE `sampleDB`.`roles`;
USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `sampleDB`.`departments`;
CREATE TABLE `sampleDB`.`departments` (
	`id` int NOT NULL AUTO_INCREMENT,
	`departmentName` varichar(30) NOT NULL,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- Please drop the original table. It should be empty.
DROP TABLE `sampleDB`.`departments`;

-- Please drop the original database.
DROP DATABASE `sampleDB`;

SHOW TABLE STATUS FROM `sampleDB`;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
select count(*) AS n from departments;
select count(*) over (PARTITION BY departmentName ORDER BY departmentName) AS n from departments;
select departmentName,departmentId,count(employeeId) AS n
from employees
where departmentId in (
	-- Please modify the below lines
	select id from departments
		WHERE departmentName = 'Sales'
)
group by departmentName
order by N desc;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

DROP TABLE IF EXISTS `sampleDB`.`departments`;
CREATE TABLE `sampleDB`.`departments` (
	`id` int NOT NULL AUTO_INCREMENT,
	`departmentName` varchar(30) NOT NULL,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
-- Please drop the original table. It should be empty.
DROP TABLE `sampleDB`.`departments`;
USE sampleDB;
-- Please create a simple SELECT... FROM query which uses a JOIN. Be sure to do the join in the correct order.
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

DROP TABLE IF EXISTS `sampleDB`.`departments`;
CREATE TABLE `sampleDB`.`departments` (
	`id` int NOT NULL AUTO_INCREMENT,
	`departmentName` varchar(30) NOT NULL,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

INSERT INTO `sampleDB`.`departments` (`id`, departmentName)
VALUES (-1, 'Not assigned to any department'),
	   (1, 'IT'),
	   (2, 'Accounting'),
	   (3, 'Operations'),
	   (4, 'Admin');

SELECT `departmentName` FROM `sampleDB`.`departments`;

-- Please create 9 simple queries and perform the following operations:
-- 1. Create a view `departmentName` that select all records from Department that do not belong to department 3 or 4. 
-- 2. Create a view `departmentID` which is equal to a column with the 
-- view departmentName.
-- 3. Create a view `departmentNameAndID` which is similar to the previous view, the difference being that it is not in the database anymore. Only the records from departmentID would be considered.
-- 4. Create a view `departmentNameAndID2` which is similar to the previous form but it also includes the name of the department into the record (SELECT `departmentName`, `departmentName AS `departmentNameAndID2Name` FROM `sampleDB`.`departments`).
-- 5. Execute the query 4 twice and create a report which shows the two sets of results from the first query where ID is not 3 and ID is not 4 as well as the result from the second query.
-- 6. Execute the query 5 twice and create a report which
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `sampleDB`.`departments`;
CREATE TABLE `sampleDB`.`departments` (
	`id` int NOT NULL,
	`departmentName` varchar(30) DEFAULT NULL,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

DROP TABLE `sampleDB`.`departments`;
USE sampleDB;
DROP TABLE `sampleDB`.`departments`;
CREATE TABLE `sampleDB`.`departments` (
	`id` int NOT NULL,
	`departmentName` text,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
-- Please drop the original table. It should be empty.
DROP TABLE `sampleDB`.`departments`;
USE sampleDB;
DROP TABLE `sampleDB`.`departments`;
CREATE TABLE `sampleDB`.`departments` (
	`id` int NOT NULL,
	`departmentName` VARCHAR(30) DEFAULT NULL,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
 
DROP TABLE `sampleDB`.`departments`;

USE sampleDB;
DROP TABLE IF EXISTS `sampleDB`.`employees`;
CREATE TABLE `sampleDB`.`employees` (
	`id` int NOT NULL AUTO_INCREMENT,
	`employeeId` int(11) DEFAULT NULL,
	`firstName` varchar(30) NOT NULL,
	`lastName` varchar(30) NOT NULL,
	`email` varchar(30) DEFAULT NULL,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
-- Please drop the original table. It should be empty.
DROP TABLE IF EXISTS `sampleDB`.`employees`;
-- Create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created.

CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `sampleDB`.`departments`;
CREATE TABLE `sampleDB`.`departments` (
	`id` int NOT NULL AUTO_INCREMENT,
	`departmentName` VARCHAR(30) DEFAULT NULL,
	PRIMARY KEY (`id`)
) ENGINE
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `sampleDB`.`departments`;
CREATE TABLE `sampleDB`.`departments` (
	`id` int NOT NULL AUTO_INCREMENT,
	`departmentName` varchar(30) NOT NULL,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
-- Please drop the original table. It should be empty.
DROP TABLE `sampleDB`.`departments`;
USE sampleDB;
-- Please create a simple SELECT... FROM query which uses a JOIN. Be sure to do the join in the correct order.
DROP TABLE IF EXISTS `sampleDB`.`departments`;
CREATE TABLE `sampleDB`.`departments` (
	`id` int NOT NULL AUTO_INCREMENT,
	`departmentName` varchar(30) NOT NULL,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
INSERT INTO `sampleDB`.`departments` (`id`, departmentName)
VALUES (-1, 'Not assigned to any department'),
	   (1, 'IT'),
	   (2, 'Accounting'),
	   (3, 'Operations'),
	   (4, 'Admin');
SELECT `departmentName` FROM `sampleDB`.`departments`;
-- Please create 9 simple queries and perform the following operations:
-- 1. Create a view `departmentName` that select all records from Department that do not belong to department 3 or 4. 
-- 2. Create a view `departmentID` which is equal to a column with the 
-- view departmentName.
-- 3. Create a view `departmentNameAndID` which is similar to the previous view, the difference being that it is not in the database anymore. Only the records from departmentID would be considered.
-- 4. Create a view `departmentNameAndID2` which is similar to the previous form but it also includes the name of the department into the record (SELECT `departmentName`, `departmentName AS `departmentNameAndID2Name` FROM `sampleDB`.`departments`).
-- 5. Execute the query 4 twice and create a report which shows the two sets of results from the first query where ID is not 3 and ID is not 4 as well as the result from the second query.
-- 6. Execute the query 5 twice and create a report which
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE `sampleDB`.`departments` (
  `id` int NOT NULL AUTO_INCREMENT,
  `departmentName` varchar(30) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
INSERT INTO `sampleDB`.`departments` (`id`, departmentName)
VALUES (-1, 'Not assigned to any department'),
       (1, 'IT'),
       (3, 'Operations'),
       (4, 'Admin');
DROP TABLE `sampleDB`.`departments`;
CREATE
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `sampleDB`.`departments`;
CREATE TABLE `sampleDB`.`departments` (
	`id` int NOT NULL AUTO_INCREMENT,
	`departmentName` varchar(30) NOT NULL,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/* For this exercise, you need to update all the records in sampleDB. To do so, you will need to execute 1-4 multiple times. The goal is for the tables to have the same number of
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `sampleDB`.`departments`;
CREATE TABLE `sampleDB`.`departments` (
	`id` int NOT NULL AUTO_INCREMENT,
	`departmentName` varchar(30) NOT NULL,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
-- Please drop the original table. It should be empty.
DROP TABLE `sampleDB`.`departments`;
USE sampleDB;
DROP TABLE IF EXISTS `sampleDB`.`department_projects`;
CREATE TABLE `sample
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `sampleDB`.`departments`;
CREATE TABLE `sampleDB`.`departments` (
	`id` int NOT NULL AUTO_INCREMENT,
	`departmentName` varchar(30) NOT NULL,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
INSERT INTO `sampleDB`.`departments` (`id`, departmentName)
VALUES (-1, 'Not assigned to any department'),
	   (1, 'IT'),
	   (2, 'Accounting'),
	   (3,
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE department (
id INT NOT NULL AUTO_INCREMENT,
departmentName VARCHAR(30) NOT NULL,
PRIMARY KEY (id)
)ENGINE=InnoDB DEFAULT CHARSET=utf8;
INSERT INTO department (id, departmentName)
VALUES (-1, 'IT');
INSERT INTO department (id, departmentName)
VALUES (1, 'Accounting');
INSERT INTO department (id, departmentName)
VALUES (2, 'Operations');
INSERT INTO department (id, departmentName)
VALUES (3, 'Admin
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `sampleDB`.`departments`;
CREATE TABLE `sampleDB`.`departments` (
	`id` int NOT NULL AUTO_INCREMENT,
	`departmentName` varchar(30) NOT NULL,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/* For this exercise, you need to update all the records in sampleDB. To do so, you will need to execute 1-4 multiple times. The goal is for the tables to have the same number of
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- Create your tables as instructed
CREATE TABLE employee (
	id int NOT NULL AUTO_INCREMENT,
	name varchar(20) NOT NULL,
	departmentId int NOT NULL,
	PRIMARY KEY (`id`),
    FOREIGN KEY (`departmentId`) REFERENCES (id)
), role (
    id int NOT NULL AUTO_INCREMENT,
    title varchar(30) NOT NULL,
    salary decimal NOT NULL,
    departmentId int NOT NULL,
    PRIMARY KEY (id),
    FOREIGN KEY (`departmentId`) REFERENCES (id)
);
select * from role;
select * from employee;
 
CREATE TABLE IF NOT EXISTS employee_department(
id int NOT NULL AUTO_INCREMENT,
empid int,
deptid int,
PRIMARY KEY (id),
FOREIGN KEY (empid) REFERENCES (id),
FOREIGN KEY (deptid) REFERENCES (id));
DROP TABLE IF EXISTS emps;
CREATE TABLE IF NOT EXISTS emps (id int NOT NULL AUTO_INCREMENT, fname varchar(30), lname varchar(30), mgrId int, deptId int, PRIMARY KEY (id));
COPY emps (id, fname, lname, mgrId, deptId) FROM '/tmp/emps';
 
SELECT * FROM emps WHERE mgrId = 5;  

 
SELECT e.id, d.id as departmentId, d.departmentName FROM emps e LEFT JOIN employee_department ed ON e.id = empId LEFT JOIN departments d ON depid = departmentid WHERE e.deptId = d.id;
DROP TABLE IF EXISTS salaries;
CREATE TABLE
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
 

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
COPY departmentNames FROM 'departmentData.csv' DELIMITER ';' CSV HEADER;
DROP TABLE IF EXISTS `sampleDB`.`departments`;
CREATE TABLE `sampleDB`.`departments` (
	`id` int NOT NULL AUTO_INCREMENT,
	`name` varchar(30) NOT NULL,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
INSERT INTO sampleDB.departments (name) VALUES ('Admin');
INSERT INTO sampleDB.departments (name) VALUES ('Finance');
INSERT INTO sampleDB.departments (name) VALUES ('Human Resources');
INSERT INTO sampleDB.departments (name) VALUES ('Marketing');

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `sampleDB`.`emp`;
DROP INDEX IF EXISTS `sampleDB`.`emp_deptid_idx`;
DROP TABLE IF EXISTS `sampleDB`.`emp_dept`;
CREATE TABLE `sampleDB`.`emp` (
	`empNo` int(5) NOT NULL,
	`first_name` varchar(50) DEFAULT NULL,
	`last_name` varchar(50) DEFAULT NULL,
	`gender` enum('M','F') DEFAULT 'M',
	`dept_id` int(5) DEFAULT NULL,
	PRIMARY KEY (`empno`),
	KEY `sampleDB`.`employs_to_emp_dept` (`dept_id`),
	KEY `sampleDB`.`employs_to_emp_dept_idx` (`dept_id`,`empno`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
DROP TABLE IF EXISTS `sampleDB`.`dept`;
DROP TABLE IF EXISTS `sampleDB`.`users`;
DROP INDEX IF EXISTS `sampleDB`.`users_name_idx`;
DROP TABLE IF EXISTS `sampleDB`.`users`;
DROP TABLE IF EXISTS `sampleDB`.`students`;
DROP INDEX IF EXISTS `sampleDB`.`students_name_idx`;
DROP TABLE IF EXISTS `sampleDB`.`students`;
DROP FUNCTION IF EXISTS `user_exists`;
DELIMITER;
#
# INSERT DATA TESTS
#
#
#
USE `users`;
#
# This is insert statement which will insert all records from emp table into users table.
#
#
INSERT INTO `sampleDB`.`users` (`id`, `userID`, `username`, `password`) VALUES
(1, '001', 'admin', <PASSWORD>$tPZ.2z/H1Y0u6o9t.l9tXecg4qH3y31kO8tTj3s7/iE.n6e9Qd4w'),
(2, '002', 'user', '$2y$10$v1.iU6t4o6x/2/q3o.9y0.vP34/tEHe4g9f1u1dK1O0r4i23p6mZm'),
(3, '003',
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SET NAMES EUC_CN;
SET FOREIGN_KEY_CHECKS = 0;
DROP TABLE IF EXISTS `sampleDB`.`cities`;
CREATE TABLE `sampleDB`.`cities` (
	`id` int NOT NULL AUTO_INCREMENT,
	`stateId` int NOT NULL,
	`name` varchar(30) NOT NULL,
	PRIMARY KEY (`id`),
	FOREIGN KEY (`stateId`) REFERENCES `sampleDB`.`states` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
SET FOREIGN_KEY_CHECKS = 1;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `sampleDB`.`departments`;
CREATE TABLE `sampleDB`.`departments` (
	`id` int NOT NULL AUTO_INCREMENT,
	`departmentName` varchar(30) NOT NULL,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/* For this exercise, you need to update all the records in sampleDB. To do so, you will need to execute 1-4 multiple times. The goal is for the tables to have the same number of
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `sampleDB`.`departments`;
CREATE TABLE `sampleDB`.`departments` (
	`id` int NOT NULL AUTO_INCREMENT,
	`name` varchar(30) NOT NULL,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

Create DATABASE IF NOT EXISTS `sampleDB`; USE `sampleDB`;
CREATE TABLE `departments` (
	`id` int NOT NULL AUTO_INCREMENT,
    `name` varchar(30) NOT NULL,
    PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8; */
 

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

GRANT ALL PRIVILEGES ON sampleDB.* TO 'root'@'%';*/


DROP DATABASE IF EXISTS sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `sampleDB`.`students` (
	`id` int NOT NULL AUTO_INCREMENT,
	`name` varchar(100) NOT NULL,
	`email` varchar(30) NOT NULL UNIQUE,
	`address` varchar(200) DEFAULT NULL,
	`status` char(1) DEFAULT NULL,
	`password` varchar(32),
	PRIMARY KEY (`id`)
);
INSERT INTO `sampleDB`.`students` (`id`, `name`, `email`, `address`, `status`, `password`)
VALUES (1, '<NAME>', '<EMAIL>', '7532 Camwell Court', 'M', '0123456789'),
		(2, '<NAME>', '<EMAIL>', 'North Goske St. 7600', 'M', 'A1B2C3'),
		(3, '<NAME>', '<EMAIL>', '359 Hutchinson Lane West', null, 'E1234567'),
		(4, '<NAME>', '<EMAIL>', '59460 Valley Floors', 'M', 'B1234568');
UPDATE `sampleDB`.`students` SET `email` = '<EMAIL>' WHERE `id` = 3;
DROP TABLE `sampleDB`.`students`;
DROP DATABASE IF EXISTS sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `sampleDB`.`employees`;
CREATE TABLE `sampleDB`.`employees` (
	`deptId` int NULL,
	`userName` varchar(15) NOT NULL,
	`password` varchar(100) NOT NULL,
	PRIMARY KEY (`userName`,`deptId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
DROP TABLE IF EXISTS `sampleDB`.`employee_dept`;
CREATE TABLE `sampleDB`.`employee_dept` (
	`employeeId` int NULL,
	`deptId` int NOT NULL,
	PRIMARY KEY (`employeeId`,`deptId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
INSERT INTO sampleDB.employee_dept (employeeId,deptId) VALUES(1,1),(2,1),(3,1),(4,1),(1,2),(2,2),(3,2),(4,2),(1,3),(2,3),(3,3), (4,3);
SELECT * FROM employees;
UPDATE employees SET password='<PASSWORD>' WHERE userName='admin';
SELECT * FROM employees;
UPDATE employees SET password='' WHERE userName='', deptId='', password='';
-- The SQL server must be restarted for your test to pass. The easiest way to do this is to open the
-- SQL Server Management Studio. It is the only database software available under Windows from the beginning.

-- We need to create a script to demonstrate how to manipulate the tables using a basic query. Your task is to write the
-- SQL query you need to perform in step 3.3.1 (3.4). Your task is also to update your previous query to demonstrate
-- how to select all employees who were awarded the "VP of Sales", "Program Manager", "Civil Engineer", or "Accountant" job titles. You want to use the
-- function "find" to perform this task. Your task is to create a version of your previous update where
-- all records are selected. Please be sure to create tables which reflect the roles of the above job titles.

-- UPDATE SQL
SELECT * FROM employees as e
JOIN employees as e1
ON e1.fname=e.fname
LEFT JOIN employees as e2 ON e2.lname=e.lname
JOIN departments as d
ON d.id=e.deptid

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `sampleDB`.`departments`;
CREATE TABLE `sampleDB`.`departments` (
	`department` varchar(30) NOT NULL,
	`employeesSum` int NOT NULL,
	PRIMARY KEY (`department`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
USE sampleDB;
INSERT INTO departments (department, employeesSum) INTO TABLE=records WHERE department = 'IT dept' AND employeesSum >= 1000;
SELECT COUNT(*) FROM departments;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `sampleDB`.`departments`;
CREATE TABLE `sampleDB`.`departments` (
	`id` int NOT NULL AUTO_INCREMENT,
	`departmentName` varchar(30) NOT NULL,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/* For this exercise, you need to update all the records in sampleDB. To do so, you will need to execute 1-4 multiple times. The goal is for the tables to have the same number of
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `sampleDB`.`departments`;
CREATE TABLE `sampleDB`.`departments` (
	`id` int(11) NOT NULL auto_increment,
	department_name varchar(30) NOT NULL,
	PRIMARY KEY (id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

SET FOREIGN_KEY_CHECKS = 1;
COMMIT;
*/

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `sampleDB`.`employees`;
CREATE TABLE `sampleDB`.`employees` (
	`id` int NOT NULL AUTO_INCREMENT,
	`employeeName` varchar(30) NOT NULL,
	`departmentName` varchar(20) NOT NULL,
	PRIMARY KEY (`id`),
	FOREIGN KEY (`departmentName`) REFERENCES `sampleDB`.`departments`(`departmentName`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
INSERT INTO `sampleDB`.`employees` (`id`, `employeeName`, `departmentName`) 
VALUES (1, 'Ashish', 'development'), (2, 'Deepak', 'development'), (3, 'Sahni', 'operations'), (4, 'Raghav', 'operations');
DROP TABLE IF EXISTS `sampleDB`.`projects`;
CREATE TABLE `sampleDB`.`projects` (
	`id` int NOT NULL AUTO_INCREMENT,
	`projectName` varchar(30) NOT NULL,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
INSERT INTO `sampleDB`.`projects` (`id`, `projectName`)
VALUES (1, 'MySQL Workshop'), (2, 'MyJava Workshop');
DROP TABLE IF EXISTS `sampleDB`.`taskTypes`;
CREATE TABLE `sampleDB`.`taskTypes` (
	`id` int NOT NULL AUTO_INCREMENT,
	`taskTypeName` varchar(30) NOT NULL,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
INSERT INTO `sampleDB`.`taskTypes` (`id`, `taskTypeName`)
VALUES (1, 'Test'), (2, 'Repairs'), (3, 'Maintenance');
DROP TABLE IF EXISTS `sampleDB`.`comments`;
CREATE TABLE `sampleDB`.`comments` (
	`id` int NOT NULL AUTO_INCREMENT,
	`comment` varchar(80) NOT NULL,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
INSERT INTO `sampleDB`.`comments` (`id`, `comment`)
VALUES (1, 'MySQL is the easiest database to work with.');
DROP TABLE IF EXISTS `sampleDB`.`notes`;
CREATE TABLE `sampleDB`.`notes` (
	`id` int NOT NULL AUTO_INCREMENT,
	
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `sampleDB`.`departments`;
CREATE TABLE `sampleDB`.`departments` (
	`id` int NOT NULL AUTO_INCREMENT,
	`departmentName` varchar(100) NOT NULL,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
USE sampleDB;
-- UPDATE 10000 rows in sampleDB. The row update will be done using 2-3 operations. To be updated are the values of the records in the "Department Name" columns. You can use the command
UPDATE departments SET departmentName = 'Engineering' WHERE id = 1;
UPDATE departments SET departmentName = 'Civil' WHERE id = 2;
UPDATE departments SET departmentName = 'Chemical' WHERE id = 3;
UPDATE departments SET departmentName = 'Science' WHERE id = 4;
-- UPDATE 100 rows in sampleDB.
-- INSERT 100 rows in sampleDB.
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `sampleDB`.`employees`;
CREATE TABLE `sampleDB`.`employees` (
	`id` int NOT NULL AUTO_INCREMENT, 
	`firstName` varchar(50) NOT NULL,
	`lastName` varchar(50) NOT NULL,
	`email` varchar(50) NOT NULL,
	`dob` date,
	`ssn` varchar(12) NOT NULL,
	`gender` enum('M','F','N','V') NOT NULL,
	`joiningDate` date,
	`sal` varchar(15) DEFAULT NULL,
	`department` int NOT NULL DEFAULT 0,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/* UPDATE 10000 rows in sampleDB. The values of the rows update are the values of the tables "Employee Name", "Employee ID", "Department" and "Salary",
-- To be update are the values of 9 columns in the "Employee Name", "Employee ID", "Department", "Salary", tables. You need to use a single UPDATE command that combines 2 different commands. First, you need to execute "id = UPDATE_VALUE". Secondly, the UPDATE
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `sampleDB`.`departments`;
CREATE TABLE `sampleDB`.`departments` (
  `id` int NOT NULL AUTO_INCREMENT,
  `departmentName` varchar(30) CHARACTER SET utf8 COLLATE utf8_unicode_ci NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- Let the user choose for a sample data source
-- The user should input a username on the command line

-- MySQL:
mysql --host=localhost --port=3306 --user=root sampleDB > data.sql
 
mysql --host=localhost --port=3306 --user=root sampleDB -e 'DROP SHOW DATABASES' > data.sql
mysql --host=localhost --port=3306 --user=root sampleDB < data.sql
```


[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `sampleDB`.`students`;
CREATE TABLE `sampleDB`.`students` (
	`id` serial NOT NULL AUTO_INCREMENT,
	`studentName` varchar(30) NOT NULL UNIQUE,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
 
 

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `sampleDB`.`students`;
CREATE TABLE `sampleDB`.`students` (
	`id` serial NOT NULL AUTO_INCREMENT,
	`studentName` varchar(30) NOT NULL UNIQUE,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `sampleDB`.`classes`;
CREATE TABLE `sampleDB`.`classes` (
	`id` serial NOT NULL AUTO_INCREMENT,
	`name` varchar(30) NOT NULL UNIQUE,
	`grade` int NOT NULL,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `sampleDB`.`teachers`;
CREATE TABLE `sampleDB`.`teachers` (
	`id` serial NOT NULL AUTO_INCREMENT,
	`teacherName` varchar(30) NOT NULL,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `sampleDB`.`teachers`;
CREATE TABLE `sampleDB`.`teachers` (
	`id` SERIAL NOT NULL AUTO_INCREMENT,
	`teacherName` VARCHAR(30)NOT NULL UNIQUE,
	`office` VARCHAR(50) NOT NULL UNIQUE,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
 
SELECT * from sampleDB.students;
INSERT INTO sampleDB.students (studentName) VALUES ('John'), ('Tom');
INSERT INTO sampleDB.teachers (teacherName, office) VALUES ('James', 'Office 1'), ('Tim', 'Office 2');
 
UPDATE sampleDB.students SET studentName = 'John' WHERE studentName = 'Mom';
 
DELETE FROM sampleDB.students WHERE studentName = 'Mom';
 <commit_msg>Fix grammar<commit_after>MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, and PHP/Python. It is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `sampleDB`.`students`;
CREATE TABLE `sampleDB`.`students` (
	`id` serial NOT NULL AUTO_INCREMENT,
	`studentName` varchar(30) NOT NULL UNIQUE,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `sampleDB`.`courses`;
 CREATE TABLE `sampleDB`.`courses` (
	`id` serial NOT NULL AUTO_INCREMENT,
	`courseName` varchar(30) NOT NULL UNIQUE,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `sampleDB`.`teachers`;
CREATE TABLE `sampleDB`.`teachers` (
	`id` serial NOT NULL AUTO_INCREMENT,
	`teacherName` varchar(30) NOT NULL UNIQUE,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `sampleDB`.`student_course`;
DROP TABLE IF EXISTS `sampleDB`.`course_teacher`;
CREATE TABLE `sampleDB`.`student_course` (
	`studentId` SERIAL NOT NULL FOREIGN KEY REFERENCES `sampleDB`.`students`("id"),
	`courseId` SERIAL NOT NULL FOREIGN KEY REFERENCES `sampleDB`.`courses`("id"),
	CONSTRAINT `fk1` FOREIGN KEY (`studentId`) REFERENCES `sampleDB`.`students` (`id`),
	CONSTRAINT `fk2` FOREIGN KEY (`courseId`) REFERENCES `sampleDB`.`courses` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/* Please create a short query which uses all four tables. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `sampleDB`.`teachers`;
CREATE TABLE `sampleDB`.`teachers` (
	`id` serial NOT NULL AUTO_INCREMENT,
	`teacherName` varchar(30) NOT NULL,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `sampleDB`.`teachers`;
CREATE TABLE `sampleDB`.`teachers` (
	`id` serial NOT NULL AUTO_INCREMENT,
	`teacherName` varchar(30) NOT NULL,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `sampleDB`.`professor`;
CREATE TABLE `sampleDB`.`professor` (
	`id` serial NOT NULL AUTO_INCREMENT,
	`professorName` varchar(30) NOT NULL,
	`speciality` varchar(30) NOT NULL,
	`education` varchar(30),
	`email` varchar(30) NOT NULL,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
SELECT * FROM `sampleDB`.`teachers` LIMIT 3;
SHOW DATABASES;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `sampleDB`.`studentNames`;
CREATE TABLE `sampleDB`.`studentNames` (
	`id` serial NOT NULL AUTO_INCREMENT,
	`studname` varchar(30) NOT NULL,
	`age` int(11) NOT NULL,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `sampleDB`.`students`;
CREATE TABLE `sampleDB`.`students` (
	`id` serial NOT NULL AUTO_INCREMENT,
	`studentLastName` varchar(30) NOT NULL,
	`studentFirstName` varchar(30) NOT NULL,
	`studentPhoneNumber` int NOT NULL,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `sampleDB`.`teachers`;
CREATE TABLE `sampleDB`.`teachers` (
	`id` serial NOT NULL AUTO_INCREMENT,
	`teacherName` varchar(255) NOT NULL,
	`password` varchar(255) NOT NULL,
	`teacherCode` varchar(20) NOT NULL,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `sampleDB`.`teachers`;
CREATE TABLE `sampleDB`.`teachers` (
	`id` serial NOT NULL AUTO_INCREMENT,
	`teacherName` varchar(255) NOT NULL,
	`password` varchar(255) NOT NULL,
	`teacherCode` varchar(20) NOT NULL,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `sampleDB`.`teachers`;
CREATE TABLE `sampleDB`.`teachers` (
    `id` SERIAL NOT NULL AUTO_INCREMENT,
    `name` CHAR(255) NOT NULL,
    `code` CHAR(20 NOT NULL),
    `password` varchar(255) NOT NULL,
    PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
-- Please create a SQL query to create a foreign key constraint in your tables. A sample key of the 'teachers' table and related key of the 'attendance' table would be 'id' and 'teacherCode'. The code must be something like `CONSTRAINT fkTeacherCode FOREIGN KEY(teacherCode) REFERENCES teachers(teacherCode)`.
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `sampleDB`.`teachers`;
CREATE TABLE `sampleDB`.`teachers` (
    `id` SERIAL NOT NULL AUTO_INCREMENT,
    `name` CHAR(255) NOT NULL,
    `code` CHAR(20 NOT NULL),
    `password` varchar(255) NOT NULL,
    PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `sampleDB`.`teachers`;
DROP TABLE IF EXISTS `sampleDB`.`teachers2`;
CREATE TABLE `sampleDB`.`teachers` (
	`id` SERIAL NOT NULL AUTO_INCREMENT,
	`teacherName` VARCHAR(255),
	`password` VARCHAR(255),
	`teacherCode` VARCHAR(20),
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE `sampleDB`.`teachers2` (
	`id` INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
	`teacherCode` INTEGER NOT NULL,
	`teacherName` VARCHAR(255) NOT NULL,
	`password` VARCHAR(255) NOT NULL,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS teacher_credentials (
	`teacher_id` int NOT NULL AUTO_INCREMENT,
	`username` varchar(255) NULL,
	`fullname` varchar(255) NULL,
	`password` varchar(255) NULL,
	`email` varchar(255) NULL,
	`birthday` date NULL,
	`gender` enum('M','F') NULL DEFAULT 'M',
	`birthday` date NULL,
	`school` varchar(255) NULL DEFAULT NULL,
    `password_salt` varchar(40) NULL,
	PRIMARY KEY (`teacher_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `sampleDB`.`students`;
CREATE TABLE `sampleDB`.`students` (
	`id` serial NOT NULL AUTO_INCREMENT,
	`studentName` varchar(255) NOT NULL,
	`password` varchar(255) NOT NULL,
	`studentCode` varchar(20) NOT NULL,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;


[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO teachers (teacherName,password,teacherCode)
VALUES
("Tom",  "Tom", "1T0M-09" ),
("Marc", "Marc", "1T0M-06" ),
("Erik", "Erik", "1T0M-07" );

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `sampleDB`.`students`;
CREATE TABLE `sampleDB`.`students` (
	`id` serial NOT NULL AUTO_INCREMENT,
	`studentName` varchar(255) NOT NULL,
	`password` varchar(255) NOT NULL,
	`studentCode` varchar(20) NOT NULL,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `sampleDB`.`books`;
CREATE TABLE `sampleDB`.`books` (
	`id` serial NOT NULL AUTO_INCREMENT,
	`bookName` varchar(255) NOT NULL,
	`bookCode` varchar(20) NOT NULL,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
 

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `sampleDB`.`admin`;
CREATE TABLE `sampleDB`.`admin` (
	`id` serial NOT NULL AUTO_INCREMENT,
	`adminName` varchar(255) NOT NULL,
	`adminEmail` varchar(511) DEFAULT NULL,
	`password` varchar(255) NOT NULL,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `sampleDB`.`grade`;
CREATE TABLE `sampleDB`.`grade` (
	`id` serial NOT NULL AUTO_INCREMENT,
	`student_id` integer(11) NOT NULL,
	`year` varchar(20) NOT NULL,
	`semester` decimal(3,0) DEFAULT NULL,
	PRIMARY KEY (`id`),
	INDEX `student_id` (`student_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `sampleDB`.`teacher`;
CREATE TABLE `sampleDB`.`teacher` (
  `id` serial NOT NULL AUTO_INCREMENT,
  `teacherName` varchar(255) NOT NULL,
  `teacherCode` varchar(20) NOT NULL,
  `teacherPosition` varchar(255) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
DROP TABLE IF EXISTS `sampleDB`.`attendance`;
CREATE TABLE `sampleDB`.`attendance` (
  `id` serial NOT NULL AUTO_INCREMENT,
  `student_id` int(11) NOT NULL,
  `teacher_id` int(11) NOT NULL,
  `date_of_attendance` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
DROP TABLE IF EXISTS `sampleDB`.`course`;
CREATE TABLE `sampleDB`.`course` (
	`id` serial NOT NULL AUTO_INCREMENT,
	`courseName` varchar(255) NOT NULL,
	`courseCode` varchar(20) NOT NULL,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
-- INSERT INTO database(id, studentCode, teacherCode) VALUES (0, '12345', '65432');
INSERT INTO database(id, studentCode, teacherCode) VALUES (1, '78543', '32189');
INSERT INTO database(id, studentCode, teacherCode) VALUES (2, '45789', '89067');
INSERT INTO database(id, studentCode, teacherCode) VALUES (3, '87654', '98765');
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `sampleDB`.`attendance`;
CREATE TABLE `sampleDB`.`attendance` (
	`id` serial NOT NULL AUTO_INCREMENT,
	`student_id` int(11) NOT NULL,
	`teacher_id` int(11) NOT NULL,
	`date
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `sampleDB`.`staff`;
CREATE TABLE `sampleDB`.`staff` (
	`id` serial NOT NULL AUTO_INCREMENT,
	`staffName` varchar(255) NOT NULL,
	`staffGrade` varchar(10) NOT NULL,
	`staffCode` varchar(20) NOT NULL,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `sampleDB`.`staff`;
CREATE TABLE `sampleDB`.`staff` (
	`id` serial NOT NULL AUTO_INCREMENT,
	`staffName` varchar(255) NOT NULL,
	`staffGrade` varchar(10) NOT NULL,
	`staffCode` varchar(20) NOT NULL,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `sampleDB`.`staff`;
CREATE TABLE IF NOT EXISTS `sampleDB`.`staff` (
	`id` serial NOT NULL AUTO_INCREMENT,
	`staffName` varchar(255) NOT NULL,
	`staffGrade` varchar(10) NOT NULL DEFAULT 'A',
	`staffCode` varchar(20) NOT NULL,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
-- Please create a query to delete all the staff entries. Use multiple tables to achieve efficient, concurrent operations.
SELECT `id`, `staffName`, `staffCode` FROM `sampleDB`.`staff`

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `sampleDB`.`staff`;
CREATE TABLE `sampleDB`.`staff` (
    `id` int(11) NOT NULL AUTO_INCREMENT,
    `staffName` varchar(255) NOT NULL,
    `staffGrade` varchar(10) NOT NULL,
    `staffCode` varchar(20) NOT NULL,
    PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
insert into `staff` values (NULL,'<NAME>','99','123123456'),(NULL,'<NAME>','12','12121212'),(NULL,'Prof. <NAME>','1','56566645'),(NULL,'Dr. <NAME>','67','151515155569'),(NULL,'<NAME>','75','2323232823'),(NULL,'<NAME>','78','8186345'),(NULL,'<NAME>','56','8186345'),(NULL,'<NAME>','21','151515155569'),(NULL,'Mr. <NAME> PhD','20','55555555'),(NULL,'Mr. <NAME>','21','55555555');
 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `sampleDB`.`staff`;
CREATE TABLE `sampleDB`.`staff` (
	`id` serial NOT NULL AUTO_INCREMENT,
	`staffName` varchar(255) NOT NULL,
	`staffGrade` varchar(10) NOT NULL,
	`staffCode` varchar(20) NOT NULL,
	PRIMARY KEY (`id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS staff;
CREATE TABLE staff (
   id serial NOT NULL AUTO_INCREMENT,
   staffName varchar(255) NOT NULL,
   staffGrade varchar(10) NOT NULL,
   staffCode varchar(20) NOT NULL,
   PRIMARY KEY (id),
   CONSTRAINT staff_staffCode_index UNIQUE (staffCode)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `staff`;
CREATE TABLE `staff` (
	`id` serial NOT NULL AUTO_INCREMENT,
	`staffName` varchar(255) NOT NULL,
	`staffGrade` varchar(10) NOT NULL,
	`staffCode` varchar(20) NOT NULL,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
show create table staff;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `sampleDB`.`staff`;
CREATE TABLE `sampleDB`.`staff` (
	`id` serial NOT NULL AUTO_INCREMENT,
	`staffName` varchar(255) NOT NULL,
	`status` enum('active','inactive') NOT NULL,
	DEFAULT 'active',
	`staffGrade` varchar(10) NOT NULL,
	`staffCode` varchar(20) NOT NULL,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `staff`;
CREATE TABLE `staff` (
	`id` serial NOT NULL AUTO_INCREMENT,
	`staffName` varchar(255) NOT NULL,
	`staffGrade` varchar(10) NOT NULL,
	`staffCode` varchar(20) NOT NULL,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
show create table staff;
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
UPDATE `staff` SET `staffGrade` = '3.5';
-- You need to use a database you created
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SELECT * From `staff`

-- MySQL server will detect the correct user and password to allow it to proceed with this statement.
-- To log in, you type MySQL's user ID and password in the "User" field when running the SELECT statement or from the database's "Myisam Admin" tool.
mysql_secure_installation
-- Passwords can't contain empty strings without being enclosed in quotes:

-- Now you should be able to type password when running SELECT statement:
SELECT * FROM `staff`

-- 	UPDATE `staff` SET `staffGrade` = '3.5'
-- 	UPDATE `staff` SET `staffGrade` = '3';
-- 	  UPDATE `staff` SET `staffGrade` = '3';
-- 		UPDATE `staff` SET `staffGrade` = '1';
-- 			UPDATE `staff` SET `staffGrade` = '5'; 
-- 			           UPDATE `staff` SET `staffGrade` = '5';
-- 				      UPDATE `staff` SET `staffGrade` = 90.0;
-- 					     UPDATE `staff` SET `staffGrade` = 1000.0;
-- 							 UPDATE `staff` SET `staffGrade` = '1000';
-- 								  UPDATE `staff` SET `staffGrade` = 999;
-- 								   UPDATE `staff` SET `staffGrade` = 1.0/0x3F

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `staff`;
CREATE TABLE `staff` (
	`id` serial NOT NULL AUTO_INCREMENT,
	`staffName` varchar(255) NOT NULL,
	`staffGrade` varchar(10) NOT NULL,
	`staffCode` varchar(20) NOT NULL,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
show create table staff;
use sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `staff`;
DROP TABLE IF EXISTS `staff2`;
CREATE TABLE `staff` (
	`id` serial NOT NULL AUTO_INCREMENT,
	`staffName` varchar(255) NOT NULL,
	`staffGrade` varchar(10) NOT NULL,
	`staffCode` varchar(20) NOT NULL,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

ALTER TABLE `staff` AUTO_INCREMENT=61;
ALTER TABLE `staff2` AUTO_INCREMENT=61;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `staff`;
CREATE TABLE `staff` (
	`id` serial NOT NULL AUTO_INCREMENT,
	`staffName` varchar(255) NOT NULL,
	`staffGrade` varchar(10) NOT NULL,
	`staffCode` varchar(20) NOT NULL,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
DROP TABLE IF EXISTS `staff`;
CREATE TABLE `staff` (
	`id` serial NOT NULL AUTO_INCREMENT,
	`staffName` varchar(255) NOT NULL,
	`staffGrade` varchar(10) NOT NULL,
	`staffCode` varchar(20) NOT NULL,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
DROP TABLE IF EXISTS `staff`;
CREATE TABLE `staff` (
	`id` serial NOT NULL AUTO_INCREMENT,
	`staffName` varchar(255) NOT NULL,
	`staffGrade` varchar(10) NOT NULL,
	`staffCode` varchar(20) NOT NULL,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
show create table staff;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `staff`;
CREATE TABLE `staff` (
	`id` serial NOT NULL AUTO_INCREMENT,
	`staffName` varchar(255) NOT NULL,
	`staffGrade` varchar(10) NOT NULL,
	`staffCode` varchar(20) NOT NULL,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
-- Please drop the table named staff with ID 2
DROP TABLE staffID2;
INSERT INTO staff (staffName, staffGrade, staffCode) VALUES ('Jasmin', 'A','1');
INSERT INTO staff (staffName, staffGrade, staffCode) VALUES ('Kevin', 'B','2');
INSERT INTO staff (staffName, staffGrade, staffCode) VALUES ('Sara', 'B+', '3');
INSERT INTO staff (staffName, staffGrade, staffCode) VALUES ('Joe', 'A-', '4');
DROP TABLE IF EXISTS `staff`;
CREATE TABLE `staff` (
	`id` serial NOT NULL AUTO_INCREMENT,
	`staffName` varchar(255) NOT NULL,
	`staffGrade` varchar(10) NOT NULL,
	`staffCode` varchar(20) NOT NULL,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;
CREATE TABLE staffID3 (
  staffID INT NULL AUTO_INCREMENT,
  staffCode VARCHAR(20) NULL,
  staffName VARCHAR(255) NULL,
  PRIMARY KEY (staffID)
);
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `staff`;
 
DROP TABLE IF EXISTS `staffID4`;
INSERT INTO staffID3 (staffCode, staffName) VALUES ('ABC', 'John');
INSERT INTO staffID3 (staffCode, staffName) VALUES ('DEF', 'Mary');
INSERT INTO staffID3 (staffCode, staffName) VALUES ('ghi', 'Jack');
CREATE TABLE IF NOT EXISTS staffID (
    staffID INT NULL AUTO_INCREMENT PRIMARY KEY,
    staffCode VARCHAR(20) NULL,
    staffName VARCHAR(255) NULL,
    manager_staffID VARCHAR(20) NULL
);
DROP TABLE
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `staff`;
CREATE TABLE `staff` (
	`id` serial NOT NULL AUTO_INCREMENT,
	`staffName` varchar(255) NOT NULL,
	`staffGrade` varchar(10) NOT NULL,
	`staffCode` varchar(20) NOT NULL,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
DROP TABLE IF EXISTS `staff`;
CREATE TABLE `staff` (
	`id` serial NOT NULL AUTO_INCREMENT,
	`staffName` varchar(255) NOT NULL,
	`staffGrade` varchar(10) NOT NULL,
	`staffCode` varchar(20) NOT NULL,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
DROP TABLE IF EXISTS `staff`;
CREATE TABLE `staff` (
	`id` serial NOT NULL AUTO_INCREMENT,
	`staffName` varchar(255) NOT NULL,
	`staffGrade` varchar(10) NOT NULL,
	`staffCode` varchar(20) NOT NULL,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
show create table staff;
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `staff`;
CREATE TABLE `staff` (
	`id` serial NOT NULL AUTO_INCREMENT,
	`staffName` varchar(255) NOT NULL,
	`staffGrade` varchar(10) NOT NULL,
	`staffCode` varchar(20) NOT NULL,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
DROP TABLE IF EXISTS `staff`;
CREATE TABLE `staff` (
	`id` serial NOT NULL AUTO_INCREMENT,
	`staffName` varchar(255) NOT NULL,
	`staffGrade` varchar(10) NOT NULL,
	`staffCode` varchar(20) NOT NULL,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
DROP TABLE IF EXISTS `staff`;
CREATE TABLE `staff` (
	`id` serial NOT NULL AUTO_INCREMENT,
	`staffName` varchar(255) NOT NULL,
	`staffGrade` varchar(10) NOT NULL,
	`staffCode` varchar(20) NOT NULL,
PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
show create table staff;

-- Please create a very short query and answer the question: What is the maximum size of a MySQL variable
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `student`;
CREATE TABLE `student` (
	`stuID` serial NOT NULL AUTO_INCREMENT,
	`stuNo` varchar(30) NOT NULL,
	`stuName` varchar(255) NOT NULL,
	`stuCollegeID` varchar(30) NOT NULL,
	`stuDepartmentID` varchar(255) NOT NULL,
	`studentYear` tinyint(2) DEFAULT NULL,
	PRIMARY KEY (`stuID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
DROP TABLE IF EXISTS `student`;
CREATE TABLE `student` (
	`stuID` serial NOT NULL AUTO_INCREMENT,
	`stuNo` varchar(30) NOT NULL,
	`stuName` varchar(255) NOT NULL,
	`stuCollegeID` varchar(30) NOT NULL,
	`stuDepartmentID` varchar(255) NOT NULL,
	`studentYear` tinyint(2) DEFAULT NULL,
	PRIMARY KEY (`stuID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
DROP TABLE IF EXISTS `student`;
CREATE TABLE `student` (
	`stuID` serial NOT NULL AUTO_INCREMENT,
	`stuNo` varchar(30) NOT NULL,
	`stuName` varchar
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `staff`;
CREATE TABLE `staff` (
	`id` serial NOT NULL AUTO_INCREMENT,
	`staffName` varchar(255) NOT NULL,
	`staffGrade` varchar(10) NOT NULL,
	`staffCode` varchar(20) NOT NULL,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
DROP TABLE IF EXISTS `staff`;
CREATE TABLE `staff` (
	`id` serial NOT NULL AUTO_INCREMENT,
	`staffName` varchar(255) NOT NULL,
	`staffGrade` varchar(10) NOT NULL,
	`staffCode` varchar(20) NOT NULL,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
DROP TABLE IF EXISTS `staff`;
CREATE TABLE `staff` (
	`id` serial NOT NULL AUTO_INCREMENT,
	`staffName` varchar(255) NOT NULL,
	`staffGrade` varchar(10) NOT NULL,
	`staffCode` varchar(20) NOT NULL,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
show create table staff;
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `staff`;

CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `staff`;

CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `staff`;
create table staff (
	id int auto_increment primary key unique,
	staff_name varchar(255) not null,
	staff_grade text not null,
	staff_code varchar(20));
show create table staff;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `staff`;
CREATE TABLE `staff` (
	`id` serial NOT NULL AUTO_INCREMENT,
	`staffName` varchar(255) NOT NULL,
	`staffGrade` varchar(10) NOT NULL,
	`staffCode` varchar(20) NOT NULL,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
DROP TABLE IF EXISTS `staff`;
CREATE TABLE `staff` (
	`id` serial NOT NULL AUTO_INCREMENT,
	`staffName` varchar(255) NOT NULL,
	`staffGrade` varchar(10) NOT NULL,
	`staffCode` varchar(20) NOT NULL,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
DROP TABLE IF EXISTS `staff`;
CREATE TABLE `staff` (
	`id` serial NOT NULL AUTO_INCREMENT,
	`staffName` varchar(255) NOT NULL,
	`staffGrade` varchar(10) NOT NULL,
	`staffCode` varchar(20) NOT NULL,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
show create table staff;
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `staff`;
CREATE TABLE `staff` (
	`id` serial NOT NULL AUTO_INCREMENT,
	`staffName` varchar(255) NOT NULL,
	`staffGrade` varchar(10) NOT NULL,
	`staffCode` varchar(20) NOT NULL,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
DROP TABLE IF EXISTS `staff`;
CREATE TABLE `staff` (
	`id` serial NOT NULL AUTO_INCREMENT,
	`staffName` varchar(255) NOT NULL,
	`staffGrade` varchar(10) NOT NULL,
	`staffCode` varchar(20) NOT NULL,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
DROP TABLE IF EXISTS `staff`;
CREATE TABLE `staff` (
	`id` serial NOT NULL AUTO_INCREMENT,
	`staffName` varchar(255) NOT NULL,
	`staffGrade` varchar(10) NOT NULL,
	`staffCode` varchar(20) NOT NULL,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
show create table staff;
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `staff`;
CREATE TABLE `staff` (
	`id` serial NOT NULL AUTO_INCREMENT,
	`staffName` varchar(255) NOT NULL,
	`staffGrade` varchar(10) NOT NULL,
	`staffCode` varchar(20) NOT NULL,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
DROP TABLE IF EXISTS `staff`;
CREATE TABLE `staff` (
	`id` serial NOT NULL AUTO_INCREMENT,
	`staffName` varchar(255) NOT NULL,
	`staffGrade` varchar(10) NOT NULL,
	`staffCode` varchar(20) NOT NULL,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
DROP TABLE IF EXISTS `staff`;
CREATE TABLE `staff` (
	`id` serial NOT NULL AUTO_INCREMENT,
	`staffName` varchar(255) NOT NULL,
	`staffGrade` varchar(10) NOT NULL,
	`staffCode` varchar(20) NOT NULL,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
show create table staff;
 
-- Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE
CREATE DATABASE IF NOT EXISTS sampleDB; USE sample
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees;
DROP TABLE IF EXISTS workers;
CREATE TABLE employees(
	`id` int NOT NULL AUTO_INCREMENT,
	`staffID` int NOT NULL,
	`name` varchar(255) NOT NULL,
	`code` int NOT NULL,
	PRIMARY KEY (`id`),
	FOREIGN KEY (`staffID`) REFERENCES `staff` (`id`)
);
CREATE TABLE workers(
	`id` int NOT NULL AUTO_INCREMENT,
	`staffID` int NOT NULL,
	`name` varchar(255) NOT NULL,
	`code` int NOT NULL,
	PRIMARY KEY (`id`),
	FOREIGN KEY (`staffID`) REFERENCES `staff` (`id`)
);
SHOW CREATE TABLE employees;
SHOW CREATE TABLE workers;
SELECT * FROM employees;
SELECT * FROM workers;
SELECT a.code AS staff, e.staffID, workers.name AS worker
FROM employees e
JOIN workers w ON e.staffID=w.id
ORDER BY employees.staffID;
SELECT a.code AS staff, e.staffID, workers.name AS worker
FROM employees e
JOIN workers w ON e.staffID=w.id
ORDER BY a.code;
INSERT INTO employees(staffID, name, code) VALUES (1, '<NAME>', random()%50000 + 1);
INSERT INTO employees(staffID, name, code) VALUES (2,
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
ALTER TABLE `staff` ENGINE = InnoDB;
DELETE FROM `staff`.
 
MYSQL Workbench
Create/Open Database
  InnoDB Database:
  Host: 127.0.0.1
  Port: 3306
  User: root
  Password: <PASSWORD>
  Database: newDB
*/

mysql> use newDB;
mysql> create table `staff` (
	`id` serial NOT NULL AUTO_INCREMENT,
	`staffName` varchar(255) NOT NULL,
	`staffGrade` varchar(10) NOT NULL,
	`staffCode` varchar(20) NOT NULL,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
mysql>
mysql> select * from employee;
+------+----------+------------+
| id  | staffName | staffGrade |
+------+----------+------------+
|    1| Pulkit | 5 |
|    2| Satish  | 5 |
|    3| Jagannathan | 7 |
|    4| Karthik | 6 |
|    5| Ravindran | 5.7 |
|    6| Sarveksha | 8 |
|    7| Ravikrishnan | 11 |
|    8| Ranjan | 7
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `staff`;
CREATE TABLE `staff` (
	`id` serial NOT NULL AUTO_INCREMENT,
	`staffName` varchar(255) NOT NULL,
	`staffGrade` varchar(10) NOT NULL,
	`staffCode` varchar(20) NOT NULL,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
DROP TABLE IF EXISTS `staff`;
-- This line will NOT work until you add ENGINE=InnoDB to the next command. That is to say, the previous command was not properly implemented. This is also called
-- "CREATE TABLE staff (...) LIKE sampleDB.staff (..) ENGINE=InnoDB.."
CREATE TABLE `staff` (
	`id` serial NOT NULL AUTO_INCREMENT,
	`staffName` varchar(255) NOT NULL,
	`staffGrade` varchar(10) NOT NULL,
	`staffCode` varchar(20) NOT NULL,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
show create table staff;
ALTER TABLE `staff` ENGINE=InnoDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
ALTER TABLE `staff` add `staffDescription` TEXT NULL AFTER `activeStaff`;
UPDATE `staff`
	SET `staffDescription` =
		'As you would normally expect, there is still a record of staff who cannot attend any class this year. However, they have been able to bring their staff back by using the application and are now in the classroom and the attending room. The staff have decided a change has occurred to their records and they will be notified as necessary. There is no need to send an email after these changes have been made.'
		;

CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
UPDATE `staff`
	SET `staffDescription` =
		'I am currently in the final year of Computer Science. I am currently enrolled in the MCA Program. As part of my work experience, I have been working on the project for the second year at NUS. One of my major interests is to learn about Linux, the Internet, and many more important, I intend to create a website for a company I would be working for. Anyone out there who is interested in me to look into this and learn more can reach me there and find out more about the project.
'
		;

CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
UPDATE `staff`
	SET `staffDescription` = 
		'You found the way out. You will be able to use any database you wish. I have recently started working on another website which
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `staff`;
CREATE TABLE `staff` (
	`id` serial NOT NULL AUTO_INCREMENT,
	`staffName` varchar(255) NOT NULL,
	`staffGrade` varchar(10) NOT NULL,
	`staffCode` varchar(20) NOT NULL,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
DROP TABLE IF EXISTS `staff`;
-- This line will NOT work until you add ENGINE=InnoDB to the next command. That is to say, the previous command was not properly implemented. This is also called
-- "CREATE TABLE staff (...) LIKE sampleDB.staff (..) ENGINE=InnoDB.."
CREATE TABLE `staff` (
	`id` serial NOT NULL AUTO_INCREMENT,
	`staffName` varchar(255) NOT NULL,
	`staffGrade` varchar(10) NOT NULL,
	`staffCode` varchar(20) NOT NULL,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
show create table staff;
ALTER TABLE `staff` ENGINE=InnoDB;
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- Please note that if sampleDB is now connected to MYSQL,
-- the result of "show create table staff" above will return
-- a column called "id". If this column does not exist,
-- please create the "id" column before adding ENGINE=InnoDB to the following.
ALTER TABLE `staff` ADD id serial PRIMARY KEY AUTO_INCREMENT;
show create table staff;
ALTER TABLE `staff` ENGINE=InnoDB;
 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
ALTER TABLE `staff` ADD id serial PRIMARY KEY AUTO_INCREMENT;
ALTER TABLE `staff` ENGINE=InnoDB;
show create table staff;
DROP TABLE staff;
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `staff`;
-- This line will WORK since id was indeed a column
ALTER TABLE `staff` ENGINE=InnoDB;
show create table staff;
-- Now you can re-run our query above, which should have returned
-- the column id instead. Remember I mentioned earlier that ENGINE=InnoDB
-- was added automatically to our table.
SELECT * FROM staff;
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO staff VALUES ("Stefani", "X", "16617");
show tables;
 
SELECT count(*) as total_staff FROM staff;
INSERT INTO staff (staffName, staffGrade, staffCode) VALUES ("Stefani", "X", "16617");
show tables;
SELECT count(*) as total_staff FROM staff;
DROP TABLE IF EXISTS `staff`;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `staff`;
CREATE TABLE `staff` (
	`staffId` int(11) NOT NULL AUTO_INCREMENT,
	`staffName` varchar(255) NOT NULL,
	`staffGrade` varchar(10) NOT NULL,
	`staffCode` varchar(20) NOT NULL,
	PRIMARY KEY (`staffId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
DROP TABLE IF EXISTS `staffName`;
CREATE TABLE `staffName` (
	`id` serial NOT NULL AUTO_INCREMENT,
	`name` varchar(255) NOT NULL,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `staff`;
CREATE TABLE `staff` (
	`staffId` int(11) NOT NULL AUTO_INCREMENT,
	`staffName` varchar(255) NOT NULL,
	`staffGrade` varchar(10) NOT NULL,
	`staffCode` varchar(20) NOT NULL,
	PRIMARY KEY (`staffId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
DROP TABLE IF EXISTS `staffEmail`;
CREATE TABLE `staffEmail` (
	`staffId` int(11) NOT NULL AUTO_INCREMENT,
	`email` varchar(255) NOT NULL,
	PRIMARY KEY (`staffId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
DROP TABLE
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `staff`;
CREATE TABLE `staff` (
	`id` serial NOT NULL AUTO_INCREMENT,
	`staffName` varchar(255) NOT NULL,
	`staffGrade` varchar(10) NOT NULL,
	`staffCode` varchar(20) NOT NULL,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=1;
SHOW CREATE TABLE `staff`;
ALTER TABLE `staff` ENGINE=InnoDB;
-- Please give some examples why this is not allowed
SET @idNumber := 50;
INSERT INTO `staff` (`id`, `staffName`, `staffGrade`, `staffCode`) VALUES(@idNumber, '<NAME>', '5', '0005');
SET @idNumber := 50;
UPDATE `staff` SET `staffName` = '<NAME>', `staffGrade` = '5', `staffCode` = '0000' WHERE `staffCode` = '0000' ;
SELECT * FROM `staff` ;
SHOW CREATE TABLE `staff`;
ALTER TABLE `staff` ENGINE=InnoDB;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS `staff` (
	`id` serial NOT NULL AUTO_INCREMENT,
	`staffName` varchar(255) NOT NULL,
	`staffGrade` varchar(10) NOT NULL,
	`staffCode` varchar(20) NOT NULL,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
show tables;
show create table staff;
-- You can create a table as follows
-- CREATE TABLE IF NOT EXISTS `staff` (
--	`id` smallint NOT NULL auto_increment primary key,
--	`staffName` varchar(20) not null,
--	`staffGrade` varchar(10) not null,
--	`staffCode` varchar(20) not null
--);
show tables;
show create table staff;
-- This is an excellent opportunity to create a short program to check the integrity of tables like this
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `staff`;
CREATE TABLE `staff` (
	`id` serial NOT NULL AUTO_INCREMENT,
	`staffName` varchar(255) NOT NULL,
	`staffGrade` varchar(10) NOT NULL,
	`staffCode` varchar(20) NOT NULL,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
INSERT INTO `staff` (`staffName`, `staffGrade`, `staffCode`)
VALUES ('Kenzo', '10', '20-44-030');
INSERT INTO `staff` (`staffName`, `staffGrade`, `staffCode`)

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `staff`;
CREATE TABLE `staff` (
	`ID` int(11) NOT NULL AUTO_INCREMENT,
	`staff_name` text NOT NULL,
	`grade` text NOT NULL,
	`code` int(11) NOT NULL,
	PRIMARY KEY (`ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
-- Use the next two new tables to fulfill your requirements. 
-- In this case, use two new tables called `staff` and `emp`

-- 2nd table.

CREATE TABLE `emp` (
	`id` int(11) NOT NULL AUTO_INCREMENT,
	`name` varchar(50) NOT NULL,
	`empgrade` varchar(10) NOT NULL,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
-- You can now query the tables like before (only)
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

SELECT * FROM `emp`;
SELECT * FROM `emp` AS e1;

CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

SELECT * FROM `emp`;
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `staff`;
CREATE TABLE `staff` (
	`ID` int(11) NOT NULL AUTO_INCREMENT,
	`staff_name` text NOT NULL,
	`grade` text NOT NULL,
	`code` int(11) NOT NULL,
	PRIMARY KEY (`ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
-- Use the next two new tables to fulfill your requirements. 
-- In this case, use two new tables called `staff` and `emp`
-- 2nd table.
CREATE TABLE `emp` (
	`id` int(11) NOT NULL AUTO_INCREMENT,
	`name` varchar(50) NOT NULL,
	`empgrade` varchar(10) NOT NULL,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
-- You can now query the tables like before (only)
SELECT * FROM `emp`;
SELECT * FROM `emp` AS e1;
SELECT * FROM `emp`;
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `staff`;
DROP TABLE IF EXISTS `emp`;
-- create new tables
CREATE TABLE `staff` (
	`ID` int(11) NOT NULL AUTO_INCREMENT,
	`staff_name` text NOT NULL,
	`grade` text NOT NULL,
	`empgrade` varchar(10) NOT NULL,
	FOREIGN KEY (`empgrade`) REFERENCES `emp` (`empgrade`) ON DELETE CASCADE
	PRIMARY KEY (`ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
-- insert rows
INSERT INTO `staff` values('101', 'Jayesh', '8th', ''),('102', 'Jayashree', '4th', '8th'),('103', 'Akshat', '5th', '4th'),('104', 'Amit', '6th', '8th'),('105', 'Akshat', '5th', '4th');
SELECT * FROM `staff`;
USE `sampleDB`
-- create a derived table and add 2 rows
CREATE TABLE IF NOT EXISTS `dept` (
	`depid` INT NOT NULL AUTO_INCREMENT,
	`dept` VARCHAR(10) NOT NULL UNIQUE,
	UNIQUE (`dept`)
) ENGINE=Innodb ;
insert INTO `dept` value(1, 'Computer Science'), (2, 'Physics'), (3, 'Civil Engineering'), (4, 'Architecture'), (5, 'Engineering'), (6, 'Biological Engineering'), (7, 'Biomedical Technology');
-- modify a row in a table
UPDATE `dept` SET `dept` = 'B.E' WHERE `dept` = 'Computer Science';
-- Now create some table
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
 
DROP TABLE IF EXISTS `sampleTables`;
CREATE TABLE `sampleTables` (
	`ID` int(11) NOT NULL AUTO_INCREMENT,
	`Name` text NOT NULL,
	`Year` int(11) NOT NULL DEFAULT '0',
	PRIMARY KEY (`ID`)
);
-- Execute the table insert statement
INSERT INTO `sampleTables` VALUES (1, 'A', 2021);
INSERT INTO `sampleTables` VALUES (2, 'B', 2021);
INSERT INTO `sampleTables` VALUES (3, 'C', 2021);
INSERT INTO `sampleTables` VALUES (4, 'D', 2021);
INSERT INTO `sampleTables` VALUES (5, 'E', 2021);
INSERT INTO `sampleTables` VALUES (6, 'F', 2021);
-- Execute a simple select statement
SELECT * FROM `sampleTables`;
-- Execute a SELECT statement with subqueries
SELECT * FROM `sampleTables` AS s1 LEFT JOIN `sampleTables` AS s2
ON s1.ID = s2.Year
AND s1.Name = s2.Name;
-- Execute a multiple joins
SELECT * FROM `sampleTables` s1, `sampleTables` s2
ON s1.ID = s2.Year
AND s1.Name = s2.Name AND s1.Name = 'B';
-- Execute a SELECT statement with where condition
SELECT * FROM `sampleTables` s1 LEFT JOIN `sampleTables` s2
ON s1.ID = s2
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

DROP TABLE IF EXISTS `staff`;
DROP TABLE IF EXISTS `emp`;

CREATE TABLE `staff` (
	`id` int(11) NOT NULL AUTO_INCREMENT,
	`staff_name` text NOT NULL,
	`grade` text NOT NULL,
	`code` int(11) NOT NULL,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE `emp` (
	`id` int(11) NOT NULL AUTO_INCREMENT,
	`name` varchar(50) NOT NULL,
	`empgrade` varchar(10) NOT NULL,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;


SHOW TABLES;

CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `staff`;
DROP TABLE IF EXISTS `emp`;

CREATE TABLE `staff` (
	`id` int(11) NOT NULL AUTO_INCREMENT,
	`staff_name` text NOT NULL,
	`grade` text NOT NULL,
	`code` int(11) NOT NULL,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2021 DEFAULT CHARSET=utf8;

INSERT INTO `staff` (`ID`, `staff_name`, `grade`, `code`) VALUES
	(1, 'Sam', '99', 1),
	(2, 'Bob', '90', 2),
	(3, 'Maria', '77', 3),
	(4, 'Sarah', '60', 4),
	(5, 'Bruce', '1.0', 5),
	
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `emp`;
CREATE TABLE `emp` (
	id int(50) NOT NULL AUTO_INCREMENT,
	name varchar(50) NOT NULL,
	empgrade varchar(10) NOT NULL,
	salary int(50) NOT NULL,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
-- This table has been mutated to look more like the emp data
SELECT * FROM `emp`;
-- Please create a new table that stores the ID, Name, and E-mail address of the newly inserted employee. 
-- Be sure to use the database structure that we used above.
USE sampleDB;
CREATE TABLE `employees` (
	`id` int(20) NOT NULL AUTO_INCREMENT,
	`name` text NOT NULL,
	`email` text NOT NULL,
	PRIMARY KEY (`id`)
);
-- Modify the data in the previous table to include the ID, Name and E-mail Addresses of all the employees.
-- Hint.
-- You will need to add the code `INSERT INTO employees select ID, Name, Email from staff;`
-- Note: you can only use the `=` operator to insert one value in a specific column.

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS emp;
CREATE TABLE emp (
	id INT (11) NOT NULL AUTO_INCREMENT,
	name VARCHAR (45) NULL,
	grade VARCHAR (45) NULL,
	PRIMARY KEY (id)
)ENGINE=InnoDB DEFAULT CHARSET=utf8;
INSERT INTO emp VALUES(1, 'John', 'B');
INSERT INTO emp VALUES(2, 'Paul', 'AA');
-- you can now query the tables and print (using "SELECT * FROM...") or execute mutated queries like
SELECT * FROM employees;
SELECT EmpID FROM employees WHERE empgrade = 'B';
SELECT Salary FROM employees WHERE empgrade = 'AA' LIMIT 1;
-- Please create a program that modifies multiple tables at once using MySQL's multi-table engine.
USE sampleDB;
DROP TABLE IF EXISTS employees;
CREATE TABLE empl (
	empID INT NOT NULL,	
	empName VARCHAR(100) NOT NULL,
	empGrade VARCHAR(10) NOT NULL,
	salary decimal(7, 2) NOT NULL,
	PRIMARY KEY (empID)
) ENGINE = InnoDB DEFAULT CHARSET=utf8;
/* Create the three following new tables - use emp to store employee IDs, employee names and salaries */
CREATE TABLE employees (
	empID int NOT NULL AUTO_INCREMENT,
	empName varchar(100) NOT NULL,
	empGrade varchar(10) NOT NULL DEFAULT '',
	salary decimal(7, 2) NOT NULL,
	PRIMARY KEY (empID) 
) ENGINE = InnoDB DEFAULT CHARSET=utf8;
/* Create the following new table - use emps to hold employee IDs, 
employee names and salaries and emps_to
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `emp`;
CREATE TABLE `emp` (
	id int(50) NOT NULL AUTO_INCREMENT,
	name varchar(50) NOT NULL,
	empgrade varchar(10) NOT NULL,
	salary int(50) NOT NULL,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
-- This table has been mutated to look more like the emp data
SELECT * FROM `emp`;
-- Please create a new table that stores the ID, Name, and E-mail address of the newly inserted employee. 
-- Be sure to use the database structure that we used above.
USE sampleDB;
CREATE TABLE `employees` (
	`id` int(20) NOT NULL AUTO_INCREMENT,
	`name` text NOT NULL,
	`email` text NOT NULL,
	PRIMARY KEY (`id`)
);
-- Modify the data in the previous table to include the ID, Name and E-mail Addresses of all the employees.
-- Hint.
-- You will need to add the code `INSERT INTO employees select ID, Name, Email from staff;`
-- Note: you can only use the `=` operator to insert one value in a specific column.
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `students`;
CREATE TABLE `students` (
	`idNo` int(20) NOT NULL AUTO_INCREMENT,
	`name` text NOT NULL,
	`dept` text NOT NULL,
	`semestre` text NOT NULL,
	PRIMARY KEY (`idNo`)
);
INSERT INTO `students` (`idNo`, `name`, `dept`, `semestre`) VALUES (1, '<NAME>', 'MATH2', '2');
INSERT INTO `students` (`idNo`, `name`, `dept`, `semestre`) VALUES (2, '<NAME>', 'COMP102', '4');



 
DROP TABLE IF EXISTS `t`;
CREATE TABLE `t` (
   `i` int(20) NOT NULL AUTO_INCREMENT,
   `k` int(20) NOT NULL,
   `t1` varchar(10) NOT NULL,
   `t2` int(10),
   `t3` varchar(20),
   PRIMARY KEY (`i`),
   UNIQUE KEY `k1` (`k`,`t1`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
INSERT INTO `t` (`i`,`k`,`t1`,`t2`,`t3`) VALUES(601,1,'asd',1,'1');
INSERT INTO `t` (`i`,`k`,`t1`,`t2`,`t3`) VALUES(801,2,'asd',2,'2');

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `employee`;
CREATE TABLE `employee` (
	id int(20) NOT NULL AUTO_INCREMENT,
	name text NOT NULL,
	email text NOT NULL,
	`salary` int(20) NOT NULL,
	empgrade text NOT NULL,
	PRIMARY KEY (`id`)
);
SELECT name, salary, empgrade FROM `employee` WHERE empgrade IN('S');
-- Hint.
-- You won’t need to alter the previous table in any way.
-- Please create a program that reads in some data from a text file `employees.txt` and appends the records it receives (one record at a time) to the existing `employees` table.
-- Be sure to only add a new column to the table if it doesn’t already exist.
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `staff`;
CREATE TABLE `staff` (
	`id` int(50) NOT NULL AUTO_INCREMENT,
	`name` text NOT NULL,
	`salary` int(50) NOT NULL,
	PRIMARY KEY (`id`)
);
-- How about the ID, and Name, but with the E-mail Addresses appended?
-- It’s almost possible using JOIN’s. Make sure the table have columns in it for each of the columns in the table we would like to create a JOIN on. Then add the code.
-- Hint.
-- We will need to change the table we are given to have a column and an ID that gets populated as an
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `staff`;
CREATE TABLE `staff` (
	`id` int(20) UNSIGNED NOT NULL AUTO_INCREMENT,
	`name` text NOT NULL,
	`department` varchar(50) NOT NULL,
	`salary` int(25) NOT NULL,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE `staff` (
	name varchar(50) NOT NULL,
	empgrade varchar(10) NOT NULL,
	salary int(50) NOT NULL
);

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `emp`;
CREATE TABLE `emp` (
	id int(50) NOT NULL AUTO_INCREMENT,
	name varchar(50) NOT NULL,
	empgrade varchar(10) NOT NULL,
	salary int(50) NOT NULL,
UNIQUE KEY `name`(`name`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

INSERT INTO `Emp` (`id`,`name`,`empgrade`,`salary`) VALUES ("20", "Virginia", "1", "90000");
INSERT INTO `Emp` (`id`,`name`,`empgrade`,`salary`) VALUES ("5", "John", "2", "70000");
INSERT INTO `Emp` (`id`,`name`,`empgrade`,`salary`) VALUES ("22", "Ethan", "1", "80000");
INSERT INTO `Emp` (`id`,`name`,`empgrade`,`salary`) VALUES ("18", "Mary", "2", "70000");
INSERT INTO `Emp` (`id`,`name`,`empgrade`,`salary`) VALUES ("4", "Tom", "2", "92000");
INSERT INTO `Emp` (`id`,`name`,`empgrade`,`salary`) VALUES ("7", "Sam", "3", "60000");
INSERT INTO `Emp` (`id`,`name`,`empgrade`,`salary`) VALUES ("10", "Jerry", "1", "20000");
INSERT INTO `Emp` (`id`,`name`,`empgrade`,`salary`)
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `staff`;
CREATE TABLE `staff` (
	`id` int(20) UNSIGNED NOT NULL AUTO_INCREMENT,
	`name` text NOT NULL,
	`department` varchar(50) NOT NULL,
	`salary` int(25) NOT NULL,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `employees`;
CREATE TABLE `employees` (
	`id` int(20) UNSIGNED NOT NULL AUTO_INCREMENT,
	`staff_id` int(20) UNSIGNED NOT NULL,
	`salary` int(25) NOT NULL,
	PRIMARY KEY (`id`,`staff_id`),
	KEY `staffFK` (`staff_id`),
	CONSTRAINT `staffFK` FOREIGN KEY (`staff_id`) REFERENCES `staff` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;


-- Please create the above database in your local development environment.

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP FUNCTION IF EXISTS create_staff_fun;
DELIMITER  
CREATE FUNCTION create_staff_fun(
	`name` TEXT,
	`department` TEXT,
	`salary` INT
) RETURNS INT(20) UNSIGNED
BEGIN
	DECLARE i int;
	DECLARE msg TEXT;

	SET i = 0;
	INSERT INTO `staff`
	(`name`,
	`department`,
	`salary`)
	VALUES(
		`name`,
		`department`,
		`salary`);
	RETURN i;
END
 
DELIMITER ;

-- Please create another program that will display the top 5 staff that have over 10000 money. */
SELECT *, COUNT(*) as count_money
FROM `staff`
ORDER BY `count_money` DESC
LIMIT 5;


[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `staff`;
CREATE TABLE `staff` (
	`id` int(20) UNSIGNED NOT NULL AUTO_INCREMENT,
	`name` varchar COLLATE utf8_unicode_ci NOT NULL,
	`department` varchar COLLATE utf8_unicode_ci NOT NULL,
	`salary` int(25) NOT NULL,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `staff`;
CREATE TABLE `staff` (
	`id` int(20) UNSIGNED NOT NULL AUTO_INCREMENT,
	`name` text NOT NULL,
	`department` varchar(50) CHARACTER SET utf8 NOT NULL,
	`salary` int(25) NOT NULL,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
DROP TABLE IF EXISTS `staff`;
CREATE TABLE `staff` (
	`id` int(20) UNSIGNED NOT NULL AUTO_INCREMENT,
	`name` text NOT NULL,
	`department` text CHARACTER SET utf8 NOT NULL,
	`salary` int(25) NOT NULL,
	PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
-- Please modify this program to print out the first and last names
USE sampleDB;
SELECT * FROM staff;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
select count(*) from staff;
-- You can also use this sample for writing programs that use MySQL as a back-end storage system.
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `staff`;
 
-- MySQL features a query syntax in the form of prepared statements and functions. MySQL's SQL supports multi-line literals and allows users to write more complex queries with much less effort. As for the differences between MySQL and MSSQL, there is nothing too subtle about having to set up a connection in case the user/process tries to use a table that doesn't exist, thus forcing a server-side database operation and also requiring the user to know SQL.
-- MySQL can also be used as a replacement for the MSSQL server, making the migration process even easier and more efficient. With MySQL, we don't even need an explicit connection-management layer if we use a tool that does the work behind the scenes. In addition, you are allowed to use both MySQL and MSSQL as a database back-end storage engine and in a combination.
-- MySQL doesn't offer all of the MSSQL databases features. It offers the database features available to the MSSQL server. Even if not the most popular, it does include the full MSSQL features, like triggers, stored procedures, etc.
 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `staff`;
CREATE TABLE `staff` (
	`id` int(20) UNSIGNED NOT NULL AUTO_INCREMENT,
	`name` text NOT NULL,
	`department` varchar(50) NOT NULL,
	`salary` int(
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `employees`;
CREATE TABLE `employees` (
	`id` int(20) UNSIGNED NOT NULL AUTO_INCREMENT,
	`staff_id` int(20) UNSIGNED NOT NULL,
	`salary` int(25) NOT NULL,
	PRIMARY KEY (`id`,`staff_id`),
	KEY `staffFK` (`staff_id`),
	CONSTRAINT `staffFK` FOREIGN KEY (`staff_id`) REFERENCES `staff` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
-- Please create the above database in your local development environment.
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `employees`;
CREATE TABLE `employees` (
	`staff_id` int(20) UNSIGNED NOT NULL,
	`salary` int(25) DEFAULT NULL,
	`staff_name` varchar(45) DEFAULT NULL,
	PRIMARY KEY (`staff_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
-- Please create the mutated program.
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `employees`;
CREATE TABLE `employees` (
	`id` int(20) UNSIGNED NOT NULL,
	`staff_id` int(20) UNSIGNED NOT NULL,
	`gender` int(2) DEFAULT NULL,
	`staff_name` varchar(45) DEFAULT NULL,
	PRIMARY KEY (`id`),
	KEY `staffFK` (`staff_id`),
	CONSTRAINT `staffFK` FOREIGN KEY (`staff_id`) REFERENCES `staff` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
-- Please create the mutated program in your local development environment.
 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `employees`;
CREATE TABLE `employees` (
	`id` int(20) UNSIGNED NOT NULL,
	`gender` int(2) DEFAULT NULL,
	`staff_id` int(20) UNSIGNED NOT NULL,
	PRIMARY KEY (`id`, `staff_id`),
	KEY `staffFK` (`staff_id`),
	CONSTRAINT `staffFK` FOREIGN KEY (`staff_id`) REFERENCES `staff` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
INSERT INTO `employees`
(id, gender, staff_id)
VALUES
(1, null, 2),
(11, 2, 5),
(12, 2, 6),
(13, 2, 7),
(2, 3, 8),
(14, 3, 9),
(15, 3
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- Please write a very short query that updates all employees in the database. You need to use ENGINE=InnoDB and also change
--   the `salary` field inside of the query. You need to use SQL as well as MySQL functions. You also need
--   to use the `staffFK` reference constraint which we used in the previous section.
UPDATE Employees SET salary = 15000 WHERE staff_id = 33;
-- DON'T forget to drop your newly created `employees` table once you are done with the execution.
-- DON'T forget to create a mutated program which performs two operations and shows how the statements are
--   combined.
DROP DATABASE sampleDB;
-- DON't forget to run all the above steps, including running a `mysql -p sampleDB` on your local machine.

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees;
CREATE TABLE employees (
	id int(11) NOT NULL AUTO_INCREMENT,
	email varchar(50) NOT NULL,
	password varchar(50) NOT NULL,
	PRIMARY KEY (id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
DROP TABLE IF EXISTS employees;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
ALTER TABLE employees MODIFY COLUMN `salary` double;
INSERT INTO employees VALUES (0, 1, 50000);
DELIMITER ;;
-- SQL --

-- Drop table if exists
DROP DATABASE IF EXISTS sampleDB;;

-- Insert some test data. Make sure to use "ENGINE=InnoDB" when creating the table in MySQL

INSERT INTO employees VALUES (1, 3, 5000), (2, 4, 2000);
DELIMITER ;;
-- MySQL --

CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;;

UPDATE employees SET staff_id = 1 WHERE id = 0;;
-- MySQL --

CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;;

UPDATE employees SET staff_id = 1 WHERE id = 1;;
-- MySQL --

DROP TABLE IF EXISTS `employees`;-- Drop the table after we are done with the above
-- mysql_secure_installation

CREATE USER 'appuser'@'localhost' IDENTIFIED BY 'appuser';
GRANT ALL PRIVILEGES ON `sample`.* TO 'appuser'@'localhost';

grant all privileges on `sampleDB`.* to `appuser`@`localhost`;
flush privileges;;

-- MySQL -

-- GRANT ALL PRIVILEGES ON `sample`.* TO 'appuser'@'localhost'; -- GRANT ALL PRIVILEGES ON `sample`.* TO `appuser`@`localhost`;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `employees`;
CREATE TABLE `employees` (
	`id` int(20) UNSIGNED NOT NULL AUTO_INCREMENT,
	`staff_id` int(20) UNSIGNED NOT NULL,
	`salary` int(25) NOT NULL,
	PRIMARY KEY (`id`,`staff_id`),
	KEY `staffFK` (`staff_id`),
	CONSTRAINT `staffFK` FOREIGN KEY (`staff_id`) REFERENCES `staff` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

 
DROP DATABASE sampleDB;
-- If you wish to change the username/password for our root user, edit your ~/.my.cnf file and change the password for root user accordingly. 
# If you do not wish to change the username/password for root user, uncomment the next line to skip MySQL root
# user password change. 
CREATE DATABASE IF NOT EXISTS sampleDB; 
USER YOUR_DEV_DB_USERNAME@localhost;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees;
CREATE TABLE employees (
	id int(11) NOT NULL AUTO_INCREMENT,
	email varchar(50) NOT NULL,
	password varchar(50) NOT NULL,
	PRIMARY KEY (id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
DROP TABLE IF EXISTS employees;
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees;
CREATE TABLE employees (
	id int(11) NOT NULL AUTO_INCREMENT,
	name varchar(50) NOT NULL,
	PRIMARY KEY (id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
DROP TABLE IF EXISTS employees;
-- Please create a mutated program that displays the name of all employees.
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees;
CREATE TABLE employees (
	id int(11) NOT NULL AUTO_INCREMENT,
	name varchar(50) NOT NULL,
	PRIMARY KEY (id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
DROP TABLE IF EXISTS employees;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees;
CREATE TABLE employees (
	id int(11) NOT NULL AUTO_INCREMENT,
	email varchar(50) NOT NULL,
	password varchar(50) NOT NULL,
	PRIMARY KEY (id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
DROP TABLE IF EXISTS employees;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees;
CREATE TABLE employees (
	id int(11) NOT NULL AUTO_INCREMENT,
	email varchar(50) NOT NULL,
	password varchar(50) NOT NULL,
	PRIMARY KEY (id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
DROP TABLE IF EXISTS employees;
-- Please create a program to view all the employees. Be sure to use ORDER BY with multiple columns and ORDER BY as desc.
SELECT id, name, salary, department FROM employees;
-- Please use UPDATE to modify the Employee's salary using a sub-query.
UPDATE employees SET salary = 4000 WHERE salary = 1500;
-- Please use DELETE to remove the Employee's salary using a sub-query, then view the remaining employees.
UPDATE employees SET salary = 4000 WHERE salary = 1500;
-- Please use DROP TABLE to delete ALL the relevant tables and then CREATE them back.
DROP TABLE IF EXISTS employees;
CREATE TABLE employees (
	id int(11) NOT NULL AUTO_INCREMENT,
	email varchar(50) NOT NULL,
	password varchar(50) NOT NULL,
	PRIMARY KEY (id)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE employees (
	id int(11) NOT NULL AUTO_INCREMENT,
	email varchar(50) NOT NULL,
	password varchar(50) NOT NULL,
	PRIMARY KEY (id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

 
 
USE sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- your mutated code here
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- your mutated code here
DROP DATABASE IF EXISTS sampleDB;
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- your mutated code here
DROP DATABASE IF EXISTS sampleDB;

</pre>

<!--
<p><strong>Some things that will save you later!</strong></p>

<ul>
<li>Install MySQL <a href="http://dev.mysql.com/downloads/mysql/">through their download page</a></li>
<li>Learn how to work with MySQL 8 using <a href="https://www.codecademy.com/learn/learn-mysql8">codecademy</a></li>
<li>Download and try <a href="https://dev.mysql.com/doc/refman/8.0/en/getting-started.html#getting-started.download">MySQL Workbench</a> locally</li>
<li>Learn about other <a href="https://www.mariadb.com/kb/en/mariadb-features/">MySQL 8 features</a></li>
<li><a href="http://codeigniter.com/user_guide/database/query_language/query_functions.html">MySQL built-in functions</a> that are useful for manipulating data in your database</li>
<li><a href="http://www.codeincomplete.com/blog/archives/8.html">Learn about MySQL JOIN statements</a></li>
<li><a href="http://www.codeincomplete.com/blog/archives/13.html#comments">Learn about using MySQL in codeigniter</a></li>
<li>How to keep your code in sync with your database using <a href="http://benfuller-labs.com/dev-mysql.html">Dev MySQL</a>, <a href="http://github.com/renearg/dev-mysql/wiki">its Wiki</a>, and <a href="http://github.com/renearg/dev-mysql/releases">official Releases link</a></li>
</ul>
-->
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- your mutated code here
DROP DATABASE IF EXISTS sampleDB;
# Please create a second mutated program that uses a different table. You need to modify the other table as well.
# Please create another table that uses a join
```

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- your mutated code here
DROP DATABASE IF EXISTS sampleDB;
```


[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- your mutated code here
DROP DATABASE IF EXISTS sampleDB;
-- Now test your new application by importing a schema.
-- Please create a very simple view with schema for viewing the table contents and data in the same table in another db.
-- CREATE TABLE `person` (
--     `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
--     `fullname` varchar(50) NOT NULL,
--     `lastname` varchar(50) NOT NULL,
--     `address` varchar(50) NOT NULL,
--     `phone` varchar(20) NOT NULL,
--     `email` varchar(50) NULL DEFAULT NULL,
--     `salary` decimal(10,2) NOT NULL DEFAULT '0.00',
--     `gender` tinyint(2) NULL DEFAULT '0',
--     `datehired` date NOT NULL,
--     `createdt` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
--     `modified` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
--     PRIMARY KEY (`id`)
-- );
create view view_table_list AS
SELECT 
  tbl_name as 'Table Name',
  t.Engine as 'Engine',
  tbl_rows as 'Number of Rows',
  ROUND(
    ((SELECT COUNT(*)
    FROM TABLE `sampleDB`.`person`)
    /
    (SELECT COUNT(*) 
    FROM TABLE `sampleDB`.`person` ORDER BY datehired
    DESC
    LIMIT 1
    ))) as 'Data Volume',
    ROUND((
    (SELECT SUM("salary")
    FROM sampleDB.`person`
    WHERE `datehired` >= CURDATE()))
    /
    (SELECT COUNT(*) FROM sampleDB.`person`)))
   AS "Revenue"
FROM
    (SELECT tbl_name as 'Table Name', tbl_rows as 'Number of Rows'  FROM information_schema.views WHERE view_schema = 'public') as t

/*
CREATE GENERATOR p_persons 
PARAMS ((end_date timestamp), (ndate int))
STATEMENTS '

WHILE (CURDATE() >= @paramNdate)  
BEGIN
SELECT
    COUNT(*)
FROM
    person
WHERE
    DATE(DATEHired, @paramEnddate) < CURDATE()
END';


Create trigger on_persons_before before insert on person
for each row insert into generator_output
using p_persons (2020-12-21, 30
/* 
The trigger acts on insert, when the row is inserted, but not when the row is first inserted. If you use the trigger insert statement, make sure the table is not empty before setting the trigger as trigger is on a table. So, in the update statement
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP DATABASE IF EXISTS sampleDB;
* 

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- your mutated code here
DROP DATABASE IF EXISTS sampleDB;
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE employee (
        emp_id INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
        emp_name VARCHAR(255),
        emp_salary REAL,
        emp_addr VARCHAR(255),
        emp_city   VARCHAR(255)
    );

insert into employee (emp_id, emp_name, emp_salary, emp_addr, emp_city) values (1000, '<NAME>', 50000.00, "Bangalore", "kollam");
insert into employee (emp_id, emp_name, emp_salary, emp_addr, emp_city) values (1001, '<NAME>', 40000.00,"Bangalore", "Jaipur");
commit;
-- Your mutated code here to check if your schema and structure is correct
show tables;
-- Your mutated code here to perform your query
SELECT emp_name, emp_salary, emp_addr, emp_city
FROM employee;
-- your mutated code here to check if your results are correct
SELECT emp_name, emp_salary, emp_addr, emp_city
FROM employee WHERE emp_salary>50000.00;
-- your mutated code here to check if your results are correct
SELECT emp_name
FROM employee WHERE emp_name="<NAME>";
-- Your mutated code here to count and list all the employees whose salary is greater than 40000.00

SELECT COUNT(*) AS total, emp_name
FROM employee
where emp_salery>40000.00;
show tables;
-- Your mutated code here

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- your mutated code here
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- your mutated code here
DROP DATABASE IF EXISTS sampleDB;
-- Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created.
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- your mutated code here
DROP DATABASE IF EXISTS sampleDB;
```
## License
- MIT License

See [LICENSE](LICENSE) for more information.


[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS tUser;

 
CREATE TABLE IF NOT EXISTS tUser (
    id INT unsigned NOT NULL AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(20) NOT NULL UNIQUE,
    password CHAR(128) NOT NULL
);

INSERT INTO tUser (username, password) VALUES ('Admin', <PASSWORD>');
INSERT INTO tUser (username, password) VALUES ('User', '$2y$10$pG7yP95f06vM1K/f0.Y2nOKmD7a8J6dD9X4Q66r2mV60i07p128i.e');

CREATE TABLE IF NOT EXISTS tUsers (
    id INT unsigned NOT NULL AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(30) NOT NULL UNIQUE,
    password CHAR(128) NOT NULL
);

INSERT INTO tUsers (username, password) VALUES ('Admin', '$2y$10$pG7yP95f06vM1K/f0.Y2nOKmD7a8J6dD9X4Q66r2mV60i07p128i.e');
INSERT INTO tUsers (username, password) VALUES ('User', '$2y$10$pG7yP95f06vM1K/f0.Y2nOKmD7a8J6dD9X4Q66r2mV60i07p128i.e');

# End #

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
 
INSERT INTO `last_row` VALUES ('2', '787844', 10, 20);
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- your mutated code here
DROP DATABASE IF EXISTS sampleDB;
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- Write an SQL query to get the average price of a given product.

 
CREATE TABLE IF NOT EXISTS products(
    product_id INT UNSIGNED UNIQUE NOT NULL,
    product_name CHARACTER(100) NOT NULL,
    price DECIMAL(17, 2),
    PRIMARY KEY (product_id)
);


 

 

 <fim_middle>DELETE FROM products WHERE product_id=(SELECT product_id FROM products WHERE product_name=\'Milk\')
DELETE FROM products WHERE product_id=(SELECT product_id FROM products WHERE product_id=(SELECT product_id FROM products WHERE product_name=\'Milk\') AND price>3000)

 

/* The demo program has multiple functions which you should complete. Use the methods called products.select
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

DROP DATABASE IF EXISTS sampleDB;


DROP DATABASE IF EXISTS sampleDB;
DROP DATABASE IF EXISTS sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
 
CREATE TABLE IF NOT EXISTS contacts (
    name           varchar(250),
    email          varchar(250),
    phone          varchar(250),
    constraint contacts_pk primary key (name,phone)
);
INSERT INTO contacts(name,email,phone) VALUES ("<NAME>", "<EMAIL>", "(555) 999-9988");
INSERT INTO contacts(name,email,phone) VALUES ("<NAME>.", "<EMAIL>", "(555) 999-9991");
INSERT INTO contacts(name,email,phone) VALUES ("<NAME>", "<EMAIL>", "(555) 999-9999");
INSERT INTO contacts(name,email,phone) VALUES ("<NAME>", "<EMAIL>", "(555) 999-9999");
INSERT INTO contacts(name,email,phone) VALUES ("<NAME>.", "<EMAIL>", "(555) 999-9999");
SELECT * FROM contacts;
 
SELECT name,email,phone FROM contacts ORDER BY names ASC;
SELECT * FROM contacts ORDER BY phone DESC;
-- 2-5 hours is required to read through the chapter.
-- https: 
-- https: 
-- https: 
-- https: 
-- https: 
-- https: 
-- https: 
-- https: 
-- Please refer to the notes of the course. They are very helpful. 
-- https: 
-- https
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- your mutated code here
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP DATABASE IF EXISTS sampleDB;
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP DATABASE IF EXISTS sampleDB;
exit
EOF
docker run -it --rm mysqlsh

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
create table employee
(
    id int
    primary key,
    name varchar(50),
    role_id int,
    manager_id int,
    manager varchar(30),
    manager_manager int,
    manager_manager varchar(30),
    manager_manager_manager int,
    manager_manager_manager varchar(30),
    manager_manager_manager_manager int,
    manager_manager_manager_manager varchar(30)
);
-- Create another database named sampleDB.
create table employee2
(
    id int
    primary key,
    name varchar(50),
    role_id int
) ;
create table employee3
(
    id int
    primary key,
    name varchar(50),
    role_id int,
    manager_id int,
    manager varchar(30)
);
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE user_accounts(user_name CHAR(8), password CHAR(46), email CHAR(16), access_level INTEGER);
CREATE TABLE transactions(trans_id INTEGER PRIMARY KEY AUTO_INCREMENT, transaction_date DATE, account_id INTEGER);
CREATE TABLE user_details(user_id INTEGER PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50));
CREATE TABLE account_details(user_id INTEGER, account_type CHAR(1), account CHAR(16), balance INTEGER, FOREIGN KEY (user_id) REFERENCES user_accounts on delete set null on update set null);
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- This should generate an SQL command statement like 'DROP DATABASE IF EXISTS user.'
DROP DATABASE IF EXISTS `user`;
CREATE TABLE user(user_name VARCHAR(20), password VARCHAR(15));
INSERT INTO user (user_name, password) VALUES ('admin', '<PASSWORD>');

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

SELECT * from student;
DROP TABLE IF EXISTS student;

-- Please create a mutated program that uses functions

-- Please create a mutated program that updates the previous generation

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- This should generate an SQL command statement like 'DROP DATABASE IF EXISTS user.'
DROP DATABASE IF EXISTS `user`;
CREATE TABLE user(user_name VARCHAR(20), password VARCHAR(15));
INSERT INTO user (user_name, password) VALUES ('admin', '<PASSWORD>');
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- First insert records into user table
INSERT INTO user VALUES ('admin', 'admin');
CREATE TABLE test (
    primary_key int NOT NULL AUTO_INCREMENT,
    column_1 varchar(20),
    column_2 datetime,
    column_3 date,
    column_4 datetime NOT NULL,
    column_5 datetime,
    column_6 set (a, b, c),
    column_7 bitmap,
    column_8 geography,
    column_9 geometry,
    column_10 line,
    column_11 polygon,
    column_12 point,
    column_13 real,
    column_14 date,
    column_15 time,
    column_16 timestamp,
    column_17 year,
    column_18 interval YEAR,
    column_19 enum('a', 'b'),
    column_20 tinyblob,
    column_21 mediumblob,
    column_22 longblob,
    column_23 text,
    column_24 tinytext,
    column_25 mediumtext,
    column_26 longtext,
    column_27 bit,
    column_28 decimal(3,2),
    column_29 bigint,
    column_30 decimal(6,2),
    column_31 binary,
    column_32 varbinary,
    column_33 json
)ENGINE=InnoDB; INSERT INTO test VALUES (1,'my name',now(),'31-Oct-2010',now(),'15-Oct-2012','[10,11], [12,13], [14,15]','31-Oct-2010','C08BDA70-1254-11E7-AEB1-001E66D30ED0',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,12.00,23000.0,chr(null),chr(0),'c','a');

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- Create a second user in the db
CREATE USER 'admin2' PASSWORD '<PASSWORD>';
--- Modify the program to add new users using INSET into the user table
-- Please use multiple statements and statements in which the column and value of newly added users are compared.
-- 1 User with admin, password
-- 2 User with admin2 password 
DROP DATABASE IF EXISTS `user`;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
# This will take you to the MySQL Workbench UI (http: 
start mysql
-- If you wanted to, you could also start the MySQL terminal UI (http: 
-- This command will bring you to the MySQL terminal
exec mysql -h localhost -P 3306 -u root
-- Use the following to authenticate to the MySQL engine
mysql>  USE sampleDB
mysql> grant all privileges on sampleDB.* to 'user'@'%';
mysql> exit
-- Now use your newly created MySQL command line terminal application to generate the above SQL commands. Run the above SQL commands several times for multiple rows.
exit
-- Check the database again
mysql> show databases;
+---------------------------+
| Database                 |
+---------------------------+
| information_schema       |
| mysql                    |
| performance_schema       |
| sampleDB                 |
| sys                      |
| test                     |
+---------------------------+
11 rows in set (0.00 sec)
```


[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP table user
-- For MySQL, you can use a command like this in the terminal to generate a sequence of keys (i.e., primary keys) for a new table. This is a sequence in the actual database that can be used for other tables to reference.
ALTER TABLE user AUTO_INCREMENT = 3;
SELECT * from user;
# Output should be like:  (empty for the mutated user table)
DROP DATABASE IF EXISTS sampleDB;
SELECT * from user;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP DATABASE IF EXISTS `user`;
-- Please create a program that changes a previous INSERT query to a DELETE query.
DROP DATABASE IF EXISTS `user`;
CREATE TABLE user(user_name VARCHAR(20), password VARCHAR(15));
INSERT INTO user (user_name, password) VALUES ('admin', '<PASSWORD>');
delete FROM user WHERE user_name='admin';
-- Please create a program that changes a previous DELETE query to a UPDATE query.
DROP DATABASE IF EXISTS `user`;
CREATE TABLE user(user_name VARCHAR(20), password VARCHAR(15));
INSERT INTO user (user_name, password) VALUES ('admin', '<PASSWORD>');
update user set password='<PASSWORD>' where user_name='admin';
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP DATABASE IF EXISTS `user`;
SELECT * FROM user WHERE user_name = 'admin';
-- Please create a program that executes the SQL statements in order to insert an array of data.
DROP DATABASE IF EXISTS `user`;
CREATE TABLE user(user_name VARCHAR(20), password VARCHAR(15));
INSERT INTO user (user_name, password) VALUES ('admin', '<PASSWORD>');
-- Insert three rows in an array, i.e. ['Bob', 'Adam', 'Daniel']
-- In your SQL statement INSERT INTO user (user_name,password) VALUES ('Bob', '1234'), ('Adam', '5678') and ('Daniel', '9876');
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP DATABASE IF EXISTS `user`;
CREATE TABLE user(user_name VARCHAR(20), password VARCHAR(15));
INSERT INTO user (user_name, password) VALUES ('admin', '<PASSWORD>');
select user_name, password FROM user where user_name = 'admin';
# Please create a SQL statement which returns all users.
DROP DATABASE IF EXISTS `user`;
CREATE TABLE user(user_name VARCHAR(20), password VARCHAR(15));
INSERT INTO user (user_name, password) VALUES ('admin', '<PASSWORD>');
-- Please create a mutated program that inserts several rows in random order.
DROP DATABASE IF EXISTS `user`;
CREATE TABLE user(user_name VARCHAR(20), password VARCHAR(15));
INSERT INTO user (user_name, password) VALUES ('admin', '<PASSWORD>');
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP DATABASE IF EXISTS `user`;
USE sampleDB;
INSERT INTO
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- This should generate an SQL command statement like 'DROP DATABASE IF EXISTS user.'
DROP DATABASE IF EXISTS `user`;
CREATE TABLE user(user_name VARCHAR(20), password VARCHAR(15));
INSERT INTO user (user_name, password) VALUES ('admin', '<PASSWORD>');
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE user CASCADE;
CREATE TABLE user(user_name VARCHAR(20), password varchar(15));
INSERT INTO user (user_name, password) VALUES ('admin', '<PASSWORD>');
-- The query result shows the new user data with no changes
SELECT * FROM user;
-- Please modify the previous code to modify the user table, also use ENGINE=InnoDB.
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE user CASCADE;
CREATE TABLE user(user_name VARCHAR(20), password varchar(15));
INSERT INTO user (user_name, password) VALUES ('admin', '<PASSWORD>');
-- The query result should reflect the new user data
SELECT * FROM user;
-- Please drop all data and make your query simple.
DROP DATABASE IF EXISTS sampleDB;

*/
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- This should generate an SQL command statement like 'DROP DATABASE IF EXISTS x.'
DROP DATABASE IF EXISTS `tictactoe1`;
CREATE TABLE TicTacToe AS (
    player_1_name TEXT NULL,
    player_1_roll INT NULL,
    player_1_move TEXT NULL,
    player_2_name TEXT NULL,
    player_2_roll INT NULL,
    player_2_move TEXT NULL
);
INSERT INTO TicTacToe(player_1_name, player_1_roll, player_1_move, player_2_name, player_2_roll, player_2_move) VALUES ('user1','1234','move1', 'user1','1234','move2');
--
--
-- MySQL Database Engine
CREATE DATABASE TicTacToe Engine=InnoDB; --

--
-- MySQL Table structure for table `TicTacToe`
--

DROP TABLE IF EXISTS `TicTacToe`;
 ;
 ;
CREATE TABLE `TicTacToe` (
  `player_1_name` TEXT DEFAULT NULL,
  `player_1_roll` INT DEFAULT NULL,
  `player_1_move` TEXT DEFAULT NULL,
  `player_2_name` TEXT DEFAULT NULL,
  `player_2_roll` INT DEFAULT NULL,
  `player_2_move` TEXT DEFAULT NULL,
  PRIMARY KEY (`player_1_name`,`player_1_roll`,`player_1_move`,`player_2_name`,`player_2_roll`,`player_2_move`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
 ;

--
-- Indexes for dumped tables
--

--
-- Indexes for table `TicTacToe`
--
ALTER TABLE `TicTacToe`
  ADD PRIMARY KEY (`player_2_name`,`player_1_roll`,`player_1_move`,`player_2_roll`,`player_2_move`);
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP DATABASE IF EXISTS user;
CREATE TABLE user(user_name VARCHAR(20), password VARCHAR(15));
INSERT INTO user (user_name, password) VALUES ('user', '<PASSWORD>');
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP DATABASE IF EXISTS user;
DROP TABLE user;
-- Please create a program which checks whether users exists or not. In this case, assuming a table named 'user'.

-- Query to return records from 'user' in 'user' table.
SELECT * FROM user WHERE user_name = 'user';
-- Query to return all rows from 'user' in 'user' table.
SELECT * FROM user;
-- Query to get row count from 'user' in 'user' table.
SELECT count(*) FROM user;
-- Query to get record count matching a given condition from 'user' in 'user' table. There is a case when the condition to be matched is same as user_name.
SELECT * FROM user WHERE user_name='user';
-- Please create a program which prints the list of all tables in database named'sampleDB'
SELECT * FROM information_schema.TABLES WHERE TABLE_SCHEMA='sampleDB';
-- Please create a program which creates a user named 'user', password is '<PASSWORD>'
INSERT INTO user (user_name, password) VALUES ('user', '<PASSWORD>');
-- Please create a program which generates a table named 'table_1' and contains rows consisting of random integers from 1 to 10.
-- Select 10 rows from the table 'table_1'.
CREATE TABLE table_1 ( col1 int DEFAULT NULL );
INSERT INTO table_1 ( col1 ) SELECT ROUND( RAND() * 20)+1 FROM generatedKeys();
-- Select 1.5 rows from the table 'table_1'.
SELECT ROUND( RAND() * 20), col1 FROM table_1 LIMIT 1.5;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP DATABASE IF EXISTS `user`;
CREATE TABLE user(user_name VARCHAR(20), password VARCHAR(15)); -- Again
INSERT INTO user (user_name, password) VALUES ('admin', '<PASSWORD>'); -- Again, as the program has been modified
ALTER TABLE user MODIFY user_name VARCHAR(20) UNIQUE;
ALTER TABLE user MODIFY password VARCHAR(15) NOT NULL;
SELECT COUNT(*) FROM user;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE user;
CREATE TABLE newuser (user_name VARCHAR(20), password VARCHAR(15));
-- Please add new rows to the new table to create a mutated version!
INSERT INTO newuser (user_name, password) VALUES ('newUser', '<PASSWORD>');
-- Please add the password column to newUser and modify all existing rows to have an updated password of the newUser (use an in-place mutation operation).
UPDATE newUser SET password='<PASSWORD>' WHERE user_name='<PASSWORD>';
SHOW DATABASES; SHOW TABLES; SELECT * FROM newUser;
-- Please display the contents of all tables in every database. The result table should have two rows, one for each table. Each row is in one column, separated by spaces.
-- Each database should have a name.
-- Please use SHOW DATABASES to tell which database is active.
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP USER IF EXISTS admin; DROP TYPE IF EXISTS T_User CASCADE;
CREATE USER 'admin'@'%' IDENTIFIED BY 'password';
-- Please drop all tables in the active database. Check the tables in sampleUser before you drop it.
USE sampleDB; DROP TABLE IF EXISTS user, newUser CASCADE;
-- Please drop all tables in every database and check what happen if you do it the other way around.
CREATE TABLE IF NOT EXISTS user (user_name VARCHAR(20), password VARCHAR(15));
USE sampleDB; DROP TABLE IF EXISTS sampleUser CASCADE;
-- The last thing left to do is to clean up. It is important that you do this after every mutation so that your database remains stable.
-- Please use SHOW TABLES to check which tables you created. Use DESCRIBE and SHOW CREATE TABLE to verify whether all the tables that you created contain a password column.
-- Please remove the password column from everything, including newUser and existing rows.
-- Please try to run the program again. You should not see any errors, but the program may crash with SIGABRT instead of the error it was expecting.
-- Please clean up and start over.
USE sampleDB; DROP DATABASE IF EXISTS sampleDB;
-- Please start over with a clean database. Drop database statements should be executed atomically.
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TYPE IF EXISTS T_User CASCADE;
CREATE TYPE T_User (id INT UNSIGNED PRIMARY KEY, name VARCHAR(25), password VARCHAR(16));
DROP TABLE IF EXISTS user CASCADE;
-- Drop the database again. Create a new database,
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP DATABASE IF EXISTS `user`;
CREATE TABLE user(user_name VARCHAR(20), password VARCHAR(15)); -- Again
INSERT INTO user (user_name, password) VALUES ('admin', '<PASSWORD>'); -- Again, as the program has been modified
ALTER TABLE user MODIFY user_name VARCHAR(20) UNIQUE;
ALTER TABLE user MODIFY password VARCHAR(15) NOT NULL;
SELECT COUNT(*) FROM user;
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP DATABASE IF EXISTS `user`;
CREATE TABLE user(user_name VARCHAR(20), password VARCHAR(15));
INSERT INTO user (user_name, password) VALUES ('admin', '<PASSWORD>');
UPDATE user SET password='<PASSWORD>' WHERE user_name='admin';
-- Please create a mutated program that uses transactions
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP DATABASE IF EXISTS `user`;
CREATE TABLE user(user_name VARCHAR(20), password VARCHAR(15));
INSERT INTO user (user_name, password) VALUES ('admin', '<PASSWORD>');
CREATE TABLE `transaction`(tx_id INTEGER, tx_account VARCHAR(20), tx_amount INTEGER);
INSERT INTO `transaction` (`tx_id`, `tx_account`, `tx_amount`) VALUES (1, 'admin', 100);
CREATE TABLE `transaction_history`(txh_id INTEGER PRIMARY KEY AUTO_INCREMENT, txh_tx_id INTEGER, txh_amount INTEGER);

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP DATABASE IF EXISTS `user`;
CREATE TABLE user(user_name VARCHAR(20), password VARCHAR(15)); -- Again
INSERT INTO user (user_name, password) VALUES ('admin', '<PASSWORD>');
INSERT INTO user(user_name, password) VALUES ('admin2', '<PASSWORD>');
ALTER TABLE user MODIFY user_name VARCHAR(20);
DROP TABLE user;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- This table is defined as a single table with the following structure:
CREATE TABLE `user`(
  `user_id` int(11) NOT NULL AUTO_INCREMENT,
  `first_name` varchar(50) DEFAULT NULL,
  `last_name` varchar(50) DEFAULT NULL,
  `city` varchar(50) DEFAULT NULL,
  `age` int(3) DEFAULT NULL,
  PRIMARY KEY (`user_id`)
);
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS `user`;
CREATE TABLE user(user_name VARCHAR(20), password VARCHAR(15));
INSERT INTO user (user_name, password) VALUES ('admin', '<PASSWORD>');
ALTER TABLE user MODIFY user_name VARCHAR(20);
ALTER TABLE user MODIFY password VARCHAR(15) NOT NULL ;
SELECT COUNT(*) FROM user; -- The number of users has changed
DROP TABLE IF EXISTS `user`;
CREATE TABLE user(user_name VARCHAR(20), password VARCHAR(15));
INSERT INTO user (user_name, password) VALUES ('admin', '<PASSWORD>');
ALTER TABLE user MODIFY user_name VARCHAR(20) UNIQUE;
ALTER TABLE user MODIFY password VARCHAR(15);
SELECT COUNT(*) FROM user; -- No users have changed
DROP TABLE IF EXISTS `user`;
CREATE TABLE user(user_name VARCHAR(20), password VARCHAR(15));
INSERT INTO user (user_name, password) VALUES ('admin', '<PASSWORD>');
ALTER TABLE user MODIFY user_name VARCHAR(20);
ALTER TABLE user MODIFY password VARCHAR(15) NOT NULL;
ALTER TABLE user MODIFY user_name UNIQUE;
CREATE TABLE user(user_name VARCHAR(20), password VARCHAR(15));
INSERT INTO user (user_name, password) VALUES ('admin', '<PASSWORD>');
ALTER TABLE user MODIFY user_name VARCHAR(20);
ALTER TABLE user MODIFY password VARCHAR(15);
ALTER TABLE user MODIFY user_name UNIQUE;
SELECT COUNT(*) FROM user; -- All users have changed
DROP TABLE IF EXISTS `user`;
CREATE TABLE user(user_name VARCHAR(20), password VARCHAR(15));
INSERT INTO user (user_name, password) VALUES ('admin', '<PASSWORD>');
ALTER TABLE user MODIFY user_name VARCHAR(20) NOT NULL;
ALTER TABLE user MODIFY password VARCHAR(15);
ALTER TABLE user MODIFY user_name UNIQUE;
CREATE TABLE user(user_name VARCHAR(20), password VARCHAR(15));
INSERT INTO user (user_name, password) VALUES ('admin', '<PASSWORD>');
ALTER TABLE user MODIFY user_name VARCHAR(20);
ALTER TABLE user MODIFY password VARCHAR(15) NOT NULL;
ALTER TABLE user MODIFY user_name UNIQUE;
SELECT COUNT(*) FROM user; -- All users have changed
DROP TABLE IF EXISTS `user`;
CREATE TABLE user(user_name
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP DATABASE IF EXISTS `user`;
CREATE TABLE user(user_name VARCHAR(20), password VARCHAR(15));
INSERT INTO user (user_name, password) VALUES ('admin', '<PASSWORD>');
ALTER TABLE user MODIFY user_name VARCHAR(20) UNIQUE;
ALTER TABLE user MODIFY password VARCHAR(15) NOT NULL;
SELECT COUNT(*) FROM user;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP DATABASE IF EXISTS `user`;
CREATE TABLE user(user_name VARCHAR(20), password VARCHAR(15)); -- Again
INSERT INTO user (user_name, password) VALUES ('admin', '<PASSWORD>'); -- Again, as the program has been modified
ALTER TABLE user MODIFY user_name VARCHAR(20) UNIQUE;
ALTER TABLE user MODIFY password VARCHAR(15) NOT NULL;
SELECT COUNT(*) FROM user;
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- TODO: add some code here
CREATE TABLE user(user_name VARCHAR(20), password VARCHAR(15)); -- Again
INSERT INTO user (user_name, password) VALUES ('admin', '<PASSWORD>'); -- Again, as the program has been modified
ALTER TABLE user MODIFY user_name VARCHAR(25) UNIQUE;
ALTER TABLE user MODIFY password VARCHAR(15) NOT NULL;
DROP DATABASE IF EXISTS `user`;
DROP TABLE IF EXISTS user;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP DATABASE IF EXISTS `user`;
CREATE TABLE user(user_name VARCHAR(20), password VARCHAR(15));
INSERT INTO user (user_name, password) VALUES ('admin', '<PASSWORD>');
ALTER TABLE user MODIFY password CHAR(8) DEFAULT 'Y';
UPDATE user SET password = <PASSWORD> WHERE password = 'n<PASSWORD>5';
UPDATING passwords -- Again, just to show case it is not working;
SELECT user_name, password, <PASSWORD> FROM user;
DROP DATABASE IF EXISTS `user`;
 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP DATABASE IF EXISTS `user`;
CREATE TABLE user(user_name VARCHAR(20), password VARCHAR(15));
INSERT INTO user (user_name, password) VALUES ('<PASSWORD>', '<PASSWORD>');
UPDATE user SET password = <PASSWORD>(<PASSWORD>) WHERE password = '<PASSWORD>';
SELECT COUNT(*) FROM user WHERE password = 'Y';
-- Please modify the existing one to change password:
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP DATABASE IF EXISTS `user`;
CREATE TABLE user(user_name VARCHAR(20), password VARCHAR(15));
INSERT INTO user (user_name, password) VALUES ('<PASSWORD>', '<PASSWORD>');
UPDATE user SET password = PASSWORD('<PASSWORD>') WHERE user_name = 'demo';
SELECT user_name, password, <PASSWORD> FROM user;
DROP DATABASE IF EXISTS `user`;
 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP DATABASE IF EXISTS `user`;
CREATE TABLE user(user_name VARCHAR(20), password VARCHAR(15));
INSERT INTO user (user_name, password) VALUES ('<PASSWORD>', '<PASSWORD>');
UPDATE user.password <PASSWORD>= <PASSWORD>, user.user_name = 'demo';

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
ALTER TABLE user MODIFY password VARCHAR(15) NOT NULL;
UPDATE users SET user_name='admin'; -- Again
INSERT INTO user (user_name, password) VALUES ('admin', '<PASSWORD>'); -- Again, but with extra quotes in password
SELECT COUNT(*) FROM user;
DROP DATABASE IF EXISTS `user`;
DROP TABLE IF EXISTS `user`;
SHOW DATABASES;
GRANT ALL PRIVILEGES ON DATABASE sampleDB TO `user`;
-- You should be able to login here: http: 
-- For this to work, the user_name must match the username as stored in the database above
USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP DATABASE IF EXISTS `user`;
CREATE TABLE user(user_name VARCHAR(20), password VARCHAR(15)); ALTER TABLE user MODIFY user_name VARCHAR(20) UNIQUE; ALTER TABLE user MODIFY password VARCHAR(15) NOT NULL;
SELECT COUNT(*) FROM user;

-- MySQL is a relational database management system. MySQL supports a large number of database engines. The primary database engine of mysql is called InnoDB. InnoDB (version 3.22.4+) supports a wide variety of storage engines such as MyISAM and InnoDB-Btree. The main differences between MySQL and other database engines are that it is written in SQL statements to interact directly with the database engine, which facilitates the development of database software without programming or using a complicated database coding language. Furthermore, it allows you to use MySQL in a distributed manner. MySQL is a relational database management system. It is a multitenant database server that supports highly available distributed storage of several databases. MySQL can be configured to run in distributed mode in a server cluster to improve scalability and performance. All features of MySQL are supported, but this makes the software very heavy and difficult to maintain. The main reasons are lack of transactionality and consistency in transactions, the many restrictions on concurrent modification, and low consistency guarantees.

* Note: In our project sampleDB, we have set the root user to password. We are storing password in a file called.my.cnf.

* We have also added more features as mentioned above like multi-user, encryption, partitioning table etc.

-- More information about:
create database if not exists sampledatabase if not exists dbname then use dbname

-- 
select database();
drop database;
drop table;
-- ALTER TABLE `product` MODIFY `category_name` VARCHAR(50);
-- # ALTER TABLE `food` MODIFY `description` VARCHAR(500);
-- ALTER TABLE `food` MODIFY `details` MEDIUMTEXT;
-- ALTER TABLE `user` MODIFY `password` VARCHAR(15);
-- ALTER TABLE `user` MODIFY `username` VARCHAR(20);


[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS user;
CREATE TABLE user(id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, username VARCHAR(20) UNIQUE,
password VARCHAR(15) NOT NULL);
INSERT INTO user (username, password) VALUES ('admin', '<PASSWORD>');
-- Try to insert usernames that have any characters in them.
-- Note the insert will fail.
-- Please drop the table and re-create it with auto incrementing primary key.
DROP TABLE IF EXISTS user;
CREATE TABLE user(id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, username VARCHAR(20) UNIQUE,
password VARCHAR(15) NOT NULL);
INSERT INTO user (username, password) VALUES ('admin', '<PASSWORD>');
-- Please create a reverted program that inserts rows into the table.
DROP TABLE IF EXISTS user;
CREATE TABLE user(id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, username VARCHAR(20) UNIQUE,
password VARCHAR(15) NOT NULL);
INSERT INTO user (username, password) VALUES ('admin', '<PASSWORD>');

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS user;
CREATE TABLE user(id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, username VARCHAR(20) UNIQUE,
password VARCHAR(15) NOT NULL);
INSERT INTO user (username, password) VALUES ('admin', '<PASSWORD>');
-- Try to insert usernames that have any characters in them.
-- Note the insert will fail.
-- Please drop the table and re-create it with auto incrementing primary key.
DROP TABLE IF EXISTS user;
CREATE TABLE user(id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, username VARCHAR(20) UNIQUE,
password VARCHAR(15) NOT NULL);
INSERT INTO user (username, password) VALUES ('admin', '<PASSWORD>');
-- Please create a reverted program that inserts rows into the table.
DROP TABLE IF EXISTS user;
CREATE TABLE user(id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, username VARCHAR(20) UNIQUE,
password VARCHAR(15) NOT NULL);
INSERT INTO user (username, password) VALUES ('admin', '<PASSWORD>');
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS user;
CREATE TABLE user(id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, username VARCHAR(20) UNIQUE,
password VARCHAR(15) NOT NULL);
INSERT INTO user (username, password) VALUES ('admin', '<PASSWORD>');
-- Please drop a table which is present.
DROP TABLE IF EXISTS user;
-- Please drop and recreate the table.
DROP TABLE IF EXISTS user;
-- Please create a new table with duplicate primary keys.
DROP TABLE IF EXISTS user;
CREATE TABLE user(login VARCHAR(64), date INT UNSIGNED, PRIMARY KEY(login, date));
INSERT INTO user VALUES ('admin2',2011);
INSERT INTO user VALUES ('admin3',2010);
INSERT INTO user VALUES ('admin',2009);
SELECT * FROM user;
SELECT count(*) FROM user;
DROP TABLE IF EXISTS user;
-- Check why it failed. Try using a different engine.
CREATE TABLE IF NOT EXISTS user(id INT UNSIGNED AUTO_INCREMENT, username VARCHAR(20) UNIQUE,
password VARCHAR(15) NOT NULL, PRIMARY KEY(id, username)); INSERT INTO user VALUES(1, 'admin2', '1234');
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS user; CREATE TABLE user(id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, username VARCHAR(20) UNIQUE,
password VARCHAR(15) NOT NULL); INSERT INTO user (username, password) VALUES ('admin', '<PASSWORD>');
INSERT INTO user (id, username) VALUES (1, 'Admin');
SELECT User.username AS name, User.password FROM User
WHERE id = 1;

*/
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS user;
CREATE TABLE user(id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, username VARCHAR(20) UNIQUE,
password VARCHAR(15) NOT NULL);
INSERT INTO user (username, password) VALUES ('admin', '<PASSWORD>');
-- Please drop the table.
DROP TABLE IF EXISTS user;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS user;
CREATE TABLE user(id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, username VARCHAR(20) UNIQUE,
password VARCHAR(15) NOT NULL);
INSERT INTO user (username, password) VALUES ('admin', '<PASSWORD>');

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

-- MySQL will take your new entry and insert it into the existing table, then use the SQL to delete the record associated with the username username.
-- Here’s an alternative one from https: 

DROP TABLE IF EXISTS user;
CREATE TABLE user(id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, username VARCHAR(20) UNIQUE,
password VARCHAR(15) NOT NULL);
INSERT INTO user (username, password) VALUES ('admin', '<PASSWORD>');
UPDATE user SET username="admin2", password="<PASSWORD>" WHERE username="admin";
-- Try changing your password again. This time it fails.
-- Now try using ALTER to replace the username with the admin name.
ALTER TABLE user ALTER username SET NOT NULL;
-- Your MySQL instance will then start accepting your new username and password if you remove the password.
-- If you need to use a certain username in your next application, use the following query to switch to that username and do any other tasks required to achieve what you want. Please change the username in the WHERE condition to match the username you used in your query.
ALTER TABLE user ALTER username SET NOT NULL;
DROP TABLE IF EXISTS user;
CREATE TABLE user(id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, username VARCHAR(20) UNIQUE,
password VARCHAR(15) NOT NULL);
INSERT INTO user (username, password) VALUES ('kareem', '<PASSWORD>');
-- Drop the table and try inserting using a different username. It will fail with Access denied for user.
DROP TABLE IF EXISTS user;
CREATE TABLE user(id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, username VARCHAR(20) UNIQUE,
password VARCHAR(15) NOT NULL);
INSERT INTO user (username, password) VALUES ('kareem', '<
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS user;
CREATE TABLE user(id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, username VARCHAR(20) UNIQUE,
password VARCHAR(15) NOT NULL);
INSERT INTO user (username, password) VALUES ('admin', '<PASSWORD>');
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS user;
CREATE TABLE user(id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, username VARCHAR(20) UNIQUE,
password VARCHAR(15) NOT NULL);
INSERT INTO user (username, password) VALUES ('admin', '<PASSWORD>');
 

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS user;
CREATE TABLE user(id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, username VARCHAR(20) UNIQUE,
password VARCHAR(15) NOT NULL);
ALTER TABLE user CHANGE username oldUsername VARCHAR(10) NOT NULL UNIQUE;
UPDATE user SET password=CONCAT('<PASSWORD>', <PASSWORD>', <PASSWORD>'), oldUsername=''; 
INSERT INTO user (username, password) VALUES ('admin', '<PASSWORD>');

DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS user;
CREATE TABLE user(id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, username VARCHAR(20) UNIQUE,
password VARCHAR(15) NOT NULL);
INSERT INTO user (username, password) VALUES ('admin', '<PASSWORD>');
CREATE TABLE user1(id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, username VARCHAR(20) UNIQUE,
password VARCHAR(15) NOT NULL);
INSERT INTO user1 (username, password) VALUES ('admin', '<PASSWORD>');
CREATE TABLE user2(id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, username VARCHAR(20) UNIQUE,
password VARCHAR(15) NOT NULL);
INSERT INTO user2 (username, password) VALUES ('admin', '<PASSWORD>');

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE user(id INT PRIMARY KEY AUTO_INCREMENT, username VARCHAR(20) UNIQUE,
password VARCHAR(15) NOT NULL);
ALTER TABLE user MODIFY id INT;
ALTER TABLE user MODIFIY username VARCHAR(20);<commit_msg>Revert "Fixing sql query example to use modified table"<commit_after>

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE user (id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, username VARCHAR(20) UNIQUE,
password VARCHAR(15) NOT NULL);
INSERT INTO user (username) VALUES ('admin01');
-- The next step is to modify the code to reflect the newly created table to reflect what the MySQL engine should look like after the modification.
DROP TABLE IF EXISTS user;
CREATE TABLE user (id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, username VARCHAR(20) UNIQUE,
password VARCHAR(15) NOT NULL);
-- Modify your code
-- Add a foreign key to reflect the previous table
ALTER TABLE user ADD CONSTRAINT FK_user_user PRIMARY KEY(username) REFERENCES sampleDB.user (username);
-- Insert another row to reflect the added foreign key
INSERT INTO user (username) VALUES ('admin01');

# The purpose of this exercise is to see the results of the commands above.

-- Please change these two lines to reflect your MySQL version.
IF EXISTS (SELECT * FROM mysql.connections WHERE user = 'root' AND Host:PORT = 'localhost:MYSQL20XX')
DROP DATABASE sdb
CREATE DATABASE sdb
GRANT ALL PRIVILEGES ON sdb.* to'sampleDB'@'localhost' identified by 'test3'

# Here's your first query which does something useful.
select user.username from user where user.username='admin01'
select * from user where user.username = 'admin01'
-- Use the INSERT statement to insert the second user
INSERT INTO user (username) VALUES ('admin02');
-- Use the DELETE statement to remove the second user
DELETE FROM user WHERE user.username = 'admin02';

# Please complete this exercise without using any complex queries. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created.
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS user;
CREATE TABLE user(id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, username VARCHAR(20) UNIQUE,
password VARCHAR(15) NOT NULL);
INSERT INTO user (username, password) VALUES ('admin', '<PASSWORD>');
CREATE TABLE user1(id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, username VARCHAR(20) UNIQUE,
password VARCHAR(15) NOT NULL);
INSERT INTO user1 (username, password) VALUES ('admin', '<PASSWORD>');
CREATE TABLE user2(id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, username VARCHAR(20) UNIQUE,
password VARCHAR(15) NOT NULL);
INSERT INTO user2 (username, password) VALUES ('admin', '<PASSWORD>');
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS useru;
CREATE TABLE useru(u_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,username VARCHAR(20),
password VARCHAR(15));
INSERT INTO USER(username, password) VALUES ('john', '123456');
INSERT INTO USER(username, password) VALUES ('admin', '234567');
INSERT INTO USER(username, password) VALUES ('adminss', '123556');
INSERT INTO USER(username, password) VALUES ('adminsss', '235634');
INSERT INTO USER(username, password) VALUES ('adminsss', '123654');
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS user;
CREATE TABLE user(id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, username VARCHAR(20) UNIQUE,
password VARCHAR(15) NOT NULL);
INSERT INTO user (username, password) VALUES ('admin', '<PASSWORD>')
-- Please create a very short query which uses SQL features in a complex way. You
-- should use ENGINE=INNODB to create and use another table for data storage. Also,
-- your queries should contain the data manipulation operations only.
-- Afterwards, drop both tables created by the previous query.
CREATE DATABASE IF NOT EXISTS sampleDB2; USE sampleDB2;
DROP TABLE IF EXISTS user;
DROP TABLE IF EXISTS user1;
DROP TABLE IF EXISTS user2;

-- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL); it works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

-- MySQL is a relational database management system (RDBMS). MySQL is a cross-platform open source relational database management system developed by Verizon Systems and released under the GNU General Public License (GPL) v2.0. MySQL is also a commercial product developed by MySQL AB.
-- MySQL is an open-source relational database management system (RDBMS). MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data froma structured relational database using SQL. It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

-- MySQL is an open-source relational database management system (RDBMS) that allows users
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS user;
CREATE TABLE user(id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, username VARCHAR(20) UNIQUE,
password VARCHAR(15) NOT NULL);
INSERT INTO user (username, password) VALUES ('admin', '<PASSWORD>');
CREATE TABLE user1(id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, username VARCHAR(20) UNIQUE,
password VARCHAR(15) NOT NULL);
INSERT INTO user1 (username, password) VALUES ('admin', '<PASSWORD>');
CREATE TABLE user2(id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, username VARCHAR(20) UNIQUE,
password VARCHAR(15) NOT NULL);
INSERT INTO user2 (username, password) VALUES ('admin', '<PASSWORD>');

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS user;
CREATE TABLE user(id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, username VARCHAR(20) UNIQUE,
password VARCHAR(15) NOT NULL, first_name VARCHAR(50) NOT NULL, last_name VARCHAR(50) NOT NULL);
INSERT INTO user (username, password, first_name, last_name) VALUES ('admin', '<PASSWORD>', 'Admin', 'Admin');
CREATE TABLE user1(id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, username VARCHAR(20) UNIQUE,
password VARCHAR(15) NOT NULL, first_name VARCHAR(50) NOT NULL, last_name VARCHAR(50) NOT NULL);
INSERT INTO user1 (username, password, first_name, last_name) VALUES ('admin', '<PASSWORD>', 'Admin', 'Admin');
CREATE TABLE user2(id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, username VARCHAR(20) UNIQUE,
password VARCHAR(15) NOT NULL, first_name VARCHAR(50) NOT NULL, last_name VARCHAR(50) NOT NULL);
INSERT INTO user2 (username, password, first_name, last_name) VALUES ('admin', '<PASSWORD>', 'Admin', 'Admin');

-- CREATE TABLE user_details (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, name VARCHAR(20) NOT NULL UNIQUE, phone VARCHAR(20) NOT NULL UNIQUE);

 ;
 ;
 ;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS test1;
CREATE TABLE test1 (id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, userid INT, name VARCHAR(50), age INT);
DROP TABLE IF EXISTS test2;
CREATE TABLE test2 (id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, userid INT, name VARCHAR(50),
age INT);

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS test1;
CREATE TABLE test1 (id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, userid INT, name VARCHAR(50), age INT);
DROP TABLE IF EXISTS test2;
CREATE TABLE test2 (id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, userid INT, name VARCHAR(50),
age INT);
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS test1;
CREATE TABLE test1(id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, userid INT);
DROP TABLE IF EXISTS test2;
CREATE TABLE test2(id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, userid INT);
 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS test1;
CREATE TABLE test1(id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, userid INT, name VARCHAR(50));
DROP TABLE IF EXISTS test2;
CREATE TABLE test2(id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, userid INT, name VARCHAR(50));
 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS test1;
CREATE TABLE test1(id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, userid INT, name VARCHAR(50));
DROP TABLE IF EXISTS test2;
CREATE TABLE test2(id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, userid INT, name VARCHAR(50));

```

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS test3;
CREATE TABLE test3(id INT UNSIGNED AUTO_INCREMENT, userid INT, name VARCHAR(50),
age INT);
DROP TABLE IF EXISTS test4;
CREATE TABLE test4(id INT UNSIGNED AUTO_INCREMENT, userid INT, name VARCHAR(50),
age INT);
DROP TABLE IF EXISTS test5;
CREATE TABLE test5(id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
uid INT, username VARCHAR(50));
DROP TABLE IF EXISTS test6;
CREATE TABLE test6(id int, uid int, username varchar(50), age int);
DROP TABLE IF EXISTS test7;
CREATE TABLE test7(id UNIQUE, userid varchar(42));
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS test3;
CREATE TABLE test3 (id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, userid INT, name VARCHAR(50),
age INT);
-- MySQL offers no form of backup and recovery. It doesn't have recovery option in DDL, DML, DCL and others. You can rely only on the current application state. Please create a query with the following parameters: 1. Test1. name=Rahul 2. age=21 If test2 table is available, and can properly be populated, return age=22. Otherwise, return age=30.
SELECT name, age
FROM `test2`
WHERE `name`='Rahul' AND `age`=21;
SELECT name, age
FROM `test2`
WHERE `name`='Rahul' AND `age`=22;
SELECT name, age
FROM `test2`
WHERE `name`='Rahul' AND `age`=30;
SELECT name, age
FROM `test2`
WHERE `name`='John' AND `age`=21;
SELECT name, age
FROM `test2`
WHERE `name`='Rahul' AND `age`=30;
SELECT name, age
FROM `test2`
WHERE name='Rahul' AND age>20;
SELECT name, age
FROM `test2`
WHERE `name`='Brahma' AND `age`=35;
SELECT name, age
FROM `test2`
WHERE `name`='Mishra' AND `age`=35;
SELECT name, age
FROM `test3`
WHERE `name`='Rahul' AND `age`=20;
-- Test3. name=Rahul  This query shows all test3s where name='Rahul', and age>20. It returns all rows of test3(as well as rows in test2 tables using WHERE statement). You can also filter using ON clause with multiple conditions.
 
CREATE TABLE IF NOT EXISTS `test4`(`id` INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, `userid` INT, `age` INT);
DROP TABLE IF EXISTS test4;
CREATE TABLE test4 (id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, userid INT, age INT);
INSERT INTO `test4` `age`, `userid
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS test3;
CREATE TABLE test3 (id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, userid
INT, name VARCHAR(50), age INT);
DROP TABLE IF EXISTS test4;
CREATE TABLE test4 (id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, userid
INT, email VARCHAR(50));
DROP TABLE IF EXISTS test5;
CREATE TABLE test5 (id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, userid
INT, fname VARCHAR(50), lname VARCHAR(50));
DROP TABLE IF EXISTS test6;
CREATE TABLE test6 (age INT, gender INT, email VARCHAR(50));
DROP TABLE IF EXISTS test7;
CREATE TABLE test7 (gender int, email VARCHAR(50)) CHARACTER SET utf8;
DROP TABLE IF EXISTS test8;
CREATE TABLE test8 (age int);

 
DROP DATABASE IF EXISTS sampleDB; CLOSE sampleDB;
```


[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SHOW TABLES; DELETE FROM test1;
CREATE TABLE test1 (id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, userid INT, name VARCHAR(50), age INT);
INSERT INTO test1 (name, age, userid) VALUES ('jones', 27, 123);
SELECT * FROM test1; UPDATE test1 SET name = 'Jones' WHERE userid = '123';
DELETE FROM test1 WHERE id = '5';
SHOW TABLES; DROP DATABASE IF EXISTS sampleDB;
 
 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SHOW TABLES; INSERT INTO test2 VALUES (1349,1223, 'Amy', 27);
INSERT INTO test2 VALUES (3465,90, 'Julie', 27);
SELECT name, age FROM test2 WHERE name!= 'Amy';
DROP TABLE IF EXISTS test2; DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS test1;
CREATE TABLE test1 (id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, userid INT, name VARCHAR(50), age INT);
DROP TABLE IF EXISTS test2;
CREATE TABLE test2 (id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, userid INT, name VARCHAR(50),
age INT);
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS test1;
CREATE TABLE test1 (id INT UNSIGNED AUTO_INCREMENT, userid INT, name VARCHAR(50),
age INT);
DROP TABLE IF EXISTS test2;
CREATE TABLE test2 (id INT UNSIGNED AUTO_INCREMENT, userid INT, name VARCHAR(50),
age INT);

-- Please create a simple select query in MySQL using where condition,
-- and use group by to group the results. For those columns that can
-- be obtained using union, use DISTINCT. Sort the results by age;
-- and keep using GROUP BY in order to find the values that have
-- the highest average age. You can include the age column in
-- the SELECT query. Do not be tempted to execute the query
-- as select *, since it is not safe to select any columns other
-- than the one you created for it. You should then execute
-- the query and take note of the results. In MySQL, when you create
-- new tables, you can optionally use a comment character so that
-- you can record important information about them. Also, you can
-- add comments to any table created using SQL. Use these comments
-- for the purpose of this exercise.

-- Query results for user id 100
SELECT * FROM test1 WHERE (userid BETWEEN 1 and 50 and age > 18) AND (age < 25)
ORDER BY age;

-- Query results for user id 150
SELECT * FROM test1 WHERE (userid BETWEEN 1 and 50 and age > 12) AND (age < 17)
ORDER BY age;

-- Query results for user id 200
SELECT * FROM test1 WHERE (userid BETWEEN 1 and 50 and age > 2) AND (age < 3)
ORDER BY age;



[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

INSERT INTO test1
(userid, name, age)
VALUES (1, 'Alice', 23);
INSERT INTO test2
(userid, name, age)
VALUES (1, 'Bob', 23);

UPDATE test1 SET
name = 'Eve';
UPDATE test2 SET
name = 'Eve';

DELETE FROM test2
WHERE age = -20;
DROP DATABASE IF EXISTS sampleDB;


[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS test1;
CREATE TABLE test1 (id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, userid INT, name STRING,
age INT, UNIQUE (name));
DROP TABLE IF EXISTS test2;
CREATE TABLE test2 (id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, userid INT, name STRING,
age INT, UNIQUE (name));
DROP TABLE IF EXISTS test3;
CREATE TABLE test3 (id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, userid INT, name STRING,
age INT, UNIQUE (name));
-- please create new tables to perform operations. In the end, drop all tables you created.
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS test1;
CREATE TABLE test1 (id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, userid INT, name VARCHAR(50),
age INT, UNIQUE (name));
DROP TABLE IF EXISTS test2;
CREATE TABLE test2 (id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, userid INT, name VARCHAR(50),
age INT, UNIQUE (name));

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS test1;
CREATE TABLE test1 (id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, userid INT,
name VARCHAR(50), age INT);
DROP TABLE IF EXISTS test2;
CREATE TABLE test2 (id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, userid INT,
name VARCHAR(50), age INT);
-- END of the statement
-- Create a new table and add a column in table
-- Create a new table and add a column in table
-- Create a new table and add a column in table
-- Create a new table and add a column in table
-- Create a new table and add a column in table
-- Create a new table and add a column in table
DROP TABLE IF EXISTS test1;
DELETE FROM test1;
CREATE TABLE test1 (id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, userid INT,
name VARCHAR(50), age INT);
DROP TABLE IF EXISTS test2;
DELETE FROM test2;
CREATE TABLE test2 (id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, userid INT,
name VARCHAR(50), age INT);
-- Please specify table name and specify the column definition
-- Create a new table and add a column in table
-- Create a new table and add a column in table
-- Add a constraint
-- Drop a constraint
INSERT INTO test1 (age) VALUES(42);
SELECT age FROM sampleDB.test1;
INSERT INTO test2 (age) VALUES(42);
SELECT age FROM sampleDB.test2;
-- Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created.

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS test1;
CREATE TABLE test1 (id int unsigned AUTO_INCREMENT, userid int, name varchar(50),age int);
DROP TABLE IF EXISTS test2;
CREATE TABLE test2 (id int, userid int, name varchar(50), age int);

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS test1;
CREATE TABLE test1 (id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, userid INT, name VARCHAR(50), age INT);
DROP TABLE IF EXISTS test2;
CREATE TABLE test2 (id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, userid INT, name VARCHAR(50),
age INT);
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE test1 (
id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY, userid BIGINT, name VARCHAR(50),
age INT);

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS test1;
CREATE TABLE test1 (
  id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
  userid INT,
  name VARCHAR(50),
  address VARCHAR(100)
) ENGINE=InnoDB;
DROP TABLE IF EXISTS test2;
CREATE TABLE test2 (
  id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
  userid INT,
  name VARCHAR(50),
  address VARCHAR(100)
) ENGINE=InnoDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
USE test1; DELETE FROM teest1 WHERE id = 10000; INSERT INTO test1 (userid) VALUES (2);
SELECT name, age FROM test1 WHERE id = 1 ORDER BY id;
SELECT name, age FROM test1 WHERE userid = 2 AND age > 30 ORDER BY id;
SELECT * FROM teest1;
 
SELECT name, age FROM test1 WHERE userid = 2 ORDER BY id;
 
SELECT name, age FROM test2 WHERE age > 30 AND age < 80 ORDER BY id;
 
SELECT username FROM test1 ORDER BY name;
 
SELECT username FROM test1 ORDER BY name, age ASC;
 
SELECT name, age FROM test1 ORDER BY name, age ASC;
 
SELECT * FROM test1 WHERE id = 2;
-- INSERT some records into the test
INSERT INTO test1 (userid) VALUES (2) ON DUPLICATE KEY UPDATE age = 40; INSERT INTO test1 (userid) VALUES (3) ON DUPLICATE KEY UPDATE name = 'John';
SELECT 0 FROM test1 ORDER BY name, age, userid;
SELECT 0 FROM test1 ORDER BY name;
SELECT 0 FROM test1, test2 WHERE test1.username = test2.username;
SELECT 0 FROM test1, test2 WHERE test2.userid = 1 AND (test1.name = 'John' OR test1.age = 40);
SELECT 0 FROM test1, test2 WHERE test1.userid IN (1, 3) AND test2.age > 30 ORDER BY test1.username, test2.username;
 
DELETE FROM test2 WHERE
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS test1;
CREATE TABLE test1 (id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, userid INT, name VARCHAR(50), age INT);
DROP TABLE IF EXISTS test2;
CREATE TABLE test2 (id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, userid INT, name VARCHAR(50), age INT);
DROP TABLE IF EXISTS test3;
CREATE TABLE test3 (id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, userid INT, name VARCHAR(50), age INT);
DROP TABLE IF EXISTS test4;
CREATE TABLE test4 (id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, userid INT, name VARCHAR(50), age INT);
DROP TABLE IF EXISTS test5;
CREATE TABLE test5 (id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, userid INT, name VARCHAR(50), age INT);

commit;
exit;
-- This query could be optimized further using the optimization table
SELECT * FROM test1;
SELECT * FROM test2;
SELECT * FROM test3;
SELECT * FROM test4;
SELECT * FROM test5;
EOF

if [ "$?" == 0 ]; then
  read -p "Please wait while the changes have been applied"
fi

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS test3;
CREATE TABLE test3 (id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, userid INT, name VARCHAR(50),
age INT);

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS test3;
CREATE TABLE test3 (id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, userid INT, name VARCHAR(50),
age INT);
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS test3;
CREATE TABLE IF NOT EXISTS test3 (id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, userid INT, name VARCHAR(50),
age INT);
INSERT INTO test3 (userid, name, age) VALUES
(1, 'Viking', 5),
(1, 'Penguin', 13),
(1, 'Wild Mouse', 30),
(2, 'Hare', 4);
DROP TABLE IF EXISTS test1;
CREATE TABLE IF NOT EXISTS test1 (id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, name VARCHAR(50));
INSERT INTO test1(name) VALUES
('Viking'),
('Penguin'),
('Wild Mouse'),
('Hare');
-- Test the query and create a new index
SELECT * FROM test1 WHERE user1  = 'Viking';

SELECT id, name FROM index1 WHERE name = 'Penguin' AND user1  = 'Viking';

-- Update test1 data
UPDATE test1
SET user1 = 'Penguing'
WHERE name = 'Penguin';

-- Select test for test1
SELECT name FROM test1
WHERE user1 = 'Penguing';

SELECT id, name FROM test1, test2
WHERE test1.userid = test2.userid
ORDER BY test2.id ASC LIMIT 1

-- Create a new table - test3 which will contain new field
CREATE TABLE IF NOT EXISTS test3 (id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, userid INT, name VARCHAR(50),
age INT, user1 INT);

-- Create many many join tables using test3 and test1, test2
CREATE TABLE IF NOT EXISTS test1 (id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, name VARCHAR(50));
CREATE TABLE IF NOT EXISTS test2 (id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, userid INT, name VARCHAR(50),
age INT);

CREATE TABLE IF NOT EXISTS test3_user (id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, userid INT, name VARCHAR(50),
age INT);

INSERT INTO test1 (name) VALUES
('Viking'),
('Penguin'),
('Wild Mouse'),
('Hare');

INSERT INTO test2 (userid, name, age) VALUES
(1, 'Smurf', 4),
(1, '
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS test4;
CREATE TABLE test4 (id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, userid INT, name VARCHAR(50),
age INT);
DROP TABLE IF EXISTS test5;
CREATE TABLE test5 (id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, userid INT, name VARCHAR(50),
age INT);
DROP TABLE IF EXISTS test6;
CREATE TABLE test6 (id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, userid INT, name VARCHAR(50),
age INT);
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS test2;
CREATE TABLE test2 (id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, idname INT, userid INT,
name VARCHAR(50), age INT);

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS test3;
CREATE TABLE test3 (id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, userid INT, name VARCHAR(50),
age INT);
SELECT * FROM test3;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS test3;
CREATE TABLE test3 (id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, userid INT, name VARCHAR(50),
age INT);

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS test3;
CREATE TABLE test3 (id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, userid INT, name VARCHAR(50),
age INT);
SELECT * FROM test3;
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP SCHEMA IF EXISTS demo1 CASCADE;

-- Make a schema without a table.
CREATE SCHEMA demo1;

-- Make a table with a schema and a sequence.
CREATE TABLE demo1.tbl1 (
    col1 INTEGER, 
	col2 DATE
);

-- Make a table with a secondary index with no options.
CREATE TABLE demo1.tbl2 
	(
		col1 INTEGER, 
		col2 DATE
	)
	ENGINE=InnoDB
	-- The 'NO_AUTO_INCREMENT' option should be added, otherwise 'auto_increment' will be added
	AUTO_INCREMENT=42
	DEFAULT CHARSET=utf8;

SELECT * FROM demo1.tbl2;

-- Please define the database in a way that the following statements can access it.
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB

-- Add a table without specifying a primary key.
CREATE TABLE sampleDB.tbl1 
	(
		col1 INTEGER, 
		col2 DATE
	)
	ENGINE=InnoDB
	DEFAULT CHARSET=utf8

-- Add a table specifying a key but not requiring an AUTO_INCREMENT.
CREATE TABLE sampleDB.tbl2 
	(
		col1 INTEGER, 
		col2 DATE
	)
	ENGINE=InnoDB
	DEFAULT CHARSET=utf8

-- Add a table specifying a key and AUTO_INCREMENT that requires a UNIQUE constraint
CREATE TABLE sampleDB.tbl2
	(
		col1 INTEGER,
		col2 DATE
	)
	ENGINE=InnoDB
	DEFAULT CHARSET=utf8

-- Add a table specifying a key, AUTO_INCREMENT and UNIQUE constraint.
CREATE TABLE sampleDB.tbl2
	(
		col1 INTEGER,
		col2 DATE
	)
	ENGINE=InnoDB
	DEFAULT CHARSET=utf8
	AUTO_INCREMENT=0;

-- Add a table without specifying a DEFAULT and setting it to NULL.
CREATE TABLE sampleDB.tbl3 
	(
		col1 INT UNSIGNED, 
		col2 DATETIME 
	)
	ENGINE=InnoDB
	DEFAULT CHARSET=utf8

-- Set a table explicitly to be created with AUTO_INCREMENT set to zero.
CREATE TABLE sampleDB.tbl4
	(
		col1 INT UNSIGNED, 
		col2 DATETIME 
	)
	ENGINE=InnoDB
	AUTO_INCREMENT=0
	DEFAULT CHARSET=utf8

-- Create another table without specifying a primary key.
CREATE TABLE sampleDB.tbl5 
	(
		col1 INT UNSIGNED, 
		col2 DATETIME
	)

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS test4;
CREATE TABLE test4 (id INT AUTO_INCREMENT PRIMARY KEY, userid INT UNSIGNED, name VARCHAR(50),
age INT);
SELECT * FROM test4;
DROP TABLE IF EXISTS test5;
CREATE TABLE test5 (id INT, userid INT, name VARCHAR(50),
age INT);
SELECT * FROM test5;
-- Create a table of employees with the following attributes and create indexes
-- as well as a table of employees without the id column
CREATE TABLE employees ( first VARCHAR(50), last VARCHAR(35), email VARCHAR(35), phone INT, city VARCHAR(25), zipcode INT );

-- A table of employees without the id column and add a unique index on the id column.
CREATE TABLE employees_with_id_omitted (first VARCHAR(50), last VARCHAR(35), email VARCHAR(35), phone INT, city VARCHAR(25), zipcode INT);
CREATE INDEX employees_with_id_omitted_uk ON employees_with_id_omitted (id);

-- Please write two programs to use the employee data structure to store
-- a list of employees from the previous exercise.
-- (a) What is the cardinality of the employee table?
-- (b) What is the number of rows in the employee table?
-- (c) What is the total number of rows in the employee table?
-- (d) What is the average and maximum number of rows on the employee table?
-- (e) What is the number of rows that are 30 or older.
-- (f) What is the total number of rows that are 30 or older?
-- (g) What is the number of employees who live in Australia? Please
-- use a WHERE statement to filter for the given geographical location.
-- (h) What is the average of the age of the employees who live in Australia?
-- (i) What is the minimum and maximum salary of the employees who live in Australia?
-- (j) Write a program which will create a new table employee_summary with three columns:
-- employee_id, total_salary, and number_of_employees. Create a SUM statement that
-- aggregates the total_salary values over this table into a single row. The SUM
-- statement is followed by the COUNT statement and finally the DISTINCT
-- statement to ensure that any duplicated entries are eliminated. The statement
-- should return a total number of employees.
CREATE TABLE employee_summary_table (employee_id INT, total_salary INT, number_of_employees INT);


-- You
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS test3;
CREATE TABLE IF NOT EXISTS test3 (id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, userid INT, name   VARCHAR(50),
age    INT);
SELECT * FROM test3;
DROP TABLE IF EXISTS test3;
CREATE TABLE IF NOT EXISTS test3 (id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, userid INT,
name   VARCHAR(50), age    VARCHAR(50)) ENGINE=InnoDB;
SELECT * FROM test3;
DROP TABLE IF EXISTS test3;
CREATE TABLE test3 (id CHAR(10)  NOT NULL PRIMARY KEY, userid CHAR(10)  NOT NULL, name VARCHAR(50)  NOT NULL,
age VARCHAR(50)  NOT NULL);

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
 
SHOW TABLES;
 
-- Let's see the sampleDB table structure
SELECT columns.column_name, columns.column_type, column_key,
column_default, extra
FROM information_schema.COLUMNS
WHERE table_name = 'test3';
-- To insert data into the table, use INSERT INTO statement
INSERT INTO test3 SELECT userid, name, age FROM sampleDB.sampleUser;
-- To update data, you can use UPDATE statement. Please note that a table
-- needs to contain a primary key to be updated. In fact, a table always
-- contains at least one row with a primary identyfier in the form of an integer
-- in this case userid column.
UPDATE test3 SET name = 'updated' WHERE name ='myname';
-- To delete data, just type the query without any other information like table name
DELETE FROM test3 WHERE name ='myname';
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- Create tables and insert data in them. The data should be in the sequence of ID values.
DROP TABLE IF EXISTS test3;
CREATE TABLE test3 (id INT UNSIGNED, name VARCHAR(50), age INT);
INSERT INTO test3 (id, name, age) VALUES (1, 'Raj',  22);
INSERT INTO test3 (id, name, age) VALUES (2, 'Srinivas', 3);
INSERT INTO test3 (id, name, age) VALUES (3, 'Jeremiah', 16);
INSERT INTO test3 (id, name, age) VALUES (4, 'Peter', 16);
SELECT * FROM test3;
DROP TABLE IF EXISTS test3;

DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- Create tables and insert data in them. The data should be in the sequence of ID values.
DROP TABLE IF EXISTS test3;
CREATE TABLE test3 (id INT UNSIGNED, name VARCHAR(50), age INT);
INSERT INTO test3 (id, name, age) VALUES (1, 'Raj',  22);
INSERT INTO test3 (id, name, age) VALUES (2, 'Srinivas', 3);
INSERT INTO test3 (id, name, age) VALUES (3, 'Jeremiah', 16);
INSERT INTO test3 (id, name, age) VALUES (4, 'Peter', 16);
SELECT * FROM test3;
DROP TABLE IF EXISTS test3;
DROP DATABASE IF EXISTS sampleDB;
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- Create tables and insert data in them. The data should be in the sequence of ID values
DROP TABLE IF EXISTS test4;
CREATE TABLE test4 (id INT UNSIGNED, salary NUMERIC);
INSERT INTO test4 (id, salary) VALUES (1, 2000);
INSERT INTO test4 (id, salary) VALUES (2, 4000);
INSERT INTO test4 (id, salary) VALUES (3, 6000);
INSERT INTO test4 (id, salary) VALUES (4, 8000);
SELECT * from test4;
DROP TABLE IF EXISTS test4;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS test;
CREATE TABLE test (id INT UNSIGNED, name VARCHAR(50), phone INT);
INSERT INTO test (id, name, phone) VALUES (1, 'Raj',  '555-444-3333');
INSERT INTO test (id, name, phone) VALUES (2, 'Srinivas',   '990-888-7777');
INSERT INTO test (id, name, phone) VALUES (3, 'Jeremiah', '901-666-5555');
INSERT INTO test (id, name, phone) VALUES (4, 'Peter',   '302-444-3333');
SELECT * FROM test;
DROP TABLE IF EXISTS test;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS test4;
CREATE TABLE test4 (id INT UNSIGNED NOT NULL UNIQUE UNIQUE, name VARCHAR(50), type INT, age INT);
INSERT INTO test4 (id, name, type, age) VALUES (0, "Jhon", 0, 20);
INSERT INTO test4 (id, name, type, age) VALUES (1, "Steve", 1, 2);
INSERT INTO test4 (id, name, type, age) VALUES (2, "Jeremiah", 1, 15);
SELECT * FROM test4;
DROP TABLE IF EXISTS test4;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- Create tables and insert data in them. The data should be in the sequence of ID values.
DROP TABLE IF EXISTS test4;
CREATE TABLE test4 (id INT UNSIGNED, name VARCHAR(50), price FLOAT);
INSERT INTO test4 (id, name, price) VALUES (1, 'Scott', 15.50);
INSERT INTO test4 (id, name, price) VALUES (2, 'Michael', 10.50);
INSERT INTO test4 (id, name, price) VALUES (3, 'Steven', 13.00);
INSERT INTO test4 (id, name, price) VALUES (4, 'Dick', 9.80);
SELECT * FROM test4;
DROP TABLE IF EXISTS test4;
DROP DATABASE IF EXISTS sampleDB;

# EOF

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- Create tables and insert data in them. The data should be in the sequence of ID values.
DROP TABLE IF EXISTS test4;
CREATE TABLE test4 (id INT UNSIGNED, name VARCHAR(50), age INT);
INSERT INTO test4 (id, name, age) VALUES (1, 'Pratik',  23);
INSERT INTO test4 (id, name, age) VALUES (2, 'Pakistani', 3);
INSERT INTO test4 (id, name, age) VALUES (3, 'Pratik',  23);
INSERT INTO test4 (id, name, age) VALUES (4, 'Pratik', 16);
INSERT INTO test4 (id, name, age) VALUES (5, 'Priya', 15);
DROP TABLE IF EXISTS test4;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- Create tables and insert data in them. The data should be in the sequence of ID values.
DROP TABLE IF EXISTS test4;
CREATE TABLE test4 (id INT UNSIGNED, name VARCHAR(50), age INT);
INSERT INTO test4 (id, name, age) VALUES (1, 'Pratik',  23);
INSERT INTO test4 (id, name, age) VALUES (2, 'Pakistani', 3);
INSERT INTO test4 (id, name, age) VALUES (3, 'Pratik',  23);
INSERT INTO test4 (id, name, age) VALUES (4, 'Pratik', 16);
INSERT INTO test4 (id, name, age) VALUES (5, 'Priya', 15);
DROP TABLE IF EXISTS test4;
DROP DATABASE IF EXISTS sampleDB;
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS test;
CREATE TABLE test (id INT UNSIGNED, name VARCHAR(50), age INT);
INSERT INTO test (id, name, age) VALUES (1, 'Pratik',  23);
INSERT INTO test (id, name, age) VALUES (2, 'Pakistani', 3);
INSERT INTO test (id, name, age) VALUES (3, 'Pratik',  23);
INSERT INTO test (id, name, age) VALUES (4, 'Pratik', 16);
INSERT INTO test (id, name, age) VALUES (5, 'Priya', 15);
DROP TABLE IF EXISTS test;
DROP DATABASE IF EXISTS sampleDB;
 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS test6;
CREATE TABLE test6 (id INT UNSIGNED, name VARCHAR(50), age INT);
ALTER TABLE test6 ADD PRIMARY KEY (name);
DROP TABLE IF EXISTS test6;
DROP TABLE IF EXISTS test11;
CREATE TABLE test11 (id INT UNSIGNED, name VARCHAR(50), age INT);
ALTER TABLE test11 ADD PRIMARY KEY (name);
-- Insert the data into the table test11
-- Create another table which references the table test11 in foreign key constraint;
DROP TABLE IF EXISTS test8;
CREATE TABLE test8 (id INT unsigned, name VARCHAR(50), age INT);
ALTER TABLE test8 ADD PRIMARY KEY (name);
INSERT INTO test8 (id, name, age) VALUES (1, 'Pratik',  23);
INSERT INTO test8 (id, name, age) VALUES (2, 'P
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- The previous generation, MSSQL, is based upon an older version of MSSQL Server.
DROP TABLE IF EXISTS test4;
CREATE TABLE test4 (ID INT NOT NULL, Name VARCHAR(16) NOT NULL, Age INT NOT NULL);
INSERT INTO test4 (ID, Name, Age) VALUES (1, 'Pratik', 23);
INSERT INTO test4 (ID, Name, Age) VALUES (2, 'Pakistani', 3);
INSERT INTO test4 (ID, Name, Age) VALUES (3, 'Pratik', 23);
INSERT INTO test4 (ID, Name, Age) VALUES (4, 'Pratik', 16);
INSERT INTO test4 (ID, Name, Age) VALUES (5, 'Priya', 15);
DROP TABLE IF EXISTS test4;
DROP DATABASE IF EXISTS sampleDB;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE car (name varchar(50), price decimal(15,2));

INSERT INTO car (name, price) 
 VALUES 
  ('Buick',50000), 
  ('Ford',60000), 
  ('Volvo',40000);


 







DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE test2 (ID1 INT UNSIGNED, ID2 INT UNSIGNED, ID3 INT UNSIGNED);
CREATE TABLE test2 (ID1 BIGINT, ID2 BIGINT, ID3 BIGINT);
CREATE TABLE test2 (ID1 CHAR(100), ID2 CHAR(255), ID3 CHAR(255));
CREATE TABLE test2 (ID1 DATE, ID2 DATE, ID3 DATETIME);
CREATE TABLE test2 (ID1 TIME, ID2 TIME, ID3 TIMESTAMP);
GRANT ALL PRIVILEGES ON sampleDB.* TO 'testuser'@'localhost' IDENTIFIED BY 'test2';

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- Create a table called addresses using the sampleTable structure defined in the previous exercise.
DROP TABLE IF EXISTS adresse1;
CREATE TABLE adresse1 (addr1 VARCHAR(50), addr2 VARCHAR(50));
DROP TABLE IF EXISTS addresses5;
CREATE TABLE adresse5 (addrs1 VARCHAR(20) NOT NULL, addr2 VARCHAR(20));

 
INSERT INTO addresses5 VALUES('Said, Mohammad', 'Hussein');
INSERT INTO addresses5 VALUES('Said, Mohammad', 'Hussein');
INSERT INTO addresses5 VALUES('Said, Mohammad', 'Hussein');
INSERT INTO addresses5 VALUES('Said, Mohammad', 'Hussein');

 
INSERT INTO adresse1 VALUES('Mohambik', 'Hussein');
INSERT INTO adresse1 VALUES('Mohammad', 'Hussein');
INSERT INTO adresse1 VALUES('Mohammad', 'Hussein');
INSERT INTO adresse1 VALUES('Mohammad', 'Hussein');
INSERT INTO adresse1 VALUES('Mohammad', 'Hussein');
INSERT INTO adresse1 VALUES('Mohammad', 'Hussein');
INSERT INTO adresse1 VALUES('Mohammad', 'Hussein');
INSERT INTO adresse1 VALUES('Mohammad', 'Hussein');

DROP TABLE IF EXISTS adresse1;
DROP TABLE IF EXISTS addresses5;
DROP DATABASE IF EXISTS sampleDB;

create table if not exists person
(
  firstName            varchar(100) not null,
  lastName             varchar(100) not null,
  emp_number           int not null,
  gender              
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE car (name varchar(50), price decimal(15,2));
INSERT INTO car (name, price) 
 VALUES 
  ('Buick',50000), 
  ('Ford',60000), 
  ('Volvo',40000);
DROP DATABASE IF EXISTS sampleDB;
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
USE car;
INSERT INTO car(name,price) VALUES ('Mazda',100000);
SELECT * FROM car;
DROP DATABASE IF EXISTS sampleDB;


[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE car (name varchar(50), price decimal(15,2));
INSERT INTO car (name, price) 
 VALUES 
  ('Buick',98760), 
  ('Ford',25000), 
  ('Subaru',89000),
  ('Mercedes-Benz',66780);
UPDATE car 
    SET price = 109999 
    WHERE name = 'Volvo';
SELECT * FROM car;

-- Please create a mutated program that returns the sum of price columns in the car table.
CREATE TABLE car (name varchar(50), price decimal(15,2));
INSERT INTO car (name, price) 
 VALUES 
  ('Buick',98760), 
  ('Ford',25000), 
  ('Subaru',89000),
  ('Mercedes-Benz',66780);
SELECT sum(price) FROM car;

-- Please create a mutated program that updates the car price of all objects.
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE car (name varchar(50), price decimal(15,2));
INSERT INTO car (name, price) 
 VALUES 
  ('Buick',98760), 
  ('Ford',25000), 
  ('Subaru',89000),
  ('Mercedes-Benz',66780);
UPDATE car 
    SET price = 99999 
    WHERE name = 'Volvo';
SELECT * FROM car;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
REPLACE INTO car (name, price) 
  VALUES 
   ('GMC',30000);
INSERT INTO car (name, price) 
  VALUES 
   ('Mazda',50000);
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
UPDATE car SET price = (price*2);
DROP DATABASE IF EXISTS sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE car (name varchar(50), price decimal(15,2));
ALTER TABLE car CHANGE name name varchar(75);
INSERT INTO car (name, price) 
 VALUES 
  ('Buick',50000), 
  ('Ford',60000), 
  ('Volvo',40000);
DROP DATABASE IF EXISTS sampleDB;
-- Insert your test data under the name testDB.
ALTER USER 'root'@'%' IDENTIFIED BY '<PASSWORD>';
GRANT ALL PRIVILEGES ON sampleDB TO root@'%';

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
REPLACE INTO car (name, price) 
  VALUES 
   ('GMC',30000);
INSERT INTO car (name, price) 
  VALUES 
   ('Mazda',50000);
DROP DATABASE IF EXISTS sampleDB;
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- Create a new table in the previous generation
DROP TABLE IF EXISTS car;
CREATE TABLE car (name CHAR(5), price LONG);
INSERT INTO car VALUES ('Benz', 999.00);
-- Update a column in the previous generation
ALTER TABLE car ADD COLUMN color CHAR(1); 
UPDATE car SET color='White'; 
-- Drop the previous generation
DROP DATABASE IF EXISTS sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE car_info (
  id INTEGER NOT NULL AUTO_INCREMENT,
  brand VARCHAR(20) NOT NULL,
  year INT UNSIGNED NOT NULL,
  price INT unsigned,
  PRIMARY KEY (id)
);
INSERT INTO car_info 
  VALUES (1,'Ford',1500,200000), (11,'Nissan',1500,150000));
CREATE TABLE sales (
  id INTEGER NOT NULL AUTO_INCREMENT,
  date DATE NOT NULL,
  car_id INTEGER,
  sale_type VARCHAR(10),
  PRIMARY KEY (id)
);
INSERT IGNORE INTO sales 
  VALUES(1,'2001-12-01',1,'sale'), (10,'2003-12-01',1,'sale'), 
          (15,'2004-12-15',2,'refund'), (20,'2001-12-02',2,'sale');
DROP TABLE sales;
DROP TABLE car_info;
DROP DATABASE sampleDB;
GRANT ALL PRIVILEGES ON sampleDB.* TO 'root'@'localhost' IDENTIFIED BY '<PASSWORD>' WITH GRANT OPTION;
FLUSH PRIVILEGES;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
REPLACE INTO car (name, price) 
  VALUES 
   ('Subaru',300000);
UPDATE car set name = 'Dodge' WHERE name = 'Subaru';
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
REPLACE
  INTO car (name, price) 
  VALUES 
   ('GMC',22000);
INSERT 
  INTO car (name, price) 
  VALUES
   ('Mazda',40000);
UPDATE car 
  SET price =  35000
  WHERE name ='Mazda';
SELECT * FROM car; DROP TABLE car; DROP DATABASE IF EXISTS sampleDB;
-- Please create a program that uses the SELECT DISTINCT function to get car models 
-- with unique values. 
SELECT DISTINCT car.name FROM car; 
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- This creates a table with a primary key, an integer (not a float). A number is usually written in scientific notation (1eX).
CREATE TABLE T_CAR_DB(
	KEY_ID INT(2),
	PRIMARY KEY(KEY_ID)
)ENGINE=MyISAM;
LOCK TABLES T_CAR_DB WRITE; -- Must be done before INSERT query to work
INSERT INTO T_CAR_DB (KEY_ID)
  VALUES (1);
INSERT INTO T_CAR_DB (KEY_ID)
  VALUES (4);
UNLOCK TABLES;
-- This insert works because the primary key is set. Therefore, if an ID already exists, update will fail with an error.
UPDATE T_CAR_DB
  SET KEY_ID = 10
  WHERE KEY_ID = 1;
-- This can be verified using an INSERT query. If the ID does not exist, it gets created as a new record with the PRIMARY KEY value of 10. 
SELECT * FROM T_CAR_DB;
UNLOCK TABLES;
-- This works the same way but the update query will fail because the ID of the record does not change.
UPDATE T_CAR_DB
  SET KEY_ID = 10
  WHERE KEY_ID = 1;
-- This also works, however it adds a 1 to the primary key. This way every table has a different primary key. It is very useful when you have many tables that share a set of primary keys, such as a customer that has a primary key and information about their address.
UPDATE T_CAR_DB
  SET KEY_ID = 11 WHERE KEY_ID = 10;
DELETE FROM T_CAR_DB WHERE KEY_ID = 10;
-- Here we make a query asking for a DELETE statement, in this case, if we ask
-- for more than one ID, the last statement will remove the record with the
-- most recent primary key.
DELETE FROM T_CAR_DB
  WHERE KEY_ID = 10 OR KEY_ID = 11;
SELECT * FROM T_CAR_DB;
DROP TABLE IF EXISTS T_CAR_DB; -- Delete all tables
-- Now create a new table from scratch. Do not use a mutated database, there will be data loss.
CREATE TABLE T_CAR_DB(
	KEY_ID INT(2),
	PRIMARY KEY(KEY_ID)
);
-- Finally create a mutated copy of the table with a mutated primary key. The update works.
UPDATE T_CAR_DB
  SET KEY_ID
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- Create a new table in the previous generation
DROP TABLE IF EXISTS car;
CREATE TABLE car (name CHAR(5), price LONG);
INSERT INTO car VALUES ('Benz', 999.00);
-- Update a column in the previous generation
ALTER TABLE car ADD COLUMN color CHAR(1); 
UPDATE car SET color='White'; 
-- Drop the previous generation
DROP DATABASE IF EXISTS sampleDB;
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- Create a new table in the previous generation
DROP TABLE IF EXISTS manpower;
CREATE TABLE manpower (man, salary INT);
INSERT INTO manpower VALUES ('Michael', 120000);
INSERT INTO manpower VALUES ('Bob', 85000),
INSERT INTO manpower VALUES ('Maria', 750000);
INSERT INTO manpower VALUES ('Peter', 85000);
INSERT INTO manpower VALUES ('Alice', 100000);
INSERT INTO manpower VALUES ('Johnny', 110000);
-- Update a column in the previous generation
ALTER TABLE manpower ADD column location CHAR(1);
UPDATE manpower SET location = 'Downtown';
-- Drop the previous generation
DROP DATABASE IF EXISTS sampleDB; 


[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- Create a new table in the previous generation
DROP TABLE IF EXISTS car;
CREATE TABLE car (name CHAR(5), price LONG, color CHAR(1));
INSERT INTO car VALUES ('Benz', 999.00, 'Black');
-- Update a column in the previous generation
ALTER TABLE car ADD COLUMN width INT;
ALTER TABLE car ADD COLUMN height INT;
UPDATE car SET width='45', height=34;
-- Insert/insert and update all tables
ALTER TABLE car ADD COLUMN color CHAR(200);
UPDATE car SET color="Black";
INSERT INTO car VALUES ('Hyundai', 999.00, 'White');
UPDATE car SET color="Blue";
-- Drop the previous generation
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- Create a new table in the previous generation
DROP TABLE IF EXISTS employee;
CREATE TABLE employee (name CHAR(5), salary LONG);
    INSERT INTO employee VALUES ('Sherlock', '100000');
    INSERT INTO employee VALUES ('Loki', '99800');
    INSERT INTO employee VALUES ('Han Solo', '150');
    INSERT INTO employee VALUES ('Pippin', '89999');
SELECT * FROM employee;
SELECT name, salary
FROM employee
UNION
SELECT name, salary
FROM sampleDB.employee;
DROP DATABASE IF EXISTS sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS car;
CREATE TABLE car (name CHAR(5), price LONG);
INSERT INTO car VALUES ('Volvo', 999.00);
INSERT INTO car VALUES ('Toyota', 100000.00);
-- Update several columns
UPDATE car SET color='Black', price=1000000.00 where (name='Volvo' or name='Toyota') == TRUE;
-- Delete a row
DELETE FROM car WHERE name='Toyota';  
DROP TABLES car; DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS car;
CREATE TABLE car (name CHAR(5) NOT NULL, price LONG);
ALTER TABLE car MODIFY(price decimal(4, 2));
INSERT INTO car VALUES ('Toyota 4', 999.99);
--- Update a column in the previous generation
CREATE TABLE car (name CHAR(5), color CHAR(9), price LONG);
UPDATE car SET price=699.99 WHERE color = 'White';
UPDATE car SET price=750.99 WHERE color = 'Red';
*# Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
DROP TABLE IF EXISTS car;
CREATE TABLE car (name CHAR(5), price LONG);
INSERT INTO car VALUES ('Toyota 4', 100.00, color='White');
ALTER TABLE car MODIFY price DECIMAL(6, 2);
UPDATE car SET price=699.99 WHERE color = 'White';
UPDATE car SET price=750.99 WHERE color = 'Red';
INSERT INTO car VALUES ('BMW M1', 100.00, color='Black');
--- Please create a short query to find the color and price of each car
DROP TABLE IF EXISTS car;
CREATE TABLE car (name CHAR(5), price LONG);
INSERT INTO car VALUES ('Toyota 4', 100.00, color='White');
INSERT INTO car VALUES ('Toyota 4', 95.99, color='White');
INSERT INTO car VALUES ('Toyota 4', 99, color='White');
INSERT INTO car VALUES ('BMW M1', 100.00, color='Black'); 
--- Please create a short query to find the price of two cars that have the same name
DROP TABLE IF EXISTS car;
CREATE TABLE car (name CHAR(5), price LONG);
INSERT INTO car VALUES
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- Create a new table in the previous generation
DROP TABLE IF EXISTS employee;
CREATE TABLE employee (name CHAR(5), salary LONG);
    INSERT INTO employee VALUES ('Sherlock', '100000');
    INSERT INTO employee VALUES ('Loki', '99800');
    INSERT INTO employee VALUES ('Han Solo', '150');
    INSERT INTO employee VALUES ('Pippin', '89999');
SELECT * FROM employee;
SELECT name, salary
FROM employee
UNION
SELECT name, salary
FROM sampleDB.employee;
DROP DATABASE IF EXISTS sampleDB;
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- Create a new table in the previous generation
DROP TABLE IF EXISTS employee;
CREATE TABLE employee (id INT PRIMARY KEY, name CHAR(5), salary LONG);
    INSERT INTO employee VALUES(1,'Morgan','100');
    INSERT INTO employee VALUES(2,'Rohan','298');
    INSERT INTO employee VALUES(3,'Jason','800');
    INSERT INTO employee VALUES(4,'William','189');
SELECT * FROM employee WHERE name='Morgan';
SELECT name, salary
FROM sampleDB.employee
WHERE name IS NOT NULL;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS customer;
CREATE TABLE customer (cid INT AUTO_INCREMENT, cname VARCHAR(21), address CHAR(50), city CHAR(25)); CREATE TABLE customer (cid INT AUTO_INCREMENT, cname VARCHAR(21), address CHAR(50), city CHAR(25)); INSERT INTO customer (cname, address, city) VALUES ('Jane', '127 Lago St.', 'Fairfax', 'New Jersey'); INSERT INTO customer (cname, address, city) VALUES ('Max', '1212 Lago St.', NULL, 'New York'); INSERT INTO customer (cname, address, city) VALUES ('Alyssa', '128 Lago St.', 'Boston', 'San Diego'); DROP TABLE IF EXISTS customer;
     
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
     
CREATE DATABASE IF NOT EXISTS sampleDB; SELECT * FROM customer;
SELECT cname, address, city
FROM customer
ORDER BY cname, address;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- Create a new table in the previous generation
DROP TABLE IF EXISTS employee;
CREATE TABLE employee (id INTEGER, name CHAR(5), salary LONG);
    INSERT INTO employee VALUES (1, 'Sherlock', '100000');
    INSERT INTO employee VALUES (2, 'Loki', '99800');
    INSERT INTO employee VALUES (3, 'Han Solo', '150');
    INSERT INTO employee VALUES (4, 'Pippin', '89999');
SELECT * FROM employee;
SELECT id, name, salary
FROM employee
UNION
SELECT id, name, salary
FROM sampleDB.employee;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employee;
CREATE TABLE employee(email char(10));
INSERT INTO employee(email) VALUES ('<EMAIL>');
INSERT INTO employee(email) VALUES ('<EMAIL>');
INSERT INTO employee(email) VALUES ('<EMAIL>');
INSERT INTO employee(email) VALUES ('<EMAIL>');
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
 
CREATE USER 'root';
CREATE DATABASE IF NOT EXISTS newDB;
USE newDB;
CREATE TABLE users (name CHAR(50));
-- Use INSERT, SELECT, UPDATE and DELETE operations
INSERT INTO users VALUES ('<NAME>');
SELECT * FROM users;
UPDATE users SET name = '<NAME>' WHERE name ='Sherlock';
SELECT * FROM users;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employee;
CREATE TABLE employee(email char(10));
INSERT INTO employee(email) VALUES ('<EMAIL>');
INSERT INTO employee(email) VALUES ('<EMAIL>');
INSERT INTO employee(email) VALUES ('<EMAIL>');
INSERT INTO employee(email) VALUES ('<EMAIL>');
DROP DATABASE IF EXISTS sampleDB;
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employee;
CREATE TABLE employee(email char(10));
INSERT INTO employee(email) VALUES ('<EMAIL>');
INSERT INTO employee(email) VALUES ('<EMAIL>');
INSERT INTO employee(email) VALUES ('<EMAIL>');
INSERT INTO employee(email) VALUES ('<EMAIL>');
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employee;
CREATE TABLE employee(name varchar(10));
INSERT INTO employee(name) VALUES ('<NAME>');
INSERT INTO employee(name) VALUES ('<NAME>');
INSERT INTO employee(name) VALUES ('<NAME>');
INSERT INTO employee(name) VALUES ('<NAME>');
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
 
CREATE DATABASE IF NOT EXISTS testDB; USE testDB;
 
CREATE TABLE sampleDB.employee(
    id INTEGER PRIMARY KEY,
    name VARCHAR (15) NOT NULL UNIQUE,
    address VARCHAR(50) NOT NULL,
    PRIMARY KEY(id)
);
 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS sampleDB.employee(id INTEGER PRIMARY KEY, name VARCHAR (15) NOT NULL UNIQUE, address VARCHAR(50) NOT NULL);
INSERT INTO sampleDB.employee VALUES(1, 'John', 'Mahalo');
INSERT INTO sampleDB.employee VALUES(2, 'Nicole', 'Taylor');
INSERT INTO sampleDB.employee VALUES(3, 'Rick', 'Mahalo');
DROP DATABASE IF EXISTS sampleDB;

CREATE DATABASE IF NOT EXISTS testDB; USE testDB;
CREATE TABLE IF NOT EXISTS testDB.employee VALUES (1, 'Rick','Mahalo');
DROP DATABASE IF EXISTS testDB;

INSERT INTO sampleDB.employee (name) VALUES ('John');

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employee;
CREATE TABLE employee(email char(10));
INSERT INTO employee(email) VALUES ('<EMAIL>');
INSERT INTO employee(email) VALUES ('<EMAIL>');
INSERT INTO employee(email) VALUES ('<EMAIL>');
INSERT INTO employee(email) VALUES ('<EMAIL>');
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employee;
CREATE TABLE employee(email char(10));
INSERT INTO employee(email) VALUES ('<EMAIL>');
INSERT INTO employee(email) VALUES ('<EMAIL>');
INSERT INTO employee(email) VALUES ('<EMAIL>');
INSERT INTO employee(email) VALUES ('<EMAIL>');
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employee;
CREATE TABLE employee(name varchar(10));
INSERT INTO employee(name) VALUES ('<NAME>');
INSERT INTO employee(name) VALUES ('<NAME>');
INSERT INTO employee(name) VALUES ('<NAME>');
INSERT INTO employee(name) VALUES ('<NAME>');
DROP DATABASE IF EXISTS sampleDB;
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employee;
CREATE TABLE employee(name varchar(10),salary decimal(4,2));
INSERT INTO employee (name,salary) VALUES ('<NAME>',5000);
INSERT INTO employee (name,salary) VALUES ('<NAME>',5500);
INSERT INTO employee (name,salary) VALUES ('<NAME>',6000);
INSERT INTO employee (name,salary) VALUES ('<NAME>',1500);

DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employee;
CREATE TABLE employee(name varchar(10));
INSERT INTO employee(name) VALUES ('<NAME>');
INSERT INTO employee(name) VALUES ('<NAME>');
INSERT INTO employee(name) VALUES ('<NAME>');
INSERT INTO employee(name) VALUES ('<NAME>');
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employee;
CREATE TABLE employee(name varchar(10));
INSERT INTO employee(name) VALUES ('<NAME>');
INSERT INTO employee(name) VALUES ('<NAME>');
INSERT INTO employee(name) VALUES ('<NAME>');
INSERT INTO employee(name) VALUES ('<NAME>');
DROP DATABASE IF EXISTS sampleDB;

DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employee;
CREATE TABLE employee(name varchar(10));
INSERT INTO employee(name) VALUES ('<NAME>');
INSERT INTO employee(name) VALUES ('<NAME>');
INSERT INTO employee(name) VALUES ('<NAME>');
INSERT INTO employee(name) VALUES ('<NAME>');
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employee;
CREATE TABLE employee(id int AUTO_INCREMENT,name varchar(10));
INSERT INTO employee(id,name) VALUES (null,'<NAME>');
INSERT INTO employee(id,name) VALUES (null,'<NAME>');
INSERT INTO employee(id,name) VALUES (null,'<NAME>');
INSERT INTO employee(id,name) VALUES (null,'<NAME>');

insert into employee(id,name)
values (NULL,'<NAME>');

 

CREATE TABLE employee(id INT AUTO_INCREMENT,
                 name VARCHAR(10),
                 PRIMARY KEY(id),
                 FOREIGN KEY(phoneID) REFERENCES phone(phoneID)
)ENGINE=InnoDB AUTO_INCREMENT=86

<fim_middle>
CREATE TABLE phone(phoneID int AUTO_INCREMENT,
number VARCHAR(20),
brand VARCHAR(100),
PRIMARY KEY(phoneID),
FOREIGN KEY(phoneID) REFERENCES employee(employeeID)
);

DESCRIBE employee;
DESCRIBE phone;
--
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employee;
CREATE TABLE employee(name varchar(10));
INSERT INTO employee(name) VALUES ('<NAME>');
INSERT INTO employee(name) VALUES ('<NAME>');
INSERT INTO employee(name) VALUES ('<NAME>');
INSERT INTO employee(name) VALUES ('<NAME>');
DROP DATABASE IF EXISTS sampleDB;
DROP DATABASE IF EXISTS sampleDB;
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- drop the employee table if it exists
DROP TABLE IF EXISTS employee;
-- create a new table employee for each employee row in employee.csv
CREATE TABLE employee(id INT NOT NULL AUTO_INCREMENT UNIQUE, name varchar(10));
-- write a loop to append first and last name. you will then need to append id. You will use mysql commands to create a column and INSERT your result into that column.
insert into employee(name)
select first_name ||'' || last_name from employee

-- create a new table employee2 for each employee id in employee.csv
-- loop through all rows of the employee table with SELECT
select * from employee
-- for each row, append the first or last name and the employee id.
-- for each result, assign new id to employee2

select * from employee where employee.id= employee2.id;
-- drop the tables you created.
DROP TABLE IF EXISTS employee;
-- now that the employee table is cleared, create two NEW tables.
CREATE TABLE employee2(id int unique, fullname varchar(10));
CREATE INDEX employee2_idx ON employee2(id);
-- loop through employee2. make sure each employee has one record in it.
-- insert a dummy record where there is no existing record.
select * from employee2;
INSERT INTO employee2
select id, concat(first_name,'', last_name) from employee

select id, concat(first_name,'', last_name) from employee2;
-- insert each result into the employee table.
insert into employee
select
id,concat(first_name,'', last_name) from employee2;

-- check that none exist, use mysql to see that
select id,concat(first_name,'', last_name) from employee;
-- then drop it
DROP TABLE IF EXISTS employee2;
-- drop all the tables created so far.
DROP TABLE IF EXISTS employee;
DROP TABLE IF EXISTS employee2;
DROP DATABASE IF EXISTS samplesDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employee;
CREATE TABLE employee(name varchar(10));
INSERT INTO employee(name) VALUES ('<NAME>');
INSERT INTO employee(name) VALUES ('<NAME>');
INSERT INTO employee(name) VALUES ('<NAME>');
INSERT INTO employee(name) VALUES ('<NAME>');
DROP DATABASE IF EXISTS sampleDB;
DROP DATABASE IF EXISTS sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employee;
CREATE TABLE employee(id INT PRIMARY KEY AUTO_INCREMENT, name varchar(10));
DELETE FROM employee;

INSERT INTO employee(name) VALUES ('<NAME>');
INSERT INTO employee(name) VALUES ('<NAME>');
INSERT INTO employee(name) VALUES ('<NAME>');

DROP TABLE IF EXISTS employee;
CREATE TABLE employee ( id int, name varchar(10));
INSERT INTO employee ( name ) VALUES ('<NAME>');
INSERT INTO employee ( name ) VALUES ('<NAME>');
INSERT INTO employee ( name ) VALUES ('<NAME>');
INSERT INTO employee ( name ) VALUES ('<NAME>');
INSERT INTO employee ( name ) VALUES ('<NAME>');

DROP TABLE IF EXISTS employee;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employee;
CREATE TABLE employee(name varchar(10));
INSERT INTO employee(name) VALUES ('<NAME>');
INSERT INTO employee(name) VALUES ('<NAME>');
INSERT INTO employee(name) VALUES ('<NAME>');
INSERT INTO employee(name) VALUES ('<NAME>');
DROP TABLE IF EXISTS employee;
DROP TABLE IF EXISTS employee;
DROP DATABASE IF EXISTS sampleDB;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employee;
CREATE TABLE employee(name varchar(10));
INSERT INTO employee(name) VALUES ('<NAME>');
INSERT INTO employee(name) VALUES ('<NAME>');
INSERT INTO employee(name) VALUES ('<NAME>');
INSERT INTO employee(name) VALUES ('<NAME>');
DROP DATABASE IF EXISTS sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employee;
CREATE TABLE employee(name varchar(10));
INSERT INTO employee(name) VALUES ('<NAME>');
INSERT INTO employee(name) VALUES ('<NAME>');
INSERT INTO employee(name) VALUES ('<NAME>');
INSERT INTO employee(name) VALUES ('<NAME>');
DROP DATABASE IF EXISTS sampleDB;
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employee;
CREATE TABLE employee(name varchar(10));
INSERT INTO employee(name) VALUES ('<NAME>'),('<NAME>'),('<NAME>'),('<NAME>'),('<NAME>'),('<NAME>');
DROP TABLE IF EXISTS employee;

 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employee;
CREATE TABLE employee(name varchar(10));
INSERT INTO employee(name) SELECT 'John' FROM employee WHERE name='John';
INSERT INTO employee(name) SELECT 'Michał' FROM employee WHERE name='Michał';
INSERT INTO employee(name) SELECT 'Mateusz' FROM employee WHERE name='Mateusz';
INSERT INTO employee(name) SELECT 'Gabryl', 'Jan';
DROP TABLE IF EXISTS employee;
DROP DATABASE IF EXISTS sampleDB;
-- Please read the documentation on tables, the key-value pairs, and the
-- ALTER command to learn more about the use-cases of this program.*/

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS employee(name varchar(10));
INSERT INTO employee(name) VALUES ('<NAME>');
INSERT INTO employee(name) VALUES ('<NAME>');
INSERT INTO employee(name) VALUES ('<NAME>');
INSERT INTO employee(name) VALUES ('<NAME>');
DROP DATABASE IF EXISTS sampleDB;
 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS employee(name varchar(10), address varchar(100), SalaryReal double, SalaryMoney double);
CREATE TABLE IF NOT EXISTS projects(name varchar(10), address varchar(100), SalaryReal double);
CREATE TABLE IF NOT EXISTS projects_employees(projects_id int, employees_id int);
INSERT INTO employee(name, address, SalaryReal, SalaryMoney) VALUES ('<NAME>', '', 7772.98, 7772.98);
INSERT INTO employee(name, address, SalaryReal, SalaryMoney) VALUES ('<NAME>', '54 West 50th St. Westwood', 6022.44, 34995.99 );
INSERT INTO employee(name, address, SalaryReal, SalaryMoney) VALUES ('<NAME>', '301 E Main St Moffat Rd', 3641.32, 15076.58) ;
INSERT INTO projects(name, address, SalaryReal) VALUES ('House Repair', 'Chicago ', 5000.00) ;
INSERT INTO projects(name, address, SalaryReal) VALUES ('Office Building Project', 'Nashville-Davidson ', 6000.00);
INSERT INTO employee_projects (employee_id,projects
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employee;
ALTER TABLE employee ENGINE=InnoDB;
-- DROP TABLE employee;
INSERT INTO employee(name) VALUES ('<NAME>');
INSERT INTO employee(name) VALUES ('<NAME>');
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- Please write a query using the UPDATE, DELETE, EXISTS AND IN commands and modify it to use the
-- WHERE keyword.
-- Please create new tables in this database and insert some data into the table.
CREATE TABLE names(name varchar(20));
INSERT INTO names VALUES('<NAME>');
INSERT INTO names VALUES('<NAME>');
UPDATE names SET name='<NAME>' WHERE name=name;
SELECT * FROM names;
UPDATE names SET name='<NAME>' WHERE name='<NAME>';
DELETE FROM names WHERE name='<NAME>';
SELECT * FROM names;
UPDATE names SET name='New First Name' WHERE name='New Last Name';
SELECT * FROM names;
SELECT name FROM names;
UPDATE names SET name='New Last Name' WHERE name='<NAME>';
SELECT * FROM names;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employee;
CREATE TABLE employee (id VARCHAR(18) PRIMARY KEY, firstname VARCHAR(30), lastname VARCHAR(30));
INSERT INTO employee (id, firstname, lastname) VALUES ('MADAM', 'HAYASHI', 'JONES');
SELECT * FROM employee;
DROP DATABASE IF EXISTS sampleDB;


The first time you query an existing table using MySQL’s standard protocol to retrieve data, and even then, some queries (e.g. reading from an encrypted database file for backup purposes, or data that is generated at the current time, to display on a printed paper) have to be prefixed with a special command. For example, when your database file is stored under the /var/lib directory, this command would work:

/var/lib/mysql/sampleDB/test.dump

This command is not required, as long as you are only interested in the specific table you need to retrieve. This way, even if the tables differ in data format, retrieving only one table is still quite fast.

When you want to change (modify) a table, you can simply drop the existing table, and redo the same modifications by creating a new one. For example, a simple DROP TABLE will not drop rows or perform deletes.

The tables on your live database will not change. It’s more likely to be modified. A more realistic use case would involve that database having to be protected for the moment, which can get extremely time consuming, when changing multiple tables.

The command ‘CREATE TABLE’ is used in the same way, as the TABLE statements of the DDL and DML commands. However, the table does not have to exist in order to execute it. For example, if you enter such query:

 
CREATE TABLE employee (
    id  VARCHAR(18) PRIMARY KEY,
    firstname   VARCHAR(30),
    lastname      VARCHAR(30));

You can use the ‘DROP TABLE’ statement as normal.

In MySQL, we can specify that only certain columns (or columns with specified data types) are stored in a table. If not specified, they are stored in the default column-store (the InnoDB table engine). This means that the table can have rows that have only numbers (like the employee table).
-- MySQL is a relational database management system 
-- It supports basic read-execute-show-modify-delete (CRUD) of tables. 
--
-- MySQL
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- Please write a query using the UPDATE, DELETE, EXISTS AND IN commands and modify it to use the
-- WHERE keyword.
-- Please create new tables in this database and insert some data into the table.
CREATE TABLE names(name varchar(20));
INSERT INTO names VALUES('<NAME>');
INSERT INTO names VALUES('<NAME>');
UPDATE names SET name='<NAME>' WHERE name=name;
SELECT * FROM names;
UPDATE names SET name='<NAME>' WHERE name='<NAME>';
DELETE FROM names WHERE name='<NAME>';
SELECT * FROM names;
UPDATE names SET name='New First Name' WHERE name='New Last Name';
SELECT * FROM names;
SELECT name FROM names;
UPDATE names SET name='New Last Name' WHERE name='<NAME>';
SELECT * FROM names;
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
ALTER TABLE names ADD (age int(3));
UPDATE names SET age=age+age WHERE id=1;
UPDATE names SET age=age+age WHERE id=3;
SELECT * FROM names;
ALTER TABLE names DROP  (age);
SELECT * FROM names;
DROP TABLE names;
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE names(name varchar(20), age int(3));
CREATE INDEX ON names(name);
CREATE INDEX ON names(age);
UPDATE names SET age=age+age WHERE id=1;
UPDATE names SET age=age+age WHERE id=3;
SELECT * FROM names;
-- Please create a database and table where both the data inserted into the table and the id
SELECT * FROM names;
ALTER TABLE names DROP  (age);
SELECT * FROM names;
DROP TABLE names;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- Please write a single-value query and show the result.
USE sqlTest; SELECT * FROM names WHERE name='New First Name' LIMIT 1;
UPDATE names
SET name='<NAME>'
WHERE name=name;
SELECT * FROM names;
-- Please create a query that shows the result of the previous query as well as the result of the following query, as well as a query that is designed to test the effectiveness of indexes and the presence or absence of records in a table, as well as a query that retrieves the result of the `name` column.
USE sqlTest; SELECT * FROM names WHERE name='New First Name' LIMIT 1;
UPDATE names
SET name='<NAME>'
WHERE name=name;
SELECT * FROM names;
-- You may need to add the following two clauses to your query to test performance.
 
SELECT * FROM names LIMIT 3;
-- Please create a query that uses the EXPLAIN command in order to see the structure of your query.
SELECT * FROM names LIMIT 3;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- Use MySQL to query the population of the United States based on the name of each state
-- and create a new table called USpop in this database.
SELECT state, stateName FROM stateName;
CREATE TABLE USpop (year DECIMAL(4,0), pop INT);
-- You will need to query the population data, but then you will be able to use the
-- INSERT statements in order to create your new table.
-- A few months ago, New York and California had almost 80 million people, while
-- Los Angeles had almost 1 million!
INSERT INTO USpop (year, pop) VALUES (1980, 8999);
INSERT INTO USpop (year,pop) VALUES (2010, 129);
-- Add one more record
INSERT INTO USpop (year, pop) VALUES (2090, 47000);
SELECT * FROM USpop;
 
-- Open two new sessions on the same database. Create two rows with name 'Louis'
-- and 'Angela'. Try the following. If you execute the following line, you will see the
-- insert statement succeed.
INSERT INTO USpop (year, pop) VALUES (2010, 210); INSERT INTO USpop (year, pop) VALUES (2090, 137);
-- You will see that the same statement succeeded for both 'Kenton' name and
-- second name.

 
SELECT * FROM USpop;
-- Try to query both year=1980 and year=2010 for 'Louis' in USpop
SELECT year, pop FROM USpop WHERE name='Louis';
SELECT year, pop FROM USpop WHERE year = 1980;
SELECT year, pop FROM USpop WHERE year = 2010;
 
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- Please create a new table and insert data.
CREATE TABLE names(name varchar(20)); ALTER TABLE names ENGINE=InnoDB; 
-- Please insert some data into this table.
INSERT INTO names VALUES('Gary',23); INSERT INTO names VALUES('John',25); INSERT INTO names VALUES('Steve',30); INSERT INTO names VALUES('Joe',33); 
-- Please create a mutated query. You will need to recreate the table and insert data in it. Here is the
-- mutated query. You should remove the last three queries that are redundant and that are just 
-- doing something for the sake of testing.
SELECT* FROM names WHERE name='Gary' OR name='Joe' OR name='Steve';
UPDATE names SET name='<NAME>' WHERE name='<NAME>'; 
DELETE FROM names WHERE name='<NAME>'; 
SELECT* FROM names WHERE name='Gary' OR name='Joe' OR name='Steve'; 
UPDATE names SET name='<NAME>' WHERE name='<NAME> <NAME>'; 
SELECT* FROM names WHERE name='Gary' OR name='Joe' OR name='Steve';
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- Please create a new table and insert data.
CREATE TABLE names(name varchar(20)); ALTER TABLE names ENGINE=InnoDB;
-- Please insert some data into this table.
INSERT INTO names VALUES('Gary',23); INSERT INTO names VALUES('John',25); INSERT INTO names VALUES('Steve',30); INSERT INTO names VALUES('Joe',33); 
-- Please create a mutated query. You will need to recreate the table and insert data in it. Here is the
-- mutated query. You should remove the last three queries that are redundant and that are just 
-- doing something for the sake of testing.
SELECT name FROM names WHERE name='Gary' OR name='Joe' OR name='Steve'
/* Your code ends here. Don't forget to commit your changes
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE sampleTable(fname varchar(20));
INSERT INTO sampleTable VALUES('<NAME>');
CREATE TABLE sampleTable(lname varchar(20));
INSERT INTO sampleTable VALUES('<NAME>');
DELETE FROM sampleTable WHERE fname='<NAME>';
-- Please specify the result set format for the new data you are inserting
-- In MySQL you can use the format "INSERT INTO tablename() VALUES()"
-- Please modify the program to show the result.
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE sampleTable(fname VARCHAR(20));
INSERT INTO sampleTable VALUES('<NAME>');
CREATE TABLE sampleTable(lname VARCHAR(20));
INSERT INTO sampleTable VALUES('<NAME>');
DELETE FROM sampleTable WHERE fname='<NAME>';

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- Please write a query using the UPDATE, DELETE, EXISTS AND IN commands and modify it to use the
-- WHERE keyword.
-- Please create new tables in this database and insert some data into the table.
CREATE TABLE names(name varchar(20));
INSERT INTO names VALUES('<NAME>');
INSERT INTO names VALUES('<NAME>');
UPDATE names SET name='<NAME>' WHERE name=name;
SELECT * FROM names;
UPDATE names SET name='<NAME>' WHERE name='<NAME>';
DELETE FROM names WHERE name='<NAME>';
SELECT * FROM names;
UPDATE names SET name='New First Name' WHERE name='New Last Name';
SELECT * FROM names;
SELECT name FROM names;
UPDATE names SET name='New Last Name' WHERE name='<NAME>';
SELECT * FROM names;
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE names(name varchar(20));
INSERT INTO names VALUES('<NAME>');
INSERT INTO names VALUES('<NAME>');
UPDATE names SET name='New Last Name' WHERE name='<NAME>';
SELECT name FROM names;
DROP DATABASE IF EXISTS sampleDB;

UPDATE names SET name='Replaced Last Name' WHERE name='<NAME>';
SELECT * FROM names;
DROP TABLE IF EXISTS names;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE names(name varchar(20));
INSERT INTO names VALUES('<NAME>');
UPDATE names SET name='<NAME>' WHERE name=name;
SELECT * FROM names;
UPDATE names SET name='<NAME>' WHERE name='<NAME>';
DELETE FROM names WHERE name='<NAME>';
SELECT * FROM names;
UPDATE names SET name='New First Name' WHERE name='New Last Name';
SELECT * FROM names;
SELECT name FROM names;
UPDATE names SET name='New Last Name' WHERE name='<NAME>';
SELECT * FROM names;
SELECT * FROM names;
 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE names2(name varchar(20));
INSERT INTO names2 VALUES('<NAME>');
UPDATE names2 SET name='<NAME>' WHERE name=name;
SELECT * FROM names2;
UPDATE names2 SET name='<NAME>' WHERE name='<NAME>';
DELETE FROM names1 WHERE name='<NAME>';
SELECT * FROM names1;
UPDATE names1 SET name='New First Name' WHERE name='New Last Name';
SELECT * FROM names1;
SELECT name FROM names2;
UPDATE names2 SET name='New Last Name' WHERE name='<NAME>';
SELECT * FROM names2;
SELECT * FROM names2;
 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE names3(name varchar(20));
INSERT INTO names3 VALUES('<NAME>');
UPDATE names3 SET name='<NAME>' WHERE name=name;
SELECT * FROM names;
UPDATE names3 SET name='<NAME>' WHERE name='<NAME>';
DELETE FROM names3 WHERE name='<NAME>';
SELECT * FROM names3;
UPDATE names3 SET name='New First Name' WHERE name='New Last Name';
SELECT * FROM names3;
SELECT name
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE names;
 
SELECT * FROM names;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS names;
CREATE TABLE names(name varchar(20), address VARCHAR(25));
INSERT INTO names VALUES('<NAME>','Somewhere in the world');
INSERT INTO names VALUES('<NAME>','Somewhere in my country');
INSERT INTO names VALUES('<NAME>','Somewhere else');
UPDATE names SET address='Another place in the world' WHERE name='<NAME>';
SELECT * FROM names;
-- Please create a program that accepts a name.
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS names(name varchar(20), address VARCHAR(25));
UPDATE names SET address='Another place in the world' WHERE name='<NAME>';
SELECT * FROM names;
-- Please write a simple SELECT statement that uses a join. Please create a table named contacts
-- with two columns. The first column is the name and address for each contact. The second column is the
-- name for each person in the contacts table. The third column contains your name in the
-- name column. Note that it would be very difficult to implement a full-featured join in your own code.
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS contacts(name varchar(20), address VARCHAR(25));
INSERT INTO contacts VALUES('<NAME>','Somewhere in the world');
INSERT INTO contacts VALUES('<NAME>','Somewhere in my country');
INSERT INTO contacts VALUES('<NAME>','Somewhere else');
SELECT contacts.name FROM contacts LEFT JOIN names ON contacts.name=names.name;
SELECT contacts.address FROM contacts LEFT JOIN names ON contacts.name=names.name
-- Please write a simple SELECT statement that uses a UNION. Please create a table named contacts
-- with two columns. The first column is the name and address for each contact. The second column is the
-- name for each person in the contacts table. The third column contains your name in the
-- name column. Note that it would be very difficult to implement a full-featured union in your own code.
CREATE
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE users;
CREATE TABLE users(name varchar(30), phone varchar(20));
UPDATE users SET phone='New Phone Number';
SELECT * FROM users;
--

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- Please write a query using the UPDATE, DELETE, EXISTS AND IN commands and modify it to use the
-- WHERE keyword.
-- Please create new tables in this database and insert some data into the table.
CREATE TABLE names(name varchar(20));
INSERT INTO names VALUES('<NAME>');
INSERT INTO names VALUES('<NAME>');
UPDATE names SET name='<NAME>' WHERE name=name;
SELECT * FROM names;
UPDATE names SET name='<NAME>' WHERE name='<NAME>';
DELETE FROM names WHERE name='<NAME>';
SELECT * FROM names;
UPDATE names SET name='New First Name' WHERE name='New Last Name';
SELECT * FROM names;
SELECT name FROM names;
UPDATE names SET name='New Last Name' WHERE name='<NAME>';
SELECT * FROM names;
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE persons(firstname varchar(20), lastname varchar(20), age int);
INSERT INTO persons VALUES('David', 'Tolkien', 43);
INSERT INTO persons VALUES('Elizabeth', 'Cox', 40);
INSERT INTO persons VALUES('Danis', 'Tolkien', 44);
SELECT * FROM persons;
SELECT * FROM persons ORDER BY lastname ASC;
UPDATE persons SET age=age+20 WHERE lastname='Tolkien';
SELECT * FROM persons;
SELECT * FROM persons ORDER BY lastname ASC;
UPDATE persons set lastname='Jackson' where lastname='<NAME>';
SELECT * FROM persons;
SELECT * FROM persons ORDER BY lastname ASC;
-- Please use a SQL script to drop and recreate all tables created throughout this session.
DROP TABLE persons, names;
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE persons(firstname varchar(20), lastname varchar(20), age int);
INSERT INTO persons
    (firstname, lastname, age)
    VALUES ('David', 'Tolkien', 43),
    ('Elizabeth', 'Cox', 40),
    ('Danis', 'Tolkien', 44);
SELECT * FROM persons;
DROP TABLE persons;
DROP TABLE names;

exit;\
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- Please remove the row(s) selected and show the result.
DELETE FROM names WHERE name='New First Name and New Last Name';
SELECT * FROM names;
SELECT name FROM names;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

-- Please create and use tables.
DROP TABLE IF EXISTS country;
DROP TABLE IF EXISTS continent;
CREATE TABLE country(
	name char(5),
	capital char(8));
CREATE TABLE continent(
	name char(8),
	country char(5));
INSERT INTO continent VALUES('Africa','Africa');
INSERT INTO country VALUES('Afghanistan','Kabul');
INSERT INTO continent VALUES('Asia','Asia');
INSERT INTO country VALUES('Albania','Tirana');
INSERT INTO continent VALUES('Americas','Americas');
INSERT INTO country VALUES('Argentina','Buenos Aires');
INSERT INTO continent VALUES('Asia','Asia');
INSERT INTO country VALUES('Armenia','Yerevan');
INSERT INTO continent VALUES('Europe','Europe');
INSERT INTO country VALUES('Australia','Canberra');
INSERT INTO continent VALUES('Europe','Europe');
INSERT INTO country VALUES('Austria','Vienna');
INSERT INTO continent VALUES('Europe','Europe');
INSERT INTO country VALUES('Azerbaijan','Beyoun');
INSERT INTO continent VALUES('Oceas','Oceas');
INSERT INTO country VALUES('Bangladesh','Dhaka');
INSERT INTO continent VALUES('Asia','Asia');
INSERT INTO country VALUES('Belgium','Brussels');
INSERT INTO continent VALUES('Europe','Europe');
INSERT INTO country VALUES('Bosnia and Herzegovina','Sarajevo');
INSERT INTO continent VALUES('Europe','Europe');
INSERT INTO country VALUES('Bulgaria','Sofia');
INSERT INTO continent VALUES('Europe','Europe');
INSERT INTO country VALUES('Burundi','Bujumbura');
INSERT INTO continent VALUES('Africa','Africa');
INSERT INTO country VALUES('Czech Republic','Prague');
INSERT INTO continent VALUES('Europe','Europe');
INSERT INTO country VALUES('Denmark','Odense');
INSERT INTO continent VALUES('Europe','Europe');
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- Please write a query using the UPDATE, DELETE, EXISTS AND IN commands and modify it to use
-- the WHERE keyword. Your goal should be to modify the name of the FIRST name to New
-- First Name, and the LAST name to New Last Name.
SELECT * from names;
UPDATE names SET name='New First Name' WHERE name="<NAME>";
SELECT * from names;
UPDATE names SET name='New Last Name' WHERE name="<NAME>";
-- You should drop the name table once you know how to drop tables.
DROP TABLE names;
SELECT * FROM names;
-- Please create a query with the help of SELECT ALL commands that uses the WHERE
-- and EXISTS commands to modify the previous two queries and run the query to
-- understand when the new name is equal to the previous name.
SELECT name FROM names WHERE name="New Last Name";
SELECT name FROM names WHERE name="New First Name";
-- Please create new tables in this database and perform the SQL query that displays
-- the full name of every name in the names table. Make sure to use ENGINE=InnoDB.
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE names(name varchar(20));
INSERT INTO names VALUES ('<NAME>');
INSERT INTO names VALUES ('<NAME>');
INSERT INTO names VALUES ('<NAME>');
CREATE TABLE names_f(name varchar(20));
INSERT INTO names_f VALUES ('<NAME>');
INSERT INTO names_f VALUES('New First Name');
INSERT INTO names_f VALUES('<NAME>');
-- Please try to find out how many times that name occurs in the users table.
SELECT COUNT(*) FROM users WHERE first_name = "<NAME>";
-- Please make a new TABLE users_first_names
CREATE TABLE users_first_names(user_id INT, first_name VARCHAR(20), last_name VARCHAR(20));
-- For each of the NAME values in the names table insert a record in this table.
INSERT INTO users_first_names(user_id, first_name,last_name
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO names VALUES('<NAME>');
INSERT INTO names VALUES('<NAME>');
UPDATE names SET name='<NAME>' WHERE name='<NAME>';
 
DROP TABLE IF EXISTS names;
 
CREATE TABLE IF NOT EXISTS names1(name varchar(20));
CREATE TABLE IF NOT EXISTS names2(name varchar(20));
INSERT INTO names2 VALUES('<NAME>');
INSERT INTO names1 SELECT name FROM names2;
UPDATE names1 SET name=name WHERE name='<NAME>';
SELECT * FROM names1;
DROP TABLE IF EXISTS names2;
DROP TABLE IF EXISTS names1;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- Please create and use tables.
DROP TABLE IF EXISTS country;
DROP TABLE IF EXISTS continent;
CREATE TABLE country(
	name char(5),
	capital char(8));
CREATE TABLE continent(
	name char(8),
	country char(5));
INSERT INTO continent VALUES('Africa','Africa');
INSERT INTO country VALUES('Afghanistan','Kabul');
INSERT INTO continent VALUES('Asia','Asia');
INSERT INTO country VALUES('Albania','Tirana');
INSERT INTO continent VALUES('Americas','Americas');
INSERT INTO country VALUES('Argentina','Buenos Aires');
INSERT INTO continent VALUES('Asia','Asia');
INSERT INTO country VALUES('Armenia','Yerevan');
INSERT INTO continent VALUES('Europe','Europe');
INSERT INTO country VALUES('Australia','Canberra');
INSERT INTO continent VALUES('Europe','Europe');
INSERT INTO country VALUES('Austria','Vienna');
INSERT INTO continent VALUES('Europe','Europe');
INSERT INTO country VALUES('Azerbaijan','Beyoun');
INSERT INTO continent VALUES('Oceas','Oceas');
INSERT INTO country VALUES('Bangladesh','Dhaka');
INSERT INTO continent VALUES('Asia','Asia');
INSERT INTO country VALUES('Belgium','Brussels');
INSERT INTO continent VALUES('Europe','Europe');
INSERT INTO country VALUES('Bosnia and Herzegovina','Sarajevo');
INSERT INTO continent VALUES('Europe','Europe');
INSERT INTO country VALUES('Bulgaria','Sofia');
INSERT INTO continent VALUES('Europe','Europe');
INSERT INTO country VALUES('Burundi','Bujumbura');
INSERT INTO continent VALUES('Africa','Africa');
INSERT INTO country VALUES('Czech Republic','Prague');
INSERT INTO continent VALUES('Europe','Europe');
INSERT INTO country VALUES('Denmark','Odense');
INSERT INTO continent VALUES('Europe','Europe');
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE employee(name char(5));
CREATE TABLE project(name char(5));
ALTER TABLE project ADD CONSTRAINT fk_EMPLOYEE UNIQUE KEY (name, emp);
DROP TABLE IF EXISTS project2;
CREATE TABLE project2(name char(5));
ALTER TABLE project2 ADD CONSTRAINT fk_EMPLOYEE UNIQUE KEY (name, emp);
-- Drop all tables.
DROP TABLE country;
DROP TABLE continent;
-- Use schema.sql script in the sampleDB database folder and execute to create the schema.

-- Please create an efficient query which uses the appropriate table names, column names and tables. Try to use the where clause when possible.
SELECT * FROM employee p1 INNER JOIN employee p2 ON p1.name = p2.name where emp_id in (
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS country;
DROP TABLE IF EXISTS continent;
CREATE TABLE country (
  name char (5),
  capital char (8));
CREATE TABLE continent (
  name char (8),
  country char (5)
);
INSERT INTO continent VALUES ('Africa', 'Africa');
INSERT INTO country VALUES ('AFGHANISTAN', 'Kabul');
INSERT INTO continent VALUES ('Asia', 'Asia');
INSERT INTO country VALUES ('ALBANIA', 'Tirana');
INSERT INTO continent VALUES ('AMERICA', 'Americas');
INSERT INTO country VALUES ('ARGENTINA', 'Buenos Aires');
INSERT INTO continent VALUES ('ASIA', 'Asia');
INSERT INTO country VALUES ('ARMENIA', 'Yerevan');

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- Please create and use tables.
DROP TABLE IF EXISTS country;
DROP TABLE IF EXISTS continent;
CREATE TABLE country(
	name char(5),
	capital char(8));
CREATE TABLE continent(
	name char(8),
	country char(5));
INSERT INTO continent VALUES('Asia','Asia');
INSERT INTO country VALUES('Albania','Tirana');
INSERT INTO continent VALUES('Americas','Americas');
INSERT INTO country VALUES('Argentina','Buenos Aires');
INSERT INTO continent VALUES('Europe','Europe');
INSERT INTO country VALUES('Armenia','Yerevan');
INSERT INTO continent VALUES('Asia','Asia');
INSERT INTO country VALUES('Aruba','Abuja');
INSERT INTO continent VALUES
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SELECT name, capital FROM continent;
SELECT country FROM country;
-- Please create a similar program for the second generation
SELECT name from continent;
SELECT name, capital from continent;
USE sampleDB;
-- Please create a similar program for the third generation
SHOW TABLES;
SELECT * FROM country;
DROP TABLE IF EXISTS country;
DROP TABLE IF EXISTS continent;
USE sampleDB;
-- Please create a similar program for the fourth generation
SELECT DISTINCT name from continent;
SHOW TABLES;
DROP TABLE IF EXISTS country;
DROP TABLE IF EXISTS continent;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS state;
CREATE TABLE state(
	state char(2),
	country char(5),
	capital char(8));
INSERT INTO state VALUES('AL','Albania','Tirana');
INSERT INTO state VALUES('SA','Australia','Canberra');
INSERT INTO state VALUES('NL','Albania','Tirana');
INSERT INTO state VALUES('NT','Albania','Tirana');
INSERT INTO state VALUES('SK','Albania','Tirana');
INSERT INTO state VALUES('TR','Turkey','Ankara');
INSERT INTO state VALUES('SA','Australia','Canberra');
INSERT INTO state VALUES('SA','Australia','Canberra');
INSERT INTO state VALUES('NT','Albania','T
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS country;
DROP TABLE IF EXISTS continent;
CREATE TABLE country (
  name char (5),
  capital char (8));
CREATE TABLE continent (
  name char (8),
  country char (5)
);
INSERT INTO continent VALUES ('Africa', 'Africa');
INSERT INTO country VALUES ('AFGHANISTAN', 'Kabul');
INSERT INTO continent VALUES ('Asia', 'Asia');
INSERT INTO country VALUES ('ALBANIA', 'Tirana');
INSERT INTO continent VALUES ('AMERICA', 'Americas');
INSERT INTO country VALUES ('ARGENTINA', 'Buenos Aires');
INSERT INTO continent VALUES ('ASIA', 'Asia');
INSERT INTO country VALUES ('ARMENIA', 'Yerevan');
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO country VALUES ('ATSIER', 'Beijing');
ALTER TABLE country ADD continent_id int(10);
ALTER TABLE country ADD continent_fk varchar(10) NULL DEFAULT NULL;
CREATE TABLE continent (
  name char(8),
  country_id int(10),
  continent_fk varchar(10)
);

 
ALTER DATABASE sampleDB CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
CREATE TABLE IF NOT EXISTS continent (
  id INT(11) NOT NULL AUTO_INCREMENT,
  name VARCHAR(45),
  PRIMARY KEY(id)
);

ALTER TABLE Country
ADD FOREIGN KEY continent_id
  (`continent_id`) REFERENCES continent (`id`)
ON DELETE NO ACTION
IN ROLLBACK;
ALTER TABLE country DROP FOREIGN KEY continent_fk;
ALTER TABLE continent DROP FOREIGN KEY country_id;
ALTER TABLE continent DROP COLUMN `country_fk`;
ALTER TABLE continent ADD UNIQUE INDEX `continent_uindex` (`continent_fk`);
ALTER TABLE continent ADD FOREIGN KEY `continent_fk` (`country_id`) REFERENCES `country` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION;


[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
 
-- The database must be initialized.
DROP TABLE IF EXISTS country;
DROP TABLE IF EXISTS continent;
CREATE TABLE country (
  name char (5),
  capital char (8));
CREATE TABLE continent (
  name char (8),
  country char (5)
);
INSERT INTO continent VALUES ('Africa', 'Africa');
INSERT INTO country VALUES ('AFGHANISTAN', 'Kabul');
INSERT INTO continent VALUES ('Asia', 'Asia');
INSERT INTO country VALUES ('ALBANIA', 'Tirana');
INSERT INTO continent VALUES ('AMERICA', 'Americas');
INSERT INTO country VALUES ('ARGENTINA', 'Buenos Aires');
INSERT INTO continent VALUES ('ASIA', 'Asia');
INSERT INTO country VALUES ('ARMENIA', 'Yerevan');
SELECT * FROM country;
SELECT * FROM continent;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- This time, add a new country.
INSERT INTO country VALUES ('AZERBAIJAN', 'Baku');
-- Please add a new continent to Africa.
INSERT INTO continent VALUES ('EUROPE', 'Europe');
 
ALTER DATABASE sampleDB2 RENAME TO sampleDB;
ALTER DATABASE sampleDB2 CHANGE country country2 country USING country AS NEW_country USING country AS NOW_country;
ALTER DATABASE sampleDB2 CHANGE continent continent2 continent USING continent AS NEW_continent USING continent AS NOW_continent;
 
ALTER DATABASE sampleDB RESET NAME;
DROP TABLE IF EXISTS country2; DROP TABLE IF EXISTS continent2;
DROP DATABASE IF EXISTS sampleDB2;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS country;
DROP TABLE IF EXISTS continent;
CREATE TABLE country (
  name char (5),
  capital char (8));
CREATE TABLE continent (
  name char (8),
  country char (5)
);
INSERT INTO continent VALUES ('Africa', 'Africa');
INSERT INTO country VALUES ('AFGHANISTAN', 'Kabul');
CREATE TABLE continent (
  name char (8),
  country char (5)
);
INSERT INTO country VALUES ('ALBANIA', 'Tirana');
DROP TABLE IF EXISTS country;
DROP TABLE IF EXISTS continent;
-- Please create a program which takes three parameters:
--   1. the length of countries in the continent.
--   2. the length of continents.
--   3. the number of cities in each continent.
--    Write a query which prints the number of cities in each continent.
-- 3. Create a database object named sampleDB containing tables for the previous exercise.
-- 4. Create table country that has the name of each country in continent.
-- 5. Create table continent that has the name and the name of the country in it.
DELIMITER |
CREATE TABLE country (
  name char (5),
  capital char (8));
CREATE TABLE continent (
  name char (8),
  country char (5)
);
INSERT INTO continent VALUES ('Africa', 'Africa');
INSERT INTO country VALUES ('AFGHANISTAN', 'Kabul');
CREATE TABLE continent (
  name char (8),
  country char (5)
);
INSERT INTO country VALUES ('ALBANIA', 'Tirana');
DROP TABLE IF EXISTS country;
DROP TABLE IF EXISTS continent;
-- Please add more tables to the database. Create a table named city for each city in each continent.
DELIMITER |
CREATE TABLE country (
  name char (5),
  capital char (8));
CREATE TABLE continent (
  name char (8),
  country char
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- We will now populate several tables. This might take a few minutes. In order to avoid losing the query and making the exercise more difficult, we will assume you have a working MySQL database server with a database called sampleDB.
-- We are inserting data from the previous database. We are also modifying data using the ALTER command.
DROP TABLE IF EXISTS country;
DROP TABLE IF EXISTS continent;
CREATE TABLE country (
  name char (5),
  capital char (8));
CREATE TABLE continent (
  name char (8),
  country char (5)
);
INSERT INTO country VALUES ('Afghanistan', 'Kabul');
INSERT INTO continent VALUES ('Asia', 'Asia');
INSERT INTO country VALUES ('Albania', 'Tirana');
COMMIT;
ALTER TABLE country CHANGE name name_orig name char (15);
ALTER TABLE continent CHANGE name name_orig name char (15);
-- Now we will drop the tables and create sampleDB. Feel free to edit these queries and create your own queries:
DROP TABLE IF EXISTS country;
DROP TABLE IF EXISTS continent;
CREATE TABLE country (
  name char (5),
  capital char (8));
CREATE TABLE continent (
  name char (8),
  country char (5)
);
ALTER TABLE country ADD name_orig char (15);
ALTER TABLE country ADD capital_orig char (15);
ALTER TABLE continent ADD name_orig char (15);
ALTER TABLE continent ADD country_orig char (15);
DROP TABLE IF EXISTS country_orig;
DROP TABLE IF EXISTS continent_orig;
-- Finally drop all tables for ease of cleanup.
DROP TABLE IF EXISTS country;
DROP TABLE IF EXISTS continent;
-- And finally use sampleDB to drop the sampleDB database.
DROP DATABASE IF EXISTS sampleDB;


 
 
 
CREATE DATABASE IF NOT EXISTS sampleDB;
USE sampleDB;

CREATE TABLE sampleDB.employee (
    eid INT NOT NULL AUTO_INCREMENT,
   
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- The database must be initialized.
DROP TABLE IF EXISTS country;
DROP TABLE IF EXISTS continent;
CREATE TABLE country (
  name char (5),
  capital char (8));
CREATE TABLE continent (
  name char (8),
  country char (5)
);
INSERT INTO continent VALUES ('Africa', 'Africa');
INSERT INTO country VALUES ('AFGHANISTAN', 'Kabul');
INSERT INTO continent VALUES ('Asia', 'Asia');
INSERT INTO country VALUES ('ALBANIA', 'Tirana');
INSERT INTO continent VALUES ('AMERICA', 'Americas');
INSERT INTO country VALUES ('ARGENTINA', 'Buenos Aires');
INSERT INTO continent VALUES ('ASIA', 'Asia');
INSERT INTO country VALUES ('ARMENIA', 'Yerevan');
SELECT * FROM country;
SELECT * FROM continent;
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS student;
CREATE TABLE student (
  id INT UNSIGNED PRIMARY KEY NOT NULL,
  name char (50) NOT NULL,
  score INT UNSIGNED);
Insert into student values (1, '<NAME>', 100);
-- Please create a program which will update a student's score based on the following criteria: Name matches the given value 'B', Score is less than the given value. After updating the record, you should see the score updated.
-- You should use update clause with where clause and returning clause.
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS students;
CREATE TABLE students (
  id INT UNSIGNED PRIMARY KEY NOT NULL,
  name char (50) NOT NULL,
  score INT UNSIGNED);
Insert into students values (1, '<NAME>', 100);
UPDATE students
SET score = 60
WHERE name = 'B' and score < 30;
-- Please create an application, which reads every 10th record and displays it in the form "Date : XX, Time : XX, Country : XX". You should use cursor statement.
-- You should use the MySQL select query. You can use GROUP BY clause.
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS date_log;
CREATE TABLE date_log (
  date_time datetime DEFAULT CURRENT_TIMESTAMP );
-- Please use SQL-like UPDATE syntax to update the last_name and first_name of all records.
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees;
CREATE TABLE employees (
  id INT UNSIGNED PRIMARY KEY NOT NULL,
  name char (50),
  last_name char (50),
  job char (50),
  department char (50)
);
-- Please use SELECT statement to delete the records of the table employees.
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS country;
DROP TABLE IF EXISTS continent;
CREATE TABLE country (
  name char (5),
  capital char (8));
CREATE TABLE continent (
  name char (8),
  country char (5)
);
INSERT INTO continent VALUES ('Africa', 'Africa');
INSERT INTO country VALUES ('AFGHANISTAN', 'Kabul');
INSERT INTO continent VALUES ('Asia', 'Asia');
INSERT INTO country VALUES ('ALBANIA', 'Tirana');
INSERT INTO continent VALUES ('AMERICA', 'Americas');
INSERT INTO country VALUES ('ARGENTINA', 'Buenos Aires');
INSERT INTO continent VALUES ('ASIA', 'Asia');
INSERT INTO country VALUES ('ARMENIA', 'Yerevan');
SELECT * FROM country;
SELECT * FROM continent;
-- Please find the data you need and fill the tables. Each column must be called the same as the corresponding column in each table.

--
-- MySQL dump 10.13  Distrib 8.0.17, for Win64 (x86_64)
--
-- Host: localhost    Database: sampledb
-- ------------------------------------------------------
-- Server version	8.0.17

 ;
 ;
 ;
 ;
 ;
 ;
 ;
/*!40014
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS country;
DROP TABLE IF EXISTS continent;
CREATE TABLE country (
  name char (50));
CREATE TABLE continent (
  name char (50));
INSERT INTO country VALUES ('Africa');
INSERT INTO continent VALUES ('Asia');
INSERT INTO country VALUES ('All Oceans');
INSERT INTO continent VALUES ('Australia');
INSERT INTO country VALUES ('Asia');
INSERT INTO continent VALUES ('Europe');
INSERT INTO country VALUES ('European');
INSERT INTO continent VALUES ('Oceans');
INSERT INTO country VALUES ('North America');
INSERT INTO continent VALUES ('North America');
INSERT INTO country VALUES ('South America');
INSERT INTO continent VALUES ('South America');
INSERT INTO country VALUES ('South America');
INSERT INTO continent VALUES ('Oceans');
INSERT INTO country VALUES ('Antarctica');
INSERT INTO continent VALUES ('Antarctica');
INSERT INTO country VALUES ('Australia');
INSERT INTO continent VALUES ('Australia');
INSERT INTO country VALUES ('Australia');
INSERT INTO continent VALUES ('Australia');
INSERT INTO country VALUES ('Australia');
INSERT INTO continent VALUES ('Australia');
INSERT INTO country VALUES ('Australia');
INSERT INTO continent VALUES ('Australia');
INSERT INTO country VALUES ('Australia');
INSERT INTO continent VALUES ('Australia');
INSERT INTO country VALUES ('Australia');
INSERT INTO continent VALUES ('Oceans');
INSERT INTO country VALUES ('Australia');
INSERT INTO continent VALUES ('Australia');
INSERT INTO country VALUES ('Eastern Cape');
INSERT INTO continent VALUES ('Antarctica');
INSERT INTO country VALUES ('Eastern Europe');
INSERT INTO continent VALUES ('Europe');
INSERT INTO country VALUES ('Europe');
INSERT INTO continent VALUES ('Europe');
INSERT INTO country VALUES ('European');
INSERT INTO continent VALUES ('Europe');
INSERT INTO country VALUES ('European');
INSERT INTO
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS continent (
  id INTEGER AUTO_INCREMENT PRIMARY KEY,
  name TEXT,
  country char (10));
CREATE TABLE IF NOT EXISTS country (
  id INTEGER AUTO_INCREMENT PRIMARY KEY,
  name TEXT,
  population INTEGER);
DROP TABLE IF EXISTS continent_country;
CREATE TABLE IF NOT EXISTS continent_country (
  id INTEGER AUTO_INCREMENT PRIMARY KEY,
  continent_id INTEGER,
  country_id INTEGER);
-- Do not modify the following code block. Please comment out the following code and create a new sampledb.sql file.
 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

INSERT INTO continent (name, country) VALUES ('Europe', 'Europe');
INSERT INTO continent (name, country) VALUES ('Australia', 'Australia');
INSERT INTO continent (name, country) VALUES ('North America', 'North America');
INSERT INTO continent (name, country) VALUES ('Middle East', 'Middle East');
INSERT INTO continent (name, country) VALUES ('Oceania', 'Oceania');

CREATE TABLE `country` (`id` INTEGER NOT NULL, `name` TEXT, `population` INTEGER);
INSERT INTO country (name, population) VALUES ('America', 3.708E+06);
INSERT INTO country (name, population) VALUES ('Africa', 2.949E+06);
INSERT INTO country (name, population) VALUES ('Albania', 5.682E+05);
INSERT INTO country (name, population) VALUES ('Argentina', 9.179E+06);
INSERT INTO country (name, population) VALUES ('Armenia', 1.168E+06);
INSERT INTO country (name, population) VALUES
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- The database must be initialized.
DROP TABLE IF EXISTS country;
DROP TABLE IF EXISTS continent;
CREATE TABLE country (
  name char (5),
  capital char (8));
CREATE TABLE continent (
  name char (8),
  country char (5)
);
 
SELECT * FROM country
WHERE country IN ('Albania', 'Argentina', 'Armenia', 'Australia');
SELECT * FROM country
WHERE capital IN ('Birmingham');
SELECT * FROM country
WHERE name IN ('Brazil', 'Chile', 'Colombia', 'Croatia', 'CzechRepublic', 'Denmark', 'Ecuador', 'Greece', 'Honduras', 'Hungary', 'Iceland', 'India', 'Mexico', 'Mexico', 'Monaco', 'Morocco', 'Peru');
DROP TABLE IF EXISTS country;
DROP TABLE IF EXISTS continent;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS student;
CREATE TABLE student (
  id INT UNSIGNED PRIMARY KEY NOT NULL,
  name char (50) NOT NULL,
  score INT UNSIGNED);
Insert into student values (1, '<NAME>', 100);
-- Please create a program which will update a student's score based on the following criteria: Name matches the given value 'B', Score is less than the given value. After updating the record, you should see the score updated.
-- You should use update clause with where clause and returning clause.
DROP TABLE IF EXISTS students;
CREATE TABLE students (
  id INT UNSIGNED PRIMARY KEY NOT NULL,
  name char (50) NOT NULL,
  score INT UNSIGNED);
Insert into students values (1, '<NAME>', 100);
UPDATE students
SET score = 60
WHERE name = 'B' and score < 30;
-- Please create an application, which reads every 10th record and displays it in the form "Date : XX, Time : XX, Country : XX". You should use cursor statement.
-- You should use the MySQL select query. You can use GROUP BY clause.
DROP TABLE IF EXISTS date_log;
CREATE TABLE date_log (
  date_time datetime DEFAULT CURRENT_TIMESTAMP );
-- Please use SQL-like UPDATE syntax to update the last_name and first_name of all records.
DROP TABLE IF EXISTS employees;
CREATE TABLE employees (
  id INT UNSIGNED PRIMARY KEY NOT NULL,
  name char (50),
  last_name char (50),
  job char (50),
  department char (50)
);
-- Please use SELECT statement to delete the records of the table employees.
DROP TABLE IF EXISTS employees
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SELECT * FROM employees;
-- Please use SELECT statement to delete the last 10 rows from the table employees.
DROP TABLE IF EXISTS employees
INSERT INTO employees VALUES (1, 'Ashish');
INSERT INTO employees VALUES (2, 'Andrew');
INSERT INTO employees VALUES (3, 'Mark');
INSERT INTO employees VALUES (4, 'Scott');
INSERT INTO employees VALUES (5, 'Ethan');
INSERT INTO employees VALUES (6, 'Andrew');
INSERT INTO employees VALUES (7, 'Sherman');
INSERT INTO employees VALUES (8, 'Ryan');
INSERT INTO employees VALUES (9, 'Joseph');
INSERT INTO employees VALUES (10, 'Margaret');
INSERT INTO employees VALUES (11, 'Richard');
-- Please use MySQL TRUNCATE TABLE command to delete the whole table from the sampleDB. Remember that, it can't drop the table if the table has data associated.
DROP DATABASE If Exists sampleDB;

-- Your solution will be here.

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- Create table employees based on the following specification
INSERT INTO employees VALUES (1, 'Anne','Beck', 'Coffee Bean', 'Coffee');
INSERT INTO employees VALUES (2, 'Marie','Brahms', 'Designer', 'Production');
INSERT INTO employees VALUES (3, 'Claudia','Buchanan', NULL, 'Engineering');
-- Please create an application which performs the following task:
-- 1. It reads the records given by the first and second argument
-- 2. This time, it displays the values of a particular key in the result set.
-- For example, you want to display the department of the first department
SELECT department FROM employees WHERE id = 1;
-- You can also use SQL syntax to filter a data base by condition. For example, you can use the WHERE department=”Engineering”
-- for retrieving information only on the Engineering department. 
-- To find all records, use WHERE 1=1
Select * from employees
-- Create a table students (id INT, name char (30), marks INT),
CREATE DATABASE IF NOT EXISTS sampleDB
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees;
CREATE TABLE employees
(
  id INT UNSIGNED PRIMARY KEY NOT NULL,
  name char (50) NOT NULL,
  last_name char (50),
  job char (50),
  department char (50)
);
UPDATE employees
SET last_name = 'Yang', department = 'Engineering'
WHERE id = 8;
UPDATE employees
SET last_name = 'Shou'
WHERE id = 2 AND job = 'Engineer';
-- Write CREATE TABLE statement for a database which has data of the form employee-id:first-name:last-name:job:department.
-- After querying the database, list the contents (displaying employees' ID, FIRST NAME, LAST NAME, JOB, DEPARTMENT)

 
 
 
 
 

/* create a table with key=id, value=name
create a table with key=id, value=name
create a table with key=code, value=
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS employees (
  id INT UNSIGNED PRIMARY KEY AUTO_INCREMENT NOT NULL,
  name char (50),
  last_name char (50),
  job char (50),
  department char (50) 
);
Create table if not exists employee_address(
  id INT UNSIGNED PRIMARY KEY AUTO_INCREMENT NOT NULL,
  employee INT UNSIGNED,
  street_address char (50),
  city varchar (50),
  state char (5),
  postal_code mediumint (5)
);
create table if not exists employee_salary (
  id INT UNSIGNED PRIMARY KEY AUTO_INCREMENT NOT NULL,
  employee INT UNSIGNED,
  month varchar (50),
  year smallint,
  pay_rate smallint,
  pay_date date DEFAULT CURRENT_DATE,
  gross_salary smallint
); 
-- Please perform the following SQL-like UPDATE statement
UPDATE employees e_emp
SET last_name = 'X', first_name='X', department = 'X'
WHERE name = 'X', last_name = 'X', job = 'X', department = 'X';
Delete
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees;
CREATE TABLE employees (
  id INTEGER UNSIGNED PRIMARY KEY AUTO_INCREMENT,
  name char (50) NOT NULL,
  last_name char (50) NOT NULL,
  job varchar(50) DEFAULT NULL,
  department char (50) DEFAULT NULL
);
-- Please create some sample data where employees.id is from 2 to 40. Use INSERT statement to insert new records into the table employees using different attributes.
INSERT INTO employees (name, job, department) values ('<NAME>', 'Developer', 'IT Department');
INSERT INTO employees (name, job, department) values ('<NAME>', 'Developer', 'IT Department');
INSERT INTO employees (name, job, department) values ('<NAME>', 'Developer', 'IT Department');
INSERT INTO employees (name, job, department) values ('<NAME>', 'Developer', 'IT Department');
INSERT INTO employees (name, job, department) values ('<NAME>', 'Developer', 'IT Department');
INSERT INTO employees (name, job, department) values ('<NAME>', 'Developer', 'IT Department');
INSERT INTO employees
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees;
CREATE TABLE employees
(
  id INT UNSIGNED PRIMARY KEY NOT NULL,
  name char (50) NOT NULL,
  last_name char (50),
  job char (50),
  department char (50)
);
UPDATE employees
SET last_name = 'Yang', department = 'Engineering'
WHERE id = 8;
UPDATE employees
SET last_name = 'Shou'
WHERE id = 2 AND job = 'Engineer';
-- Write CREATE TABLE statement for a database which has data of the form employee-id:first-name:last-name:job:department.
-- After querying the database, list the contents (displaying employees' ID, FIRST NAME, LAST NAME, JOB, DEPARTMENT)
/* create a table with key=id, value=name
create a table with key=id, value=name
create a table with key=code, value=
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

CREATE TABLE persons
(
    id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name  varchar (100) NOT NULL,
    code varchar (100) UNIQUE NOT NULL,
    CONSTRAINT unique_id UNIQUE (code),
    CONSTRAINT required_fields FOREIGN KEY (code) REFERENCES sampleDB.persons (code) ON DELETE CASCADE ON UPDATE CASCADE
);
-- Write SQL to delete the data in persons table with code = 'P0298'.
 */

CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

DROP TABLE IF EXISTS products; CREATE TABLE products 
(
id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
code char (10) NOT NULL UNIQUE,
label char(20) NULL,
price INT,
description TEXT,
product_type INT,
CONSTRAINT unique_code UNIQUE(code)
);

UPDATE  products SET code= 'BEE.001' WHERE code='BEE.002';

DELETE FROM products WHERE code='BEE.004';

 
DELETE FROM products WHERE id > 3;

 
DROP TABLE IF EXISTS persons CASCADE; DROP TABLE IF EXISTS products CASCADE;
CREATE TABLE persons
(  
    id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name  varchar (100) NOT NULL,
    code varchar (100) UNIQUE NOT NULL
);
CREATE TABLE products
(
    id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY, 
    code char (20) NOT NULL UNIQUE,
    label char(20),
    price INT
);
CREATE TABLE inventory
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE contacts
(
  id INT UNSIGNED PRIMARY KEY NOT NULL,
  first_name varchar(20),
  last_name varchar(20),
  address varchar(20)
);
CREATE TABLE jobs
(
  id INT UNSIGNED PRIMARY KEY NOT NULL,
  name varchar(20)
);
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE employees (
id INT UNSIGNED PRIMARY KEY NOT NULL,
name VARCHAR (50) NOT NULL,
job_history CHAR (20)
);
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE jobs (
id INT UNSIGNED PRIMARY KEY NOT NULL,
name VARCHAR (50)
);
DROP TABLE IF EXISTS jobs;
DROP TABLE IF EXISTS company_info;
CREATE TABLE company_info
(
  id INT UNSIGNED PRIMARY KEY NOT NULL,
  company_name varchar (50) NOT NULL,
  address1 varchar (50),
  address2 varchar (50),
  city char (50),
  country char (50),
  phone_number char (8)
);

DELETE FROM company_info;
INSERT INTO company_info VALUES 
('ACME Co., Ltd.','125 Riverside Parkway','Houston','TX', 'USA', '972352-2087'),
('ACME Co., Ltd.','125 Riverside Parkway','Housston','TX', 'USA', '97575-2087');
SELECT * FROM employees;
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE employee(id int, name varchar(20), email varchar(50), dept varchar(20), PRIMARY KEY (id))
INSERT INTO employee VALUES(1, 'rashmi', '<EMAIL>', 'Engineering')
SELECT * from employee
-- Drop the created database
USE mysql; DROP DATABASE IF EXISTS `sampleDB`;
*/
DROP DATABASE IF EXISTS `sampleDB`;
-- DROP DATABASE IF EXISTS `DBMS`;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS Employees (
  id INT UNSIGNED NOT NULL PRIMARY KEY,
  name char (50),
  last_name char (50),
  job char (50),
  department char (50)
);
INSERT INTO Employees VALUES(1, 'Joshua', 'Roberts', 'Admin', 'Admin');
INSERT INTO Employees VALUES(10, 'Bob', 'Lobos', 'Engine', 'Engine');
INSERT INTO Employees VALUES(200, 'John', 'Doe', 'Engine', 'Engine');
INSERT INTO Employees VALUES(205, 'Henry', 'Ford', 'Engine', 'Engine');
INSERT INTO Employees VALUES(264, 'Thomas', 'Lee', 'Tech Support', 'Tech Support');
INSERT INTO Employees VALUES(270, 'Kostas', 'Mertens', 'Engine', 'Engine');
INSERT INTO Employees VALUES(274, 'Mike', 'Gibbs', 'Developer', 'Developer');
INSERT INTO Employees VALUES(277, 'Anna', 'Jung', 'Engine', 'Engine');
INSERT INTO Employees VALUES(278, 'Terry', 'Rice', 'Developer', 'Developer');
INSERT INTO Employees VALUES(293, 'John', 'Doe', 'Engine', 'Engine');
INSERT INTO Employees VALUES(200, 'John', 'Doe', 'Engine', 'Engine');
UPDATE Employees SET department = 'Engineering' WHERE id = 8;
UPDATE Employees SET department = 'Engineering' WHERE id = 8;
DELETE FROM Employees WHERE name = 'John'; */
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS job_positions;
CREATE TABLE job_positions
(
    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    position char(50) NOT NULL UNIQUE
);
DROP TABLE IF EXISTS employees_positions;
-- Write INSERT statement for the table with above created
/* create a table with key=employee-id, value=position
create a table with key=employee-id, value=position
write an update statement for the above created

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS job_positions;
CREATE TABLE job_positions
(
    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    position char(50) NOT NULL UNIQUE
);
DROP TABLE IF EXISTS employees_positions;
-- Write INSERT statement for the table with above created
/* create a table with key=employee-id, value=position
create a table with key=employee-id, value=position
write an update statement for the above created
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- DROP TABLE IF EXISTS job_positions;
CREATE TABLE job_positions
(
    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    job_title char(50) NOT NULL UNIQUE
);
DROP TABLE IF EXISTS employees_positions;
-- Write INSERT statement for the table with above created
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_positions;
CREATE TABLE employees_positions
(
    employee_id INT UNSIGNED AUTO_INCREMENT,
    employee_position INT UNSIGNED,
    PRIMARY KEY(employee_id, employee_position),
    FOREIGN KEY(employee_position) REFERENCES job_positions(id)
);

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees;
CREATE TABLE employees
(
  employee_id SMALLINT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
  employee_name VARCHAR(50) NOT NULL,
  employee_lastname VARCHAR(15) NOT NULL
);
DROP TABLE IF EXISTS job_tasks;
CREATE TABLE job_tasks
(
  id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
  job_id INT UNSIGNED,
  task_id INT UNSIGNED
);
DROP TABLE IF EXISTS job_history;
CREATE TABLE job_history
(
  employee_id INT UNSIGNED,
  job_id INT UNSIGNED,
  amount INT UNSIGNED,
  status INT UNSIGNED,
  date_created TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
DROP TABLE IF EXISTS job_salary;
CREATE TABLE job_salary
(
  id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
  position_id INT UNSIGNED CHECK(position_id IN(0,1,2)),
  job_id INT UNSIGNED,
  year INT UNSIGNED,
  salary INT UNSIGNED,
  pay_date INT UNSIGNED
);
DROP TABLE IF EXISTS tasks;
CREATE TABLE tasks
(
  id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
  number INT UNSIGNED,
  description VARCHAR(100) null,
  last_execution DATE
);
DROP TABLE IF EXISTS employees;
CREATE TABLE employees
(
  employee_id SMALLINT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
  employee_name VARCHAR(15),
  employee_lastname VARCHAR(15) not null
);
INSERT INTO job_positions VALUES (0, 'Developer'), (1, 'Tester'), (2, 'Tester');
INSERT INTO job_tasks VALUES (0,0,1), (0,0,2), (0,0,3);
INSERT INTO job_tasks VALUES (1,1,1), (1,1,3), (1,1,2);
INSERT INTO job_tasks VALUES (2,2,2), (2,2,3), (2,2,4);
INSERT INTO tasks VALUES (0,0,'Clean code',NOW()), (0,0,'Test 1',NOW());
INSERT INTO tasks VALUES (0,1,'Build a website',NOW()), (
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS job_positions;
CREATE TABLE job_positions
(
    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    position char(50) NOT NULL UNIQUE
);
DROP TABLE IF EXISTS employees_positions;
-- Write INSERT statement for the table with above created
/* create a table with key=employee-id, value=position
create a table with key=employee-id, value=position
write an update statement for the above created
Write a select statement for the above created and execute it in the console

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS johndoe;
DROP TABLE IF EXISTS johnsmith;
DROP TABLE IF EXISTS mark;
DROP TABLE IF EXISTS jonathan;
DROP TABLE IF EXISTS janedoe;
CREATE TABLE johndoe
(
    key INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    value char(50) NOT NULL
);
INSERT
INSERT
INSERT
INSERT
INSERT
INSERT
INSERT
INSERT
SELECT * FROM employees_positions;
DROP TABLE IF EXISTS jonathan;
DROP TABLE IF EXISTS jonathan_emp;

CREATE TABLE jonathan_emp
(
    id INT NOT NULL,
    pos_id int not null
)
ENGINE = MYISAM;
ALTER TABLE jonathan_emp 
ADD CONSTRAINT jonathan
FOREIGN KEY (pos_id)
REFERENCES job_positions (id);

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_positions;
CREATE TABLE employees_positions
(
    employee_id INT UNSIGNED AUTO_INCREMENT,
    employee_position INT UNSIGNED,
    PRIMARY KEY(employee_id, employee_position),
    FOREIGN KEY(employee_position) REFERENCES job_positions(id)
);
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_salaries;
CREATE TABLE employees_salaries
(
    employee_id INT UNSIGNED AUTO_INCREMENT,
    employee_salary INT UNSIGNED,
    PRIMARY KEY(employee_id, employee_salary)
);
INSERT INTO employees_salaries(employee_id, employee_salary) VALUES
(1, 9000), (2, 10000), (3, 430000), (4, 120000);
INSERT INTO jobs_positions(id) VALUES
(1), (7), (8), (5), (4), (3), (6);
 
SELECT e.id, e.last_name, e.first_name, j.title
FROM employees e
LEFT JOIN employees_positions ep
ON e.id = ep.employee_id
JOIN job_positions j
ON ep.employee_position = j.id
WHERE j.status='Active' AND e.salary < 500000;
-- Expected result:
-- id: '2', last name: 'Sivan', first name: 'Chris', title: 'CEO';

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees;
CREATE TABLE employees
(
    employee_id INT UNSIGNED AUTO_INCREMENT,
    employee_name VARCHAR(40),
    employee_last_name varchar(50),
    employee_street text DEFAULT NULL,
    employee_zip text DEFAULT NULL,
    employee_city text DEFAULT NULL,
    employee_email text DEFAULT NULL,
    employee_birth_date date DEFAULT NULL,
    employee_salary double DEFAULT NULL,
    employee_salary_currency varchar(2) DEFAULT NULL,
    employee_active boolean DEFAULT true,
    employee_password_hash text,
    employee_is_admin boolean DEFAULT false,
    employee_status_id INT UNSIGNED,  
    employee_status varchar(100),  

    employee_positions JSON DEFAULT NULL,

    employee_role_id INT UNSIGNED,
    employee_salary_id INT UNSIGNED,
    employee_paygrade_id INT UNSIGNED,

    employee_birth_photo blob,
    employee_profile_photo blob,
    employee_photo blob,

    employee_gender_preference varchar(10) DEFAULT NULL
);
-- Default admin role
INSERT INTO role (id, name)
VALUES (1, 'Administrator');

-- Default role for employees
INSERT INTO role (id, name)
VALUES (2, 'Employer');
INSERT INTO role (id, name)
VALUES (3, 'User');
INSERT INTO role (id, name)
VALUES (4, 'Employee');

-- Default salary
INSERT INTO salary (id, type, salary, currency, employee_status_id, employee_salary_id, employee_paygrade_id)
VALUES(1, 'Hourly', 50.0, 'USD', 1, 1, 1);

 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employee_positions;
CREATE TABLE employee_positions
(
    employee_id INT UNSIGNED,
    employee_position_id INT UNSIGNED,
    PRIMARY KEY(employee_id, employee_position_id),
    FOREIGN KEY(employee_id) REFERENCES employees(employee_id),
    FOREIGN KEY(employee_position_
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_positions;
CREATE TABLE employees_positions
(
    employee_id INT UNSIGNED AUTO_INCREMENT,
    employee_postion INT UNSIGNED,
    PRIMARY KEY(employee_id, employee_postion),
    FOREIGN KEY(employee_postion) REFERENCES job_positions(id)
);


[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_positions;
CREATE TABLE employees_positions
(
    employee_id INT UNSIGNED AUTO_INCREMENT,
    employee_position INT UNSIGNED,
    PRIMARY KEY(employee_id, employee_position),
    FOREIGN KEY(employee_position) REFERENCES job_positions(id)
);
--
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_positions;
CREATE TABLE employees_positions
(
    employee_id INT UNSIGNED AUTO_INCREMENT,
    employee_position INT UNSIGNED,
    PRIMARY KEY(employee_id, employee_position),
    FOREIGN KEY(employee_position) REFERENCES job_positions(id)
);
 

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_positions;
CREATE TABLE employees_positions
(
    employee_id INT UNSIGNED AUTO_INCREMENT,
    employee_position INT UNSIGNED,
    PRIMARY KEY(employee_id, employee_position),
    FOREIGN KEY(employee_position) REFERENCES job_positions(id)
);
--
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

DROP TABLE IF EXISTS employees_positions;
CREATE TABLE employee_positions
(
    employee_id INT UNSIGNED,
    employee_position INT UNSIGNED,
    PRIMARY KEY(employee_id, employee_position),
    FOREIGN KEY(employee_position) REFERENCES job_positions(id)
);
--
DROP DATABASE sampleDB;
--

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_positions;
CREATE TABLE employees_positions (
    employee_id INT UNSIGNED AUTO_INCREMENT,
    job_position INT UNSIGNED,
    PRIMARY KEY (employee_id, job_position),
    FOREIGN KEY (job_position) REFERENCES job_positions (id)
);

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_positions;
CREATE TABLE employees_positions
(
    employee_emp_no  INT UNSIGNED  NOT NULL,
    employee_position INT UNSIGNED,
    PRIMARY KEY (employee_emp_no, employee_position)
);

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_positions;
CREATE TABLE employees_positions
(
    employee_id INTEGER NOT NULL,
    employee_position INTEGER NOT NULL,
    PRIMARY KEY(employee_id, employee_position),
    FOREIGN KEY(employee_position) REFERENCES job_positions(id)
);
--
-- Please create a table
DECLARE @Employees INT UNSIGNED;
SET @Employees = 99;
CREATE TEMPORARY TABLE temp_employee_positions
(
    id INTEGER GENERATED ALWAYS AS IDENTITY,
    name VARCHAR(100),
    PRIMARY KEY(id)
);

INSERT INTO temp_employee_positions
VALUES (1, 'Developer');
FOR $i IN (1.. @Employees ) LOOP
    INSERT INTO employees_positions
    (
        employee_id,
        employee_position
    )
    SELECT $i.id,
    (SELECT name FROM "temp_employee_positions")
    FROM dual;
END LOOP;
DROP TABLE IF EXISTS employees_positions;
CREATE TABLE employees_positions
(
    employee_id INTEGER UNSIGNED,
    employee_position INTEGER,
    PRIMARY KEY(employee_id, employee_position),
    FOREIGN KEY(employee_position) REFERENCES job_positions(id)
);
 
DECLARE @Employees INT UNSIGNED;
SET @Employees = 94;
SELECT COUNT(*)
  FROM temp_employee_positions
 WHERE id = (SELECT CHR(employee_position)
           FROM employees_positions
           ORDER BY RAND()
           LIMIT 1);
DROP TABLE IF EXISTS temp_employee_positions;
DROP TABLE IF EXISTS employees_positions;
CREATE TABLE employees_positions
(
    employee_id INTEGER NOT NULL,
    employee_position INTEGER NOT NULL,
    PRIMARY KEY(employee_id, employee_position),
    FOREIGN KEY(employee_position) REFERENCES job_positions(id)
);
 
--
-- 
--
-- Which position are most often used by employees?
--
--
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS job_positions;
CREATE TABLE
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_positions;
CREATE TABLE employees_positions (
    employee INTEGER NOT NULL,
    position INTEGER NOT NULL,
    PRIMARY KEY (employee, position)
);
--
INSERT INTO employees_positions VALUES (1, 1);
INSERT INTO employees_positions VALUES (1, 2);
INSERT INTO employees_positions VALUES (2, 3);
INSERT INTO employees_positions VALUES (2, 4);
INSERT INTO employees_positions VALUES (2, 5);
INSERT INTO employees_positions VALUES (2, 6);
INSERT INTO employees_positions VALUES (2, 7);
INSERT INTO employees_positions SELECT
        employee,
        position
    FROM employees;
SELECT employee, position, COUNT(employee) AS all_members
    FROM (
        SELECT employees.employee AS employee, employees.position AS position
        FROM employees
        GROUP BY employees.employee, employees.position
        ) AS members_count
    GROUP BY employee, position;
--
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_positions;
CREATE TABLE employees_positions
(
    employee_emp_no  INT UNSIGNED  NOT NULL,
    employee_position INT UNSIGNED,
    PRIMARY KEY (employee_emp_no, employee_position)
);
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_positions;
CREATE TABLE employees_positions(
    employee_emp_no  INT UNSIGNED  NOT NULL,
    employee_position INT UNSIGNED,
    PRIMARY KEY (employee_emp_no, employee_position));
USE sampleDB;
DROP TABLE employees_positions;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_positions;
 
CREATE TABLE employees_positions(employee_emp_no TINYINT UNSIGNED NOT NULL, employee_position MEDIUMINT UNSIGNED NOT NULL, PRIMARY KEY (employee_emp_no, employee_position)) ENGINE=InnoDB;
*/ Write a SQL statement which:
  * Returns a list of databases that currently exist on your server. List results as a comma-separated list of database names.
 
SELECT database() as database;

CREATE TABLE IF NOT EXISTS employees
(
    employee INT UNSIGNED   NOT NULL AUTO_INCREMENT,
    employee_name    VARCHAR(45)   NOT NULL,
    employee_gender    TINYINT UNSIGNED   NOT NULL,
    employee_photo    MEDIUMBLOB    NULL,
    employee_salary    MEDIUMINT UNSIGNED   NOT NULL,
    employee_address     TEXT            NULL,
    employee_city    TINYTEXT          NULL,
    vehicle         MEDIUMBLOB    NULL,
    PRIMARY KEY (employee)
)ENGINE = InnoDB;

INSERT INTO employees (employee_name, employee_gender, employee_salary, employee_address, employee_city) VALUES ('Andrew', 'M', 8203068, '<NAME>','Moscow');

ALTER TABLE employees ADD `employee_position` tinyint(6);

ALTER TABLE employees MODIFY employee_name VARCHAR(300);

 
ALTER TABLE employees MODIFY employee_name VARCHAR(35);

 
UPDATE employees
SET employee_address = 'Moscow, Napala Rhode, Bulgaria'
WHERE employee_address!= '';
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TEMPORARY TABLE employees_positions (employee_emp_no INT UNSIGNED, employee_position INT UNSIGNED);
DROP TABLE IF EXISTS employees_positions;
INSERT INTO employees_positions
SELECT employee_emp_no, employee_position
FROM employees
WHERE employee_emp_no IN
(
    SELECT DISTINCT employee_emp_no
    FROM employees_positions
)
UNION
SELECT employee_emp_no, employee_position
FROM employees_positions
ORDER BY employee_emp_no, employee_position;
--
 
--
DROP table IF EXISTS salaries;
CREATE TABLE salaries
(
    salary_emp_no     INT UNSIGNED  NOT NULL,
    salary_amount     DECIMAL(5, 2) NOT NULL,
    salary_date       DATE          NOT NULL,
    PRIMARY KEY (salary_emp_no, salary_date)
);

DROP table IF EXISTS employees;
CREATE TABLE employees
(
    employee_emp_no           INT UNSIGNED  NOT NULL,
    employee_last_name        VARCHAR(25)   NOT NULL,
    employee_first_name       VARCHAR(20)   NOT NULL,
    employee_birth_date       DATE          NOT NULL,
    employee_job_title        VARCHAR(25)   NOT NULL,
    employee_manager_cost      DECIMAL(5, 2) NOT NULL,
    employee_manager_staff_no VARCHAR(20)   NOT NULL,
    PRIMARY KEY (employee_emp_no)
);
DROP table IF EXISTS orders;
CREATE TABLE orders
(
    order_cust_no INT UNSIGNED  NOT NULL,
    order_order_no INT UNSIGNED  NOT NULL AUTO_INCREMENT,
    order_order_date     DATE          NOT NULL,
    order_order_priority INT UNSIGNED  NOT NULL,
    order_total_price    DECIMAL(5, 2)  NOT NULL,
    order_status       INT UNSIGNED  NOT NULL,
    PRIMARY KEY (order_cust_no, order_order_no),
    UNIQUE KEY (order_order_date)
);

DROP table IF EXISTS orders_items;
CREATE TABLE orders_items
(
    order_cust_no INT UNSIGNED  NOT NULL,
    order_order_no INT UNSIGNED  NOT NULL,
    order_order_item_id INT UNSIGNED  NOT NULL,
    PRIMARY KEY (order_cust_no, order_order_no, order_order_item_id),
    UNIQUE KEY (order_order_item_id)
);
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_positions;
CREATE TABLE employees_positions
(
    employee_emp_no  INT UNSIGNED PRIMARY KEY NOT NULL,
    employee_position INT UNSIGNED PRIMARY KEY  NOT NULL,
    CONSTRAINT employee_emp_fk FOREIGN KEY (employee_emp_no) REFERENCES employees (employee_emp_no)
);

-- You must create a new table to insert data
USE employees;
DROP TABLE IF EXISTS Employees;
CREATE TABLE Employees
(
    employee_emp_no  INT UNSIGNED PRIMARY KEY NOT NULL,
    employee_sal_aries DECIMAL(9,2)  NULL,
    employee_dept_no   INT UNSIGNED  NULL,
    employee_hire_date DATE NOT NULL
);
CREATE INDEX idxEmployees_deptno ON Employees (employee_dept_no);
USE Employees;
INSERT INTO Employees (employee_emp_no, employee_dept_no, employee_sal_aries, employee_hire_date)
            VALUES (1,201,NULL, '1952-01-10'), (1,88,NULL, '2013-08-27'), (2,361,NULL, '1969-07-18');
SELECT * FROM Employees;

INSERT INTO Employees (employee_emp_no, employee_dept_no, employee_sal_aries, employee_hire_date)
    VALUES (3,88,NULL, '-'), (4,108,NULL, '2002-03-15'), (5,361,NULL,'-'), (6,88,NULL, '1969-07-18'), (7,0,NULL, '-'), (8,0,NULL, '1974-01-15'), (9,980,NULL,'2020-12-26'), (10,0,NULL, '-'), (11,600,NULL, '2012-08-02'), (12,1700,NULL, '2019-02-26'), (13,3800,NULL, '2019-01-20'), (14,9000,NULL, '1979-03-08'), (15,0,NULL, '2016-04-16'), (17,0,NULL, '1965
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_positions
WHERE employee_position = 1000;
INSERT INTO employees_positions
SELECT emp_no, MAX(position) AS position FROM employees GROUP BY emp_no;
UPDATE employees SET employee_position = position
FROM employees_positions USING (\*)
WHERE employees.emp_no = employees_positions.employee_emp_no
AND employees.job_title = employees_positions.employee_position;
DROP TABLE IF EXISTS employees_positions;
-- Please create a semantically equivalent query. Check if this is possible by using LIMITS and OFFSETS.
SELECT emp_no, MAX(position) AS position FROM employees GROUP BY emp_no
UNION SELECT emp_no, MAX(distinct position) AS position FROM employees GROUP BY emp_no
ORDER BY emp_no, position
LIMIT 100 OFFSET 0;
 
CREATE DBSCHEMA employees;
USE employees;
CREATE TABLE employees ( emp_no INT UNSIGNED NOT NULL PRIMARY KEY, emp_name VARCHAR(30) NOT NULL) CHARSET utf8 COLLATE utf8_general_ci;
CREATE TABLE positions ( pos_code INT UNSIGNED NOT NULL PRIMARY KEY,  pos_name VARCHAR(30) NOT NULL) CHARSET utf8 COLLATE utf8_general_ci;
CREATE TABLE employees_to_positions ( employee_emp_no INT UNSIGNED NOT NULL, employee_pos_code INT UNSIGNED NOT NULL,
FOREIGN KEY (employee_emp_no) REFERENCES employees (emp_no), 
FOREIGN KEY (employee_pos_code) REFERENCES positions (pos_code))
ENGINE = InnoDB DEFAULT CHARSET = utf8 COLLATE = utf8_general_ci;
 
INSERT INTO employees VALUES
(100, 'Mrs.<NAME>'), (101, 'Mr. <NAME>.'), (102, 'Frans Boyce'), (103, 'Master Professor'), (104, 'CEO');
-- We have to create a new table based on the employee_emp_no, so we must add one more column: employee_new_emp_no
INSERT INTO employees ADD employee_new_emp_no int;
INSERT INTO employees_to_positions SELECT emp_no, emp_no AS employee_new_emp_no, pos_code, 'CEO' AS employee_pos_code FROM employees_to_positions UNION ALL SELECT emp_no, emp_no AS employee_new_emp_no, pos_code,
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_positions;
CREATE TABLE employees_positions(
    employee_emp_no  INT UNSIGNED  NOT NULL,
    employee_position INT UNSIGNED,
    PRIMARY KEY (employee_emp_no, employee_position));
USE sampleDB;
DROP TABLE employees_positions;
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_positions;
CREATE TABLE IF NOT EXISTS employees_positions(
    employee_emp_no  INT UNSIGNED NOT NULL,
    employee_position INT UNSIGNED,
    PRIMARY KEY (employee_emp_no, employee_position));
DROP TABLE employees_positions;
-- Create a new temporary table
CREATE TABLE IF NOT EXISTS employees_positions (
   employee_emp_no  INT UNSIGNED NOT NULL,
   employee_position INT UNSIGNED,
   PRIMARY KEY (employee_emp_no, employee_position));
INSERT INTO employees_positions(employee_emp_no, employee_position)
    VALUES(1, 1);
INSERT INTO employees_positions(employee_emp_no, employee_position)
    VALUES(1, 5);
INSERT INTO employees_positions(employee_emp_no, employee_position)
    VALUES(1, 9);
INSERT INTO employees_positions(employee_emp_no, employee_position)
   VALUES(2, 3);
INSERT INTO employees_positions(employee_emp_no, employee_position)
   VALUES(2, 6);
INSERT INTO employees_positions(employee_emp_no, employee_position)
   VALUES(2, 10);
-- Do some work using the temporary table
SELECT employee_position FROM employees_positions WHERE employee_emp_no = 1;
-- Remove the temporary table
DROP TABLE employees_positions;
-- Use a temporary table to update multiple records at once
DROP TABLE IF EXISTS employees_positions;
CREATE TABLE IF NOT EXISTS employees_positions(
    employee_emp_no  INT UNSIGNED NOT NULL,
    employee_position INT UNSIGNED,
    PRIMARY KEY (employee_emp_no, employee_position));
INSERT INTO employees_positions(employee_emp_no, employee_position)
    VALUES(1, 1);
INSERT INTO employees_positions(employee_emp_no, employee_position)
    VALUES(1, 5);
INSERT INTO employees_positions(employee_emp_no, employee_position)
    VALUES(1, 9);
INSERT INTO employees_positions(employee_emp_no, employee_position)
   VALUES(2, 3);
INSERT INTO employees_positions(employee_emp_no, employee_position)
   VALUES(2, 6);
INSERT INTO employees_positions(employee_emp_no, employee_position)
   VALUES(2, 10);
-- Please remove the IF EXISTS from the creation query and do the following using a temporary table:
SELECT employee_position FROM employees_positions WHERE employee_
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_positions;
CREATE TABLE employees_positions(
    employee_emp_no  INT UNSIGNED  NOT NULL,
    employee_position INT UNSIGNED,
    PRIMARY KEY (employee_emp_no, employee_position));
USE sampleDB;
DROP FOREIGN KEY IF EXISTS employees_positions_fkey;
DROP TABLE IF EXISTS employees_positions;
DROP DATABASE sampleDB;


[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_positions;
CREATE TABLE employees_positions(
    employee_emp_no  INT UNSIGNED,
    employee_position INT UNSIGNED);
UPDATE employees_positions
    INNER JOIN employees_positions on employees_positions.employee_position = employees_positions.employee_position;
DROP TABLE employees_positions;
COMMIT;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_positions;
CREATE TABLE employees_positions(
    employee_emp_no  INT UNSIGNED  NOT NULL,
    employee_position INT UNSIGNED,
    PRIMARY KEY (employee_emp_no, employee_position));
USE sampleDB;
INSERT INTO employees_positions VALUES (1100, 80);
INSERT INTO employees_positions VALUES (2000, 60);
INSERT INTO employees_positions VALUES (7001, 90);
INSERT INTO employees_positions VALUES (7002, 100);

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE employees(
    employee_emp_no    INT UNSIGNED  NOT NULL,
    employee_sal_ario DECIMAL        NOT NULL,
    PRIMARY KEY (employee_emp_no));
USE sampleDB;
CREATE TABLE employees(
    employee_emp_no    INT UNSIGNED  NOT NULL,
    employee_sal_ario DECIMAL        NOT NULL,
    PRIMARY KEY (employee_emp_no));
USE sampleDB;
SELECT employee_sal_ario from employees LIMIT 1;
DELETE FROM employees ORDER BY employee_emp_no;
-- Please answer the questions below:
SELECT COUNT(*) FROM employees; SELECT COUNT(*) FROM employees_positions LIMIT 1;
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_positions;
CREATE TABLE employees_positions(
    employee_emp_no  INT UNSIGNED  NOT NULL,
    employee_position INT UNSIGNED,
    PRIMARY KEY (employee_emp_no, employee_position));
USE sampleDB;
INSERT INTO employees_positions VALUES (1100, 80);
INSERT INTO employees_positions VALUES (2000, 60);
INSERT INTO employees_positions VALUES (7001, 90);
INSERT INTO employees_positions VALUES (7002, 100);
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_positions;
CREATE TABLE employees_positions(employee_emp_no INT UNSIGNED  NOT NULL, employee_position INT UNSIGNED, PRIMARY KEY (employee_emp_no, employee_position));
USE sampleDB;
INSERT INTO employees_positions VALUES (1100, 80);
INSERT INTO employees_positions VALUES (2000, 60);
INSERT INTO employees_positions VALUES (7001, 90);
INSERT INTO employees_positions VALUES (7002, 100);

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_positions;
CREATE TABLE employees_positions(
    employee_emp_no  INT UNSIGNED  NOT NULL,
    employee_position INT UNSIGNED,
    INDEX (employee_emp_no, employee_position)
);
USE sampleDB;
INSERT INTO employees_positions VALUES (1100, 80, 20,1);
INSERT INTO employees_positions VALUES (2000, 60, 15,2);
INSERT INTO employees_positions VALUES (7001, 90, 23,4);
INSERT INTO employees_positions VALUES (7002, 100, 10,7);
 

 

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_positions;
CREATE TABLE employees_positions(
    employee_emp_no  INT UNSIGNED  NOT NULL,
    employee_position INT UNSIGNED,
    PRIMARY KEY (employee_emp_no, employee_position));
USE sampleDB;
INSERT INTO employees_positions VALUES (4100,  10);
INSERT INTO employees_positions VALUES (4200,  20);
SELECT * FROM employees_positions WHERE employee_emp_no=4100;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_positions;
CREATE TABLE employees_positions(
    employee_emp_no  INT UNSIGNED  NOT NULL,
    employee_position INT UNSIGNED,
    PRIMARY KEY (employee_emp_no, employee_position));
USE sampleDB;
INSERT INTO employees_positions VALUES (1100, 80);
INSERT INTO employees_positions VALUES (2000, 60);
INSERT INTO employees_positions VALUES (7001, 90);
INSERT INTO employees_positions VALUES (7002, 100);

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_salary;
CREATE TABLE employees_salary(
    employee_emp_no        INT UNSIGNED   NOT NULL,
    employee_salary       INT UNSIGNED,
    employee_salary_date  DATE,
    employee_year         YEAR,
    PRIMARY KEY (employee_emp_no, employee_salary_date, employee_year));
USE sampleDB;
INSERT INTO employees_salary VALUES (1100, 10000, '1991-01-01', 1990);
INSERT INTO employees_salary VALUES (1100, 7000, '1991-02-01', 1990);
INSERT INTO employees_salary VALUES (1100, 85000, '1991-02-10', 1991);

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_salary;
CREATE TABLE employees_salary(
    employee_emp_no        INT UNSIGNED   NOT NULL,
    employee_salary       INT UNSIGNED,
    employee_salary_date  DATE,
    employee_year         YEAR,
    PRIMARY KEY (employee_emp_no, employee_salary_date, employee_year));
USE sampleDB;
INSERT INTO employees_salary VALUES (1100, 10000, '1991-01-01', 1990);
INSERT INTO employees_salary VALUES (1100, 7000, '1991-02-01', 1990);
INSERT INTO employees_salary VALUES (1100, 85000, '1991-02-10', 1991);
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_salary;
CREATE TABLE employees_salary(
    employee_emp_no        INT UNSIGNED   NOT NULL,
    employee_salary       INT UNSIGNED,
    employee_salary_date  DATE,
    employee_year         YEAR,
    PRIMARY KEY (employee_emp_no, employee_salary_date, employee_year));
USE sampleDB;
-- Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. </warning><br/>

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_salary;
CREATE TABLE employees_salary(
    employee_emp_no        INT UNSIGNED   DEFAULT NULL,
    employee_salary       INT UNSIGNED   DEFAULT NULL,
    employee_salary_date  DATE,
    employee_year         YEAR,
    PRIMARY KEY (employee_emp_no, employee_salary_date, employee_year)
);
USE sampleDB;
INSERT INTO employees_salary VALUES (1100, 10000, '1991-01-01', 1990);
INSERT INTO employees_salary VALUES (1100, 7000, '1991-02-01', 1990);
INSERT INTO employees_salary VALUES (1100, 85000, '1991-02-10', 1991);
DROP TABLE IF EXISTS employees_salary;
CREATE TABLE employees_salary(
    employee_emp_no        INT UNSIGNED   DEFAULT NULL,
    employee_salary       INT UNSIGNED   DEFAULT NULL,
    employee_salary_date  DATE,
    employee_year         YEAR,
    PRIMARY KEY (employee_emp_no, employee_salary_date, employee_year)
    ENGINE=INNODB
);
USE sampleDB;
INSERT INTO employees_salary VALUES (1100, 10000, '1991-01-01', 1990);
INSERT INTO employees_salary VALUES (1100, 7000, '1991-02-01', 1990);
INSERT INTO employees_salary VALUES (110
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_salary;
CREATE TABLE employees_salary (
    employee_emp_no         INT UNSIGNED,
    employee_salary        INT UNSIGNED,
    employee_salary_date   DATE,
    employee_year          YEAR,
    employee_salary_month   MONTH,
    employee_salary_year    YEAR,
    PRIMARY KEY (employee_emp_no, employee_salary_date, employee_year));
USE sampleDB;
INSERT INTO employees_salary VALUES (1100, 10000, '1991-01-01', 1990);
INSERT INTO employees_salary VALUES (1100, 7000, '1991-02-01', 1990);
INSERT INTO employees_salary VALUES (1100, 85000, '1991-02-10', 1991);

DROP DATABASE IF EXISTS sampleDB;
 
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_salary;
CREATE TABLE employees_salary (
   employee_salary        INT UNSIGNED,
   PRIMARY KEY (employee_salary));
USE sampleDB;
INSERT INTO employees_salary VALUES (1000);

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_salary;
DROP TABLE IF EXISTS employees;
CREATE TABLE employees(
    emp_no          INT UNSIGNED,
    emp_name        VARCHAR(30),
    mgr_emp_no      INT UNSIGNED,
    birth_date      DATE,
    hire_date       DATE,
    sal_grade       CHAR(1),
    dept_no         INT UNSIGNED,
    HIREBY          CHAR(1),
    sal_value       DECIMAL(10,2),
    comm_status     CHAR(1),
    comm_rate       DECIMAL(3,1),
    CONSTRAINT employees_PK PRIMARY KEY (emp_no));
CREATE TABLE employees_salary(
    employee_emp_no        INT UNSIGNED   NOT NULL,
    employee_salary       INT UNSIGNED,
    employee_salary_date  DATE,
    employee_year         YEAR,
    PRIMARY KEY (employee_emp_no, employee_salary_date, employee_year));
USE sampleDB;
INSERT INTO employees_salary VALUES (1100, 10000, '1991-01-01', 1990);
INSERT INTO employees_salary VALUES (1100, 7000, '1991-02-01', 1990);
INSERT INTO employees_salary VALUES (1100, 85000, '1991-02-10', 1991);
INSERT INTO employees_salary VALUES (1100, 10000, '1991-02-21', 1990);
INSERT INTO employees_salary VALUES (1100, 9
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_salary;
CREATE TABLE employees_salary (
   employee_salary        INT UNSIGNED,
   PRIMARY KEY (employee_salary));
USE sampleDB;
INSERT INTO employees_salary VALUES (1000);
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO employees_salary SELECT * FROM employees;
USE sampleDB;
DROP TABLE IF EXISTS employees_salary;
CREATE TABLE employees_salary (
   employee_salary        INT UNSIGNED,
   PRIMARY KEY (employee_salary FOR TABLE sampleDB));

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees;
CREATE TABLE employees (
   employee_id        INT UNSIGNED,
   employee_name        VARCHAR(255) NOT NULL,
   dept_id            INT UNSIGNED,
   hire_date          DATETIME NOT NULL,
   PRIMARY KEY (employee_id));
-- You've got a good grasp of what you can do with relational databases, now go deep and create your own tables for data science. Enjoy!
DROP TABLE IF EXISTS sampleDB.salary_grades;
CREATE TABLE sampleDB.salary_grades
(
   salary             INT UNSIGNED,
   grades             ENUM("Bachelor's", "Master's", "PhD"))
ENGINE=INNODB
DEFAULT CHARSET=utf8;
DROP PROCEDURE IF EXISTS test1
LANGUAGE SQL;
DELIMITER $$
USE sampleDB;
CREATE PROCEDURE test1()
BEGIN
SELECT salary, grades FROM sampleDB.salary_grades;
END$$

DELIMITER ;
SET character_set_connection='utf8mb4' COLLATE = 'utf8mb4_unicode_ci';
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_salaries;
CREATE TABLE employees_salaries (
   employee_salary INT UNSIGNED,
   PRIMARY KEY (employee_salary));
UPDATE employees_salaries
SET employee_salary = employee_salary + 10, employee_salary = employee_salary + 10
WHERE employee_salary = (
   SELECT MAX(salary) FROM employees_salary
   WHERE employee_salary!= employee_salary);
DROP TABLE EMPLOYEES_SALARIES;

-- MySQL is a web application server software written by Sun Microsystems, a member of Oracle. In fact, MySQL is one of the key database technology of Oracle Database product line.

MySQL is installed in many operating systems to allow multiple users to access the same database simultaneously. Users can login to a MySQL server and run SQL statements against the database. Users can access the MySQL server from clients. MySQL can also connect to MySQL database servers using its own protocols (e.g. TCP/IP) rather than having to configure a TCP/IP server with your database cluster.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_salary;
CREATE TABLE employees_salary (
   employee_salary        TINYINT UNSIGNED);
USE sampleDB;
INSERT INTO employees_salary VALUES (1000);
 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_salary;
CREATE TABLE employees_salary (
   employee_salary        INT UNSIGNED,
   employee_name          VARCHAR(250),
   employee_salary_index  INT UNSIGNED,
   PRIMARY KEY (employee_salary_index, employee_name),
   INDEX employee_name_index (employee_name));
USE sampleDB;
INSERT INTO employees_salary VALUES (1000, 'Eduardo', 0);
INSERT INTO employees_salary VALUES (2000, 'Paolo', 1);
INSERT INTO employees_salary VALUES (1000, 'Riccardo', 0);
INSERT INTO employees_salary VALUES (3000, 'Douglas', 2);
SELECT max(employee_salary_index) FROM employees_salary;
SELECT max(employee_salary) FROM employees_salary;
USE sampleDB;
DROP TABLE IF EXISTS employees_salary;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_salary;
CREATE TABLE employees_salary (
   employee_salary        INT UNSIGNED,
   PRIMARY KEY (employee_salary));
USE sampleDB;
INSERT INTO employees_salary VALUES (2500);
-- Create a table in sampleDB which is called employees_salary
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_salary;
CREATE TABLE employees_salary (
    employee_salary        INT UNSIGNED,
    PRIMARY KEY (employee_salary));

 

SELECT DATABASE();
 
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_salary;
CREATE TABLE employees_salary (
   employee_salary        INT UNSIGNED,
   PRIMARY KEY (employee_salary));
USE sampleDB;
INSERT INTO employees_salary VALUES (2500);
-- Create a table in sampleDB which is called employees_salary
DROP TABLE IF EXISTS employees_salary;
CREATE TABLE employees_salary (
    employee_salary        INT UNSIGNED,
    PRIMARY KEY (employee_salary));
SELECT DATABASE();
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- DROP TABLE IF EXISTS employees_salary;
DROP TABLE IF EXISTS employees_salary;
CREATE TABLE employees_salary (
    employee_salary        INT UNSIGNED,
    PRIMARY KEY (employee_salary));
SELECT DATABASE();
-- DROP TABLE IF EXISTS employees_salary;
DROP TABLE IF EXISTS employees_salary;
CREATE TABLE employees_salary (
    employee_salary        INT UNSIGNED,
    PRIMARY KEY (employee_salary));
SELECT DATABASE();
-- Drop table in sampleDB which is called employees_salary
DROP TABLE IF EXISTS employees_salary;
CREATE TABLE employees_salary (
    employee_salary        INT UNSIGNED,
    PRIMARY KEY (employee_salary));
SELECT DATABASE();
-- Dropping the table
ALTER TABLE employees_salary
    ADD PRIMARY KEY (employee_salary); 
ALTER TABLE employees_salary
    MODIFY employee_salary INT UNSIGNED NOT NULL; 
USE sampleDB;
-- INSERT some data using your SQL editor of choice
-- In case it is not working right away, restart your web server and try selecting the table then creating it again using the schema changes of my previous query
ALTER TABLE employees_salary
    MODIFY employee_salary INT UNSIGNED;
SELECT * FROM employees_salary;
-- Dropping table
DROP TABLE IF EXISTS employees_salary;
-- You should now be able to query employees_salary by running the previous query
-- You should see a 1 in employee_salary
USE sampleDB;
DESC employees_salary;
 
ALTER TABLE IF EXISTS employees_salary
    ADD UNIQUE key (employee_salary);
-- Again, try using your MySQL editor, or again using the previously created query... or create a mutation script
-- This will help you understand what is happening and whether you did everything as expected.
ALTER TABLE employees_salary
    MODIFY employee_salary INT UNSIGNED;
-- Create a table in sampleDB which is called employees_salary
DROP TABLE IF EXISTS employees_salary;
CREATE TABLE employees_salary (
    employee_salary        INT UNSIGNED,
    PRIMARY KEY (employee_salary)); 
SELECT DATABASE();
ALTER TABLE employees_salary
    MODIFY employee_salary INT UNSIGNED NOT NULL;
ALTER TABLE employees_salary
    ADD UNIQUE key (employee_salary);
-- You should now be able to query employees_salary
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_salary;
CREATE TABLE employees_salary (
    employee_salary        INT UNSIGNED,
    PRIMARY KEY (employee_salary));
UPDATE employees_salary, employees_salary_temp 
       SET employees_salary.employee_salary = (
            employees_salary_temp.employee_salary + 100
           ) 
         WHERE employees_salary_temp.employee_salary
             = employees_salary.employee_salary;
SELECT * FROM employees_salary;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_salary;
CREATE TABLE employees_salary (
   employee_salary        INT,
   PRIMARY KEY (employee_salary));
USE sampleDB;
INSERT INTO employees_salary VALUES (20000);
INSERT INTO employees_salary VALUES (80000);
SELECT * FROM employees_salary;
DROP TABLE IF EXISTS employees_salary;
-- Create a new table in the sampleDB which is called employees_salary3. Please insert (or delete) 50, 80, 120, 200, 300 data in this new table.
DROP TABLE IF EXISTS employees_salary3;
CREATE TABLE employees_salary3 (
    employee_salary         INT,
    PRIMARY KEY (employee_salary));
INSERT INTO employees_salary3 VALUES (50);
INSERT INTO employees_salary3 VALUES (80);
INSERT INTO employees_salary3 VALUES (120);
INSERT INTO employees_salary3 VALUES (200);
INSERT INTO employees_salary3 VALUES (300);
SELECT employee_salary FROM employees_salary;
DROP TABLE IF EXISTS employees_salary3;
-- Please create a multi-column insert statement where all columns have a different value
DROP TABLE IF EXISTS employees_salary4;
CREATE TABLE employees_salary4 (
              employee_salary        INT,
              employee_years         INT,
              employee_month         FLOAT,
              PRIMARY KEY (employee_salary));
INSERT INTO employees_salary4 VALUES (300, 2015, 0.86);
INSERT INTO employees_salary4 VALUES (300, 2013, 0.74);
INSERT INTO employees_salary4 VALUES (300, 2014, 0.75);
INSERT INTO employees_salary4 VALUES (300, 2013, 0.66);
INSERT INTO employees_salary4 VALUES (500, 2008, 0.93);
INSERT INTO employees_salary4 VALUES (500, 2009, 1.03);
INSERT INTO employees_salary4 VALUES (500, 2011, 1.19);
INSERT INTO employees_salary4 VALUES (500, 2014, 1.
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_salary;
CREATE TABLE employees_salary (
    employee_salary        INT UNSIGNED,
    PRIMARY KEY (employee_salary));
UPDATE employees_salary SET employee_salary = 5000 WHERE employee_salary = 2500;
-- End of the program.

-- End of question 56.

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_salary;
CREATE TABLE employees_salary (
   employee_salary        INT UNSIGNED,
   PRIMARY KEY (employee_salary));
UPDATE employees_salary set employee_salary= employee_salary+ 25000 where employee_salary = 2500;
SELECT * FROM employees_salary;
-- Please create a query program that prints the first 10 records. 
select * from employees_salary limit 0, 10;
-- Please update the previous query to add a new condition and remove the condition used previously.
select * from employees_salary limit 0, 10;
-- Please create a modified program to add a new column. 
use sampleDB;
create table employees_salary(
  employee_salary        int UNSIGNED);
use employees_salary;
insert into employees_salary values (100000);
use sampleDB;
select * from employees_salary;


[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_salary;
CREATE TABLE employees_salary (
    employee_salary        INT UNSIGNED,
    PRIMARY KEY (employee_salary));
UPDATE employees_salary SET employee_salary = 5000 WHERE employee_salary = 2500;
-- End of the program.
-- End of question 56.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_salary;
CREATE TABLE employees_salary (
    employee_salary        INT UNSIGNED,
    PRIMARY KEY (employee_salary));
UPDATE employees_salary SET employee_salary = 5000 WHERE employee_salary = 5000;
 

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_salary;
CREATE TABLE employees_salary (
    employee_salary        INT UNSIGNED,
    PRIMARY KEY (employee_salary));
UPDATE employees_salary SET employee_salary = 5000 WHERE employee_salary = 2500;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_salary;
CREATE TABLE employees_salary (
    employee_salary        INT UNSIGNED,
    PRIMARY KEY (employee_salary));
UPDATE employees_salary SET employee_salary = 5000 WHERE employee_salary = 2500;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_salary;
CREATE TABLE employees_salary (employee_salary INT UNSIGNED, PRIMARY KEY (employee_salary));
UPDATE employees_salary SET employee_salary = 5000 WHERE employee_salary = 2500;
 
DROP DATABASE sampleDB;
 
-- END OF QUESTION 56

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_salary;
CREATE TABLE employees_salary (
    employee_salary        INT UNSIGNED,
    PRIMARY KEY (employee_salary));
UPDATE employees_salary SET employee_salary = 5000 WHERE employee_salary = 2500;
INSERT INTO employees_salary (employee_salary) VALUES (2000) ON DUPLICATE KEY UPDATE employee_salary = employees_salary.employee_salary + 5000;
INSERT INTO employees_salary (employee_salary) VALUES (2000) ON DUPLICATE KEY UPDATE employee_salary = employees_salary.employee_salary + employees_salary.employee_salary;
DROP TABLE employees_salary;
CREATE TABLE employees_salary(
    emp_salary INT UNSIGNED,
    PRIMARY KEY (emp_salary));
INSERT INTO employees_salary (emp_salary) VALUES (5000) ON DUPLICATE KEY UPDATE emp_salary = emp_salary + 5000;
INSERT INTO employees_salary (emp_salary) VALUES (5000) ON DUPLICATE KEY UPDATE emp_salary = emp_salary + emp_salary; 
DROP TABLE employees_salary;
CREATE TABLE employees_salary(
    emp_salary INT UNSIGNED,
    PRIMARY KEY (emp_salary));
UPDATE employees_salary SET emp_salary = 1000 WHERE emp_salary = 5000;
SELECT emp_salary FROM employees_salary;
DROP TABLE employees_salary;
CREATE TABLE employees_salary(
    emp_salary INT UNSIGNED,
    PRIMARY KEY (emp_salary));
INSERT INTO employees_salary (emp_salary) VALUES (0) ON DUPLICATE KEY UPDATE emp_salary = employees_salary.emp_salary + 5000;
INSERT INTO employees_salary (emp_salary) VALUES (0) ON DUPLICATE KEY UPDATE emp_salary = employees_salary.emp_salary + employees_salary.emp_salary;
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_salary;
CREATE TABLE employees_salary (
    employee_salary        INT UNSIGNED,
    PRIMARY KEY (employee_salary));
UPDATE employees_salary SET employee_salary = 5000 WHERE employee_salary = 2500;
INSERT INTO employees_salary (employee_salary) VALUES (2000) ON DUPLICATE KEY UPDATE employee_salary = employees_salary.employee_salary + 5000;
INSERT INTO employees_salary (employee_salary) VALUES (2000) ON DUPLICATE KEY UPDATE employee_salary = employees_salary.employee_salary + employees_salary.employee_salary;
DROP TABLE employees_salary;
CREATE TABLE employees_salary(
    emp_salary INT UNSIGNED,
    PRIMARY KEY (emp_salary));
INSERT INTO employees_salary (emp_salary) VALUES (5000) ON DUPLICATE KEY UPDATE emp_salary = emp_salary + 5000;
INSERT INTO employees_salary (emp_salary) VALUES (5000) ON DUPLICATE KEY UPDATE emp_salary = emp_salary + emp_salary; 
DROP TABLE employees_salary;
CREATE TABLE employees_salary(
    emp_salary INT UNSIGNED,
    PRIMARY KEY (emp_salary));
UPDATE employees_salary SET emp_salary = 1000 WHERE emp_salary = 5000;
SELECT emp_salary FROM employees_salary;
DROP TABLE employees_salary;
CREATE TABLE employees_salary(
    emp_salary INT UNSIGNED,
    PRIMARY KEY (emp_salary));
INSERT INTO employees_salary (emp_salary) VALUES (0) ON DUPLICATE KEY UPDATE emp_salary = employees_salary.emp_salary + 5000;
INSERT INTO employees_salary (emp_salary) VALUES (0) ON DUPLICATE KEY UPDATE emp_salary = employees_salary.emp_salary + employees_salary.emp_salary;
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_salary;
CREATE table employees_salary (
    employee_salary        INT UNSIGNED,
    PRIMARY KEY (employee_salary));
UPDATE employees_salary SET employee_salary = 2 * employee_salary WHERE employee_salary > 50000;
INSERT INTO employees_salary (employee_salary) VALUES (25000) ON DUPLICATE KEY UPDATE employee_salary = employee_salary;
INSERT INTO employees_salary (employee_salary) VALUES (25000) ON DUPLICATE KEY UPDATE employee_salary
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO employees_salary (employee_salary) VALUES (5000) ON DUPLICATE KEY UPDATE employee_salary = employee_salary + 5000;
INSERT INTO employees_salary (employee_salary) VALUES (2000) ON DUPLICATE KEY UPDATE employee_salary = employee_salary + employees_salary.employee_salary;
DROP TABLE employees_salary;
CREATE TABLE employees_salary (
    employee_salary INT UNSIGNED,
    PRIMARY KEY (employee_salary));
UPDATE employees_salary SET employee_salary = 250
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

DROP TABLE IF EXISTS employees_salary_by_salary;
CREATE TABLE employees_salary_by_salary (
    employee_salary	INT UNSIGNED,
    emp_salary		INT UNSIGNED,
 	PRIMARY KEY (employee_salary, emp_salary));
 
INSERT INTO employees_salary_by_salary (employee_salary, emp_salary) VALUES (6500, 2000);

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_salary;
CREATE TABLE employees_salary (
    employee_salary        INT UNSIGNED,
    PRIMARY KEY (employee_salary));
UPDATE employees_salary SET employee_salary = 5000 WHERE employee_salary = 2500;
INSERT INTO employees_salary (employee_salary) VALUES (2000) ON DUPLICATE KEY UPDATE employee_salary = employees_salary.employee_salary + 5000;
INSERT INTO employees_salary (employee_salary) VALUES (2000) ON DUPLIC
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE emp_salary(
    emp_id INT UNSIGNED,
    emp_salary INT UNSIGNED,
    PRIMARY KEY (emp_salary, emp_id),
    FOREIGN KEY (emp_id) REFERENCES accounts(account_id));
CREATE TABLE accounts(
    account_id INT UNSIGNED,
    account_holder VARCHAR(255) NOT NULL,
    account_type ENUM('Checking','Savings','Credit Card'),
    PRIMARY KEY (account_id));
INSERT INTO accounts(account_id) VALUES (1);
INSERT INTO accounts(account_id) VALUES (2);

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_salary_by_salary;
CREATE TABLE employees_salary_by_salary (
    employee_salary	INT UNSIGNED,
    emp_salary		INT UNSIGNED,
 	PRIMARY KEY (employee_salary, emp_salary));
INSERT INTO employees_salary_by_salary (employee_salary, emp_salary) VALUES (6500, 2000);
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_salary_by_salary;
CREATE TABLE employees_salary_by_salary (
    employee_salary	INT UNSIGNED,
    emp_salary		INT UNSIGNED,
 	PRIMARY KEY (employee_salary, emp_salary));
INSERT INTO employees_salary_by_salary (employee_salary, emp_salary) VALUES (6500, 2000);
select employee_salary, emp_salary from employees_salary_by_salary;
SELECT SUM(salary) FROM employees_salary_by_salary;
show tables;
create table employees_salary
(
employee_salary INTEGER,
emp_salary  INTEGER
);
SELECT MIN(employee_salary) FROM employees_salary_by_salary
UNION
SELECT MAX(employee_salary) FROM employees_salary_by_salary;
show tables;
select employee_salary,
FROM employees_salary_by_salary
WHERE employee_salary <= MAX(employee_salary);
 
show create table employees_salary;


/-----------------------------------
# Drops tables & view & show databases
---------------------------------------*/
DROP DATABASE IF EXISTS sampleDB;
DROP TABLE IF EXISTS employees_salary_by_salary;
CREATE TABLE employees_salary_by_salary (
    employee_salary	INT UNSIGNED,
    emp_salary		INT UNSIGNED,
 	PRIMARY KEY (employee_salary, emp_salary));
INSERT INTO employees_salary_by_salary (employee_salary, emp_salary) VALUES (6500, 2000);
show create table employees_salary_by_salary;
SELECT EMP_MNO, FIRST, LAST, YEAR_OF_BIRTH, MONTH_OF_BIRTH, day_of_birth
FROM employees
WHERE MONTH_OF_BIRTH<MONTH('06/12');

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_salary_by_salary;
CREATE TABLE employees_salary_by_salary (
    employee_salary	INT UNSIGNED,
    emp_salary		INT UNSIGNED,
 	PRIMARY KEY (employee_salary, emp_salary));
INSERT INTO employees_salary_by_salary (employee_salary, emp_salary) VALUES (10000, 3000);
DROP TABLE employees_salary_by_salary;
select employee_salary, emp_salary from employees_salary_by_salary;
 
-- INSERT INTO employees_salary_by_salary (employee_salary, emp_salary) VALUES (10000, 3000);
-- CREATE TABLE employees_salary_by_salary (
--             employee_salary INTEGER(10, 0),
--             emp_salary INTEGER(10, 0),
--             PRIMARY KEY (employee_salary));
-- SELECT * FROM employees_salary_by_salary;
SELECT employee_salary, emp_salary, employee_salary - emp_salary as difference
FROM employees_salary_by_salary;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE new_employees_salary_by_salary (
    employee_salary  INT UNSIGNED,
    emp_salary       INT UNSIGNED,
    employee_salary2 INT UNSIGNED,
    emp_salary2      INT UNSIGNED,
    PRIMARY KEY (employee_salary, emp_salary));
INSERT INTO new_employees_salary_by_salary
VALUES (5500, 1400, 5500, 1400);
SELECT employee_salary2, emp_salary2 FROM new_employees_salary_by_salary;

 
DROP TABLE IF EXISTS employees_salary_by_salary;
DROP TABLE IF EXISTS new_employees_salary_by_salary;
DROP DATABASE sampleDB;

 
DROP DATABASE sampleDB;
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_salary_less_than_1000;
CREATE TABLE employees_salary_less_than_1000 (
    employee_salary	INT UNSIGNED,
    emp_salary		INT UNSIGNED,
 	PRIMARY KEY (employee_salary, emp_salary));
INSERT INTO employees_salary_less_than_1000 (employee_salary, emp_salary) VALUE (6500, 1910);
SELECT * FROM employees_salary_less_than_1000 WHERE employee_salary < 1000;
DROP TABLE IF EXISTS employees_salary_less_than_1000;

 
DROP TABLE IF EXISTS sample_persons;
CREATE TABLE sample_persons (
    sample_id		INT UNSIGNED,
    first_name	VARCHAR(20),
    last_name	VARCHAR(20),
    email			VARCHAR(50
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_salary_by_salary;
CREATE TABLE employees_salary_by_salary (
    employee_salary	INT UNSIGNED,
    emp_salary		INT UNSIGNED,
 	PRIMARY KEY (employee_salary, emp_salary));
UPDATE employees_salary_by_salary SET emp_salary = emp_salary + 6000;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
insert into sampleDB.employees_salary_by_salary (employee_salary, emp_salary) values (6000, 5000);
select employee_salary from employees_salary_by_salary;
-- Please create a mutated program that computes with SQL ALL tables.
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
query sql "SELECT employee_salary, emp_salary FROM employees_salary_by_salary";
DROP DATABASE IF EXISTS sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_salary_by_salary;
CREATE TABLE employees_salary_by_salary (
    employee_salary	INT UNSIGNED,
    emp_salary		INT UNSIGNED,
 	PRIMARY KEY (employee_salary, emp_salary));
UPDATE employees_salary_by_salary SET emp_salary = emp_salary + 6000;
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_salary_by_salary;
CREATE TABLE employees_salary_by_salary (
    employee_salary	INT UNSIGNED,
    emp_salary		INT UNSIGNED,
 	PRIMARY KEY (employee_salary, emp_salary)
);
UPDATE employees_salary_by_salary SET emp_salary = emp_salary + 5000, employee_salary = employee_salary + 15000;
 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_salary_by_salary;
CREATE TABLE employees_salary_by_salary (
    employee_salary	INT UNSIGNED,
    emp_salary		INT UNSIGNED,
 	PRIMARY KEY (employee_salary, emp_salary)
);
UPDATE employees_salary_by_salary SET emp_salary = emp_salary + 6000, employee_salary = employee_salary + 15000 LIMIT 3;
-- Execute all these SQL statements using MySQL Workbench and confirm the results.
SHOW VARIABLES LIKE "sql_mode";
SELECT VARIABLE_NAME, VARIABLE_VALUE FROM INFORMATION_SCHEMA.VARIABLES;
*/
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_salary_by_salary;
CREATE TABLE employees_salary_by_salary (
    employee_salary	INT UNSIGNED,
    emp_salary		INT UNSIGNED,
 	PRIMARY KEY (employee_salary, emp_salary));
INSERT INTO employees_salary_by_salary VALUES
(15, 10000),
(25, -10000),
(5, 10000),
(10, 10000),
(30, 10000),
(20, 10000),
(21, -10000),
(40, -10000);

-- SELECT DISTINCT will produce a set of unique tuples in a column. SELECT DISTINCT is not present in SELECT
SELECT ID, Name FROM employees_salary_by_salary;

-- INSERT INTO is used to insert records of values into a table. This is how we can insert 1 row into employee_salary_by_salary.
INSERT INTO employees_salary_by_salary VALUES (25, 1);



-- UPDATE is a state change as to an existing record in a data store and can be used for many different kinds of changes and operations.
UPDATE employees_salary_by_salary SET emp_salary = emp_salary + 6000;

15 * 6000 + 1 = 16000;
UPDATE employees_salary_by_salary SET employee_salary=employee_salary+7000;
UPDATE employees_salary_by_salary SET ID= ID+2;

SELECT ID, Name FROM employees_salary_by_salary;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_salary_by_salary;
CREATE TABLE employees_salary_by_salary (
    employee_salary	INT UNSIGNED,
    emp_salary		INT UNSIGNED,
	PRIMARY KEY (employee_salary, emp_salary));
DELETE FROM employees_salary_by_salary;
DELETE FROM employees_salary_by_salary;
-- Please create a new table and insert several (5) values (default values) in it.
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_salary_by_salary;
CREATE TABLE employees_salary_by_salary (
    employee_salary	INT UNSIGNED,
    emp_salary		INT UNSIGNED,
	06600,
	1,
	null,
	false,
	0x17038B05,
	-- Please create a query which uses a JOIN between 2 tables and returns total number of rows in 'employees_salary_by_salary' table. Write 1 line of MySQL query, 1 line of PHP query or 1 line of other programming language/system/database. You can use any combination of FROM, JOIN, UNION, UNION ALL, SELECT and FROM. You do not need to know any more about the specific database.
	SELECT count(*) FROM employees_salary_by_salary
WHERE employee_salary = 06600 UNION SELECT count(*) FROM employees_salary_by_salary
WHERE employee_salary = 1 UNION SELECT count(*) FROM employees_salary_by_salary
WHERE employee_salary = null UNION SELECT count(*) FROM employees_salary_by_salary
WHERE employee_salary = false UNION SELECT count(*) FROM employees_salary_by_salary
WHERE employee_salary = 0x17038B05

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
USE employees; UPDATE employees_salary_by_salary Set employee_salary = employee_salary + 10000 where employee_salary = 6000; 

\q

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created.

CREATE TABLE IF NOT EXISTS employees_salary_by_salary (
    employee_salary	INT UNSIGNED, 
    emp_salary		INT UNSIGNED,
    PRIMARY KEY (employee_salary, emp_salary));
UPDATE employees_salary_by_salary SET emp_salary = emp_salary + 6000;
SELECT emp_salary + 5000 FROM employees_salary_by_salary;
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created.
CREATE TABLE IF NOT EXISTS employees_salary_by_salary (
    employee_salary	INT UNSIGNED, 
    emp_salary		INT UNSIGNED,
    PRIMARY KEY (employee_salary, emp_salary));
UPDATE employees_salary_by_salary SET emp_salary = emp_salary + 6000;
SELECT emp_salary + 5000 FROM employees_salary_by_salary;
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS employees_salary (name_id INT UNSIGNED, salary INT);
INSERT INTO employees_salary VALUES (500,1000), (100,1000), (1010,5000), (700,9000);

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SELECT IFNULL(employee_salary, 0) + 5000 AS salary, employee_salary,
	IFNULL(emp_salary, 0) + 19000 AS salary
FROM employees_salary_by_salary;
DROP DATABASE sampleDB;

SELECT IFNULL(employee_salary, 0) + 5000 AS salary, employee_salary,
	IFNULL(emp_salary, 0) + 19000 AS salary
FROM employees_salary_by_salary;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE employees_salary_by_salary (
    id INT UNSIGNED,
    salary INT,
    PRIMARY KEY (id));
UPDATE employees_salary_by_salary SET salary = salary + 6000;
SELECT salary + 5000 FROM employees_salary_by_salary;

CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB; CREATE TABLE employees_salary_by_salary (id INT UNSIGNED, salary INT, PRIMARY KEY (id)); INSERT INTO employees_salary_by_salary (salary) VALUES (1000), (1200);
SELECT salary FROM employees_salary_by_salary WHERE id = 2 AND salary = 1205;

CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB; CREATE TABLE employees_salary_by_salary (salary INT, e INT, PRIMARY KEY (salary)); INSERT INTO employees_salary_by_salary VALUES (800), (650);
SELECT * FROM employees_salary_by_salary WHERE e = 2 AND salary = 650;

CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB; CREATE TABLE employees_salary_by_salary (id INT UNSIGNED, salary INT, PRIMARY KEY (id)); INSERT INTO employees_salary_by_salary VALUES (2), (5);
SELECT * FROM employees_salary_by_salary WHERE id = 2 OR id = 3, (2, 3);

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS employees_salary_by_salary (
    employee_salary	INT UNSIGNED, 
    emp_salary		INT UNSIGNED,
    PRIMARY KEY (employee_salary, emp_salary));
UPDATE employees_salary_by_salary SET emp_salary = emp_salary + 6000;
SELECT (SELECT COUNT(*) FROM employees_salary_by_salary WHERE employee_salary=emp_salary);
-- Please create a valid program for updating a column in a table without changing its value
DROP TABLE IF EXISTS people;
CREATE TABLE people (
    person_id	INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    person_name CHAR(30) NOT NULL UNIQUE
);

select * from people where person_name = 'Joe' update people set person_name = 'Joe - Updated' where person_id = 1;
select * from people where person_id = 1;
-- Please create a valid program to add a FOREIGN KEY
DROP DATABASE IF EXISTS p1; USE p1;
CREATE TABLE IF NOT EXISTS users (user_id	INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, user_name CHAR(30) UNIQUE, password CHAR(30), foreign key(user_name) references users(user_name));<commit_msg>Updated MySQL exercise notes<commit_after>-- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created.
CREATE TABLE IF NOT EXISTS employees_salary_by_salary (
    employee_salary	INT UNSIGNED, 
    emp_salary		INT UNSIGNED,
    PRIMARY KEY (employee_salary, emp_salary));
UPDATE employees_salary_by_salary SET emp_salary = emp_salary + 6000;
SELECT emp_salary + 5000 FROM employees_salary_by_salary;
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS people (name STRING);
CREATE TABLE IF NOT EXISTS personas (id STRING PRIMARY KEY, age INT, first_name STRING, last_name STRING);
UPDATE personas SET age = age + 30;
SELECT id FROM people;
UPDATE personas SET age = age + 30;
SELECT id FROM people;
USE employees_salary_by_salary;
SELECT SQL_CALC_FOUND_ROWS emp_salary FROM `personas` WHERE age = 30;
SELECT SQL_CALC_FOUND_ROWS emp_salary FROM `personas` WHERE age = 30;
SELECT SQL_CALC_FOUND_ROWS emp_salary FROM `personas` WHERE age = 30;
DROP TABLE personas CASCADE;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS employees_salary_by_salary (employee_salary    INT UNSIGNED NOT NULL, emp_salary    INT UNSIGNED NOT NULL, PRIMARY KEY (employee_salary, emp_salary));
UPDATE employees_salary_by_salary SET emp_salary = emp_salary + 6000;
SELECT emp_salary + 5000 FROM employees_salary_by_salary;
-- Please modify the semantical semantically equivalent program you just created. Create a derived table where you have the field salary and your field is based on a subquery to select from the employees table.
CREATE DATABASE IF NOT EXISTS sampleDB;
USE sampleDB;
CREATE TABLE IF NOT EXISTS employees_salary_by_salary (employee_salary INT UNSIGNED NOT NULL, emp_salary INT UNSIGNED NOT NULL, PRIMARY KEY (employee_salary, emp_salary));
SELECT employee_salary
FROM employees_salary_by_salary
WHERE (SELECT COUNT(*) > 1
            FROM employees_salary_by_salary e
            INNER JOIN employees e2 ON employee_salary = e2.employee_salary) = 1;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE employees_salary_by_salary ( employee_salary INT UNSIGNED,
    emp_salary INT UNSIGNED);

SELECT emp_salary + 5000 FROM employees_salary_by_salary;
DROP DATABASE IF EXISTS sampleDB;


[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_salary_by_salary;
CREATE TABLE employees_salary_by_salary (
    employee_salary	DECIMAL(18,0),
    emp_salary		decimal(18,0),
    PRIMARY KEY (employee_salary, emp_salary));
UPDATE employees_salary_by_salary SET emp_salary = emp_salary + 6000;
SELECT emp_salary + 5000 FROM employees_salary_by_salary;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS employees_salary_by_salary (
    employee_salary	INT UNSIGNED,
    emp_salary		INT UNSIGNED,
    PRIMARY KEY (employee_salary, emp_salary));
 
UPDATE employees_salary_by_salary SET emp_salary = emp_salary + 6000;
SELECT emp_salary + 5000 FROM employees_salary_by_salary;
DROP TABLE IF EXISTS employees_salary_by_salary;
DELETE FROM employees_salary_by_salary;
DEALLOCATE DATABASE IF EXISTS sampleDB;

SELECT emp_salary_new FROM employees_salary_by_salary;
UPDATE employees_salary_by_salary SET emp_salary_new = emp_salary;
SELECT emp_salary_new FROM employees_salary_by_salary;
SELECT emp_salary FROM employees_salary_by_salary;
DEALLOCATE DATABASE IF EXISTS sampleDB;

SELECT employee_salary, emp_salary_new FROM employees_salary_by_salary;
 
UPDATE students SET first_name = 'Giovanni' WHERE first_name = 'Giovanni';
SELECT INSTR(first_name, 'g');

SELECT first_name FROM students;
SELECT first_name FROM students WHERE first_name LIKE 'A_%';
 
create database test;
USE test;
create table test (
id int,
title varchar(50)
) engine InnoDB;
insert into test (id, title) values (12, 'Software Developer');
insert into test (id, title) values (32, 'Software Architect');


select test.id from test;
select test.* from test;

 

create database test;
USE test;
create table test (

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_salary_by_salary;
CREATE TABLE employees_salary_by_salary (
    employee_salary	DECIMAL(18,0),
    emp_salary		decimal(18,0),
    PRIMARY KEY (employee_salary, emp_salary));
UPDATE employees_salary_by_salary SET emp_salary = emp_salary + 6000;
SELECT emp_salary + 5000 FROM employees_salary_by_salary;
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_salary_by_salary;
CREATE TABLE employees_salary_by_salary (
    employee_salary	DECIMAL(18,0),
    emp_salary		decimal(18,0),
    PRIMARY KEY (employee_salary, emp_salary));
UPDATE employees_salary_by_salary SET employee_salary = employee_salary + 5000;
SELECT employee_salary + 4000 FROM employees_salary_by_salary;
-- Please create a complex database using MySQL and show some results
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_salary_by_salary;
CREATE TABLE employees_salary_by_salary (
    employee_salary	decimal(18,0),
    emp_salary		DECIMAL(18,0),
    PRIMARY KEY (employee_salary, emp_salary));
UPDATE employees_salary_by_salary SET emp_salary = emp_salary + 15000;
DELETE FROM employees_salary_by_salary
	WHERE employee_salary = 15000;
INSERT INTO employees_salary_by_salary (employee_salary, emp_salary)
	VALUES (20000, 20000), (22000, 22000), (23500, 23500), (25000, 25000);
SELECT employee_salary, emp_salary FROM employees_salary_by_salary
	WHERE employee_salary < 24000;
-- Please try to create some complex database using MySQL
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_salary_by_salary;
CREATE TABLE employees_salary_by_salary (
    employee_salary	decimal(18,0),
    emp_salary		DECIMAL(18,0),
    PRIMARY KEY (employee_salary, emp_salary));
UPDATE employees_salary_by_salary SET emp_salary = emp_salary + 30000;
SELECT employee_salary, emp_salary FROM employees_salary_by_salary
	WHERE employee_salary < 30000;
-- Please try to create some very complex database using MySQL
CREATE
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_salary_by_salary;
CREATE TABLE employees_salary_by_salary (
    employee_salary	DECIMAL(18,0),
    emp_salary		decimal(18,0),
    PRIMARY KEY (employee_salary, emp_salary));
UPDATE employees_salary_by_salary SET emp_salary = emp_salary + 5000;
SELECT emp_salary + 6000 FROM employees_salary_by_salary;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO employees_salary_by_salary(employee_salary, emp_salary) VALUES ('2012-06-04', 100000);
SELECT employee_salary + 5000 FROM employees_salary_by_salary;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employee_salary_by_time;
CREATE TABLE employee_salary_by_time (
    employee_salary	DECIMAL(18,0),
    emp_salary		decimal(18,0),
    emp_date		date,
    PRIMARY KEY (employee_salary, emp_salary, emp_date));
UPDATE employee_salary_by_time SET emp_salary = emp_salary + 6000;
SELECT emp_salary FROM employee_salary_by_time;
-- Please create a mutated program that modifies the former one using a temporary table. This is a bit clunky though for humans and may not even be possible using a table in a temporary table.
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employee_salary_by_salary;
CREATE TABLE employee_salary_by_salary (
    employee_salary	DECIMAL(18,0),
    emp_salary		decimal(18,0),
    PRIMARY KEY (employee_salary, emp_salary));
UPDATE employee_salary_by_salary SET emp_salary = emp_salary + 6000;
SELECT emp_salary FROM employee_salary_by_salary;
-- Please create a mutated program that modifies the former one using a temporary table. This is a bit clunky though for humans and may not even be possible using a table in a temporary table.
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_salary_by_salary;
CREATE TABLE employees_salary_by_salary (
    employee_salary	DECIMAL(18,0),
    emp_salary		decimal(18,0),
    PRIMARY KEY (employee_salary, emp_salary));
UPDATE employees_salary_by_salary SET emp_salary = emp_salary + 6000;
SELECT emp_salary FROM employees_salary_by_salary;
-- Please create a program to update the employee_salary_by_salary table in the above tables to replace 15000 with 18000.
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_salary_by_salary;
CREATE TABLE employees_salary_by_salary (
    employee_salary	DECIMAL(18,0),
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_salary_by_salary;
CREATE TABLE employees_salary_by_salary (
    employee_salary	DECIMAL(18,0),
    emp_salary		decimal(18,0),
    PRIMARY KEY (employee_salary, emp_salary));
INSERT INTO employees_salary_by_salary (employee_salary, emp_salary) VALUES(100000,100000);
SELECT emp_salary + 5000 FROM employees_salary_by_salary;
DROP TABLE IF EXISTS employees_salary_by_salary;
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_salary_by_salary;
CREATE TABLE employees_salary_by_salary (
    employee_salary	DECIMAL(18,0),
    emp_salary		decimal(18,0),
    PRIMARY KEY (employee_salary, emp_salary));
INSERT INTO employees_salary_by_salary (employee_salary, emp_salary) SELECT * FROM (VALUES
  (100001, 100001),
  (100002, 100002),
  (200003, 100004),
  (200004, 100005),
  (300005, 100006),
  (300006, 100007),
  (400007, 100008),
  (400008, 100009),
  (500009, 100010),
  (500010, 100011),
  (600011, 100012),
  (600012, 100013),
  (700013, 100014),
  (700014, 100015),
  (800015, 100016),
  (800016, 100017),
  (9000
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO employees_salary_by_salary(employee_salary, emp_salary) VALUES ('2012-06-04', 100000);
SELECT employee_salary + 5000 FROM employees_salary_by_salary;
DROP DATABASE IF EXISTS sampleDB;
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO employees_salary_by_salary(employee_salary, emp_salary) VALUES ('2012-06-05', 100000);
UPDATE employees_salary_by_salary SET employee_salary = employee_salary + 5000 WHERE employee_salary = '2012-06-04';
SELECT employee_salary + 5000 FROM employees_salary_by_salary;
DROP DATABASE IF EXISTS sampleDB;
 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO employees_salary_by_salary(employee_salary, emp_salary) VALUES ('2012-06-05', 100000);
UPDATE employees_salary_by_salary SET emp_salary = emp_salary, employee_salary = employee_salary + 5000 WHERE employee_salary LIKE '2%';
SELECT employee_salary + 5000 FROM employees_salary_by_salary;
DROP DATABASE IF EXISTS sampleDB;
 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO employees_salary_by_salary(employee_salary, emp_salary) VALUES ('2012-06-05', 100000), ('2012-06-06', 100000), ('2012-06-07', 100000), ('2012-06-08', 100000), ('2012-06-09', 100000);
SELECT employee_salary + 5000 FROM employees_salary_by_salary;
INSERT INTO employees_salary_by_salary(employee_salary, emp_salary) VALUES ('2012-06-06', 100000);
SELECT employee_salary + 5000 FROM employees_salary_by_salary;
DROP DATABASE IF EXISTS sampleDB;
 
CREATE DATABASE
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
UPDATE employees_salary_by_salary SET employee_salary = 70000 WHERE emp_salary = 200000;
SHOW DATABASES;
SELECT employee_salary + 5000 FROM employees_salary_by_salary;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DELETE FROM employees_salary_by_salary WHERE employee_salary = "2012-06-04";
COMMIT;
DROP DATABASE IF EXISTS sampleDB;
SELECT CONCAT(employee_name, ", ", employee_salary);
-- What will happen when you run this query? Use SELECT * from sampleDB.employees_salary_by_salary; you will see no such field named employee_salary.
-- You need to drop the old table before creating a new one
-- CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
-- Drop table employees_salary_by_salary;
-- Create a new table employees_salary_by_salary to store the salary of employees in India, Europe, Asia.
-- INSERT INTO employees_salary_by_salary(employee_salary, emp_salary) VALUES ('Indian Salary', 50000), ('European Salary', -25000), ('Asia Salary', 100000), ('European Salary', 45000);
-- SELECT employee_salary + 5000 FROM employees_salary_by_salary;
-- Try to read the data using the above query.
-- Use EXPLAIN <query> TO console, select the part of the explain plan that runs the SELECT statement
-- You'll see several columns but it will be truncated... You'll need to truncate the table.
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO employees_salary_by_salary(employee_salary, emp_salary) VALUES ('2012-06-07', 100000);
SELECT employee_salary + 5000 FROM employees_salary_by_salary;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO employees_salary_by_salary(employee_salary, emp_salary) VALUES ('2008-06-04', 50000);
UPDATE employees_salary_by_salary SET employee_salary = employee_salary + 50;
-- Please create a mutated program that creates a database on demand
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_salary_by_salary;
CREATE TABLE employees_salary_by_salary(employee_staff_id VARCHAR(100), employee_salary CHAR(10), emp_salary INT);
DROP DATABASE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO employees_salary_by_salary(employee_salary, emp_salary) VALUES ('2012-06-04', 100000);
SELECT employee_salary + 5000 FROM employees_salary_by_salary;
DROP DATABASE IF EXISTS sampleDB;
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
UPDATE employees_salary_by_salary SET employee_salary = employee_salary + 100000 WHERE employee_salary >= (SELECT min(employee_salary) FROM employees_salary_by_salary);
SELECT employee_salary FROM employees_salary_by_salary;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO employees_salary_by_salary(employee_salary, emp_salary) VALUES ('2012-06-04', 100000);
UPDATE employees_salary_by_salary SET employee_salary='2013-06-04' WHERE employee_salary='2012-06-04';
UPDATE employees_salary_by_salary, employees_salary_by_salary SET employees_salary_by_salary.employee_salary='2013-09-04' WHERE employees_salary_by_salary.employee_salary='2012-06-04';
SELECT *FROM employees_salary_by_salary;
DROP DATABASE IF EXISTS sampleDB;
-- Please find the difference between the following SQL queries in terms of their performance.
SELECT employee_salary FROM employees_salary_by_salary WHERE employee_salary!= '2012-06-04';
SELECT employee_salary + 5000 FROM employees_salary_by_salary WHERE employee_salary NOT IN ('2012-06-04');
SELECT employee_salary - 5000 FROM employees_salary_by_salary WHERE employee_salary IN ('2012-06-04','2013-06-04');
 
SELECT employee_salary + 5000 FROM employees_salary_by_salary WHERE employee_salary IN ('2012-06-04','2013-06-04');
SELECT employee_salary + 5000 - 20000 FROM employees_salary_by_salary WHERE employee_salary IN ('2012-06-04','2013-06-04');
SELECT employee_salary + 5000 - 20000 FROM employees_salary_by_salary WHERE employee_salary='2013-06-04';
SELECT employee_salary + 5000 * 55.25 FROM employees_salary_by_salary, employee_salary_by_salary WHERE employee_salary='2013-06-04';
SELECT employee_salary + 2150 + 5 * 7.04 FROM employees_salary_by_salary WHERE employee_
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
UPDATE employees_salary_by_salary SET emp_salary = emp_salary + 50000 WHERE employee_salary > '2012-04-16';
SELECT employee_salary FROM employees_salary_by_salary;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO employees_salary_by_salary(employee_salary, emp_salary) VALUES ('2012-06-04', 100000);
SELECT employee_salary + 5000 FROM employees_salary_by_salary;
DROP DATABASE IF EXISTS sampleDB;
 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;


[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP DATABASE IF EXISTS sampleDB2;
CREATE DATABASE IF NOT EXISTS sampleDB2; USE sampleDB2;
INSERT INTO employees_salary_by_salary(employee_salary, emp_salary) VALUES ('2012-06-04', 100000);
SELECT employee_salary + 5000 FROM employees_salary_by_salary;
DROP DATABASE IF EXISTS sampleDB;
DROP DATABASE IF EXISTS sampleDB2;
-- Please create an easy way to generate a unique password for a given user. You need to implement a user validation database table and create an SQL program that verifies the user login credentials. You also have to be able to change your password (through some kind of security mechanism) during program run time. Implement the same functionality in Python as well.
-- Now go ahead and create a table with a password field which has to be unique. When anybody tries to access the table to see the users of that database, have those users logged in themselves. Do not allow those users to change their password.
USE sampleDB -- You create a table sampleDB.user_pass as shown in the below SQL Script.
CREATE TABLE IF NOT EXISTS user_pass (
  id INTEGER NOT NULL AUTO_INCREMENT,
  username TEXT,
  password VARCHAR(15),
  PRIMARY KEY(id));
  
-- Now go over database and create a user login table. Use username and password as primary key.
-- Create a simple SQL program in which a logged in user logs you out.
-- Now run that sql script in MySQL. You need to see how multiple connections are handled. If you run the sample program in Python, then look at the number of database connections in Python interpreter.

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO employees_salary_by_salary(employee_salary, emp_salary) VALUES ('2012-06-04', 100000);
SELECT employee_salary + 5000 FROM employees_salary_by_salary;
DROP DATABASE IF EXISTS sampleDB;
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO employees_salary_by_salary(employee_salary, emp_salary) VALUES ('2012-06-04', 100000);
SELECT employee_salary + 5000 FROM employees_salary_by_salary;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO employees_salary_by_salary(employee_salary, emp_salary) VALUES ('2012-06-04', 100000);
SELECT employee_salary + CAST(2*cast(2 as int) as SIGNED);
DROP DATABASE IF EXISTS sampleDB;
 



[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
UPDATE employees_salary_by_salary
SET employee_salary = employee_salary*0.1
WHERE employee_salary <='{value}';
SELECT employee_salary + 5000 FROM employees_salary_by_salary;
DROP DATABASE IF EXISTS sampleDB;


[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
SELECT employee_salary + 50 FROM employees_salary_by_salary;
DROP DATABASE IF EXISTS sampleDB;


[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees;
CREATE TABLE employees(emp_id INT AUTO_INCREMENT, emp_name VARCHAR(50), emp_age INT, PRIMARY KEY(emp_id)); INSERT INTO employees(emp_name, emp_age)
VALUES("John", 20); INSERT INTO employees(emp_name, emp_age)
VALUES("Sara", 30); INSERT INTO employees(emp_name, emp_age)
VALUES("Sarah", 40); INSERT INTO employees(emp_name, emp_age)
VALUES("Bob", 50); 
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO employees_salary_by_salary(employee_salary, emp_salary) VALUES ('2012-06-04', 100000);
SELECT employee_salary + 5000 FROM employees_salary_by_salary;
DROP DATABASE IF EXISTS sampleDB;
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
UPDATE company_employee_details 
SET emp_salary  = emp_salary * 2
WHERE emp_salary < 100000 AND emp_salary!= NULL;
ALTER TABLE employees_salary_by_salary ADD column year INT;
ALTER TABLE employees_salary_by_salary ADD column mont REAL;
ALTER TABLE employees_salary_by_salary ADD column sal_mont int(5) unsigned AFTER column mont;
# ALTER TABLE example3 CHANGE emp_salary emp_salary text AFTER employee_salary;
UPDATE employees_salary_by_salary 
SET column year = 1960, column name = '<NAME>'
WHERE employees_salary_by_salary. column emp_salary > 100000;
SELECT employees_salary_by_salary. emp_sal, employees_salary_by_salary.column Year, employees_salary_by_salary. column month, employees_salary_by_salary. column sal_mont, employees_salary_by_salary. column gender 
FROM employees_salary_by_salary
LEFT OUTER JOIN department_table 
ON employees_salary_by_salary.department_id = department_table.department_id;
DROP DATABASE IF EXISTS sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO employees_salary_by_salary(employee_salary, emp_salary) VALUES ('800000', 100000);
SELECT employee_salary + 10000 FROM employees_salary_by_salary;
SELECT employee_salary + 2000 FROM employees_salary_by_salary;
SELECT employee_salary + 500 FROM employees_salary_by_salary;
SELECT employee_salary + 5000 FROM employees_salary_by_salary;
SELECT employee_salary + 5000 FROM employees_salary_by_salary;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_salary_by_salary;
CREATE TABLE employees_salary_by_salary(employee_salary INT);
INSERT INTO employees_salary_by_salary(employee_salary) VALUES ('2012-06-04');
SELECT employee_salary + 10000 FROM employees_salary_by_salary;

DROP DATABASE IF EXISTS sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO employees_salary_by_salary(employee_salary, emp_salary) VALUES ('2012-06-04', 100000);
 
ROLLBACK;
-- You will need to use the correct commands to run the statements above
-- and to roll back if the statements above fail with an error message. You can also try the following. To run this program on Unix/Linux platforms you would need to have gcc, make, and sqlite installed.
-- 1. cd to your project directory
-- 2. compile using gcc -o filename_to_run
-- 3. cd to the bin directory
-- 4../filename_to_run<fim_middle>-- 5. exec filename_to_run
-- 6../filename_to_run
-- 7../testfilename.out
ALTER DATABASE sampleDB CHARACTER SET `latin1`; DROP DATABASE IF EXISTS sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO employees(id, salary, manager_id, manager_staff_id, staff_id) VALUES (1, 90000, NULL, NULL, 1);
SELECT manager_id FROM employees WHERE salary > 100000;
UPDATE employees SET id = 3 WHERE id = 1;
SELECT manager_id FROM employees WHERE salary > 100000;
DROP DATABASE IF EXISTS sampleDB;
 
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
INSERT INTO employees(id, salary, manager_id, manager_staff_id, staff_id) VALUES (2, 80000, 1, NULL, 2);
INSERT INTO employees(id, salary, manager_id, manager_staff_id, staff_id) VALUES (3, 70000, 1, NULL, 3);
INSERT INTO employees(id, salary, manager_id, manager_staff_id, staff_id) VALUES (4, 40000, 2, NULL, 4);
INSERT INTO employees(id, salary, manager_id, manager_staff_id, staff_id) VALUES (5, 30000, 3, NULL, 5);
INSERT INTO employees(id, salary, manager_id, manager_staff_id, staff_id) VALUES (6, 20000, 4, NULL, 6);
INSERT INTO employees(id, salary, manager_id, manager_staff_id, staff_id) VALUES (7, 10000, 3, NULL, 7); -- Update these 2 lines to fetch the company_id and staff_id field for all employees whose salary is greater than or equal to 200000.
UPDATE employees SET staff_id = 8 WHERE salary >= 200000;

SELECT company_id, staff_id FROM employees WHERE salary >= 200000;
DROP DATABASE IF EXISTS sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_salary_by_salary;
CREATE TABLE employees_salary_by_salary(employee_salary INT);
INSERT INTO employees_salary_by_salary(employee_salary) VALUES ('2012-06-04');
SELECT employee_salary + 10000 FROM employees_salary_by_salary;
DROP DATABASE IF EXISTS sampleDB;
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_salary_by_salary;
CREATE TABLE employees_salary_by_salary(employee_salary INT(8, 2));
INSERT INTO employees_salary_by_salary(employee_salary) VALUES (10000.50);
SELECT employee_salary + 10000 FROM employees_salary_by_salary WHERE employee_salary > 10000.50;
DROP TABLE IF EXISTS sampleDB;
SET CHARACTER_SET_RESULTS = latin1;
CREATE DATABASE mysql; USE mysql;
SHOW DATABASES;
CREATE TABLE sample_table (a INT, b INT);
DESC sample_table;
CREATE TABLE sample_table LIKE employee_salary_view;
SHOW CREATE TABLE sample_table;
SELECT * FROM sample_table ORDER BY a;
DROP TABLE IF EXISTS sample_table;
DROP DATABASE IF EXISTS mysql;
-- Your output has to be:
-- CREATE DATABASE mysql; USE mysql
-- Gives you two options to create table sample_table:
-- SELECT * FROM sample_table ORDER BY a;
-- Will give you the results for one column
DROP DATABASE IF EXISTS mysql;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_salary_by_salary;
CREATE TABLE employees_salary_by_salary( employee_salary INT);
INSERT INTO employees_salary_by_salary(employee_salary) VALUES ('2012-06-04');
SELECT employee_salary + 10000 FROM employees_salary_by_salary; -- You CAN use the above approach to this task.
{% endhighlight %}


[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

CREATE TABLE IF NOT EXISTS employees_salary_by_salary(
    employee_salary INT
);


FLUSH PRIVILEGES;

LOCK TABLES employees_salary_by_salary WRITE;
INSERT INTO employees_salary_by_salary(employee_salary) VALUES('2012-06-04');
UNLOCK TABLES;

DROP DATABASE IF EXISTS sampleDB;


[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_salary;
CREATE TABLE employees_salary(employee_salary INT);
INSERT INTO employees_salary(employee_salary) VALUES ('2012-06-04');
SELECT employee_salary + 10000;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_salary_by_salary;
CREATE TABLE employees_salary_by_salary (
    employee_salary DECIMAL
);
INSERT INTO employees_salary_by_salary (employee_salary) VALUES (2012-06-04);
SELECT employee_salary + 10000 FROM employees_salary_by_salary;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_salary_by_salary;
CREATE TABLE employees_salary_by_salary (
    employee_salary DECIMAL
);
INSERT INTO employees_salary_by_salary (employee_salary) VALUES (2012-06-04);
SELECT employee_salary + 10000 FROM employees_salary_by_salary;
DROP DATABASE IF EXISTS sampleDB;
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE VIRTUAL TABLE employees_salary_by_salary BY ENGINE=InnoDB
ON TABLE employees_salary_by_salary (employee_salary)
OPTION (max_rows = 10);
SELECT employee_salary + 10000 FROM employees_salary_by_salary WHERE employee_salary > 20000;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
ALTER TABLE employees_salary_by_salary MODIFY employee_salary INTEGER;
ALTER TABLE employees_salary_by_salary MODIFY employee_salary VARCHAR(20);
DROP DATABASE IF EXISTS sampleDB;
-- Please create a schema schema which is similar to the one you know from relational databases. You can assume the schema already exists and that you have created schema as well as tables in the database schema. We will call these schema schemas. Then create tables in schema based on the schema itself(i.e. you are assuming they all come with same structure). Use sampleSchema in your script. */
CREATE DATABASE IF NOT EXISTS sampleSchema; USE sampleSchema;
CREATE TABLE IF NOT EXISTS employees (
    emp_id INT NOT NULL,
    name VARCHAR(255)
);
INSERT INTO employees (emp_id, name) VALUES (26220352, 'John');
CREATE TABLE IF NOT EXISTS emp_project (
    emp_id INT NOT NULL,
    project_id INT NOT NULL
);
INSERT INTO employees (emp_id, name) VALUES (26220352, 'John');
ALTER TABLE emp_project ADD FOREIGN KEY (emp_id) REFERENCES employees(emp_id) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE employees DROP INDEX name_idx;
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_salary_by_salary;
CREATE TABLE employees_salary_by_salary
        ( employee_salary DECIMAL )
        ENGINE=InnoDB;
INSERT INTO employees_salary_by_salary
              ( employee_salary )
VALUES
              ( 2012-06-04 );
SELECT employee_salary + 10000 FROM employees_salary_by_salary;
DROP DATABASE IF EXISTS sampleDB;
#end
#sql 

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_salary;
CREATE TABLE employees_salary (
    employee_id INT,
    salaries REAL(6,2)
);
INSERT INTO employees_salary (employee_id, salaries) VALUES (1,23.43);
INSERT INTO employees_salary (employee_id, salaries) VALUES (2,133.87);
INSERT INTO employees_salary (employee_id, salaries) VALUES (3,81.87);
INSERT INTO employees_salary (employee_id, salaries) VALUES (4,311.21);
SELECT employee_id AS idNumber, salaries / 2.0 AS salaryHalfFromDBFromOracle [23.42/2];
DROP DATABASE IF EXISTS sampleDB;
-- Please try to use DML statements to perform operations on tables using the DDL statements we have seen so far. You should not insert an entry to a table and then try to fetch it. You need to create the table and insert some data there, before trying to fetch it. To do this, use the DROP TABLE statement to remove all data in the table that you inserted and then recreate the table. You'll notice that with the new DDL statements, the table automatically shrinks to zero in case a new entry is added to it.
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_salary;
CREATE TABLE employees_salary (
    employee_id INT,
    salaries REAL(6,2)
);
INSERT INTO employees_salary (employee_id, salaries) VALUES (1,23.43);
INSERT INTO employees_salary (employee_id, salaries) VALUES (2,133.87);
INSERT INTO employees_salary (employee_id, salaries) VALUES (3,81.87);
INSERT INTO employees_salary (employee_id, salaries) VALUES (4,311.21);
SELECT employee_id AS idNumber, salaries / 2.0 AS salaryHalfFromDBFromOracle [23.42/2];
-- Please try to get a more efficient way to perform the same operation using SQL queries.
SELECT DISTINCT salaryHalf, salaries / 2.0 FROM employees_salary ORDER BY salaryHalf DESC, salaries DESC;
-- Please try to create a table containing the maximum values of the salaries in
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_salary_by_salary;
CREATE TABLE employees_salary_by_salary (
    employee_salary DECIMAL
);
INSERT INTO employees_salary_by_salary (employee_salary) VALUES (2012-06-04);
SELECT employee_salary + 10000 FROM employees_salary_by_salary;
DROP DATABASE IF EXISTS sampleDB;
UPDATE employees_salary_by_salary SET employee_salary = employee_salary + 10000
WHERE employee_salary = 2012-06-04;
SELECT employee_salary + 10000 FROM employees_salary_by_salary;
DROP DATABASE IF EXISTS sampleDB;
-- Please create a completely semantically equivalent program.
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_salary_by_salary;
CREATE TABLE employees_salary_by_salary (
    employee_salary DECIMAL
);
INSERT INTO employees_salary_by_salary (employee_salary) VALUES (2012-06-04);
SELECT employee_salary + 10000 FROM employees_salary_by_salary;
DROP DATABASE IF EXISTS sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_salary_by_salary;
CREATE TABLE employees_salary_by_salary
        ( employee_salary DECIMAL )
        ENGINE=InnoDB;
INSERT INTO employees_salary_by_salary
              ( employee_salary )
VALUES
              ( 2012-06-04 );
SELECT employee_salary + 10000 FROM employees_salary_by_salary;
DROP DATABASE IF EXISTS sampleDB;
#end
#sql
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_salary_by_salary;
CREATE TABLE employees_salary_by_salary
        ( employee_salary DECIMAL )
        ENGINE=InnoDB;
INSERT INTO employees_salary_by_salary
              ( employee_salary )
VALUES
              ( 2012-06-04 );
SELECT employee_salary + 10000 FROM employees_salary_by_salary;
DROP DATABASE IF EXISTS sampleDB;
#end
#sql

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
CREATE TABLE IF NOT EXISTS employees_salary_by_salary
        ( employee_salary DECIMAL )
        ENGINE=InnoDB;
INSERT INTO employees_salary_by_salary
              ( employee_salary )
VALUES
              ( 2012-06-04 );
SELECT employee_salary + 10000 FROM employees_salary_by_salary;
DROP TABLE IF EXISTS employees_salary_by_salary;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employee_salary;
CREATE TABLE employee_salary
        ( employee_salary DECIMAL )
        ENGINE=InnoDB;
INSERT INTO employee_salary
              ( employee_salary )
VALUES
              ( 2012-06-04 );
UPDATE employee_salary
       SET employee_salary = employee_salary / 10;
SELECT employee_salary FROM employee_salary;
DROP DATABASE IF EXISTS sampleDB;
#end
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_salary_by_salary;
CREATE TABLE employees_salary_by_salary
        ( employee_salary DECIMAL(12,2) )
        ENGINE=InnoDB;
INSERT INTO employees_salary_by_salary
              ( employee_salary )
VALUES
              ( 2012-06-04 );
SELECT employee_salary + 100000 FROM employees_salary_by_salary;
DROP DATABASE IF EXISTS sampleDB;
#end

-- @author: <NAME>, KBC-2115

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_salary_by_salary;
CREATE TABLE employees_salary_by_salary
        ( employee_salary DECIMAL )
        ENGINE=InnoDB;
INSERT INTO employees_salary_by_salary
              ( employee_salary )
VALUES
              ( 2012-06-05 );
SELECT employee_salary - 10000 FROM employees_salary_by_salary;
DROP DATABASE IF EXISTS sampleDB;
$
#!/bin/bash
# Please create a semantically equivalent program to the previous generation
DROP DATABASE IF EXISTS sampleDB; CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_salary_by_salary; CREATE TABLE employees_salary_by_salary
        ( employee_salary DECIMAL ) ENGINE=InnoDB; INSERT INTO employees_salary_by_salary
              ( employee_salary ) VALUES ( 2012-06-05 ); SELECT employee_salary - 10000 FROM employees_salary_by_salary;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_salary_by_salary;
CREATE TABLE employees_salary_by_salary
        ( employee_salary DECIMAL(12,2) )
        ENGINE=InnoDB;
INSERT INTO employees_salary_by_salary
              ( employee_salary )
VALUES
              ( 2012-06-04 );
SELECT employee_salary + 100000 FROM employees_salary_by_salary;
DROP DATABASE IF EXISTS sampleDB;
#end
-- @author: <NAME>, KBC-2115
-- Please create a semantically equivalent program to the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_salary_by_salary;
CREATE TABLE employees_salary_by_salary
        ( employee_salary DECIMAL(12,2) DEFAULT NULL )
        ENGINE=InnoDB;
INSERT INTO employees_salary_by_salary
              ( employee_salary )
VALUES
              ( 2012-06-04 );
SELECT employee_salary FROM employees_salary_by_salary;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_salary_by_salary;
CREATE TABLE employees_salary_by_salary
        ( employee_salary DECIMAL(12,2) NOT NULL )
        ENGINE=InnoDB;
INSERT INTO employees_salary_by_salary
              ( employee_salary )
VALUES
              ( 2012-06-04 );
-- @author: <NAME>, KBC-2115
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_salary_by_salary;
CREATE TABLE employees_salary_by_salary
        ( employee_salary DECIMAL(12,2),
        employee_id INTEGER)
        ENGINE=InnoDB;
INSERT INTO employees_salary_by_salary
              ( employee_salary,
              employee_id )
VALUES
              ( 2012-06-04,
              1 );
SELECT employee_salary FROM employees_salary_by_salary WHERE employee_id = 1;
SELECT employee_salary + 100000 FROM employees_salary_by_salary;
DROP DATABASE IF EXISTS sampleDB;

-- 1. Install PHP 5.6
#https: 
-- 2. Setup Apache
-- Download Apache
wget http: 
tar -xvf httpd-2.8.36.tar.gz
cd httpd-2.8.36
./configure --prefix=/var/www/html --with-php-config=/usr/bin/php-config
-- start the process of compiling the code and installing on your system by running the below command
make
sudo make install
-- Start Apache
sudo service httpd start
-- 3. Write the Code To Create A Database
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

#end
--
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DESCRIBE employees_salary_by_salary;
USE employees_salary_by_salary;
ALTER TABLE employees_salary_by_salary MODIFY employee_salary CHARACTER;
#end


[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS departments_salary;
CREATE table departments_salary
        ( d_department CHAR(4);
          d_salary DECIMAL(12,2) );
INSERT INTO departments_salary
              ( d_department, d_salary )
VALUES
              ( 'SAL', 1000000 ),
--              ('MED', 3000000 ),
--              ('ENG', 9000000 );
              ('SAL', 1300000 ),
--              ('MED', 5000000 ),
--              ('ENG', 10000000 );
SELECT d_department, d_salary FROM departments_salary;
DROP DATABASE IF EXISTS sampleDB;
---@author: <NAME>, KBC-2105
 
USE sampleDB;
CREATE TABLE employees_salary_by_salary
        ( employee_salary DECIMAL(12,2));
SELECT employee_salary FROM employees_salary_by_salary;
-- The query below should print "No one has a salary greater than 80 thousand" as the third row
-- of an empty rowset.

SELECT employee_salary, 0 AS n FROM employees_salary_by_salary
WHERE employee_salary > 2000000 AND employee_salary <= 8000000;
DROP DATABASE IF EXISTS sampleDB;
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_salary_by_salary;
CREATE TABLE employees_salary_by_salary
        ( employee_salary DECIMAL(12,2) NOT NULL )
        ENGINE=InnoDB;
INSERT INTO employees_salary_by_salary
              ( employee_salary )
VALUES
              ( 2012-06-04 );
-- @author: <NAME>, KBC-2115
DROP DATABASE IF EXISTS sampleDB;
-- Please create a mutated program that modifies the previous generation
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_name; DROP TABLE IF EXISTS employees_salary;
CREATE TABLE employees_name
        ( employee_name VARCHAR(32) )
        ENGINE=INNODB;
CREATE TABLE employees_salary
        ( employee_salary DECIMAL(12,2) )
        ENGINE=INNODB;
INSERT INTO employees_name
              ( employee_name )
VALUES
              ( 'Bob', '<EMAIL>', 'Gates', '<EMAIL>', 'Scott' );
INSERT INTO employees_salary
              ( employee_salary )
VALUES
              ( 100000.01 );
SELECT employee_name, employee_salary 
FROM employees_salary_by_salary;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_salary_by_salary;
CREATE TABLE employees_salary_by_salary
        ( employee_salary DECIMAL(12,2) NOT NULL )
        ENGINE=InnoDB;
INSERT INTO employees_salary_by_salary
              ( employee_salary )
VALUES
              ( 1990-10-01 );
SELECT employee_salary
FROM employees_salary_by_salary
WHERE employee_salary > 1000;
-- If so, write a mutated query to alter every employee’s salary above 600.
-- If unaltered employee’s salary is below 600, display the employee’s
-- name and salary.
-- Please don't use loops.
-- Please be specific with how the query is executed.
-- Please test all queries to confirm that they produce the expected
-- output.
-- Please test all queries to confirm that they produce the expected
-- output.
-- Please test all queries to check that duplicate values in column data
-- are not written to the database.
-- Please test all queries to confirm that data is written to the database
-- without error messages.
-- Please write a mutated query to return the employees’ information
-- ordered by their salaries in descending order.
-- Please confirm that duplicate empoyee names remain in the database.
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
 
ALTER TABLE employee_salary_by_salary ADD  employee_last_name VARCHAR(20) NULL default 'unknown';
UPDATE employee_salary_by_salary SET employee_last_name ='smith';
ALTER TABLE employee_salary_by_salary DROP  first_name;
SELECT employee_last_name, employee_salary, first_name
   FROM employees_salary_by_salary;
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_salary_by_salary;
CREATE TABLE employees_salary_by_salary
    ( ID INT NOT NULL AUTO_INCREMENT,
          employee_salary DECIMAL(12,2) NOT NULL,
          PRIMARY KEY (ID) )
    ENGINE=InnoDB;
INSERT INTO employees_salary_by_salary
              ( employee_salary )
VALUES
              ( 2012-06-04 ),
              ( 90366.12 );
SELECT employee_salary FROM employees_salary_by_salary;
-- @author: <NAME>, KBC-2120
DROP DATABASE IF EXISTS sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_salary_by_salary;
CREATE TABLE employees_salary_by_salary
        ( employee_salary DECIMAL(12,2) NOT NULL )
        ENGINE=InnoDB;
SELECT employee_salary FROM employees_salary_by_salary;
DELETE FROM employees_salary_by_salary WHERE employee_salary = 2012-06-04;
[VERBOSE] ========== sample =========
[VERBOSE] -- MySQL is an open-source relational database management system (RDBMS) that allows users to create, modify and extract data from a structured relational database using the Structured Query Language (SQL). It works harmoniously with an operating system to structure and manage a relational database, control user access, and execute other tasks like network access and testing database integrity.

MySQL, named after co-founder Michael Widenius's daughter, My, and SQL, is widely used with other programs to implement applications that require database functionality. It serves as an element of the LAMP web application software stack, where LAMP stands for Linux, Apache, MySQL, Perl/PHP/Python, and is used in many database-driven web applications and popular websites such as Facebook and YouTube.

Written in C and C++, MySQL supports a variety of system platforms from Linux, macOS, Microsoft Windows to even the Symbian OS. It offers dual-licensing i.e., GPL version 2 or a proprietary license.

Support for MySQL is provided through the official manual, various IRC channels, forums, and additionally, Oracle offers paid support via its MySQL Enterprise products. It is known for its exceptional performance in average scenarios and has been appraised as a fast, stable and true multi-user, SQL database server. Furthermore, it is also available under the MariaDB fork developed in 2010 when Oracle acquired Sun Microsystems, the then owner of MySQL AB.
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_salary_by_salary;
CREATE TABLE employees_salary_by_salary
        ( employee_salary DECIMAL(12,2) NOT NULL )
        ENGINE=InnoDB;
SELECT employee_salary FROM employees_salary_by_salary;
DELETE FROM employees_salary_by_salary WHERE employee_salary = 2012-06-04;
/* Please create a very short query which uses SQL features in a complex way. Be sure to use ENGINE=InnoDB. You should only use sampleDB as the database and assume no other table exist. You need to create new tables to perform operations. In the end, drop all tables you created. */
CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;

[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_salary_and_department;
CREATE TABLE employees_salary_and_department
        ( employee_salary DECIMAL(12,2) NOT NULL,
            department CHAR(20) NOT NULL )
        ENGINE=InnoDB;
SELECT employee_salary FROM employees_salary_and_department;
INSERT INTO employees_salary_and_department (employee_salary, department) VALUES (1000, 'Research');
INSERT INTO employees_salary_and_department (employee_salary, department) VALUES (1500, 'Consulting');
INSERT INTO employees_salary_and_department (employee_salary, department) VALUES (1000, 'Development');
INSERT INTO employees_salary_and_department (employee_salary, department) VALUES (1000, 'Marketing');
INSERT INTO employees_salary_and_department (employee_salary, department) VALUES (1000, 'Administration');
DROP TABLE IF EXISTS employees_salary_and_department;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_salary_to_be_updated;
CREATE TABLE employees_salary_to_be_updated
        ( employee_salary DECIMAL(12,2) NOT NULL )
        ENGINE=InnoDB;

[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS people_by_sal;
CREATE TABLE people_by_sal
        ( person_salary DECIMAL(12,2) NOT NULL )
        ENGINE=InnoDB;
SELECT person_salary FROM people_by_sal;<commit_msg>add mySQL version<commit_after>
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_salary_by_salary;
CREATE TABLE employees_salary_by_salary
        ( employee_salary DECIMAL(12,2) NOT NULL,
          date DATE NOT NULL ),

CREATE INDEX employees_salary_index1
        ON employees_salary_by_salary
        (employee_salary,
         date);

SELECT employee_salary FROM employees_salary_by_salary WHERE employee_salary = 2012-06-04 AND date = DATE(2012,6,'03');


UPDATE employees_salary_by_salary
SET employee_salary = 2012-06-04 + employee_salary
WHERE employee_salary = 2012-06-04 AND date = DATE(2012,6,'04')


-- 1403 - MySQL SQL
SELECT (2018-01-02 + 2018-02-04)/3 AS `difference of the two dates` FROM `sample_table` WHERE (2018-01-02 + 2018-02-03) = 2018-02-06   AND date > DATE(2018,01,'01') OR (date > DATE(2018,01,'01') )
SELECT id,name,price FROM product WHERE price < 3 AND `name` = 'Product2'
SELECT id,name,price FROM product WHERE `name` = 'Product2' AND price > 5
SELECT *,date,price,quantity FROM `sample_table` WHERE date BETWEEN DATE(2017,06,'07') AND DATE(2017,09,'01') ORDER BY `order_number` DESC LIMIT 5
SELECT * FROM `product` ORDER BY price ASC, `name` DESC LIMIT 5
SELECT id,name,price FROM product LIMIT 5, 2
SELECT id,name,price FROM product LIMIT 5, 2
SELECT id,name,price FROM product LIMIT 5, 2
SELECT id,name,price
[VERBOSE] ========== sample =========
[VERBOSE] ========== sample =========
[VERBOSE] CREATE DATABASE IF NOT EXISTS sampleDB; USE sampleDB;
DROP TABLE IF EXISTS employees_salary_by_salary;
CREATE TABLE employees_salary_by_salary
            ( employee_salary DECIMAL(12,2) NOT NULL )
            ENGINE=InnoDB;

[VERBOSE] ========== sample =========
